{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":""},{"location":"about/#introduction","title":"Introduction","text":"<ul> <li>Hi there! \ud83d\udc4b</li> <li>My name is Duc, I'm from Vietnam. I'm a solfware engineer and working at Mesoneer.io.</li> <li>This is my personal digital garden where I drop notes and articles about things that I am interested in studying and working. I hope that this website can help people saving time in learning, also give some motivations for those who had chosen the developer path.</li> </ul>"},{"location":"about/#the_garden","title":"The Garden \ud83c\udf32","text":"<ul> <li>I call this site as a digital garden because a digital garden is a collection of imperfect notes, essays, and ideas growing slowly over time. View more.</li> <li>So if you are reading these posts, please do not surprise when they are not refined or complete - posts can be published as half-finished thoughts that will grow and evolve over time. They're less rigid, less performative, and less perfect than the personal \"blogs\" we're used to encountering on the web.</li> </ul>"},{"location":"about/#visiting_the_garden","title":"Visiting The Garden","text":"<ul> <li>I'm working mostly with Java, so most of posts are realated to Java topic. You can start with the first article that grabs your attention of the navigation tags on the top and be ready to follow the internal links on the left to read the rest.</li> <li>If you find some things are not correct or need to be improved so please don't hesitate to email me at <code>minhducnguyen189@gmail.com</code>.</li> </ul>"},{"location":"about/#donate","title":"Donate","text":"<ul> <li>If you love these contents and what I'm doing you can cheer me up by buying a coffee \u2764\ufe0f</li> </ul> <p>Donate With Paypal</p> <ul> <li>In case you are living VietNam, you can donate through my bank account:</li> </ul> Account Info Value Bank Name ACB Account Number 341237 Account Owner Nguyen Minh Duc <ul> <li>Wish you have a nice day!!! \ud83d\ude0a</li> </ul>"},{"location":"about/#thank_you","title":"Thank you","text":"<ul> <li>I'm grateful to Mesoneer.io where brings me a lot of experiences.</li> <li>I\u2019m grateful to Martin Donath. The Creator, Author of Material for MkDocs and other superstars who contributed to his projects. Then I can create my own digital garden.</li> <li>I\u2019m grateful to all of the other bloggers, authors who created great contents then I can learn a lots.</li> <li>I\u2019m grateful to you for time and attention in reading these posts and the people who bought a coffee for me.</li> <li>And most importantly, I\u2019m grateful to my family who supports and gives me the strength I need to face daily.</li> </ul>"},{"location":"Build%20Tools/Gradle/","title":"Gradle Introduction","text":"","tags":["BuildTool"]},{"location":"Build%20Tools/Gradle/#what_is_gradle","title":"What Is Gradle?","text":"<ul> <li><code>Gradle</code> is an <code>open-source build automation</code> tool that is designed to be flexible enough to build almost any type of software.</li> <li><code>Build automation</code> is the process of automating the creation of a software build and the associated processes including: <code>compiling computer source code into binary code</code>, <code>packaging binary code</code>, and <code>running automated tests</code>.</li> <li><code>Gradle</code> runs on the JVM and you <code>must have a Java Development Kit (JDK) installed</code> to use it.</li> <li>More information</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Gradle/#gradle_installation","title":"Gradle Installation","text":"<ul> <li><code>Gradle</code> runs on all major operating systems and requires only a <code>Java Development Kit version 8 or higher</code> to run. To check, run <code>java -version</code> on your <code>command prompt</code>.</li> <li>Then you can go to gradle.org to download the <code>binary-only</code> following the version that you want to use.</li> <li>After the download is completed, you can extract it at any folder. Then go to <code>Control Panel</code> -&gt; <code>System and Security</code> -&gt; <code>System</code> -&gt; <code>Advanced system setting</code> -&gt; <code>Environment Variables</code>. Then create a <code>GRADLE_HOME</code> with value is the path to your gradle folder.</li> </ul> <ul> <li>Then go to <code>Path</code> in <code>System Variables</code> --&gt; Choose <code>New</code> --&gt; <code>Browse</code> --&gt; go to the folder <code>bin</code> in your <code>gradle folder</code>.</li> </ul> <ul> <li>Finally, you can open <code>cmd</code> and use command <code>gradle --version</code> to check your gradle installation. You would see the result as below:</li> </ul> <pre><code>C:\\Users\\bono_&gt;gradle --version\n\n------------------------------------------------------------\nGradle 6.8.3\n------------------------------------------------------------\n\nBuild time:   2021-02-22 16:13:28 UTC\nRevision:     9e26b4a9ebb910eaa1b8da8ff8575e514bc61c78\n\nKotlin:       1.4.20\nGroovy:       2.5.12\nAnt:          Apache Ant(TM) version 1.10.9 compiled on September 27 2020\nJVM:          1.8.0_281 (Oracle Corporation 25.281-b09)\nOS:           Windows 10 10.0 amd64\n</code></pre>","tags":["BuildTool"]},{"location":"Build%20Tools/Gradle/#some_gradle_commands","title":"Some Gradle Commands","text":"Gradle Commands Description <code>gradle check</code> Gradle will execute all checks (for plugins that we added Ex: checkstyle plugin) and tests in all subprojects, but we have to note that when we run this command <code>gradle test</code> will be executed first, if you want to run a specific test you can use <code>gradle :&lt;projectName&gt;:check</code>. Gradle will not show many logs except if there are some errors. This command is the same with <code>mvn verify</code> of <code>Maven</code> <code>gradle test</code> Gradle will execute all unit tests in all subprojects. This command is the same with <code>mvn test</code> of <code>Maven</code>. <code>gradle :&lt;task name&gt;</code> Execute a task that defined in the <code>build.gradle</code>. <code>gradle :&lt;subproject&gt;:&lt;task Name&gt;</code> Execute a task that defined in the <code>build.gradle</code> of a <code>subProject</code>. <code>gradle assemble</code> This builds whatever is the appropriate package for the project, for example a JAR for Java libraries or a WAR for traditional Java webapps, this command is the same with <code>mvn package</code> of <code>Maven</code>. <code>gradle publishToMavenLocal</code> this command will crate a package and a depencency of your project into local repository of Maven like the command <code>mvn  install</code>. <code>gradle build</code> this command builds for the build task to designate assembling all outputs and running all checks. <code>gradle run</code> It is common for applications to be run with the run task, which assembles the application and executes some script or binary. <code>gradle clean</code> delete the contents of the build directory, this command is like <code>mvn clean</code> of <code>Maven</code> <code>gradle tasks</code> gives you a list of the main tasks of the selected project <code>gradle bootRun</code> Runs project as a Spring Boot application. <code>gradle &lt;action&gt; -Dorg.gradle.logging.level=debug</code> log out everything in the action <code>gradle -q projects</code> view the structure of project if project contains many subprojects <ul> <li>Some Gradle commands: more information</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Gradle/#gradle_build_phases","title":"Gradle Build Phases","text":"<ul> <li>Gradle build phases:</li> <li> <p>Initialization: <code>settings.gradle</code> this file will loaded and readed first then the gradle will know to build single or multiple projects. more information.</p> </li> <li> <p>Configuration: In this step the build script (build.gradle) will be read and executed.</p> </li> <li> <p>Execution: In this step, if tasks names exist in the build script then they will be executed.</p> </li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Gradle/#gradle_and_maven_comparison","title":"Gradle And Maven Comparison","text":"<p>Almost of us is familar with <code>Maven</code>, so I just put some main points about <code>Maven</code> there.</p> <ul> <li> <p><code>Maven</code> is used for <code>project build automation using Java</code>. It helps you map out how a particular software is built, as well as its different dependencies. It uses <code>an XML file</code> to describe the project that you are building, the dependencies of the software with regards to third-party modules and parts, the build order, as well as the needed plugins. There are pre-defined targets for tasks such as packaging and compiling.</p> </li> <li> <p><code>Maven</code> will download libraries and plugins from the different repositories and then puts them all in a cache on your local machine. While predominantly used for Java projects, you can use it for Scala, Ruby, and C#, as well as a host of other languages.</p> </li> <li> <p>The following table describes the differences between the two tools:</p> </li> </ul> Basis Gradle Maven Based on Gradle is based on developing domain-specific language projects. Maven is based on developing pure Java language-based software. Configuration It uses a Groovy-based Domain-specific language(DSL) for creating project structure. It uses Extensible Markup Language(XML) for creating project structure. Focuses on Developing applications by adding new features to them. Developing applications in a given time limit. Performance It performs better than maven as it optimized for tracking only current running task. It does not create local temporary files during software creation hence uses large time. Java Compilation It avoids compilation. It is necessary to compile. Usability It is a new tool, which requires users to spend a lot of time to get used to it. This tool is a known tool for many users and is easily available. Customization This tool is highly customizable as it supports a variety of IDE\u2019s. This tool serves a limited amount of developers and is not that customizable. Languages supported It supports software development in Java, C, C++, and Groovy. It supports software development in Scala, C#, and Ruby. <ul> <li> <p>More information</p> </li> <li> <p>Some corresponding commands between <code>Maven</code> and <code>Gradle</code></p> </li> </ul> MAVEN GRADLE <code>compile</code> compile <code>provided</code> compileOnly, testCompileOnly (*) <code>system</code> <code>runtime</code> runtime <code>test</code> testCompile, testRuntime","tags":["BuildTool"]},{"location":"Build%20Tools/Gradle/#create_a_sample_gradle_project_with_spring_boot","title":"Create A Sample Gradle Project With Spring Boot","text":"<ul> <li>You can go to this page to generate a gradle project with spring boot as the example in the image below.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/","title":"JFog Repository Setup","text":"","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#what_is_the_jfog_artifactory","title":"What Is The Jfog Artifactory?","text":"<ul> <li><code>JFrog Artifactory</code> is a universal DevOps solution providing end-to-end automation and <code>management of binaries and artifacts</code> through the application delivery process that improves productivity across your development ecosystem. It enables freedom of choice supporting 25+ software build packages, all major CI/CD platforms, and DevOps tools you already use. Artifactory is Kubernetes ready supporting containers, Docker, Helm Charts, and is your Kubernetes and Docker registry and comes with full CLI and REST APIs customizable to your ecosystem.</li> <li>More information.</li> <li>In this post we will focus on faeture <code>management of binaries and artifacts</code> of Jfog. Assume that you are doing your project with some people and some back-end services. Then you have just finished wirtting a library which will used for other services. So, how do other people can use your library?<ul> <li>The easiest way is that they can clone your library repository then they need to build and deploy to their local repository on their local machine then add the your library dependency into the source code. Using this way will take time and every time your library has some updates, other people need to pull the repository then build and deploy again.</li> <li>Using the Jfog Artifactory, after your library has finished, you can deploy your binaries and artifacts to Jfog, then other people just need to add your library dependency into the source code for using. Then of you have any update on your library, they just need to clean build the source code again. Using this way will save many time but you need to add some configuration on your machine. We will learn about it in next steps.</li> </ul> </li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#register_a_jfog_account","title":"Register A Jfog Account","text":"<ul> <li>So, Let's go to this link to register a Jfog account. For <code>Select Your Cloud Provider*</code> you can choose any cloud Provider that you want. Input a server name in <code>Name Your Environment*</code>, this will be your administration url of Jfog after your account is created.</li> </ul> <ul> <li>You will received an email for verify email address. Then just verify your email and go to the dashboard.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#create_jfog_repositories","title":"Create Jfog Repositories","text":"","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#create_local_repository","title":"Create Local Repository","text":"<ul> <li>What is the jfog local repository?<ul> <li>Jfog local repository is a locally-managed repository into which you can deploy your artifacts and binaries. This allows you to have a central location to store all of your internal binaries. Through repository replication, you can even share binaries with teams that are located in remote locations.</li> </ul> </li> <li>To create a jfog local repository, you can go to <code>Administration</code> -&gt; <code>Repositories</code> -&gt; <code>Add Repositories</code> -&gt; <code>Local Repository</code> as in the image below.</li> </ul> <ul> <li>Then in the tag <code>basic</code>, you need to enter a local repository name and choose <code>Non-unique</code> in <code>Maven Snapshot Version Behavior</code>. This means when you upload a package version like 1.5.0-SNAPSHOT multi times then this package version will be always overridden.</li> </ul> <ul> <li>Next in the tag <code>advanced</code>, you can choose option <code>Allow Content Browsing</code>, when set you may view content such as HTML or Javadoc files directly from Artifactory. This may not be safe and therefore requires strict content moderation to prevent malicious users from uploading content that may compromise security (e.g., cross-site scripting attacks)</li> </ul> <ul> <li>Finally, click <code>Save &amp; Finish</code></li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#create_remote_repository","title":"Create Remote Repository","text":"<ul> <li>What is the jfog remote repository?<ul> <li>Jfog remove repository serves as a caching proxy for a repository managed at a remote URL (which may itself be another Artifactory remote repository).</li> <li>Artifacts are stored and updated in remote repositories according to various configuration parameters that control the caching and proxying behavior. You can remove artifacts from a remote repository cache but you cannot actually deploy a new artifact into a remote repository.</li> </ul> </li> <li>To create a jfog local repository, you can go to <code>Administration</code> -&gt; <code>Repositories</code> -&gt; <code>Add Repositories</code> -&gt; <code>Remote Repository</code>.</li> <li>Then in the tag <code>basic</code>, you need to enter a remote repository name.</li> </ul> <ul> <li>Next in the tag <code>advanced</code>, you can choose option <code>Allow Content Browsing</code> as in the step craete local repository</li> </ul> <ul> <li>Finally, click <code>Save &amp; Finish</code></li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#create_virtual_repository","title":"Create Virtual Repository","text":"<ul> <li> <p>What is the jfog virtual repository?</p> <ul> <li>A virtual repository hides the access details of the underlying repositories letting users work with a single, well-known URL. The underlying participating repositories and their access rules may be changed without requiring any client-side changes.</li> <li>Jfog virtual repository is used to simplify access to different repositories, Artifactory allows you to define a virtual repository which is a collection of local, remote and other virtual repositories accessed through a single logical URL.</li> </ul> </li> <li> <p>To create a jfog local repository, you can go to <code>Administration</code> -&gt; <code>Repositories</code> -&gt; <code>Add Repositories</code> -&gt; <code>Virtual Repository</code>.</p> </li> <li>Then in the tag <code>basic</code>, you need to enter a remote repository name, seclect <code>maven-local</code> and <code>maven-remote</code> repositories that you have created on steps above. Then choose <code>Default Deployment Repository</code> as <code>maven-local</code>.</li> </ul> <p></p> <ul> <li>Finally, click <code>Save &amp; Finish</code>.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/JFog%20Repository%20Setup/#references","title":"References","text":"<ul> <li>JFog.com.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven%20Project%20With%20Jfog/","title":"Setting Maven Project With Jfog","text":"","tags":["BuildTool"]},{"location":"Build%20Tools/Maven%20Project%20With%20Jfog/#generate_maven_settingxml","title":"Generate Maven Setting.xml","text":"<ul> <li>Maven provides a settings file \u2013 <code>settings.xml</code>. This allows us to specify which local and remote repositories it will use. We can also use it to store settings that we don't want in our source code, such as credentials.</li> <li>Now, click on button <code>Set Me Up</code> as in the image below</li> </ul> <p> - Then you need to choose <code>Package Type</code> as Maven, the <code>Repository</code> as maven-virtual. In this example we will use maven-virtual that we created before, this repository will contain both maven-local and maven-remote. - Next in tag <code>Configure</code> you choose <code>Generate Setting</code>, then click <code>Download Snippet</code>, then you will received a file <code>setting.xml</code></p> <p></p> <ul> <li>Then you need to open <code>setting.xml</code> file and put your encrypted password as in the image below</li> </ul> <p></p> <ul> <li>You can get your encrypted password from your Jfog profile as the image below</li> </ul> <p></p> <ul> <li>Finally, put this <code>setting.xml</code> file into <code>.m2</code> folder of Maven in your machine.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven%20Project%20With%20Jfog/#generate_deploy_setting_for_pomxml","title":"Generate Deploy Setting For Pom.xml","text":"<ul> <li>To deploy our binary source code of our projects to Jfog, we need to configure our <code>pom.xml</code>. So let's go to Jfog again and click  on button <code>Set Me Up</code>. Then you need to choose <code>Package Type</code> as Maven, the <code>Repository</code> as maven-local, this is because we want maven-local will be only the repository to contain only our binary source codes. Then click on tag <code>deploy</code> and copy the xml script as the image below.</li> </ul> <ul> <li>Then go to <code>pom.xml</code> of your project and paste the script as in the image below</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven%20Project%20With%20Jfog/#testing","title":"Testing","text":"<ul> <li>Now, In your spring-boot project, use the command <code>mvn deploy</code> to deploy your binary jar file to <code>maven-local</code> repository of jfog.</li> <li>After the build is successful, you can go to jfog then view the result of your deployment as in the image below.</li> </ul> <ul> <li>Then if other projects need to use your deployed artifactory as a dependency, we just need to copy dependency xml script of jfog as in the image above and paste it into pom.xml for using.</li> <li>So that's it, see you next time.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven%20Project%20With%20Jfog/#see_also","title":"See Also","text":"<ul> <li>JFog Repository Setup</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/","title":"Maven","text":"","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/#what_is_the_maven","title":"What Is The Maven?","text":"<ul> <li><code>Maven</code> is a project management and comprehension tool that provides developers a complete build lifecycle framework. Development team can automate the project's build infrastructure in almost no time as Maven uses a standard directory layout and a default build lifecycle.</li> <li>In case of multiple development teams environment, Maven can set-up the way to work as per standards in a very short time. As most of the project setups are simple and reusable, Maven makes life of developer easy while creating reports, checks, build and testing automation setups.</li> <li>Maven provides developers ways to manage the following \u2212<ul> <li>Builds</li> <li>Documentation</li> <li>Reporting</li> <li>Dependencies</li> <li>SCMs</li> <li>Releases</li> <li>Distribution</li> <li>Mailing list</li> </ul> </li> <li>To summarize, Maven simplifies and standardizes the project build process. It handles compilation, distribution, documentation, team collaboration and other tasks seamlessly. Maven increases reusability and takes care of most of the build related tasks.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/#maven_installation","title":"Maven Installation","text":"<ul> <li>You can view  this guild to install Maven on Linux machine.</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/#some_maven_commands","title":"Some Maven Commands","text":"Maven Command Description mvn --version Prints out the version of Maven you are running. mvn clean Clears the target directory into which Maven normally builds your project. mvn package Builds the project and packages the resulting JAR file into the target directory. mvn package -Dmaven.test.skip=true Builds the project and packages the resulting JAR file into the target directory - without running the unit tests during the build. mvn clean package Clears the target directory and Builds the project and packages the resulting JAR file into the target directory. mvn clean package -Dmaven.test.skip=true Clears the target directory and builds the project and packages the resulting JAR file into the target directory - without running the unit tests during the build. mvn verify Runs all integration tests found in the project. mvn clean verify Cleans the target directory, and runs all integration tests found in the project. mvn install Builds the project described by your Maven POM file and installs the resulting artifact (JAR) into your local Maven repository mvn install -Dmaven.test.skip=true Builds the project described by your Maven POM file without running unit tests, and installs the resulting artifact (JAR) into your local Maven repository mvn clean install Clears the target directory and builds the project described by your Maven POM file and installs the resulting artifact (JAR) into your local Maven repository mvn clean install -Dmaven.test.skip=true Clears the target directory and builds the project described by your Maven POM file without running unit tests, and installs the resulting artifact (JAR) into your local Maven repository mvn dependency:copy-dependencies Copies dependencies from remote Maven repositories to your local Maven repository. mvn clean dependency:copy-dependencies Cleans project and copies dependencies from remote Maven repositories to your local Maven repository. mvn clean dependency:copy-dependencies package Cleans project, copies dependencies from remote Maven repositories to your local Maven repository and packages your project. mvn dependency:tree Prints out the dependency tree for your project - based on the dependencies configured in the pom.xml file. mvn dependency:tree -Dverbose Prints out the dependency tree for your project - based on the dependencies configured in the pom.xml file. Includes repeated, transitive dependencies. mvn dependency:tree -Dincludes=com.fasterxml.jackson.core Prints out the dependencies from your project which depend on the com.fasterxml.jackson.core artifact. mvn dependency:tree -Dverbose -Dincludes=com.fasterxml.jackson.core Prints out the dependencies from your project which depend on the com.fasterxml.jackson.core artifact. Includes repeated, transitive dependencies. mvn dependency:build-classpath Prints out the classpath needed to run your project (application) based on the dependencies configured in the pom.xml file.","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/#maven_build_phases","title":"Maven Build Phases","text":"<ul> <li> <p>Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.</p> </li> <li> <p>For example, the default lifecycle comprises of the following phases (for a complete list of the lifecycle phases:</p> <ul> <li><code>validate</code> - validate the project is correct and all necessary information is available</li> <li><code>compile</code> - compile the source code of the project</li> <li><code>test</code> - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</li> <li><code>package</code> - take the compiled code and package it in its distributable format, such as a JAR.</li> <li><code>verify</code> - run any checks on results of integration tests to ensure quality criteria are met</li> <li><code>install</code> - install the package into the local repository, for use as a dependency in other projects locally</li> <li><code>deploy</code> - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.</li> </ul> </li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/#see_also","title":"See Also","text":"<ul> <li>Linux Setup For Developer</li> </ul>","tags":["BuildTool"]},{"location":"Build%20Tools/Maven/#reference","title":"Reference","text":"<ul> <li>TutorialSpoint</li> </ul>","tags":["BuildTool"]},{"location":"CI%20CD/CI%20CD%20Introduction/","title":"CI CD Introduction","text":"","tags":["CI-CD"]},{"location":"CI%20CD/CI%20CD%20Introduction/#what_is_the_ci_cd","title":"What Is The CI CD?","text":"","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20For%20Building%20SpringBoot/","title":"Jenkins For Building SpringBoot","text":"","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20For%20Building%20SpringBoot/#jenkins_configurations","title":"Jenkins Configurations","text":"<ul> <li>Now, firstly when the Jenkins is started, you should goes to <code>Manage Jenkins</code> --&gt; <code>Manage Nodes And Clouds</code> as the image below:</li> </ul> <ul> <li>Then you can see, by default <code>Jenkins</code> will have an built-in node which is your real machine that you are using to run <code>Jenkins</code> by <code>docker</code>. </li> <li>Then you need to go\u00a0<code>Manage Jenkins</code>\u00a0-&gt;\u00a0<code>Global Tool Configuration</code>\u00a0as the image below</li> </ul> <ul> <li>Then you scroll down to find the tag\u00a0<code>Maven</code>. You should put a\u00a0<code>Name</code>\u00a0then choose\u00a0<code>Install automatically</code>\u00a0and then choose the\u00a0<code>Version</code>\u00a0of\u00a0Maven\u00a0that you want to install.</li> </ul> <ul> <li>Next you scroll to tag\u00a0<code>JDK</code>\u00a0and put a name for it like <code>JDK8</code>. We don't need to install JDK 8 anymore because we already have JDK 8 by default inside the docker image <code>jenkins</code>.</li> </ul> <ul> <li>Finally, you scroll to tag\u00a0<code>Git</code>\u00a0and put a\u00a0<code>Name</code>\u00a0-&gt; set\u00a0<code>Path to Git executable</code>\u00a0as\u00a0<code>/usr/bin/git</code>\u00a0-&gt; choose\u00a0<code>Install automatically</code>. Click button\u00a0<code>Save</code>.</li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20For%20Building%20SpringBoot/#create_pipeline_on_jenkins","title":"Create Pipeline On Jenkins","text":"<ul> <li>Now, we will try to create a pipeline on Jenkins for building SpringBoot project. Firstly, you go to <code>Dashboard</code> and click <code>New Item</code>.</li> <li>Then you set a <code>Name</code> -&gt; choose <code>Multibranch Pipeline</code> -&gt; click <code>Ok</code>.</li> </ul> <ul> <li>Next, in tag\u00a0<code>Branch Sources</code>, you put some information about your\u00a0<code>GitHub Repository</code>\u00a0and\u00a0<code>Branch</code>\u00a0that you want Jenkins clones and builds.</li> <li>Note: you can set multi\u00a0<code>branches</code>\u00a0for Jenkins Build.</li> </ul> <ul> <li>Next, You scroll down and config\u00a0<code>Build Configuration</code>\u00a0and\u00a0<code>Scan Multibranch Pipeline Triggers</code>\u00a0as the image below.</li> <li>Note that\u00a0<code>Script Path</code>\u00a0is the\u00a0<code>path</code>\u00a0to\u00a0<code>Jenkinsfile</code>\u00a0in your GitHub repository(your source code on GitHub).</li> <li>For\u00a0<code>Scan Multibranch Pipeline Triggers</code>\u00a0choose\u00a0<code>Periodically if not otherwise run</code>\u00a0and\u00a0<code>Interval</code>\u00a0as\u00a0<code>1 minute</code>.\u00a0<code>Interval</code>\u00a0means when your repository has changed so the pipeline will be triggered automatically after 1 minute.</li> <li>Finally click\u00a0<code>Save</code></li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20For%20Building%20SpringBoot/#create_jenkins_file_in_your_repository","title":"Create Jenkins File In Your Repository","text":"<ul> <li>So let craete a folder in the root of your repository name\u00a0<code>jenkins</code>\u00a0and a file name\u00a0<code>build.Jenkinsfile</code>\u00a0as you defined in the\u00a0<code>Jenkins Pipeline</code>.</li> </ul> <ul> <li>In the file\u00a0<code>build.Jenkinsfile</code>. Let\u2019s add scripts as below</li> </ul> build.Jenkinsfile<pre><code>pipeline {\n    agent any\n    tools {\n        maven 'Maven 3.8.6'\n        jdk 'JDK8'\n    }\n    stages {\n        stage('Build') {\n            steps {\n                sh 'printenv'\n                sh 'ls -la'\n                sh 'mvn clean install -DskipTests'\n            }\n        }\n        stage(\"Run Test\") {\n            steps {\n              sh 'mvn test'\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>Now, let\u2019s commit and push your code changes to your respository and check the Jenkins Pipeline, You can see It\u2019s built successfully.</li> </ul> <ul> <li>So, That\u2019s it. Thanks and Good luck!</li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20For%20Building%20SpringBoot/#see_also","title":"See Also","text":"<ul> <li>Docker With Jenkins</li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20With%20SonarQube/","title":"Jenkins With SonarQube","text":"","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20With%20SonarQube/#introduction","title":"Introduction","text":"<ul> <li>In this section, we will try to integrate <code>SonarQube</code> into <code>Jenkins pipeline</code> for checking the quality of Spring Boot project when there are new commits.</li> <li>If you have not known about Jenkins, SonarQube or how to integrate your Spring Boot project with SonarQube. I will recommend read posts below:<ul> <li>Docker With Jenkins</li> <li>Docker With SonarQube</li> <li>Spring Boot With SonarQube</li> <li>Jenkins For Building SpringBoot</li> </ul> </li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20With%20SonarQube/#sonarqube_configuration","title":"SonarQube Configuration","text":"<ul> <li>Firstly, you should access <code>Sonarqube server</code>. Then go to\u00a0<code>Administration</code>\u00a0--&gt; <code>Security</code>  --&gt;\u00a0<code>Permission Template</code>\u00a0and check the checkbox for\u00a0<code>Execute Analysis</code>\u00a0for your <code>Sonarqube</code> account that you will use on Jenkins.</li> <li>So for this configuration, the user will have permission to execute sonar analysis when we use this user on Jenkins Server.</li> </ul> <ul> <li>Next you go to <code>My Account</code> --&gt; <code>Security</code> and generate a <code>Token</code> as below. So this Token will be used for accessing SonarQube Server instead of using username/password.</li> </ul> <ul> <li>You can try this token by replacing the <code>username/password</code> in <code>pom.xml</code> of your Spring Boot project.</li> </ul> pom.xml<pre><code>.....\n\n&lt;profiles&gt;\n        &lt;profile&gt;\n                &lt;id&gt;dev&lt;/id&gt;\n                &lt;properties&gt;\n                        &lt;activeatedProperties&gt;dev&lt;/activeatedProperties&gt;\n                        &lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;\n                        &lt;sonar.login&gt;9da54180b98f2667d0858dd18ccdb79014bfd79f&lt;/sonar.login&gt;\n                &lt;/properties&gt;\n                &lt;activation&gt;\n                        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n                &lt;/activation&gt;\n        &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre> <ul> <li>Next, you should go to\u00a0<code>Administration</code>\u00a0-&gt;\u00a0<code>Configuration</code>\u00a0-&gt;\u00a0<code>WebHooks</code>\u00a0and click\u00a0<code>Create</code>\u00a0button. Then add some information as\u00a0<code>Name</code>\u00a0and\u00a0<code>URL</code>.</li> <li>Note: the\u00a0<code>URL</code>\u00a0has format like\u00a0<code>{JENKINS SERVER}/sonarqube-webhook/</code>. For exmaple: your Jenkins Server is running at\u00a0<code>http://192.168.1.18:8081</code>\u00a0so the\u00a0<code>URL</code>\u00a0should be\u00a0<code>http://192.168.1.18:8081/sonarqube-webhook/</code>.</li> <li>Note: On Jenkins Server we have to add plugin\u00a0<code>Sonarqube Scanner</code>\u00a0which will do in the Step\u00a0<code>JENKINS CONFIGURATION</code>\u00a0below, then the\u00a0<code>URL</code>\u00a0above will be available.</li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20With%20SonarQube/#jenkins_configuration","title":"Jenkins Configuration","text":"<ul> <li>First, let\u2019s go to\u00a0<code>Manage Jenkins</code>\u00a0-&gt;\u00a0<code>Manage Plugins</code>\u00a0-&gt; Then choose tag\u00a0<code>Available</code>\u00a0and find\u00a0<code>SonarQube Scanner</code>\u00a0-&gt; then click\u00a0<code>Install</code></li> </ul> <ul> <li>Next, go to the\u00a0<code>Manage Jenkins</code>\u00a0-&gt;\u00a0<code>Global Tool Configuration</code>\u00a0-&gt; scroll down to tag\u00a0<code>SonarQube Scanner</code>\u00a0and fill some information as below:</li> </ul> <ul> <li>Next, go to\u00a0<code>Manage Jenkins</code>\u00a0-&gt;\u00a0<code>Configure System</code>\u00a0-&gt; scroll down to tag\u00a0<code>SonarQube servers</code>\u00a0and fill some information as\u00a0<code>Name</code>,\u00a0<code>URL of sonarqube server</code>.</li> </ul> <ul> <li>Then at step <code>Server authentication token</code>, let's choose button <code>Add</code> to add the <code>SonarQube Token</code></li> </ul> <ul> <li>Let's choose <code>Secret Text</code>, put your <code>SonarQube Token</code>, add a description and click <code>add</code> button. </li> </ul> <ul> <li>Now, at step <code>Server authentication token</code> you can choose your <code>SonarQube Token</code> as the image below.</li> </ul> <ul> <li>Finally, let's create/update your <code>Jenkinsfile</code> in your project as below.</li> </ul> build.Jenkinsfile<pre><code>pipeline {\n    agent any\n    tools {\n        maven 'Maven 3.8.6'\n        jdk 'JDK8'\n    }\n    stages {\n        stage('Build') {\n            steps {\n                sh 'printenv'\n                sh 'ls -la'\n                sh 'mvn clean install -DskipTests'\n            }\n        }\n        stage(\"Run Test\") {\n            steps {\n              sh 'mvn test'\n            }\n        }\n        stage(\"SonarQube Analysis\") {\n            steps {\n              withSonarQubeEnv('SonarQube-Scanner') {\n                sh 'mvn clean package sonar:sonar'\n              }\n            }\n        }\n        stage(\"Quality Gate\") {\n            steps {\n              timeout(time: 1, unit: 'HOURS') {\n                waitForQualityGate abortPipeline: true\n              }\n            }\n        }\n    }\n}\n</code></pre>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20With%20SonarQube/#testing","title":"Testing","text":"<ul> <li>Finally, commit and push the <code>Jenkinfile</code> in your repository then go to Jenkins server to check the build result.</li> </ul> <ul> <li>So, that\u2019s it. Thanks and Good luck!</li> </ul>","tags":["CI-CD"]},{"location":"CI%20CD/Jenkins%20With%20SonarQube/#see_also","title":"See Also","text":"<ul> <li>Docker With Jenkins</li> <li>Docker With SonarQube</li> <li>Spring Boot With SonarQube</li> <li>Jenkins For Building SpringBoot</li> </ul>","tags":["CI-CD"]},{"location":"Database/Database/","title":"Introduction","text":"<p>In this topic we will learn about basic concepts about database. I hope that after reading this post you can answer questions like: What is the database?, what are differences between relational (SQL) and non-relational (NoSQL) database? advantages and disavantages of relational and non-relational database.</p>","tags":["Database"]},{"location":"Database/Database/#what_is_the_data","title":"What Is The Data?","text":"<ul> <li> <p><code>Data</code> is a collection of a distinct small unit of information. It can be used in a variety of forms like text, numbers, media, bytes, etc. it can be stored in pieces of paper or electronic memory, etc.</p> </li> <li> <p>Word <code>Data</code> is originated from the word <code>datum</code> that means <code>single piece of information</code>. <code>Data</code> is plural of the word datum.</p> </li> <li> <p>In computing, <code>Data</code> is information that can be translated into a form for efficient movement and processing. Data is interchangeable.</p> </li> <li> <p>More information</p> </li> </ul>","tags":["Database"]},{"location":"Database/Database/#what_is_the_database","title":"What Is The Database?","text":"<ul> <li> <p><code>A database</code> is an organized collection of data, so that it can be easily accessed and managed. You can organize data into tables, rows, columns, and index it to make it easier to find relevant information.</p> </li> <li> <p>The <code>main purpose of the database</code> is to operate a large amount of information by storing, retrieving, and managing data.</p> </li> <li> <p>Modern databases are managed by the <code>database management system</code> (DBMS). It is a program that allows you to create, update, and administer <code>a relational database</code>.</p> </li> </ul>","tags":["Database"]},{"location":"Database/Database/#what_is_the_relational_database","title":"What Is The Relational Database?","text":"<ul> <li> <p><code>A relational database</code> is a type of database. It uses a structure that allows us to identify and access data in relation to another piece of data in the database. Often, data in a relational database is organized into tables.</p> </li> <li> <p>More information</p> </li> <li> <p>Let's see an example about relationships of tables in database.</p> </li> </ul> <p></p>","tags":["Database"]},{"location":"Database/Database/#tables_rows_and_columns","title":"Tables: Rows AND Columns?","text":"<ul> <li> <p><code>Tables</code> can have hundreds, thousands, sometimes even millions of <code>rows</code> of data. These rows are often called records.</p> </li> <li> <p><code>Tables</code> can also have many <code>columns</code> of data. <code>Columns</code> are labeled with a descriptive name (customerName, city for example) and have a specific <code>data type</code> (Number, String, ...).</p> </li> </ul> <p></p>","tags":["Database"]},{"location":"Database/Database/#what_is_the_non-relational_database","title":"What Is The Non-Relational Database?","text":"<ul> <li> <p><code>A non-relational database</code> is a database that <code>does not use the tabular schema of rows and columns</code> found in most traditional database systems. Instead, non-relational databases use a storage model that is optimized for the specific requirements of the type of data being stored. For example, data may be stored as simple key/value pairs, as JSON documents, or as a graph consisting of edges and vertices.</p> </li> <li> <p>More information</p> </li> </ul> <p></p>","tags":["Database"]},{"location":"Database/Database/#advantages_and_disavantages_of_relational_and_non-relational_database","title":"Advantages And Disavantages Of Relational and Non-Relational Database","text":"NoSQL Databases Traditional SQL Databases Works with variable data Requires data to be in a structured format Can handle large volumes of rapidly changing data Can handle considerably large volumes of similar data Horizontal Scalability \u2013 Can scale across systems and servers Vertical Scalability - Can scale better as the allocated system resources are increased Designed with low-cost hardware in mind Designed with high-performance hardware in mind <ul> <li>More information</li> </ul>","tags":["Database"]},{"location":"Database/Database/#see_also","title":"See Also","text":"<ul> <li>Relational Database With Basic SQL Queries</li> </ul>","tags":["Database"]},{"location":"Database/Database/#references","title":"References","text":"<ul> <li>JavaTPoint</li> <li>Code Ecademy</li> <li>Docs Microsoft</li> </ul>","tags":["Database"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/","title":"Basic SQL Queries","text":"<p>In this topic we will learn about basic SQL queries in relational database.</p>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#what_is_the_sql","title":"What Is The SQL?","text":"<ul> <li> <p><code>SQL</code> is <code>Structured Query Language</code>, which is a computer language for storing, manipulating and retrieving data stored in a <code>relational database</code>.</p> </li> <li> <p><code>SQL</code> is the standard language for Relational Database System. All the Relational Database Management Systems (RDMS) like MySQL, MS Access, Oracle, Sybase, Informix, Postgres and SQL Server use SQL as their standard database language.</p> </li> <li> <p>More Information</p> </li> </ul>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#setup_environment","title":"Setup Environment","text":"<ul> <li> <p>In this example we will <code>MySQL</code> database, this database is very common and many people usually use it. </p> </li> <li> <p>First you should download <code>MySQL Installer</code> on mysql page. If you don't know how to install MySQL by <code>MySQL Installer</code> you can view the instruction here. However, I recommend we should use MySQL Docker you can view Docker With Databases for more details.</p> </li> <li> <p>After the installation you should install <code>MySQL Workbench</code> on mysql page or <code>DBeaver</code> following DBeaver page. These are database tools which will support you very much to interact with database.</p> </li> <li> <p>So we need some sample data and you can find it in this website by click <code>Download MySQL Sample Data</code>.</p> </li> <li> <p>Then import/execute your downloaded <code>SQL Sample Data</code> by <code>MySQL Workbench</code> or <code>DBeaver</code></p> </li> <li> <p>So this is the relationships between tables in your <code>SQL Sample Data</code></p> </li> </ul> <p></p>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#basic_sql_queries","title":"Basic SQL Queries","text":"<ul> <li>To pratise and executes sample queries you can use <code>MySQL WorkBench</code> or <code>DBeaver</code> tools.</li> </ul>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#query_with_custom_column_and_limit_records","title":"Query With Custom Column And Limit Records","text":"<pre><code>-- Get customerName and phone from customer table with 20 records\nSELECT customerName, phone FROM customers LIMIT 20\n\n-- Get some columns with additional columns is \n-- `postalCodeEdited` with values is added 100 and limit 20 records\nSELECT customerName, addressLine1, postalCode, postalCode + 100 AS postalCodeEdited\nFROM customers \nLIMIT 20\n\n-- Get all columns with additional columns is \n-- `postalCodeEdited` with values is added 100 and limit 30 records\nSELECT *, postalCode + 100 AS 'postalCodeEdited'\nFROM customers \nORDER BY customerName\nLIMIT 30\n\n-- Get all columns which is not `country` column, limit 30 records\nSELECT DISTINCT country\nFROM customers \nORDER BY country\nLIMIT 30\n\n-- Get columns productName, buyPrice and new_buyPrice with values = buyPrice * 1.1\nSELECT productName, buyPrice, buyPrice * 1.1 AS 'new_buyPrice'\nFROM products\n</code></pre>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#query_with_conditions","title":"Query With Conditions","text":"<pre><code>-- Get all customers with creditLimit &gt; 100000\nSELECT *\nFROM customers\nWHERE creditLimit &gt; 100000\n\n-- Get all order with orderDate &gt; '2005-01-01' \nSELECT *\nFROM order s\nWHERE orderDate &gt; '2005-01-01' \n\nSELECT *\nFROM orders\nWHERE orderDate &gt; '2005-01-01' AND customerNumber &gt; 400  AND (orders.status = 'On Hold' OR orders.status = 'Disputed')\n\n-- Get all orders with statuses in list: ['On Hold', 'Disputed']\nSELECT *\nFROM orders\nWHERE orders.status  IN ('On Hold', 'Disputed')\n\n-- Get all orders BETWEEN 200 AND 400\nSELECT *\nFROM orders\nWHERE customerNumber BETWEEN 200 AND 400\n\n-- Get all orders BETWEEN '2005-01-01' AND '2005-04-30'\nSELECT *\nFROM orders\nWHERE orderDate BETWEEN '2005-01-01' AND '2005-04-30'\n</code></pre>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#query_with_like","title":"Query With Like","text":"<pre><code>-- Get all customers with customerName begin with `Au...`\nSELECT *\nFROM customers\nWHERE customerName LIKE 'Au%'\n\n-- Get all customers with contactLastName has last character 'y'\nSELECT *\nFROM customers\nWHERE contactLastName LIKE '____y'\n\n-- Get all customers with contactLastName doesn't have last character 'y'\nSELECT *\nFROM customers\nWHERE contactLastName NOT LIKE '____y'\n\n-- Get all customers with customerName that is not begin with `Au`\nSELECT *\nFROM customers\nWHERE customerName REGEXP '^Au'\n\n-- Get all customers with customerName end with \nSELECT *\nFROM customers\nWHERE customerName REGEXP 'Co$|^Au'\n\n-- Get all customers with customerName contain [a-h] and end with `e`.\nSELECT *\nFROM customers\nWHERE customerName REGEXP '[a-h]e'\n</code></pre>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#query_with_order","title":"Query With Order","text":"<pre><code>-- Get all customers with state is not null\nSELECT *\nFROM customers\nWHERE state IS NOT NULL\n\n-- Get all customers with state is null\nSELECT *\nFROM customers\nWHERE state IS NULL\n\n-- Get all customers with contactFirstName is desc\nSELECT *\nFROM customers\nORDER BY contactFirstName DESC\n\n-- Get city, contactFirstName with ordered by city , contactFirstName\nSELECT city, contactFirstName\nFROM customers\nORDER BY city , contactFirstName\n\n-- try to avoid this use\nSELECT city, contactFirstName, 10 AS points\nFROM customers\nORDER BY 1 , 2\n\nSELECT city, contactFirstName\nFROM customers\nWHERE city LIKE 'a%'\nORDER BY city, contactFirstName\n</code></pre>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#query_with_pagination","title":"Query With Pagination","text":"<pre><code>-- get 2 continuos records (record 5 and record 6), ignone 4 frist records \nSELECT *\nFROM customers\nLIMIT 4, 2\n</code></pre>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#query_with_join_tables","title":"Query With Join Tables","text":"<pre><code>SELECT orders.customerNumber, orders.orderNumber, customers.customerNumber AS 'id_of_customer_table'\nFROM orders\nJOIN customers \n    ON orders.customerNumber = customers.customerNumber\n\n-- column that contain in two table had to use \"o.customerName\"\nSELECT o.customerNumber, o.orderNumber, c.customerNumber AS 'id_of_customer_table'\nFROM orders o\nJOIN customers c\n    ON o.customerNumber = c.customerNumber\n\n\n\n-- join table from 2 different database\nSELECT *\nFROM customers c\nJOIN secondclassicmodels.orders o\nON c.customerNumber = o.customerNumber\n\n-- join table from 2 different database\nUSE classicmodels;\nSELECT *\nFROM secondclassicmodels.customers c\nJOIN orders o\nON o.customerNumber = c.customerNumber\n\nSELECT c.customerNumber, phone, amount, p.customerNumber AS 'payment'\nFROM customers c\nJOIN payments p\nON c.customerNumber = p.customerNumber\n\n-- Join multiple tables together\nSELECT customerName, \n        c.customerNumber, \n        o.customerNumber AS 'orders_customer_numb',\n        o.orderNumber \n        comments, \n        productCode,\n        quantityOrdered\nFROM customers c\nJOIN orders o\n    ON c.customerNumber = o.customerNumber\nJOIN orderdetails od\n    ON o.orderNumber = od.orderNumber   \n\nSELECT * \nFROM orderdetails ord\nJOIN products prd\nON prd.productCode = ord.productCode\nJOIN orders o\nON o.orderNumber = ord.orderNumber\n\n-- Implpicit Join Syntax\nSELECT * \nFROM orderdetails ord, orders o\nWHERE ord.orderNumber = o.orderNumber\n\nOUTER JOIN, we will you left join or right join\n-- for left join, all the customer from left table (customer) will be return whether the join condition is true or not\n-- for right join, all the order from right table (orders) will be return whether the join condition is true or not\n\nSELECT\n    c.customerNumber,\n    c.customerName,\n    o.orderNumber\nFROM customers c\nLEFT JOIN orders o\n    ON c.customerNumber = o.customerNumber\nORDER BY c.customerNumber\n\n\n-- description, we will get all the customer whether contains order or not\n-- then we will get all the order whether contains orderdetails or not    \nSELECT\n    c.customerNumber,\n    c.customerName,\n    o.orderNumber,\n    d.productCode\nFROM customers c\nLEFT JOIN orders o\n    ON c.customerNumber = o.customerNumber\nLEFT JOIN orderdetails d\n    ON o.orderNumber = d.orderNumber\nORDER BY c.customerNumber\n</code></pre>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#see_also","title":"See Also","text":"<ul> <li>Database</li> <li>Docker With Databases</li> </ul>","tags":["Database","SQL"]},{"location":"Database/Relational%20Database%20With%20Basic%20SQL%20Queries/#references","title":"References","text":"","tags":["Database","SQL"]},{"location":"Docker/Docker%20Commands%20And%20Descriptions/","title":"Docker Commands And Descriptions","text":"","tags":["Docker"]},{"location":"Docker/Docker%20Commands%20And%20Descriptions/#all_docker_commands_and_descriptions","title":"All Docker Commands And Descriptions","text":"<code>Command</code> Description <code>docker attach</code> Attach local standard input, output, and error streams to a running container <code>docker build</code> Build an image from a Dockerfile <code>docker builder</code> Manage builds <code>docker checkpoint</code> Manage checkpoints <code>docker commit</code> Create a new image from a container\u2019s changes <code>docker config</code> Manage Docker configs <code>docker container</code> Manage containers <code>docker context</code> Manage contexts <code>docker cp</code> Copy files/folders between a container and the local filesystem <code>docker create</code> Create a new container <code>docker diff</code> Inspect changes to files or directories on a container\u2019s filesystem <code>docker events</code> Get real time events from the server <code>docker exec</code> Run a command in a running container <code>docker export</code> Export a container\u2019s filesystem as a tar archive <code>docker history</code> Show the history of an image <code>docker image</code> Manage images <code>docker images</code> List images <code>docker import</code> Import the contents from a tarball to create a filesystem image <code>docker info</code> Display system-wide information <code>docker inspect</code> Return low-level information on Docker objects <code>docker kill</code> Kill one or more running containers <code>docker load</code> Load an image from a tar archive or STDIN <code>docker login</code> Log in to a Docker registry <code>docker logout</code> Log out from a Docker registry <code>docker logs</code> Fetch the logs of a container <code>docker manifest</code> Manage Docker image manifests and manifest lists <code>docker network</code> Manage networks <code>docker node</code> Manage Swarm nodes <code>docker pause</code> Pause all processes within one or more containers <code>docker plugin</code> Manage plugins <code>docker port</code> List port mappings or a specific mapping for the container <code>docker ps</code> List containers <code>docker pull</code> Pull an image or a repository from a registry <code>docker push</code> Push an image or a repository to a registry <code>docker rename</code> Rename a container <code>docker restart</code> Restart one or more containers <code>docker rm</code> Remove one or more containers <code>docker rmi</code> Remove one or more images <code>docker run</code> Run a command in a new container <code>docker save</code> Save one or more images to a tar archive (streamed to STDOUT by default) <code>docker search</code> Search the Docker Hub for images <code>docker secret</code> Manage Docker secrets <code>docker service</code> Manage services <code>docker stack</code> Manage Docker stacks <code>docker start</code> Start one or more stopped containers <code>docker stats</code> Display a live stream of container(s) resource usage statistics <code>docker stop</code> Stop one or more running containers <code>docker swarm</code> Manage Swarm <code>docker system</code> Manage Docker <code>docker tag</code> Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE <code>docker top</code> Display the running processes of a container <code>docker trust</code> Manage trust on Docker images <code>docker unpause</code> Unpause all processes within one or more containers <code>docker update</code> Update configuration of one or more containers <code>docker version</code> Show the Docker version information <code>docker volume</code> Manage volumes <code>docker wait</code> Block until one or more containers stop, then print their exit codes","tags":["Docker"]},{"location":"Docker/Docker%20Commands%20And%20Descriptions/#references","title":"References","text":"<ul> <li>docker labs</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/","title":"Docker Introduction","text":"","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#what_is_the_docker","title":"What Is The Docker?","text":"<ul> <li>Docker is <code>a container management service</code>. The keywords of Docker are develop, ship and run anywhere. The whole idea of Docker is for developers to easily develop applications, ship them into <code>containers</code> which can then be deployed anywhere.</li> <li>The initial release of Docker was in March 2013 and since then, it has become the buzzword for modern world development, especially in the face of Agile-based projects.</li> <li>More Information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#docker_components","title":"Docker Components","text":"<ul> <li>Docker contains some main components as below</li> <li><code>Docker for Windows</code> \u2212 It allows one to run <code>Docker containers</code> on the Windows OS. We also have docker for Linux and MacOS.</li> <li><code>Docker Engine</code> \u2212 It is used for building <code>Docker images</code> and creating <code>Docker containers</code>. It is the heart of Docker.</li> <li><code>Docker Hub</code> \u2212 This is the registry which is used to host various <code>Docker images</code>.</li> <li><code>Docker Compose</code> \u2212 This is used to define applications using <code>multiple Docker containers</code>.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#what_is_the_docker_engine","title":"What Is The Docker Engine?","text":"<ul> <li><code>The Docker engine</code> is an open-source software designed to build and run applications in isolated environments known as containers.</li> <li>It uses OS-level virtualization to run the applications. This is similar to virtual machines but the Docker engine offers a more resource-friendly and portable environment to our processes.</li> <li>Developed by Docker.Inc under the Apache License, the Docker engine hosts images, networks, and containers through a server-side daemon process. Since its initial release in 2013, Docker has grown massively in demand and reputation.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#what_is_the_docker_container","title":"What Is The Docker Container?","text":"<ul> <li><code>A container</code> is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. <code>A Docker container image</code> is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.</li> <li><code>Container images (docker images)</code> become <code>containers</code> at runtime and in the case of Docker images become containers when they run on <code>Docker Engine</code>.</li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#what_is_the_docker_images","title":"What Is The Docker Images?","text":"<ul> <li>A <code>Docker image</code> is a file used to execute code in a <code>Docker container</code>. <code>Docker images</code> act as a set of instructions to build a <code>Docker container</code>, like a template. <code>Docker images</code> also act as the starting point when using Docker. An image is comparable to a snapshot in virtual machine (VM) environments</li> <li>Docker Engine is used to create, run and deploy applications in containers. A <code>Docker image</code> contains application code, libraries, tools, dependencies and other files needed to make an application run. When a user runs an image, it can become one or many instances of a container.</li> <li>More indormation</li> <li>Example of a docker image to run a spring boot project</li> </ul> <pre><code>    #get docker image with openjdk 8 installed from docker hub\n    FROM openjdk:8-jdk-alpine\n\n    #expose port 8080 to real machine\n    EXPOSE 8080\n\n    #some information for docker image\n    LABEL owner=\"duc\"\n    LABEL maintainer=\"minhducnguyen189@gmail.com\"\n    LABEL description=\"test image my project\"\n\n    #copy the jar file in target folder into docker image\n    COPY target/my-project-1.0.0-SNAPSHOT.jar my-project-1.0.0-SNAPSHOT.jar\n\n    #run command java to run jar package when docker image is run\n    ENTRYPOINT [\"java\",\"-jar\",\"/my-project-1.0.0-SNAPSHOT.jar\"]\n</code></pre> <ul> <li>run command <code>docker build . --tag myproject</code> to build a docker image with name <code>myproject</code></li> <li>run command <code>docker run -it -p8080:8080 myproject</code> to run a docker container with 8080 is mapped out side to real machine.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#what_is_the_docker_hub","title":"What Is The Docker Hub?","text":"<ul> <li><code>Docker Hub</code> is a service provided by Docker for finding and sharing container images with your team. It is the world\u2019s largest repository of container images with an array of content sources including container community developers, open source projects and independent software vendors (ISV) building and distributing their code in containers.</li> <li>Users get access to free public repositories for storing and sharing images or can choose a subscription plan for private repositories.</li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#what_is_the_docker-compose","title":"What Is The Docker-Compose?","text":"<ul> <li><code>Docker Compose</code> is a tool for defining and running multi-container Docker applications. With Docker Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command <code>docker-compose up</code>, you create and start all the services from your configuration. </li> <li>Using Compose is basically a three-step process:<ul> <li>Define your app\u2019s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li> <li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li> <li>Run <code>docker-compose</code> up and the Docker compose command starts and runs your entire app. You can alternatively run <code>docker-compose up</code> using the docker-compose binary.</li> </ul> </li> <li>An docker-compose.yml is like the example below. In this example we can see that we have 2 services, one is the mysql_db_container which is using image <code>mysql:latest</code> from the docker hub. The second one is the <code>adminer_container</code> which is using the image <code>adminer:latest</code> from the docker hub also.</li> </ul> <p>docker-compose.yml<pre><code>version: '3.7'\nservices:\n  mysql_db_container:\n    image: mysql:latest\n    command: --default-authentication-plugin=mysql_native_password\n    environment:\n    MYSQL_ROOT_PASSWORD: password\n    MYSQL_DATABASE: todo\n    ports:\n    - 3306:3306\n    volumes:\n    - ./mysql:/var/lib/mysql:rw\n  adminer_container:\n    image: adminer:latest\n    environment:\n    ADMINER_DEFAULT_SERVER: mysql_db_container\n    ports:\n    - 9090:8080\n</code></pre> - More information</p>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#install_docker_and_docker-compose","title":"Install Docker And Docker-Compose","text":"<ul> <li>Go to link below to download and install Docker as default:</li> <li>For Window </li> <li> <p> For Linux</p> </li> <li> <p>For Install Docker Compose</p> </li> <li> For Linux</li> <li>For Window, It included in the Docker Desktop so we don't need to install anymore.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#see_also","title":"See Also","text":"<ul> <li>Docker Commands And Descriptions</li> <li>DockerFile Command Descriptions</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20Introduction/#references","title":"References","text":"<ul> <li>docker file script</li> <li>Docker Download Window </li> <li>DockerHub</li> <li>TutorialSpoint</li> <li>Docker.com</li> <li>techtarget</li> <li>Docker Compose</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/","title":"Docker With Databases","text":"<p>As you know installing databases in our computers is taking many time and they are also complicated. So In this topic I will instroduce ways to create database by using Docker which will help you save more time.</p> <p>We will use docker-compose to create database containers</p>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#docker_for_mysql","title":"Docker For MySQL","text":"<ul> <li>Let's create a folder with anyname you like as <code>mysql docker</code> and in this folder we will create a folder name <code>mysql-data</code> and a file <code>docker-compose.yml</code> and put scripts as belows:</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n  mysql_db_container:\n    # using latest image mysql from dockerHub\n    image: mysql:latest\n    # container name: check by command: docker container ls\n    container_name: mysql_container\n    command: --default-authentication-plugin=mysql_native_password\n    # default username is root\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_DATABASE: sys\n    # map port between real machine and container    \n    ports:\n    - 3306:3306\n    # map data between real machine and container\n    # which will help us avoid lost data when container is down\n    volumes:\n    - ./mysql-data:/var/lib/mysql:rw\n\nvolumes:\n  mysql-data:\n</code></pre> <ul> <li> <p>Save the <code>docker-compose.yml</code> and open terminal and use commands <code>sudo docker compose up -d</code> to start the container and <code>sudo docker compose down</code> to stop the container.</p> </li> <li> <p>After your mysql DB has started you can use these conection information to connect to your DB</p> </li> </ul> Field Name Value USERNAME root PASSWORD defined in docker-compose file: <code>password</code> PORT defined docker-compose file, default <code>3306</code> HOST localhost","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#docker_for_oracle_db","title":"Docker For Oracle DB","text":"<ul> <li>We don't have many oracle database image on <code>DockerHub</code> so you can use my oracle image on my dockerhub by command <code>docker pull minhducnguyen189/oracle-xe-18-4:latest</code>. Or you will create an docker image for yourself to use.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#step_1_prepare_environment","title":"Step 1: Prepare Environment","text":"<ul> <li>You should clone this repo here</li> <li>Then you need access oracle page to download the installation file. Note, you have to download the file used for Linux x64</li> <li>If you are using Windows, you should install <code>Git</code> and use <code>Git Bash</code> to execute the script.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#step_2_execute_the_build_script","title":"Step 2: Execute The Build Script","text":"<ul> <li>Let's copy your <code>oracle database installation file</code> into the source repo of step 1 following this path <code>docker-images\\OracleDatabase\\SingleInstance\\dockerfiles\\&lt;your oracle database xe version&gt;\\</code></li> </ul> <ul> <li> <p>Now let go to this path of source repo <code>docker-images\\OracleDatabase\\SingleInstance\\dockerfiles</code>. Then open the <code>Git Bash</code> and execute the build script with command below</p> </li> <li> <p><code>./buildContainerImage.sh -v 18.4.0 -t &lt;oracle image name (Ex: oracle-xe)&gt; -x -i</code></p> </li> <li> <p>Ex: <code>./buildContainerImage.sh -v 18.4.0 -t oracle-xe -x -i</code></p> </li> <li> <p>You can view more configuration here</p> </li> <li>Note that when the console show the message below, you need to wait for 5 minutes or more. So, let's patient.</li> </ul> <pre><code>  #8 215.0\n  #8 215.0 Complete!\n  #8 215.2 Loaded plugins: ovl\n</code></pre> <ul> <li>When you see this message in the console. So everything has done!</li> </ul> <pre><code>  #8 1174.5 Complete!\n  #8 DONE 1179.2s\n\n  #9 exporting to image\n  #9 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00\n  #9 exporting layers\n  #9 exporting layers 129.3s done\n  #9 writing image sha256:14716a3a18ce456d8ae8062ca43ebb5ea180fad97a4dfef830a164be5c70d363 0.0s done\n  #9 naming to docker.io/library/oracle-xe\n  #9 naming to docker.io/library/oracle-xe 0.0s done\n  #9 DONE 129.4s\n</code></pre> <ul> <li>Then you can open terminal and use command <code>docker images</code> to check your oracle image has created or not</li> </ul> <p></p>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#step_3_create_a_docker_compose_file","title":"Step 3: Create A Docker Compose File","text":"<ul> <li>Let's create a folder with anyname you like as <code>oracle docker</code> and in this folder we will create 2 folders name <code>oradata</code> and <code>setup</code>. Then we create a file <code>docker-compose.yml</code> and put scripts as belows:</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n  database:\n    # oracle database image from DockerHub\n    image: oracle-xe\n    # container name\n    container_name: oracle_database\n    environment:\n      # Oracle password for SYS, SYSTEM and PDBADMIN accounts\n      ORACLE_PWD: password\n    volumes:\n      # mapping data of container to real machine\n      - ./oradata:/opt/oracle/oradata\n      # mapping db scripts to container if we have\n      - ./startup:/opt/oracle/scripts/startup\n    ports:\n      - 1521:1521\n\nvolumes:\n  oradata:\n  startup:\n</code></pre>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#step_4_test_docker_image","title":"Step 4: Test Docker Image","text":"<ul> <li>Then use command <code>sudo docker compose up</code> to start your container.</li> <li>You should note the the first time starting DB will make many time. After your orcal DB has started, you can use these conection information to connect to your DB</li> </ul> Field Name Value DATABASE (Service Name) XEPDB1 USERNAME sys PASSWORD defined docker-compose file, default <code>password</code>) PORT defined docker-compose file, default <code>1521</code> HOST localhost ROLE SYSDBA <ul> <li>to access the container you can use this command</li> <li><code>docker exec -it oracle_database /bin/bash</code></li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#docker_for_postgresql","title":"Docker For PostgreSQL","text":"<ul> <li>Let's create a folder with anyname you like as <code>postgres docker</code> and in this folder we will create a folder name <code>data</code> and a file <code>docker-compose.yml</code> and put scripts as belows:</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n  db:\n    image: postgres\n    container_name: postgres_database\n    restart: always\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - ./data:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n\nvolumes:\n  data:\n</code></pre> <ul> <li>After your <code>prosgres database</code> has started you can use these conection information to connect to your DB</li> </ul> Field Name Value USERNAME user PASSWORD defined in docker-compose file: <code>password</code> PORT defined docker-compose file, default <code>27017</code> HOST localhost","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#docker_for_mongodb","title":"Docker For MongoDB","text":"<ul> <li>Let's create a folder with anyname you like as <code>mongo docker</code> and in this folder we will create a folder name <code>data</code> and a file <code>docker-compose.yml</code> and put scripts as belows:</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n\n  mongo:\n    # use mongo image from dockerhub\n    image: mongo\n    # restart if service is failed\n    restart: always\n    container_name: mongodb\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n    ports:\n      - 27017:27017\n    # sync data from container to real machine\n    volumes:\n      - ./data:/data/db\n\n  mongo-express:\n    # use image from dockerhub\n    image: mongo-express\n    container_name: mongo-express\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\n      ME_CONFIG_MONGODB_ADMINPASSWORD: example\n      ME_CONFIG_MONGODB_SERVER: mongodb\n    # restart if service is failed\n    restart: always\n    depends_on:\n      - mongo\n    ports:\n      - 8081:8081\n\nvolumes:\n  data:\n</code></pre> <ul> <li>After your <code>mongodb</code> has started you can use these connection information to connect to your DB</li> </ul> Field Name Value USERNAME root PASSWORD defined in docker-compose file: <code>example</code> PORT defined docker-compose file, default <code>27017</code> HOST localhost <p>Note that: every time you start you container, it will create an anonymous volume. So you should delete it after you shut down your container by command <code>docker volume rm &lt;volume name&gt; -f</code>.</p>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Databases/#docker_mariadb","title":"Docker MariaDB","text":"<ul> <li>Let's create a folder with any name you like as <code>mariadb</code> and in this folder we will create a folder name <code>mariadb</code> and a file <code>docker-compose.yml</code> and put scripts as below:</li> </ul> docker-compose.yaml<pre><code>version: '3.1'\n\nservices:\n  db:\n    image: mariadb:latest\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n    ports:\n      - 3306:3306\n    volumes:\n      - mariadb:/var/lib/mysql\n\nvolumes:\n  mariadb:\n</code></pre> <ul> <li>After your <code>mariadb</code> has started you can use these connection information to connect to your DB.</li> <li>If you use <code>root</code> user, you will have permission to access all database and create any database that you want. The <code>root</code> user credentials are showed as below.</li> </ul> Field Name Value USERNAME root PASSWORD defined in docker-compose file: <code>rootpass</code> PORT defined docker-compose file, default <code>3306</code> HOST localhost <ul> <li>If you use non root user that defined in the <code>docker-compose.yaml</code> then you can only access to the database that you defined <code>mydb</code>.</li> </ul> Field Name Value USERNAME user PASSWORD defined in docker-compose file: <code>password</code> PORT defined docker-compose file, default <code>3306</code> HOST localhost DATABASE mydb - If you want to grant all permission for the non root user as the root user, you can access the database with <code>root</code> user and run SQL scripts below to grant permissions. <pre><code>GRANT ALL PRIVILEGES ON *.* TO 'user'@'%' IDENTIFIED BY 'password';\nFLUSH PRIVILEGES;\nSHOW GRANTS FOR 'user'@'%';\n</code></pre> <ul> <li> <p><code>GRANT ALL PRIVILEGES</code>: This command grants all possible privileges to a specific database user. Privileges include the ability to perform operations like <code>SELECT, INSERT, UPDATE, DELETE, CREATE, DROP,</code> and more.</p> </li> <li> <p><code>ON .</code>: The <code>*.*</code> syntax specifies that the privileges apply to all databases <code>(*)</code> and all tables <code>(*)</code> within those databases. This means the user will have full access to every database and table on the server.</p> </li> <li> <p><code>TO 'user'@'%'</code>: This specifies the user and host to which the privileges are granted.</p> <ul> <li><code>'user'</code> is the username of the account being granted privileges.</li> <li><code>'%'</code>is a wildcard for the host part, meaning the user can connect from any IP address or hostname.</li> </ul> </li> <li> <p><code>IDENTIFIED BY 'password'</code>: This clause sets the password for the specified user. If the user already exists, their password will be updated to the provided value.</p> </li> <li> <p><code>FLUSH PRIVILEGES;</code>: This command tells the database server to reload the grant tables in memory. This is necessary because MySQL or MariaDB caches user privileges, and changes made by the <code>GRANT</code> command won't take effect until the cache is refreshed. <code>FLUSH PRIVILEGES</code> ensures that the new privileges are applied immediately.</p> </li> <li> <p><code>SHOW GRANTS FOR 'user'@'%';</code>:This command displays the privileges that have been granted to the specified user. It shows the exact privileges that the user <code>'user'</code> has when connecting from any host <code>('%')</code>. This is a way to verify that the <code>GRANT</code> command worked as intended.</p> </li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20File%20Browser/","title":"Docker With File Browser","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20File%20Browser/#what_is_the_file_browser","title":"What Is The File Browser?","text":"<ul> <li><code>filebrowser</code> provides a file managing interface within a specified directory and it can be used to upload, delete, preview, rename and edit your files. It allows the creation of multiple users and each user can have its own directory. It can be used as a standalone app. </li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20File%20Browser/#create_file_browser_with_docker","title":"Create File Browser With Docker","text":"<ul> <li>Let's create a file name <code>docker-compose.yml</code>, then add scripts as below:</li> </ul> docker-compose.yaml<pre><code>version: '3'\nservices:\n  file-browser:\n    image: filebrowser/filebrowser:latest\n    container_name: file-browser\n    environment:\n      - PUID=$(id -u)\n      - PGID=$(id -g)\n    ports:\n      - 7979:80\n    volumes:\n      - /home/duc/share/:/srv\n      - ./filebrowser.db:/database.db\n      - ./settings.json:/config/settings.json\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n</code></pre> <ul> <li>Then run two commands below to create 2 empty files.</li> </ul> <pre><code>touch filebrowser.db\ntouch settings.json\n</code></pre> <ul> <li>In the <code>environment</code>, we have:<ul> <li><code>PUID=$(id -u)</code>: Retrieves the user ID (UID) of the current user on the host system to ensure the container has the correct permissions.</li> <li><code>PGID=$(id -g)</code> : Retrieves the group ID (GID) of the current user on the host system to ensure the container has the correct group permissions.</li> </ul> </li> <li>In the <code>volumes</code>, we have:<ul> <li><code>/home/duc/share/:/srv</code>: Mounts the host directory <code>/home/duc/share/</code> to <code>/srv</code> in the container, allowing file access through the File Browser UI.</li> <li><code>./filebrowser.db:/database.db</code>: Mounts the local <code>filebrowser.db</code> file to <code>/database.db</code> in the container to persist the database between restarts.</li> <li><code>./settings.json:/config/settings.json</code>: Mounts the local <code>settings.json</code> configuration file to <code>/config/settings.json</code> in the container to customize File Browser settings.</li> </ul> </li> <li>In the <code>security_opt</code>, we have:<ul> <li><code>no-new-privileges:true</code>: Prevents the container from gaining additional privileges, even if it tries to do so, enhancing security by restricting privilege escalation.</li> </ul> </li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20File%20Browser/#testing","title":"Testing","text":"<ul> <li>Now you can use command <code>docker-compose up -d</code> to start your <code>File Browser</code> server.</li> <li>Then we can access browser at <code>localhost:7979</code> and login to access the dashboard.</li> </ul> <ul> <li>By default the username is <code>admin</code> and password is <code>admin</code>.</li> <li>Next, we can test by upload a file and then you should see it in the shared folder.</li> </ul> <ul> <li>If your machine has many drive, you can mount that drive to machine and use <code>file browser</code> to link with it. Then if you are using VPN like <code>tailscale</code> then you can access the <code>file browser</code> web page on any device and you can download and upload files from that drive.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jaeger/","title":"Docker With Jaeger","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jaeger/#what_is_the_jaeger","title":"What Is The Jaeger?","text":"<ul> <li><code>Jaeger</code> is an open-source, end-to-end distributed tracing system that is used to monitor and troubleshoot microservices-based distributed systems. It was originally developed by Uber and is now part of the Cloud Native Computing Foundation (CNCF). </li> <li><code>Jaeger</code> is designed to help developers and DevOps engineers to trace the flow of requests across complex distributed systems and identify performance issues and errors in real-time. <code>Jaeger</code> uses the OpenTracing API to enable developers to instrument their applications and send tracing data to the <code>Jaeger</code> backend, where it can be visualized and analyzed using a web-based UI.</li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jaeger/#create_jaeger_server_with_docker_compose","title":"Create Jaeger Server With Docker Compose","text":"<ul> <li>Let's create a file name\u00a0<code>docker-compose.yml</code>, then add scripts as below:</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n\n  jaeger-all-in-one:\n    image: jaegertracing/all-in-one:latest\n    environment:\n      - \"COLLECTOR_ZIPKIN_HOST_PORT=:9411\"\n      - \"COLLECTOR_OTLP_ENABLED=true\"\n    ports:\n      - \"5775:5775\"\n      - \"6831:6831\"\n      - \"6832:6832\"\n      - \"5778:5778\"\n      - \"16686:16686\"\n      - \"14268:14268\"\n      - \"14250:14250\"\n      - \"9411:9411\"\n</code></pre> <ul> <li>As you can see, the docker compose file above defines a single service called <code>jaeger-all-in-one</code> which uses the <code>Jaeger</code> All-in-One image (jaegertracing/all-in-one:latest). The environment variables set in this service configure the Jaeger collector to send data to the Zipkin port <code>9411</code> and enable the OpenTelemetry protocol (OTLP).</li> <li>The service exposes several ports to enable access to different components of the <code>Jaeger</code> stack:</li> </ul> Port Description 5775 The Jaeger compact thrift port 6831 The Jaeger binary thrift port 6832 The Jaeger binary thrift over UDP port 5778 The Jaeger config HTTP port 16686 The Jaeger query HTTP port 14268 The Jaeger collector HTTP port 14250 The Jaeger agent compact thrift port 9411 The Zipkin HTTP port for compatibility with Zipkin clients.","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jaeger/#testing","title":"Testing","text":"<ul> <li>Now you can use command\u00a0<code>docker-compose up</code>\u00a0to start your\u00a0<code>Jaeger</code>\u00a0server. Then access the URL <code>http://localhost:16686</code> then you will be the Jaeger UI as below.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jaeger/#references","title":"References","text":"<ul> <li>jaeger.io</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jenkins/","title":"Docker With Jenkins","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jenkins/#what_is_the_jenkins","title":"What Is The Jenkins?","text":"<ul> <li><code>Jenkins</code> is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.</li> <li><code>Jenkins</code> can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.</li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jenkins/#create_jenkins_server_with_docker","title":"Create Jenkins Server With Docker","text":"<ul> <li>Let's create a <code>docker-compose.yml</code> then add some scripts as below</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n  jenkins:\n    #using image from DockerHub\n    image: jenkins/jenkins\n    #enable privileged mode\n    privileged: true\n    #privileged mode with root user\n    user: root\n    ports:\n    - 8081:8080\n    - 50000:50000\n    container_name: jenkins\n    volumes:\n    - ./jenkins:/var/jenkins_home\n    - ./docker:/usr/local/bin/docker\n\nvolumes:\n  jenkins:\n  docker:\n</code></pre> <ul> <li> <p>You can see we config the <code>docker-compose</code> with <code>privileged</code> mode. So what is the <code>privileged</code> mode?</p> </li> <li> <p><code>Docker privileged mode</code> grants a Docker container root capabilities to all devices on the host system. Running a container in <code>privileged mode</code> gives it the capabilities of its</p> </li> </ul> <p></p> <ul> <li>Then we create 2 folders named <code>jenkins</code> and <code>docker</code> to sync the data from docker to our real machine.</li> </ul> <p></p>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jenkins/#testing","title":"Testing","text":"<ul> <li>Now, Let use <code>docker-compose up</code> to start the server. Then you can go to <code>localhost:8081</code> to access Jenkins and setup username/password and some plugins.</li> <li>When server is started up for the first time, you can get the credential in the log of jenkins container to bypass the first authentication step.</li> </ul> <ul> <li>Then you have to wait for installing recommended plugins of jenkins.</li> <li>After that you should create the first admin user.</li> </ul> <ul> <li>After setting up, now you can start using jenkins.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Jenkins/#references","title":"References","text":"<ul> <li>Jenkins.io</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Kafka/","title":"Docker With Kafka","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Kafka/#what_is_the_kafka","title":"What Is The Kafka?","text":"<ul> <li><code>Apache</code> Kafka is a distributed data streaming platform that can publish, subscribe to, store, and process streams of records in real time. It is designed to handle data streams from multiple sources and deliver them to multiple consumers. In short, it moves massive amounts of data\u2014not just from point A to B, but from points A to Z and anywhere else you need, all at the same time.</li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Kafka/#create_kafka_with_docker","title":"Create Kafka With Docker","text":"<ul> <li>Let's create a file name <code>docker-compose.yml</code>, then add scripts as below.</li> </ul> docker-compose.yml<pre><code>version: '3.4'\n\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:7.3.2\n    container_name: zookeeper\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n\n  broker:\n    image: confluentinc/cp-kafka:7.3.2\n    container_name: broker\n    ports:\n    # To learn about configuring Kafka for access across networks see\n    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/\n      - \"9092:9092\"\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      KAFKA_ADVERTISED_HOST_NAME: broker\n      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\n      KAFKA_LISTENERS: INSIDE://:19092,OUTSIDE://:9092\n      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker:19092,OUTSIDE://localhost:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n</code></pre> <ul> <li>Okay, we can see there are two service <code>zookeeper</code> and <code>broker</code>.</li> <li>Firstly, we have the details for the <code>zookeeper</code> service as in the image below.</li> </ul> Field Value Description Image confluentinc/cp-zookeeper:7.3.2 The Docker image used for the ZooKeeper service. It is pulled from the Confluent repository with version 7.3.2. Container name zookeeper The name assigned to the ZooKeeper container. Environment Variables ZOOKEEPER_CLIENT_PORT 2181 Specifies the client port used to connect to ZooKeeper. ZOOKEEPER_TICK_TIME 2000 Specifies the tick time in milliseconds used by ZooKeeper for session timeouts. Networks elk Specifies the network(s) that the ZooKeeper container is connected to. <ul> <li>Next, for <code>borker</code> service or <code>kafka</code>  we have the configurations as below.</li> </ul> Field Value Description Image confluentinc/cp-kafka:7.3.2 The Docker image used for the Kafka broker service. It is pulled from the Confluent repository with version 7.3.2. Container name broker The name assigned to the Kafka broker container. Ports \"9092:9092\" Maps the host's port 9092 to the container's port 9092. This allows external access to Kafka on port 9092. Depends On zookeeper Specifies that this service depends on the ZooKeeper service. Environment Variables KAFKA_BROKER_ID 1 Specifies the ID of the Kafka broker. KAFKA_ZOOKEEPER_CONNECT 'zookeeper:2181' Specifies the connection string to ZooKeeper. KAFKA_ADVERTISED_HOST_NAME broker Specifies the advertised host name for the Kafka broker. KAFKA_INTER_BROKER_LISTENER_NAME INSIDE Specifies the name of the inter-broker listener. KAFKA_LISTENERS INSIDE://:19092,OUTSIDE://:9092 Specifies the listeners for Kafka. KAFKA_ADVERTISED_LISTENERS INSIDE://broker:19092,OUTSIDE://localhost:9092 Specifies the advertised listeners for Kafka. KAFKA_LISTENER_SECURITY_PROTOCOL_MAP INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT Specifies the listener security protocol mapping. created: 2023-07-01 11:05 modified: 2023-09-03 09:55 ## Testing - Now you can use command <code>docker-compose up</code> to start our <code>Kafka</code> service. - Then we can use the command below to create a kafka topic. <pre><code>docker exec broker kafka-topics --bootstrap-server broker:9092 --create --replication-factor 1 --partitions 1 --topic sampleTopic\n</code></pre> <ul> <li>Now, to verify the topic, let's access to the kafka conteiner.</li> </ul> <pre><code>docker exec -it broker /bin/bash\n</code></pre> <ul> <li>Then use the command below to check list out all created kafka topics.</li> </ul> <pre><code>kafka-topics --list --bootstrap-server localhost:9092\n</code></pre> <pre><code>[appuser@a7c57b707699 ~]$ kafka-topics --list --bootstrap-server localhost:9092\nsampleTopic\n</code></pre>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Keycloak/","title":"Docker With Keycloak","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Keycloak/#what_is_the_keycloak","title":"What Is The Keycloak?","text":"<ul> <li><code>Keycloak</code> is an open-source identity and access management tool with a focus on modern applications such as single-page applications, mobile applications, and REST APIs.</li> <li>The project was started in 2014. It has since grown into a well-established open source project with a strong community behind that. It is used for small projects to large enterprises.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Keycloak/#keycloak_features","title":"Keycloak Features","text":"<ul> <li><code>Keycloak</code> provides fully customizable login pages, recovery of passwords, accepting terms, and a lot more. All of these features provided by <code>Keycloak</code> can easily integrate your application without any coding at all. By delegating authentication of the user to <code>Keycloak</code>, you don\u2019t worry about authentication mechanisms, safely store passwords, etc. You can enable two-factor authentication without having to make changes to the application. This also increases your application security because in this situation your application doesn\u2019t have access to user credentials, it can only know tokens issued by <code>Keycloak</code>.</li> <li>The tables below will show main features of <code>Keycloak</code>.</li> </ul> Keycloak Features Descriptions Multiple Protocols Support As for now Keycloak supports three different protocols, namely - OpenID Connect, OAuth 2.0 and SAML 2.0. SSO Keycloak has full support for Single Sign-On and Single Sign-Out. Admin Console Keycloak offers web-based GUI where you can \u201cclick out\u201d all configurations required by your instance to work as you desire. User Identity and Accesses Keycloak can be used as a standalone user identity and access manager by allowing us to create users database with custom roles and groups. This information can be further used to authenticate users within our application and secure parts of it based on pre-defined roles. External Identity Source Sync In case when your client currently has some type of user database, Keycloak allows us to synchronize with such database. By default, it supports\u00a0<code>LDAP</code>\u00a0and\u00a0<code>Active Directory</code>\u00a0but you can create custom extensions for any user database using Keycloak User storage API. Keep in mind that such a solution may not have all data necessary for Keycloak to be fully functional, so remember to check if your desired functionality works. Identity Brokering Keycloak can also work as a proxy between your users and some external identity provider or providers. Their list can be edited from Keycloak Admin Panel. Social Identity Providers Additionally, Keycloak allows us to use Social Identity Providers. It has built-in support Google, Twitter, Facebook, Stack Overflow but, in the end, you have to configure all of them manually from admin panel. The full list of supported social identity providers and their configuration manual can be found in Keycloak documentation. Pages Customization Keycloak lets you customize all pages displayed by it to your users. Those pages are in\u00a0<code>.ftl</code>\u00a0format so you can use classic\u00a0<code>HTML</code>\u00a0 markups and\u00a0<code>CSS</code>\u00a0styles to make the page fit your \u00a0application style and your company brand. You can even put custom\u00a0<code>JS</code>\u00a0scripts as part of pages customization so possibilities are limitless.","tags":["Docker"]},{"location":"Docker/Docker%20With%20Keycloak/#create_keycloak_server_with_docker","title":"Create Keycloak Server With Docker","text":"<ul> <li>Let's create a file name <code>docker-compose.yml</code>, then add scripts as below:</li> </ul> docker-compose.yml<pre><code>version: '3'\n\nvolumes:\n  postgres_data:\n      driver: local\n\nservices:\n  postgres:\n      #Get lastest postgres docker image from DockerHub\n      image: postgres\n      volumes:\n        - postgres_data:/var/lib/postgresql/data\n      environment:\n        POSTGRES_DB: keycloak\n        #Set username and password for postgres database  \n        POSTGRES_USER: admin\n        POSTGRES_PASSWORD: admin\n  keycloak:\n      #Get keycloak docker image from Red Hat\n      image: quay.io/keycloak/keycloak:legacy\n      environment:\n        DB_VENDOR: POSTGRES\n        DB_ADDR: postgres\n        DB_DATABASE: keycloak\n        DB_USER: admin\n        DB_SCHEMA: public\n        DB_PASSWORD: admin\n        #Set username and password for default keycloak user\n        KEYCLOAK_USER: admin\n        KEYCLOAK_PASSWORD: admin\n        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.\n        #JDBC_PARAMS: \"ssl=true\"\n      ports:\n        - 8080:8080\n      depends_on:\n        - postgres\n</code></pre> <ul> <li> <p>If you want to change the version of docker image of <code>Keycloak</code> you can view this Red Hat Website and choose another version that you like.</p> </li> <li> <p>Then let's create a folder <code>postgres_data</code> which is located next to the <code>docker-compose.yml</code> file as image below, then the data of <code>postgres database container</code> will be sync into this folders.</p> </li> </ul> <p></p>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Keycloak/#testing","title":"Testing","text":"<ul> <li>Now, Let use <code>docker-compose up</code> to start the server. Then you can go to <code>localhost:8080</code> to access <code>Keycloak server</code> and login with the username/password that you set in the <code>docker-compose.yml</code> file.</li> </ul> username password admin admin <ul> <li>Choose <code>Administration Console</code> and login.</li> </ul> <ul> <li>After login successful, you can see the <code>Keycloak</code> dashboard as below:</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Keycloak/#references","title":"References","text":"<ul> <li>Dzone</li> <li>Medium</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Open%20WebUI/","title":"Docker With Open WebUI","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Open%20WebUI/#what_is_the_open_webui","title":"What Is The Open WebUI?","text":"<ul> <li>Open WebUI is an extensible, feature-rich, and user-friendly self-hosted AI platform designed to operate entirely offline. It supports various LLM runners like Ollama and OpenAI-compatible APIs, with built-in inference engine for RAG, making it a powerful AI deployment solution.</li> <li>More informaion</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Open%20WebUI/#create_open_webui_with_docker","title":"Create Open WebUI With Docker","text":"<ul> <li>Let's create a file name <code>docker-compose.yaml</code>, then add scripts as below:</li> </ul> <pre><code>version: '3.9'\nservices:\n    open-webui:\n      image: 'ghcr.io/open-webui/open-webui:main'\n      restart: always\n      container_name: open-webui\n      volumes:\n      - './open-webui:/app/backend/data'\n      extra_hosts:\n      - 'host.docker.internal:host-gateway'\n      ports:\n      - '3000:8080'\n</code></pre> <ul> <li>Then let's create the folder <code>open-webui</code> which is located next to the <code>docker-compose.yaml</code> file then the data of container will be sync into this folder.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Open%20WebUI/#testing","title":"Testing","text":"<ul> <li>Now you can use command <code>docker-compose up</code> to start your <code>Open WebUI</code> server.</li> <li>Then we can access browser at <code>localhost:3000</code> and login to access the dashboard.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Samba%20Server/","title":"Docker With Samba Server","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Samba%20Server/#what_is_the_samba_server","title":"What Is The Samba Server?","text":"<ul> <li>A Samba file server\u00a0enables file sharing across different operating systems over a network. It lets you access your desktop files from a laptop and share files with Windows and macOS users.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Samba%20Server/#create_samba_server_with_docker","title":"Create Samba Server With Docker","text":"<ul> <li>Let's create a file name <code>docker-compose.yml</code>, then add scripts as below:</li> </ul> docker-compose.yml<pre><code>version: '3.4'\n\nservices:\n  samba:\n    image: dperson/samba\n    environment:\n      - TZ='Asia/Ho_Chi_Minh'\n      - SHARE=Data;/mnt;yes;no;no;duc;none;none;Data\n      - WORKGROUP=workgroup\n      - USER=duc;itworked\n      - NMBD=True\n    networks:\n      - default\n    ports:\n      - \"137:137/udp\"\n      - \"138:138/udp\"\n      - \"139:139/tcp\"\n      - \"445:445/tcp\"\n    read_only: false\n    tmpfs:\n      - /tmp\n    restart: unless-stopped\n    stdin_open: true\n    tty: true\n    volumes:\n      - /home/duc/share:/mnt:z\nnetworks:\n  default:\n</code></pre> <ul> <li> <p>In the <code>environment</code>, at line <code>SHARE=Data;/mnt;yes;no;no;duc;none;none;Data</code> please change the username <code>duc</code> to the username of the user that you define at line <code>USER=duc;itworked</code>. We have</p> <ul> <li><code>Data</code>: is the share name.</li> <li><code>/mnt</code>: The path inside the container that is being shared.</li> <li><code>no</code>: Whether guest access is allowed (no guest access).</li> <li><code>no</code>: whether the share is browsable.</li> <li><code>none</code>: Placeholder, possibly for a password or other options.</li> <li><code>none</code>: Placeholder, possibly for another option.</li> <li><code>Data</code>: The share comment or description.</li> </ul> </li> <li> <p><code>USER=duc;itworked</code> Creates a Samba user duc with the password itworked.</p> </li> <li>In the <code>volumes</code> we have <code>/home/duc/share:/mnt:z</code> : Mounts the host directory <code>/home/duc/share</code> to the container directory <code>/mnt</code>. The <code>:z</code> suffix is used for SELinux-enabled systems to apply the correct labels for shared volumes.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Samba%20Server/#testing","title":"Testing","text":"<ul> <li>Now you can use command <code>docker-compose up</code> to start your <code>Samba</code> server.</li> <li>Then on your client machine let open <code>Files</code> then choose <code>Other Locations</code>. At the bottom let's put the prefix <code>smb://</code> and the ip address of your server machine and click <code>Connect</code></li> </ul> <ul> <li>Then we will see the share name and when we double click on that, we will be required to put the username and password. So let's use the username and password that we created in the <code>docker-compose.yml</code>.</li> </ul> <ul> <li>Then after we connected, we can share files between two machines.</li> </ul> <ul> <li>If you can not copy and paste file from your client machine, please check the <code>read</code>, <code>write</code> permission and <code>owner</code> on the share folder in your server machine. We can use command below to grant all permission on the share folder.</li> </ul> <pre><code>sudo chmod 777 -R /home/duc/share\n</code></pre> <ul> <li>Then for changing the owner of the folder.</li> </ul> <pre><code>sudo chown duc:duc -R /home/duc/share\n</code></pre>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SonarQube/","title":"Docker With SonarQube","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20SonarQube/#what_is_the_sonarqube","title":"What Is The SonarQube?","text":"<ul> <li><code>SonarQube</code>, is a self-managed, automatic code review tool that systematically helps you deliver Clean Code. As a core element of our Sonar solution, <code>SonarQube</code> integrates into your existing workflow and detects issues in your code to help you perform continuous code inspections of your projects. The tool analyses 30+ different programming languages and integrates into your CI pipeline and DevOps platform to ensure that your code meets high-quality standards.</li> <li>More information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SonarQube/#create_sonarqube_server_with_docker","title":"Create SonarQube Server With Docker","text":"<ul> <li>Let's create a file name <code>docker-compose.yml</code>, then add scripts as below:</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n  #Create service sonarqube\n  sonarqube:\n    #Get lastest image from DockerHub\n    image: sonarqube:8-community\n    #set container name\n    container_name: sonarqube\n    ports:\n    - 9000:9000\n    #this service is assigned to network sonarnet  \n    networks:\n    - sonarnet\n    #Set username, password and url to connect postgresql database\n    environment:\n      SONARQUBE_JDBC_USERNAME: sonar\n      SONARQUBE_JDBC_PASSWORD: sonar\n      SONARQUBE_JDBC_URL: jdbc:postgresql://db/sonar\n    #Set volumes which will sync data to real machine  \n    volumes:\n    - sonarqube_conf:/opt/sonarqube/conf\n    - sonarqube_data:/opt/sonarqube/data\n    - sonarqube_extensions:/opt/sonarqube/extensions\n    - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins\n\n  #Create service postgres database  \n  db:\n    #Get lastest image from DockerHub\n    image: postgres\n    #this service is assigned to network sonarnet  \n    networks:\n    - sonarnet\n    #Set username and password for postgres database  \n    environment:\n      POSTGRES_USER: sonar\n      POSTGRES_PASSWORD: sonar\n    #Set volumes which will sync data to real machine  \n    volumes:\n    - postgresql:/var/lib/postgresql\n    - postgresql_data:/var/lib/postgresql/data\n\n#Create network sonarnet\nnetworks:\n  sonarnet:\n\n#Create volumes on real machine that data of container can sync\nvolumes:\n  sonarqube_conf:\n  sonarqube_data:\n  sonarqube_extensions:\n  sonarqube_bundled-plugins:\n  postgresql:\n  postgresql_data:\n</code></pre> <ul> <li>Then let's create some folders which is located next to the <code>docker-compose.yml</code> file as image below, then the data of container will be sync into these folders.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SonarQube/#testing","title":"Testing","text":"<ul> <li>Now you can use command <code>docker-compose up</code> to start your <code>SonarQube</code> server. If there are errors with messages as below:</li> </ul> <pre><code>window max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n</code></pre> <ul> <li>So you should open <code>Terminal</code> and run the command below to set <code>vm.max_map_count=262144</code> on Linux machine.</li> </ul> <pre><code>sudo sysctl -w vm.max_map_count=262144\n</code></pre> <ul> <li>If you are using Window. You should open <code>PowerShell</code> and put these commands</li> </ul> <pre><code>wsl -d docker-desktop\nsysctl -w vm.max_map_count=262144\n</code></pre> <ul> <li>Then restart your docker-compose file and go to <code>http://localhost:9000</code> and use default username and password of <code>SonarQube</code> to login.</li> </ul> <ul> <li>username: admin</li> <li>password: admin</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SonarQube/#references","title":"References","text":"<ul> <li>SonarQube</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/","title":"Docker With SpringBoot","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/#build_docker_image_with_executable_jar_file","title":"Build Docker Image With Executable Jar File","text":"<ul> <li>In the previous section Spring Boot With Executable Jar, we learnt how to build an executable jar file from Spring Boot project. Now we will continue to build a docker image with an executable jar file and then we can use this image to deploy our spring boot application on any server which support container technology.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/#create_a_docker_file","title":"Create A Docker File","text":"<ul> <li>So firstly, we need to write a <code>Dockerfile</code>. A <code>Dockerfile</code> is a text file that contains the instructions for building a Docker image. A Docker image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.</li> <li>So after building the Spring Boot application and got the executable jar file. We will create a Dockerfile as below.</li> </ul> Dockerfile<pre><code># Use the base image with Java 8 and Alpine Linux\nFROM openjdk:8\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the compiled Spring Boot application JAR file into the container\nCOPY target/json-schema-validator-0.0.1-SNAPSHOT.jar /app/json-schema-validator-0.0.1-SNAPSHOT.jar\n\n# Expose the port that the Spring Boot application listens on\nEXPOSE 8080\n\n# Set the command to run the Spring Boot application when the container starts\nCMD [\"java\", \"-jar\", \"-Dspring.profiles.active=dev\", \"json-schema-validator-0.0.1-SNAPSHOT.jar\"]\n</code></pre> Commands Description <code>FROM openjdk:8</code> This specifies the base image to use for the Docker image. In this case, it is using the official OpenJDK 8 image with Alpine Linux as the base operating system. This image provides Java 8 runtime environment. <code>WORKDIR /app</code> This sets the working directory inside the container to <code>/app</code>. It's a good practice to use a specific directory for your application. <code>COPY target/json-schema-validator-0.0.1-SNAPSHOT.jar /app/json-schema-validator-0.0.1-SNAPSHOT.jar</code> This copies the compiled Spring Boot application JAR file from the <code>target</code> directory of the host machine into the <code>/app</code> directory of the container. The source file is <code>json-schema-validator-0.0.1-SNAPSHOT.jar</code> in the <code>target</code> directory, and the destination is <code>/app/json-schema-validator-0.0.1-SNAPSHOT.jar</code> in the container. <code>EXPOSE 8080</code> This declares that the Spring Boot application listens on port 8080 inside the container. It does not actually publish the port to the host machine, but it provides a hint to users of the image about the exposed port. <code>CMD [\"java\", \"-jar\", \"-Dspring.profiles.active=dev\", \"json-schema-validator-0.0.1-SNAPSHOT.jar\"]</code> This is the command that will be executed when the container starts. It runs the Spring Boot application using the <code>java -jar</code> command. The <code>-Dspring.profiles.active=dev</code> part sets the active Spring profile to <code>dev</code>. The <code>json-schema-validator-0.0.1-SNAPSHOT.jar</code> is the JAR file that will be executed. <ul> <li>You can view more at DockerFile Command Descriptions</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/#build_docker_image_from_dockerfile","title":"Build Docker Image From Dockerfile","text":"<ul> <li>Afer creating a <code>Dockerfile</code>, we will use the command below to build a docker image.</li> </ul> <pre><code>docker build -f &lt;Dockerfile Name&gt; -t &lt;image name:version&gt;\n</code></pre> <p>Ex:</p> <pre><code>docker build . -t json-schema-validator:0.0.1\n</code></pre> <ul> <li> <p>The <code>.</code> at the end of the command tells Docker to build the image from the current directory. You can view more info in Docker Commands And Descriptions</p> </li> <li> <p>Now, we can use command <code>docker images</code> to check the image that we have just built.</p> </li> </ul> <pre><code>duc@duc-MS-7E01:~$ docker images\nREPOSITORY                    TAG              IMAGE ID       CREATED         SIZE\njson-schema-validator         0.0.1            f21d3db8026e   7 days ago      575MB\njson-schema-validator         0.0.1-SNAPSHOT   e1725659dbcf   7 days ago      575MB\n</code></pre>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/#test_docker_image","title":"Test Docker Image","text":"<ul> <li>Finally, let's use the command below to test our docker image that we have just build.</li> </ul> <pre><code>docker run -p 8080:8080 -d json-schema-validator:0.0.1-SNAPSHOT\n</code></pre> <ul> <li>This command will run a container with using the <code>json-schema-validator</code> image and expose it on port 8080 on the host machine.</li> <li>We can use the command <code>docker ps</code> to check the container is created or not.</li> </ul> <pre><code>duc@duc-MS-7E01:~$ docker ps\nCONTAINER ID   IMAGE                                  COMMAND                  CREATED              STATUS              PORTS                                       NAMES\n2cf8f7065fce   json-schema-validator:0.0.1-SNAPSHOT   \"java -jar -Dspring.\u2026\"   About a minute ago   Up About a minute   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   angry_goldstine\n</code></pre> <ul> <li>Then we can use command <code>docker logs &lt;containerId&gt;</code> to view the log of container.</li> </ul> <pre><code>docker logs 2cf8f7065fce\n</code></pre>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/#see_also","title":"See Also","text":"<ul> <li>Spring Boot With Executable Jar</li> <li>DockerFile Command Descriptions</li> <li>Docker Commands And Descriptions</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20SpringBoot/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Zipkin/","title":"Docker With Zipkin","text":"","tags":["Docker"]},{"location":"Docker/Docker%20With%20Zipkin/#what_is_the_zipkin","title":"What Is The ZipKin?","text":"<ul> <li>Zipkin is an open-source distributed tracing system used to monitor and troubleshoot microservices-based distributed systems It helps gather timing data needed to troubleshoot latency problems in service architectures. Features include both the collection and lookup of this data. </li> <li>With Zipkin, developers can identify the root cause of performance issues, latency, and errors in distributed systems, which is essential for maintaining the health and reliability of these systems.</li> <li>More Information</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Zipkin/#create_zipkin_server_with_docker_compose","title":"Create Zipkin Server With Docker Compose","text":"<ul> <li>Let's create a file name\u00a0<code>docker-compose.yml</code>, then add scripts as below:</li> </ul> docker-compose.yml<pre><code># This runs the zipkin and zipkin-mysql containers, using docker-compose's\n# default networking to wire the containers together.\n#\n# Note that this file is meant for learning Zipkin, not production deployments.\n\nversion: '3.7'\n\nservices:\n  storage:\n    image: openzipkin/zipkin-mysql\n    container_name: storage\n    command: --default-authentication-plugin=mysql_native_password\n    environment:\n      - MYSQL_ROOT_PASSWORD=zipkin\n      - MYSQL_DATABASE=zipkin\n      - MYSQL_USER=zipkin\n      - MYSQL_PASSWORD=zipkin\n    # Uncomment to expose the storage port for testing\n    # ports:\n    #   - 3306:3306\n    volumes:\n    - ./mysql-data:/var/lib/mysql:rw\n\n  # The zipkin process services the UI, and also exposes a POST endpoint that\n  # instrumentation can send trace data to. Scribe is disabled by default.\n  zipkin:\n    image: openzipkin/zipkin\n    container_name: zipkin\n    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables\n    environment:\n      - STORAGE_TYPE=mysql\n      # Point the zipkin at the storage backend\n      - MYSQL_HOST=storage\n      - MYSQL_USER=zipkin\n      - MYSQL_PASS=zipkin\n      - MYSQL_DB=zipkin\n      # Uncomment to enable scribe\n      # - SCRIBE_ENABLED=true\n      # Uncomment to enable self-tracing\n      # - SELF_TRACING_ENABLED=true\n      # Uncomment to enable debug logging\n      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG\n    ports:\n      # Port used for the Zipkin UI and HTTP Api\n      - 9411:9411\n      # Uncomment if you set SCRIBE_ENABLED=true\n      # - 9410:9410\n    depends_on:\n      - storage\n\n  # Adds a cron to process spans since midnight every hour, and all spans each day\n  # This data is served by http://192.168.99.100:8080/dependency\n  #\n  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies\n  dependencies:\n    image: openzipkin/zipkin-dependencies\n    container_name: dependencies\n    entrypoint: crond -f\n    environment:\n      - STORAGE_TYPE=mysql\n      - MYSQL_HOST=storage\n      # Add the baked-in username and password for the zipkin-mysql image\n      - MYSQL_USER=zipkin\n      - MYSQL_PASS=zipkin\n      # Uncomment to see dependency processing logs\n      # - ZIPKIN_LOG_LEVEL=DEBUG\n      # Uncomment to adjust memory used by the dependencies job\n      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G\n    depends_on:\n      - storage\n\nvolumes:\n  mysql-data:\n</code></pre> <ul> <li>In this <code>docker-compose.yml</code> we will create 3 services, in which the MySQL database  <code>storage</code> service is used for storing tracing information that the service Zipkin has received from <code>Reporter services</code>.</li> <li>Next, the <code>dependencies</code> service is a component of the distributed tracing system called Zipkin. It is used to analyze and visualize the dependencies between services in a distributed system.</li> <li>When multiple services are involved in processing a single request, the <code>dependencies</code> service can help identify which services depend on each other and how often they communicate. It analyzes the data collected by Zipkin tracing components to generate a dependency graph that shows how services are related to each other.</li> <li>The <code>dependencies</code> service is typically used in conjunction with other Zipkin components, such as <code>zipkin-server</code> and <code>zipkin-collector</code>, to provide a complete distributed tracing system for monitoring and troubleshooting microservices-based applications.</li> <li>Finally, the <code>zipkin</code> service is used to run the Zipkin server, which is the central component of the tracing system. It provides a web interface for querying and visualizing the tracing data, and also stores the data in a backend storage such as Elasticsearch or MySQL. The Docker image includes the Zipkin server and the default storage backend (in-memory) for testing purposes, as well as the UI and collector modules. The Zipkin UI is accessible via a web browser, allowing users to visualize and analyze the tracing data.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Zipkin/#testing","title":"Testing","text":"<ul> <li>Now you can use command\u00a0<code>docker-compose up</code>\u00a0to start your\u00a0<code>Zipkin</code>\u00a0server. Then access the URL <code>http://localhost:9411</code> then you will be the Zipkin UI as below.</li> </ul>","tags":["Docker"]},{"location":"Docker/Docker%20With%20Zipkin/#references","title":"References","text":"<ul> <li>zipkin.io</li> </ul>","tags":["Docker"]},{"location":"Docker/DockerFile%20Command%20Descriptions/","title":"DockerFile Command Descriptions","text":"","tags":["Docker"]},{"location":"Docker/DockerFile%20Command%20Descriptions/#all_dockerfile_command_descriptions","title":"All DockerFile Command Descriptions","text":"Commands Description <code>FROM</code> Sets the base image for subsequent <code>MAINTAINER</code> Sets the author field of the generated images <code>RUN</code> Execute commands in a new layer on top of the current image and commit the results <code>CMD</code> Allowed only once (if many then last one takes effect) <code>LABEL</code> Adds metadata to an image <code>EXPOSE</code> Informs container runtime that the container listens on the specified network ports at runtime <code>ENV</code> Sets an environment variable <code>ADD</code> Copy new files, directories, or remote file URLs from into the filesystem of the container <code>COPY</code> Copy new files or directories into the filesystem of the container <code>ENTRYPOINT</code> Allows you to configure a container that will run as an executable <code>VOLUME</code> Creates a mount point and marks it as holding externally mounted volumes from native host or other containers <code>USER</code> Sets the username or UID to use when running the image <code>WORKDIR</code> Sets the working directory for any RUN, CMD, ENTRYPOINT, COPY, and ADD commands <code>ARG</code> Defines a variable that users can pass at build-time to the builder using --build-arg <code>ONBUILD</code> Adds an instruction to be executed later, when the image is used as the base for another build <code>STOPSIGNAL</code> Sets the system call signal that will be sent to the container to exit","tags":["Docker"]},{"location":"Docker/DockerFile%20Command%20Descriptions/#reference","title":"Reference","text":"<ul> <li>docker labs</li> </ul>","tags":["Docker"]},{"location":"Java/Java%208%20Functional%20Interface/","title":"Java 8 Functional Interface","text":"","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#definition","title":"Definition","text":"<ul> <li>An interface that only contain one abstract method is called <code>functional interface</code> (A functional interface may contain one or more default methods or static methods). It can be called as Single Abstract Method (SAM) also.</li> <li>We can use annotation <code>@FunctionalInterface</code> to declare functional interface. However, there are no issue if you don't use this annotation, using this annotation just ensures for compile process which will throw exception if there are 2 abstract methods.</li> </ul> Application.java<pre><code>// functional interface without anotation\n\npublic interface Application {\n\npublic String getApplicationId(String appNumber);\n\n}\n</code></pre> Application.java<pre><code>// functional interface with anotation\n\n@FunctionalInterface\npublic interface Application {\n\npublic String getApplicationId(String appNumber);\n\n}\n</code></pre> <ul> <li> <p>The main benefit of java 8 <code>functional interface</code> is helping us can use Java 8 Lambda Expression to declare <code>body method</code> and avoid using anonymous class.</p> </li> <li> <p>Java 8 collection API has been rewritten and new Stream API is introduced that uses a lot of functional interface in <code>java.util.function</code> package. Some of the useful java 8 function interface are list as in the table below.</p> </li> </ul> Functional Interface Description Method Signature Consumer Represents an operation that accepts a single input argument of type <code>T</code> and returns no result. <code>void accept(T t)</code> Supplier Represents a supplier of results, providing a single value of type <code>T</code>. <code>T get()</code> Function Represents a function that accepts one argument of type <code>T</code> and produces a result of type <code>R</code>. <code>R apply(T t)</code> Predicate Represents a predicate (boolean-valued function) of one argument. <code>boolean test(T t)</code> UnaryOperator Represents an operation on a single operand of type <code>T</code> that produces a result of type <code>T</code>. Inherits from <code>Function&lt;T, T&gt;</code>. <code>T apply(T t)</code> BinaryOperator Represents an operation upon two operands of the same type, producing a result of the same type as the operands. <code>T apply(T t1, T t2)</code> BiFunction Represents a function that accepts two arguments of types <code>T</code> and <code>U</code> and produces a result of type <code>R</code>. <code>R apply(T t, U u)</code> BiPredicate Represents a predicate (boolean-valued function) of two arguments. <code>boolean test(T t, U u)</code> BiConsumer Represents an operation that accepts two input arguments of types <code>T</code> and <code>U</code> and returns no result. <code>void accept(T t, U u)</code>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#implementation","title":"Implementation","text":"<ul> <li>There are 4 ways to implement the functional interface.</li> <li>For example we have a functional interface as below.</li> </ul> Application.java<pre><code>package com.java.core.functionalinterface;  \n\n@FunctionalInterface  \npublic interface Application {  \nString getApplicationId(String appNumber);  \n\n}\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#anonymous_inner_class","title":"Anonymous Inner Class","text":"<ul> <li>We can implement the <code>Application</code> functional interface using an anonymous class.</li> </ul> AnonymousImpl.java<pre><code>package com.java.core.functionalinterface;\n\n\npublic class AnonymousImpl {\n\n    public String execute() {\n        Application application = new Application() {\n            @Override\n            public String getApplicationId(String appNumber) {\n                return \"This is appId: \" + appNumber;\n            }\n        };\n        return \"AnonymousImpl: \" + application.getApplicationId(\"12345\");\n    }\n\n}\n</code></pre> <ul> <li>Then we can use it like this below.</li> </ul> Java8FunctionalInterface.java<pre><code>package com.java.core.functionalinterface;\n\npublic class Java8FunctionalInterface {\n\n    public static void main(String[] args) {\n        AnonymousImpl anonymous = new AnonymousImpl();\n        System.out.println(anonymous.execute());\n    }\n\n}\n</code></pre> <pre><code>AnonymousImpl: This is appId: 12345\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#lambda_expression","title":"Lambda Expression","text":"<ul> <li>Next we can also use <code>lambda</code> expression to implement the <code>Application</code> functional interface.</li> </ul> LambdaExpressionImpl.java<pre><code>package com.java.core.functionalinterface;\n\npublic class LambdaExpressionImpl {\n\n    public String execute() {\n        Application application = (appNumber -&gt; \"This is appId: \" + appNumber);\n        return \"LambdaExpressionImpl: \" + application.getApplicationId(\"56789\");\n    }\n\n}\n</code></pre> <ul> <li>Then we can use it like this below.</li> </ul> Java8FunctionalInterface.java<pre><code>package com.java.core.functionalinterface;\n\npublic class Java8FunctionalInterface {\n\n    public static void main(String[] args) {\n        AnonymousImpl anonymous = new AnonymousImpl();\n        System.out.println(anonymous.execute());\n\n         LambdaExpressionImpl lambdaExpression = new LambdaExpressionImpl();\n        System.out.println(lambdaExpression.execute());\n    }\n\n}\n</code></pre> <pre><code>AnonymousImpl: This is appId: 12345\nLambdaExpressionImpl: This is appId: 56789\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#method_referenced","title":"Method Referenced","text":"<ul> <li>Next we can also use <code>method referenced</code> to implement the <code>Application</code> functional interface.</li> </ul> MethodReferenceImpl.java<pre><code>package com.java.core.functionalinterface;\n\npublic class MethodReferenceImpl {\n\n    public String execute() {\n        Application application = MethodReferenceImpl::getApplicationId;\n        return \"MethodReferenceImpl: \" + application.getApplicationId(\"10111213\");\n    }\n\n    public static String getApplicationId(String appNumber) {\n        return \"This is appId: \" + appNumber;\n    }\n\n}\n</code></pre> <ul> <li>Then we can use it like this below.</li> </ul> Java8FunctionalInterface.java<pre><code>package com.java.core.functionalinterface;\n\npublic class Java8FunctionalInterface {\n\n    public static void main(String[] args) {\n        AnonymousImpl anonymous = new AnonymousImpl();\n        System.out.println(anonymous.execute());\n\n         LambdaExpressionImpl lambdaExpression = new LambdaExpressionImpl();\n        System.out.println(lambdaExpression.execute());\n\n        MethodReferenceImpl methodReference = new MethodReferenceImpl();\n        System.out.println(methodReference.execute());\n    }\n\n}\n</code></pre> <pre><code>AnonymousImpl: This is appId: 12345\nLambdaExpressionImpl: This is appId: 56789\nMethodReferenceImpl: This is appId: 10111213\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#class_implementation","title":"Class Implementation","text":"<ul> <li>Next we can also use <code>Class implementation</code> to implement the <code>Application</code> functional interface.</li> </ul> ApplicationImpl.java<pre><code>package com.java.core.functionalinterface;\n\npublic class ApplicationImpl implements Application {\n\n    @Override\n    public String getApplicationId(String appNumber) {\n        return \"This is appId: \" + appNumber;\n    }\n\n}\n</code></pre> ClassImpl.java<pre><code>package com.java.core.functionalinterface;\n\npublic class ClassImpl {\n\n    public String execute() {\n        Application application = new ApplicationImpl();\n        return \"ClassImpl: \" + application.getApplicationId(\"15161718\");\n    }\n\n}\n</code></pre> <ul> <li>Then we can use it like this below.</li> </ul> Java8FunctionalInterface.java<pre><code>package com.java.core.functionalinterface;\n\npublic class Java8FunctionalInterface {\n\n    public static void main(String[] args) {\n        AnonymousImpl anonymous = new AnonymousImpl();\n        System.out.println(anonymous.execute());\n\n         LambdaExpressionImpl lambdaExpression = new LambdaExpressionImpl();\n        System.out.println(lambdaExpression.execute());\n\n        MethodReferenceImpl methodReference = new MethodReferenceImpl();\n        System.out.println(methodReference.execute());\n\n        ClassImpl classImpl = new ClassImpl();\n        System.out.println(classImpl.execute());\n    }\n\n}\n</code></pre> <pre><code>AnonymousImpl: This is appId: 12345\nLambdaExpressionImpl: This is appId: 56789\nMethodReferenceImpl: This is appId: 10111213\nClassImpl: This is appId: 15161718\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#see_also","title":"See Also","text":"<ul> <li>Java 8 Lambda Expression</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Functional%20Interface/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Default%20Method/","title":"Java 8 Interface With Default Method","text":"","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Default%20Method/#definition","title":"Definition","text":"<ul> <li> <p>Before the Java 8 an interface has one or multiple implementations, if one or more methods are added to the interface, all the implementations will be forced to implement them too. Otherwise, the design will just break down.</p> </li> <li> <p>Default interface methods are an efficient way to deal with this issue. They\u00a0allow us to add new methods to an interface that are automatically available in the implementations. Therefore, we don\u2019t need to modify the implementing classes.</p> </li> <li> <p>In this way,\u00a0backward compatibility is neatly preserved\u00a0without having to refactor the implementers.</p> <ul> <li>Default methods help us expand interface without broken classes that implemented.</li> <li>Default methods will help us in avoiding utility classes.</li> <li>Default methods will help us in removing base implementation classes, we can provide default implementation and the implementation classes can choose which one to override.</li> </ul> </li> <li> <p>If there are any class that inherit a same default method, the this default method will not be valid. The same thing is that a default method can not override a method from java.lang.object because Object is the base class of all classes in java. So, If we have methods in Object class which are defined as default methods in interface, the methods in Object class will be always used. This is the reason why we do not have any default methods can override methods of Object class.</p> </li> </ul> <pre><code>// default method of interface example\npackage com.java.core.defaultmethodinterface;\n\npublic interface FirstInterface {\n\n    void firstMethod(String string);\n\n    default void log(String string) {\n        System.out.println(\"FirstInterface default method: \" + string);\n    }\n\n}\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Default%20Method/#multiple_interface_inheritance_rules","title":"Multiple Interface Inheritance Rules","text":"<ul> <li>As we know that, Java does not allow multi inheritances with class because the compiler does not know choose which method of super class to use. So, this happens the same for default method because if you implement a class from 2 interface Ex: FirstInterface and SecondInterface, the compiler does not know choosing which one to execute. Multi inheritances is a normal thing in java, we usually see this issue in java core classes, also most of enterprise and framework application. To ensure this issue can not with interface, class has to implement common methods default from 2 interface. So, as in the example below, class have to implement log() method for compiler can not throw exception.</li> </ul> FirstInterface.java<pre><code>package com.java.core.defaultmethodinterface;\n\n// default method of first interface example\npublic interface FirstInterface {\n\n    void firstMethod(String string);\n\n    default void log(String string) {\n        System.out.println(\"FirstInterface default method: \" + string);\n    }\n\n}\n</code></pre> SecondInterface.java<pre><code>package com.java.core.defaultmethodinterface;\n\n// default method of second interface example\npublic interface SecondInterface {\n\n    void secondMethod(String string);\n\n    default void log(String string) {\n        System.out.println(\"SecondInterface default method: \" + string);\n    }\n\n}\n</code></pre> MyImpl.java<pre><code>package com.java.core.defaultmethodinterface;\n\n// implementation class which implement 2 interfaces above\npublic class MyImpl implements FirstInterface, SecondInterface {\n\n    @Override\n    public void firstMethod(String string) {\n        System.out.println(\"MyImpl firstMethod logging: \" + string);\n    }\n\n    @Override\n    public void secondMethod(String string) {\n        System.out.println(\"MyImpl secondMethod logging: \" + string);\n    }\n\n    @Override\n    public void log(String string) {\n        FirstInterface.super.log(string);\n        SecondInterface.super.log(string);\n        System.out.println(\"MyImpl logging: \" + string);\n    }\n\n}\n</code></pre> <ul> <li>As we can see that in the <code>MyImpl</code> when we implement 2 interfaces, we must implement the default method <code>log</code> if not we will see the compile error. In the <code>MyImpl</code> we can also use the default methods from <code>FirstInterface</code> and <code>SecondInterface</code> also.</li> </ul> JavaDefaultMethodInterfaceMain.java<pre><code>package com.java.core.defaultmethodinterface;\n\n// Java Main class\npublic class JavaDefaultMethodInterfaceMain {\n\n    public static void main(String[] args) {\n\n        FirstInterface firstInterface = new MyImpl();\n        SecondInterface secondInterface = new MyImpl();\n\n        firstInterface.firstMethod(\"first method call\");\n        firstInterface.log(\"fistInterface calls\");\n        System.out.println(\"------------------------------\");\n        secondInterface.secondMethod(\"second method call\");\n        secondInterface.log(\"secondInterface calls\");\n    }\n\n}\n</code></pre> <ul> <li>Finally, we have the result as below.</li> </ul> <pre><code>MyImpl firstMethod logging: first method call\nFirstInterface default method: fistInterface calls\nSecondInterface default method: fistInterface calls\nMyImpl logging: fistInterface calls\n------------------------------\nMyImpl secondMethod logging: second method call\nFirstInterface default method: secondInterface calls\nSecondInterface default method: secondInterface calls\nMyImpl logging: secondInterface calls\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Default%20Method/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Static%20Method/","title":"Java 8 Interface With Static Method","text":"","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Static%20Method/#definition","title":"Definition","text":"<ul> <li> <p>Java interface static method is similar to default method except that we  can not override them in the implementation classes. This feature helps us in avoiding undesired results in case of poor implementation in implementation classes.</p> </li> <li> <p>Java interface static method is part of interface, we can not use it for implementation class objects.</p> </li> <li>Java interface static methods are good for providing utility methods, for example null check, collection sorting etc.</li> <li>Java interface static method helps us in providing security by not allowing implementation classes to override them.</li> <li>We can not define static method in methods of object class, then we can get the error \"this static method can not hide the instance method from Object\". This is no acceptable in java, when object is a base class for all classes, we can not have a static method and other method with the same format.</li> <li>We can use static methods to remove utility methods as Collections and make methods can connect to interface then we can easily find and use these methods.</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Static%20Method/#example","title":"Example","text":"SampleStaticInterface.java<pre><code>package com.java.core.staticmethodinterface;\n\npublic interface SampleStaticInterface {\n\n    default void print(String string) {\n        if(!isNull(string)) {\n            System.out.println(\"SampleStaticInterface print: \" + string);\n        }\n    }\n\n    static boolean isNull(String str) {\n        System.out.println(\"SampleStaticInterface null check\");\n        return str == null || (\"\".equals(str));\n    }\n\n}\n</code></pre> MyImpl.java<pre><code>package com.java.core.staticmethodinterface;\n\npublic class MyImpl implements SampleStaticInterface {\n\n    public boolean isNull(String str) {\n        System.out.println(\"MyImpl null check: \" + str);\n        return str == null;\n    }\n\n}\n</code></pre> JavaStaticMethodInterfaceMain.java<pre><code>package com.java.core.staticmethodinterface;\n\n//test\npublic class JavaStaticMethodInterfaceMain {\n\n    public static void main(String[] args) {\n        MyImpl myImpl = new MyImpl();\n        myImpl.print(\"Expect null check from static method interface!\");\n        myImpl.isNull(\"Expect null check from MyImpl!\");\n    }\n\n}\n</code></pre> <ul> <li>Then we can see the results in the log as below:</li> </ul> <pre><code>SampleStaticInterface null check\nSampleStaticInterface print: Expect null check from static method interface!\nMyImpl null check: Expect null check from MyImpl!\n\nProcess finished with exit code 0\n</code></pre> <ul> <li>If we make the interface method from static to default, we will get following output:</li> </ul> <pre><code>MyImpl null check: Expect null check from static method interface!\nSampleStaticInterface print: Expect null check from static method interface!\nMyImpl null check: Expect null check from MyImpl!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Interface%20With%20Static%20Method/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Lambda%20Expression/","title":"Java 8 Lambda Expression","text":"","tags":["Java"]},{"location":"Java/Java%208%20Lambda%20Expression/#definition","title":"Definition","text":"<ul> <li> <p>A lambda expression is a short block of code which takes in parameters and returns a value. <code>Lambda expressions</code> are similar to methods, but they do not need a name and they can be implemented right in the body of a method.</p> </li> <li> <p>Java 8 introduced an arrow(function pointer) <code>-&gt;</code>. This is used in Lambda methods with the main purpose is separating a Lambda method into 2 parts: parameters and body method/function(Lambda function body).</p> </li> </ul> <pre><code>(int a, int b) -&gt; {do something};\n</code></pre> <ul> <li><code>Lambda expression</code> can be defined as an anonymous function because it has enough characteristics of a function: parameters and body. The parameters of a function may or may not be required and the body may have or have not the return value.</li> <li>Base on the input parameters, the <code>lambda expression</code> will process codes in body to return the result.</li> <li><code>Lambda expression</code> provides an implementation way for method defined in Java 8 Functional Interface. In addition, <code>lambda expression</code> is used in libraries of Collection as <code>filter</code>, <code>map</code>, <code>findAny</code>...</li> <li><code>Lambda expression</code> helps us to reduce the number of codes and support sequential and parallel streams effectively in <code>Stream API</code>.</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Lambda%20Expression/#example","title":"Example","text":"Hello.java<pre><code>@FunctionalInterface\npublic interface Hello {\n\n    public String sayHello(String name);\n\n}\n</code></pre> LambdaExpression.java<pre><code>public class LambdaExpression {\n\n    public static void main(String[] args) {\n\n        Hello hello = (name) -&gt; \"Hello \" + name;\n\n        System.out.println(hello.sayHello(\"Lambda\"));\n\n    }\n\n}\n</code></pre> <pre><code>//the result in the terminal\n\n\nHello Lambda\n</code></pre>","tags":["Java"]},{"location":"Java/Java%208%20Lambda%20Expression/#see_also","title":"See Also","text":"<ul> <li>Java 8 Functional Interface</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Optional/","title":"Java 8 Optional","text":"","tags":["Java"]},{"location":"Java/Java%208%20Optional/#definition","title":"Definition","text":"<ul> <li>The Optional class in Java 8 is\u00a0a container object which is used to contain a value that might or might not be present. It was introduced as a way to help reduce the number of <code>NullPointerExceptions</code> that occur in Java code. There are various methods available in the API to deal with the <code>Optional</code> in a convenient and reliable manner.</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Optional/#example","title":"Example","text":"<ul> <li> <p>Create an <code>Optional</code> with will contain non-null value. <pre><code>// Ex: Create an Optional Object contains non-null value\nString str = \"abc\";\nOptional&lt;String&gt; opt = Optional.of(str);\n</code></pre></p> </li> <li> <p>Create an <code>Optional</code> which may contain value or null. <pre><code>// Ex: Create an Optional Object contains value\n// or empty if the input parameter is null\nOptional&lt;String&gt; opt = Optional.ofNullable(str);\n</code></pre></p> </li> <li> <p>Why use <code>Optional.of</code> over <code>Optional.ofNullable</code> ?</p> </li> </ul> <pre><code> String foobar = &lt;value or null&gt;\n Optional.of(foobar); //May throw NullPointerException\n Optional.ofNullable(foobar); //Safe from NullPointerException\n</code></pre> <ul> <li>Answer: If we expect that our foobar is never null due to the program logic, it's much better to use <code>Optional.of(foobar)</code> as we will see a NullPointerException which will indicate that our program has a bug. If we use <code>Optional.ofNullable(foobar)</code> and the foobar happens to be null due to the bug, then our program will silently continue working incorrectly, which maybe a bigger disaster. This way of error may occur much later and it would be much harder to understand at which point it went wrong.</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Stream/","title":"Java 8 Stream","text":"","tags":["Java"]},{"location":"Java/Java%208%20Stream/#what_is_the_java_8_stream","title":"What Is The Java 8 Stream?","text":"<ul> <li>Java provides a new additional package in Java 8 called java.util.stream. This package consists of classes, interfaces and enum to allows functional-style operations on the elements. You can use stream by importing java.util.stream package.</li> <li>Stream provides following features:<ul> <li>Stream does not store elements. It simply conveys elements from a source such as a data structure, an array, or an I/O channel, through a pipeline of computational operations.</li> <li>Stream is functional in nature. Operations performed on a stream does not modify it's source. For example, filtering a Stream obtained from a collection produces a new Stream without the filtered elements, rather than removing elements from the source collection.</li> <li>Stream is lazy and evaluates code only when required.</li> <li>The elements of a stream are only visited once during the life of a stream. Like an Iterator, a new stream must be generated to revisit the same elements of the source.</li> </ul> </li> <li>You can use stream to filter, collect, print, and convert from one data structure to other etc. In the following examples, we have apply various operations with the help of stream.</li> </ul>","tags":["Java"]},{"location":"Java/Java%208%20Stream/#java_stream_interface_methods","title":"Java Stream Interface Methods","text":"Methods Description <code>boolean allMatch(Predicate&lt;? super T&gt; predicate)</code> It returns all elements of this stream which match the provided predicate. If the stream is empty then true is returned and the predicate is not evaluated. <code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code> It returns any element of this stream that matches the provided predicate. If the stream is empty then false is returned and the predicate is not evaluated. <code>static &lt;T&gt; Stream.Builder&lt;T&gt; builder()</code> It returns a builder for a Stream. <code>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</code> It performs a mutable reduction operation on the elements of this stream using a Collector. A Collector encapsulates the functions used as arguments to collect(Supplier, BiConsumer, BiConsumer), allowing for reuse of collection strategies and composition of collect operations such as multiple-level grouping or partitioning. <code>&lt;R&gt; R collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</code> It performs a mutable reduction operation on the elements of this stream. A mutable reduction is one in which the reduced value is a mutable result container, such as an ArrayList, and elements are incorporated by updating the state of the result rather than by replacing the result. <code>static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</code> It creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream. The resulting stream is ordered if both of the input streams are ordered, and parallel if either of the input streams is parallel. When the resulting stream is closed, the close handlers for both input streams are invoked. <code>long count()</code> It returns the count of elements in this stream. This is a special case of a reduction. <code>Stream&lt;T&gt; distinct()</code> It returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream. <code>static &lt;T&gt; Stream&lt;T&gt; empty()</code> It returns an empty sequential Stream. <code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code> It returns a stream consisting of the elements of this stream that match the given predicate. <code>Optional&lt;T&gt; findAny()</code> It returns an Optional describing some element of the stream, or an empty Optional if the stream is empty. <code>Optional&lt;T&gt; findFirst()</code> It returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty. If the stream has no encounter order, then any element may be returned. <code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</code> It returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is closed after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) <code>DoubleStream flatMapToDouble(Function&lt;? super T,? extends DoubleStream&gt; mapper)</code> It returns a DoubleStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is closed after its contents have placed been into this stream. (If a mapped stream is null an empty stream is used, instead.) <code>IntStream flatMapToInt(Function&lt;? super T,? extends IntStream&gt; mapper)</code> It returns an IntStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is closed after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) <code>LongStream flatMapToLong(Function&lt;? super T,? extends LongStream&gt; mapper)</code> It returns a LongStream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is closed after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) <code>void forEach(Consumer&lt;? super T&gt; action)</code> It performs an action for each element of this stream. <code>void forEachOrdered(Consumer&lt;? super T&gt; action)</code> It performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order. <code>static &lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</code> It returns an infinite sequential unordered stream where each element is generated by the provided Supplier. This is suitable for generating constant streams, streams of random elements, etc. <code>static &lt;T&gt; Stream&lt;T&gt; iterate(T seed,UnaryOperator&lt;T&gt; f)</code> It returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc. <code>Stream&lt;T&gt; limit(long maxSize)</code> It returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length. <code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T,? extends R&gt; mapper)</code> It returns a stream consisting of the results of applying the given function to the elements of this stream. <code>DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code> It returns a DoubleStream consisting of the results of applying the given function to the elements of this stream. <code>IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper)</code> It returns an IntStream consisting of the results of applying the given function to the elements of this stream. <code>LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper)</code> It returns a LongStream consisting of the results of applying the given function to the elements of this stream. <code>Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator)</code> It returns the maximum element of this stream according to the provided Comparator. This is a special case of a reduction. <code>Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator)</code> It returns the minimum element of this stream according to the provided Comparator. This is a special case of a reduction. <code>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</code> It returns elements of this stream match the provided predicate. If the stream is empty then true is returned and the predicate is not evaluated. <code>@SafeVarargs static &lt;T&gt; Stream&lt;T&gt; of(T... values)</code> It returns a sequential ordered stream whose elements are the specified values. <code>static &lt;T&gt; Stream&lt;T&gt; of(T t)</code> It returns a sequential Stream containing a single element. <code>Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action)</code> It returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream. <code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code> It performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any. <code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code> It performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value. <code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code> It performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions. <code>Stream&lt;T&gt; skip(long n)</code> It returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream. If this stream contains fewer than n elements then an empty stream will be returned. <code>Stream&lt;T&gt; sorted()</code> It returns a stream consisting of the elements of this stream, sorted according to natural order. If the elements of this stream are not Comparable, a java.lang.ClassCastException may be thrown when the terminal operation is executed. <code>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator)</code> It returns a stream consisting of the elements of this stream, sorted according to the provided Comparator. <code>Object[] toArray()</code> It returns an array containing the elements of this stream. <code>&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator)</code> It returns an array containing the elements of this stream, using the provided generator function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing.","tags":["Java"]},{"location":"Java/Java%208/","title":"Java 8 Introduction","text":"","tags":["Java"]},{"location":"Java/Java%208/#java_8_introduction_1","title":"Java 8 Introduction","text":"<ul> <li><code>Java 8</code> is a major feature release of Java programming language development. Its initial version was released on 18 March 2014. With the Java 8 release, Java provided supports for functional programming, new JavaScript engine, new APIs for date time manipulation, new streaming API, etc.</li> <li>Some of the key features introduced in Java 8 include:</li> </ul> Feature Description Lambda Expressions A new syntax for writing anonymous functions that makes it easier  to write code that processes collections and streams of data. Streams A new set of APIs that make it easier to work with collections and perform bulk  operations on data. Default Methods Default methods A new feature that allows interfaces to have default method  implementations, making it easier to add new methods to existing interfaces without breaking compatibility with existing implementations. Date and time API A new API for working with dates and times that is more flexible and  easier to use than the old java.util.Date and java.util.Calendar classes. Nashorn JavaScript engine A new JavaScript engine that allows you to run JavaScript  code directly from within your Java applications. Type annotations A new feature that allows you to annotate your code with additional  information about types, making it easier to catch errors and improve code quality. Optional A new class that provides a way to represent an object that may or may not be present. It is designed to reduce the number of null pointer exceptions in Java code, and to encourage developers to write more robust and safer code. Method references A shorthand syntax for referring to existing methods or constructors. They provide a way to pass behavior around as if it were a value, which can make code more concise and expressive. Method references allow you to create a lambda expression that refers to an existing method or constructor by name. There are four types of method references: static method references, instance method references, constructor references, and arbitrary object instance method references. Interfaces with static methods A new feature that allows interfaces to declare static methods, which are methods that belong to the interface itself and can be called without an instance of the interface. This feature makes it easier to define utility methods that are related to the interface's purpose and can be reused by all implementations of the interface. It also provides a way to organize related utility methods in a single place, rather than scattering them across different classes.","tags":["Java"]},{"location":"Java/Java%208/#see_also","title":"See Also","text":"<ul> <li>Java 8 Interface With Static Method</li> <li>Java 8 Interface With Default Method</li> <li>Java 8 Optional</li> <li>Java 8 Functional Interface</li> <li>Java 8 Lambda Expression</li> <li>Java 8 Stream</li> </ul>","tags":["Java"]},{"location":"Java/Java%208/#references","title":"References","text":"<ul> <li>tutorialspoint</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Annotations/","title":"Java Annotations","text":"","tags":["Java"]},{"location":"Java/Java%20Annotations/#definition","title":"Definition","text":"<ul> <li>Annotations, a form of metadata, provide data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate. Annotation introduced from Java 5. Annotations used in the source codes will be compiled into bytecode and then reflection will be used to query the information metadata and take appropriate action. We can annotate classes (classes), methods (methods), variables (variables), packages (packages) and parameters (prameters) in Java.</li> <li> <p>There are 3 purposes for using Annotations:</p> <ul> <li>Information for the compiler\u00a0\u2014 Annotations can be used by the compiler to detect errors or suppress warnings.</li> <li>Compile-time and deployment-time processing\u00a0\u2014 Software tools can process annotation information to generate code, XML files, and so forth.</li> <li>Runtime processing\u00a0\u2014 Some annotations are available to be examined at runtime.</li> </ul> </li> <li> <p>More information</p> </li> <li> <p>The hierarchy of annotation in java 8 is showed as below.</p> </li> </ul> <p></p> <ul> <li>Table of General Purpose Annotations in Java 8.</li> </ul> Annotation Description @FunctionalInterface Declares an interface as a functional interface (one abstract method). @Repeatable Allows an annotation to be applied more than once to the same element. @Documented Indicates that an annotation should be included in the javadoc. @Retention Specifies the retention policy of an annotation. @Target Specifies the kinds of elements an annotation can be applied to. @Inherited Indicates that an annotation is inherited by subclasses. @Override Indicates that a method overrides a method in a superclass. @Deprecated Marks a method or class as deprecated. @SafeVarargs Suppresses unsafe operation warnings for varargs. @SuppressWarnings Suppresses specified compiler warnings. <ul> <li> <p>In the annotaiton @Retention we have some possible configuration values are:</p> <ul> <li><code>SOURCE</code>\u00a0\u2014 indicates that this annotation is available only in the source code and ignored by the Compiler and JVM, and hence not available in runtime.</li> <li><code>CLASS</code>\u00a0\u2014 indicates that this annotation is available to the Compiler but not JVM, and hence not available during runtime.</li> <li><code>RUNTIME</code>\u00a0\u2014 indicates that the annotation is available to JVM, and hence can be used in runtime.</li> </ul> </li> <li> <p>Also in the @Target we have some possible configuration values are:</p> <ul> <li><code>ANNOTATION_TYPE</code>\u00a0\u2014 means that the annotation can be applied to other annotations.</li> <li><code>CONSTRUCTOR</code>\u00a0\u2014 can be applied to a constructor.</li> <li><code>FIELD</code>\u00a0\u2014 can be applied to a field or property.</li> <li><code>LOCAL_VARIABLE</code>\u00a0\u2014 can be applied to a local variable.</li> <li><code>METHOD</code>\u2014 can be applied to a method.</li> <li><code>PACKAGE</code>\u2014 can be applied to a package declaration.</li> <li><code>PARAMETER</code>\u00a0\u2014 can be applied to the parameters of a method.</li> <li><code>TYPE</code>\u00a0\u2014\u00a0can be applied to\u00a0<code>Class</code>,\u00a0<code>Interface</code>,\u00a0<code>Annotation</code>,\u00a0or enum declaration.</li> <li><code>PACKAGE</code>\u2014 can be applied to package declaration.</li> <li><code>TYPE_PARAMETER</code>\u00a0\u2014 can be applied to the type parameter declaration.</li> <li><code>TYPE_USE</code>\u00a0\u2014 can be applied to any type</li> </ul> </li> <li> <p>Table of Meta Annotations</p> </li> </ul> Annotation Description @Retention Specifies the retention policy of an annotation (e.g., runtime, class, source). @Documented Indicates that an annotation should be included in the javadoc documentation. @Target Specifies the kinds of elements an annotation can be applied to (e.g., methods, fields, types). @Inherited Indicates that an annotation is inherited by subclasses. @Repeatable Allows an annotation to be applied more than once to the same element.","tags":["Java"]},{"location":"Java/Java%20Annotations/#create_a_custom_annotation","title":"Create A Custom Annotation.","text":"<ul> <li>To create a custom annotation please use the keyword <code>@interface</code> as below.</li> </ul> CustomAnnotation.java<pre><code>public @interface GroupMark {\n\n}\n</code></pre> <ul> <li>Then we must define two mandatory attributes for the custom annotation which are @Target and @Retention as below.</li> </ul> CustomAnnotation.java<pre><code>package com.java.core.annotation;  \n\nimport java.lang.annotation.ElementType;  \nimport java.lang.annotation.Retention;  \nimport java.lang.annotation.RetentionPolicy;  \nimport java.lang.annotation.Target;  \n\n@Retention(RetentionPolicy.RUNTIME)  \n@Target({ElementType.FIELD, ElementType.TYPE})  \npublic @interface GroupMark {\n\n}\n</code></pre> <ul> <li> <p>For example, to specify that the annotation applies to classes and fields, we need to add\u00a0<code>@Target({ElementType.FIELD, ElementType.TYPE})</code>, which specifies that this annotation only applies to classes and fields, and\u00a0<code>@Retention(RetentionPolicy.RUNTIME)</code>, which specifies that this annotation must be available at runtime.</p> </li> <li> <p>Next, we can add the fields to the custom annotation. In this case, we need\u00a0<code>groupName</code>\u00a0and\u00a0<code>usedInAnotherGroup</code>.</p> </li> </ul> GroupNameEnum<pre><code>package com.java.core.annotation;\n\npublic enum GroupNameEnum {\n    HUMAN,\n    ANIMAL\n}\n</code></pre> CustomAnnotation.java<pre><code>package com.java.core.annotation;  \n\nimport java.lang.annotation.ElementType;  \nimport java.lang.annotation.Retention;  \nimport java.lang.annotation.RetentionPolicy;  \nimport java.lang.annotation.Target;  \n\n@Retention(RetentionPolicy.RUNTIME)  \n@Target({ElementType.FIELD, ElementType.TYPE})  \npublic @interface GroupMark {  \n\n    GroupNameEnum groupName();  \n\n    boolean usedInAnotherGroup() default false;  \n\n}\n</code></pre> <ul> <li>Then now, Let's create classes which use the custom annotation above for class and field.</li> </ul> DogDto.java<pre><code>package com.java.core.annotation;\n\n@GroupMark(groupName = GroupNameEnum.ANIMAL)\npublic class DogDto {\n\n    private String name;\n    private String food;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getFood() {\n        return food;\n    }\n\n    public void setFood(String food) {\n        this.food = food;\n    }\n}\n</code></pre> PersonDto.java<pre><code>package com.java.core.annotation;\n\n@GroupMark(groupName = GroupNameEnum.HUMAN)\npublic class PersonDto {\n\n    private String firstName;\n    private String lastName;\n    private String age;\n    private String address;\n\n    @GroupMark(groupName = GroupNameEnum.ANIMAL, usedInAnotherGroup = true)\n    private DogDto pet;\n\n    public PersonDto() {\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getAge() {\n        return age;\n    }\n\n    public void setAge(String age) {\n        this.age = age;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public DogDto getPet() {\n        return pet;\n    }\n\n    public void setPet(DogDto pet) {\n        this.pet = pet;\n    }\n}\n</code></pre> <ul> <li>Now, let's create the main class and use Java Reflection to read the annotation <code>GroupMark</code> details at runtime as below.</li> </ul> AnnotationMain.java<pre><code>package com.java.core.annotation;\n\nimport java.lang.reflect.Field;\nimport java.text.MessageFormat;\nimport java.util.Objects;\n\npublic class AnnotationMain {\n\n    private static final String PARENT_GROUP_MESSAGE = \"Class: {0} has groupName: {1} and usedInAnotherGroup: {2}\";\n    private static final String CHILD_GROUP_MESSAGE = \"Class: {0} contains child group {1} which has groupName: {2} and usedInAnotherGroup: {3}\";\n\n\n    public static void main(String[] args) throws IllegalAccessException {\n        PersonDto personDto = new PersonDto();\n        personDto.setFirstName(\"John\");\n        personDto.setLastName(\"Wick\");\n        personDto.setAge(\"29\");\n        personDto.setAddress(\"3/115 Binh Thuan\");\n\n        DogDto dogDto = new DogDto();\n        dogDto.setName(\"Pig Bull\");\n        dogDto.setFood(\"meat\");\n        personDto.setPet(dogDto);\n\n        printGroupInformation(personDto);\n        printGroupInformation(dogDto);\n    }\n\n    private static void printGroupInformation(Object object) {\n        if (Objects.isNull(object) || !object.getClass().isAnnotationPresent(GroupMark.class)) {\n            return;\n        }\n        GroupMark groupMark = object.getClass().getAnnotation(GroupMark.class);\n        System.out.println(MessageFormat.format(PARENT_GROUP_MESSAGE,\n                object.getClass().getSimpleName(),\n                groupMark.groupName(),\n                groupMark.usedInAnotherGroup()));\n        for (Field field : object.getClass().getDeclaredFields()) {\n            GroupMark childGroupMark = field.getAnnotation(GroupMark.class);\n            if (Objects.nonNull(childGroupMark)) {\n                System.out.println(MessageFormat.format(CHILD_GROUP_MESSAGE,\n                        object.getClass().getSimpleName(),\n                        field.getType().getSimpleName(),\n                        childGroupMark.groupName(),\n                        childGroupMark.usedInAnotherGroup()));\n            }\n        }\n    }\n\n}\n</code></pre> <ul> <li>This would give the output as below.</li> </ul> <pre><code>Class: PersonDto has groupName: HUMAN and usedInAnotherGroup: false\nClass: PersonDto contains child group DogDto which has groupName: ANIMAL and usedInAnotherGroup: true\nClass: DogDto has groupName: ANIMAL and usedInAnotherGroup: false\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java"]},{"location":"Java/Java%20Annotations/#see_also","title":"See Also","text":"<ul> <li>Java Reflection</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Annotations/#references","title":"References","text":"<ul> <li>Reflectoring.io</li> <li>Full Source Code</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Collection%20Framework/","title":"Java Collection Framework","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#what_is_java_collection_framework","title":"What Is Java Collection Framework?","text":"<ul> <li>The Java platform includes a\u00a0<code>collections framework</code>. A\u00a0<code>collection</code>\u00a0is an object that represents a group of objects (such as the classic\u00a0Vector\u00a0class). A <code>collections framework</code> is a unified architecture for representing and manipulating collections, enabling collections to be manipulated independently of implementation details.</li> <li>Below are the primary advantages of a collections framework</li> </ul> Advantages Details Reduces programming effort by providing data structures and algorithms so you don't have to write them yourself. Increases performance by providing high-performance implementations of data structures and algorithms. Because the various implementations of each interface are interchangeable, programs can be tuned by switching implementations. Provides interoperability between unrelated APIs by establishing a common language to pass collections back and forth. Reduces the effort required to learn APIs by requiring you to learn multiple ad hoc collection APIs. Reduces the effort required to design and implement APIs by not requiring you to produce ad hoc collections APIs. Fosters software reuse by providing a standard interface for collections and algorithms with which to manipulate them. <p>The collections framework consists of components.</p> Components Details Collection interfaces Represent different types of collections, such as sets, lists, and maps. These interfaces form the basis of the framework. General-purpose implementations Primary implementations of the collection interfaces. Legacy implementations The collection classes from earlier releases,\u00a0Vector\u00a0and\u00a0Hashtable, were retrofitted to implement the collection interfaces. Special-purpose implementations Implementations designed for use in special situations. These implementations display nonstandard performance characteristics, usage restrictions, or behavior. Concurrent implementations Implementations designed for highly concurrent use. Wrapper implementations Add functionality, such as synchronization, to other implementations. Convenience implementations High-performance \"mini-implementations\" of the collection interfaces. Abstract implementations Partial implementations of the collection interfaces to facilitate custom implementations. Algorithms Static methods that perform useful functions on collections, such as sorting a list. Infrastructure Interfaces that provide essential support for the collection interfaces. Array Utilities Utility functions for arrays of primitive types and reference objects. Not, strictly speaking, a part of the collections framework, this feature was added to the Java platform at the same time as the collections framework and relies on some of the same infrastructure.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#java_collection_framework_hierarchy","title":"Java Collection Framework Hierarchy","text":"<ul> <li>The hierarchy of collection framework is showed as below.</li> </ul> <ul> <li>The collection interfaces are divided into two groups. The most basic interface, <code>java.util.Collection</code>, has the following descendants:</li> </ul> <ul> <li>java.util.Set</li> <li>java.util.SortedSet</li> <li>java.util.Queue</li> <li>java.util.Deque</li> <li>java.util.List</li> </ul> <ul> <li>The other collection interfaces are based on <code>java.util.Map</code> and are not true collections. However, these interfaces contain collection-view operations, which enable them to be manipulated as collections. Map has the following offspring:</li> </ul> <ul> <li>java.util.SortedMap</li> <li>java.util.NavigableMap</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#collection_framework_interfaces","title":"Collection Framework Interfaces","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#iterable_interface","title":"Iterable Interface","text":"<ul> <li><code>Iterable Interface</code>:\u00a0This is the root interface for the entire collection framework. The collection interface extends the iterable interface. Therefore, inherently, all the interfaces and classes implement this interface. The main functionality of this interface is to provide an iterator for the collections. Therefore, this interface contains only one abstract method which is the iterator. It returns the.</li> </ul> Iterable.class<pre><code>/*\n * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n */\npackage java.lang;\n\nimport java.util.Iterator;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.function.Consumer;\n\n/**\n * Implementing this interface allows an object to be the target of\n * the \"for-each loop\" statement. See\n * &lt;strong&gt;\n * &lt;a href=\"{@docRoot}/../technotes/guides/language/foreach.html\"&gt;For-each Loop&lt;/a&gt;\n * &lt;/strong&gt;\n *\n * @param &lt;T&gt; the type of elements returned by the iterator\n *\n * @since 1.5\n * @jls 14.14.2 The enhanced for statement\n */\npublic interface Iterable&lt;T&gt; {\n    /**\n     * Returns an iterator over elements of type {@code T}.\n     *\n     * @return an Iterator.\n     */\n    Iterator&lt;T&gt; iterator();\n\n    /**\n     * Performs the given action for each element of the {@code Iterable}\n     * until all elements have been processed or the action throws an\n     * exception.  Unless otherwise specified by the implementing class,\n     * actions are performed in the order of iteration (if an iteration order\n     * is specified).  Exceptions thrown by the action are relayed to the\n     * caller.\n     *\n     * @implSpec\n     * &lt;p&gt;The default implementation behaves as if:\n     * &lt;pre&gt;{@code\n     *     for (T t : this)\n     *         action.accept(t);\n     * }&lt;/pre&gt;\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     * @since 1.8\n     */\n    default void forEach(Consumer&lt;? super T&gt; action) {\n        Objects.requireNonNull(action);\n        for (T t : this) {\n            action.accept(t);\n        }\n    }\n\n    /**\n     * Creates a {@link Spliterator} over the elements described by this\n     * {@code Iterable}.\n     *\n     * @implSpec\n     * The default implementation creates an\n     * &lt;em&gt;&lt;a href=\"Spliterator.html#binding\"&gt;early-binding&lt;/a&gt;&lt;/em&gt;\n     * spliterator from the iterable's {@code Iterator}.  The spliterator\n     * inherits the &lt;em&gt;fail-fast&lt;/em&gt; properties of the iterable's iterator.\n     *\n     * @implNote\n     * The default implementation should usually be overridden.  The\n     * spliterator returned by the default implementation has poor splitting\n     * capabilities, is unsized, and does not report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     *\n     * @return a {@code Spliterator} over the elements described by this\n     * {@code Iterable}.\n     * @since 1.8\n     */\n    default Spliterator&lt;T&gt; spliterator() {\n        return Spliterators.spliteratorUnknownSize(iterator(), 0);\n    }\n}\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#collection_interface","title":"Collection Interface","text":"<ul> <li>java.util.Collection is the root interface of Collection Framework. It contains some important methods such as size(), iterator(), add(), remove() and clear(). Below is all methods of <code>java.util.Collection</code>.</li> </ul> Method Description <code>public boolean add(E e)</code> It is used to insert an element in this collection. <code>public boolean addAll(Collection&lt;? extends E&gt; c)</code> It is used to insert the specified collection elements in the invoking collection. <code>public boolean remove(Object element)</code> It is used to delete an element from the collection. <code>public boolean removeAll(Collection&lt;?&gt; c)</code> It is used to delete all the elements of the specified collection from the invoking collection. <code>default boolean removeIf(Predicate&lt;? super E&gt; filter)</code> It is used to delete all the elements of the collection that satisfy the specified predicate. <code>public boolean retainAll(Collection&lt;?&gt; c)</code> It is used to delete all the elements of invoking collection except the specified collection. <code>public int size()</code> It returns the total number of elements in the collection. <code>public void clear()</code> It removes the total number of elements from the collection. <code>public boolean contains(Object element)</code> It is used to search an element. <code>public boolean containsAll(Collection&lt;?&gt; c)</code> It is used to search the specified collection in the collection. <code>public Iterator iterator()</code> It returns an iterator. <code>public Object[] toArray()</code> It converts collection into array. <code>public &lt;T&gt; T[] toArray(T[] a)</code> It converts collection into array. Here, the runtime type of the returned array is that of the specified array. <code>public boolean isEmpty()</code> It checks if collection is empty. <code>default Stream&lt;E&gt; parallelStream()</code> It returns a possibly parallel Stream with the collection as its source. <code>default Stream&lt;E&gt; stream()</code> It returns a sequential Stream with the collection as its source. <code>default Spliterator&lt;E&gt; spliterator()</code> It generates a Spliterator over the specified elements in the collection. <code>public boolean equals(Object element)</code> It matches two collections. <code>public int hashCode()</code> It returns the hash code number of the collection. <ul> <li>List, Set Queue are other important interfaces that inherit from the Collection interface.</li> <li>Map is the only interface that does not inherit from the Collection interface but it is part of Collection Framework.</li> <li>All the collection framework interfaces are present in java.util.package</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#list_interface","title":"List Interface","text":"<ul> <li><code>List</code> interface is the child interface of Collection interface. It inhibits a list type data structure in which we can store the ordered collection of objects. It can have duplicate values.</li> <li>List Interface contains methods as below</li> </ul> Method Description <code>void add(int index, E element)</code> It is used to insert the specified element at the specified position in a list. <code>boolean add(E e)</code> It is used to append the specified element at the end of a list. <code>boolean addAll(Collection&lt;? extends E&gt; c)</code> It is used to append all of the elements in the specified collection to the end of a list. <code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code> It is used to append all the elements in the specified collection, starting at the specified position of the list. <code>void clear()</code> It is used to remove all of the elements from this list. <code>boolean equals(Object o)</code> It is used to compare the specified object with the elements of a list. <code>int hashcode()</code> It is used to return the hash code value for a list. <code>E get(int index)</code> It is used to fetch the element from the particular position of the list. <code>boolean isEmpty()</code> It returns true if the list is empty, otherwise false. <code>int lastIndexOf(Object o)</code> It is used to return the index in this list of the last occurrence of the specified element, or -1 if the list does not contain this element. <code>Object[] toArray()</code> It is used to return an array containing all of the elements in this list in the correct order. <code>&lt;T&gt; T[] toArray(T[] a)</code> It is used to return an array containing all of the elements in this list in the correct order. <code>boolean contains(Object o)</code> It returns true if the list contains the specified element <code>boolean containsAll(Collection&lt;?&gt; c)</code> It returns true if the list contains all the specified element <code>int indexOf(Object o)</code> It is used to return the index in this list of the first occurrence of the specified element, or -1 if the List does not contain this element. <code>E remove(int index)</code> It is used to remove the element present at the specified position in the list. <code>boolean remove(Object o)</code> It is used to remove the first occurrence of the specified element. <code>boolean removeAll(Collection&lt;?&gt; c)</code> It is used to remove all the elements from the list. <code>void replaceAll(UnaryOperator&lt;E&gt; operator)</code> It is used to replace all the elements from the list with the specified element. <code>void retainAll(Collection&lt;?&gt; c)</code> It is used to retain all the elements in the list that are present in the specified collection. <code>E set(int index, E element)</code> It is used to replace the specified element in the list, present at the specified position. <code>void sort(Comparator&lt;? super E&gt; c)</code> It is used to sort the elements of the list on the basis of specified comparator. <code>Spliterator&lt;E&gt; spliterator()</code> It is used to create spliterator over the elements in a list. <code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code> It is used to fetch all the elements lies within the given range. <code>int size()</code> It is used to return the number of elements present in the list. <ul> <li><code>List</code> interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.</li> <li>To instantiate the List interface, we must use :</li> </ul> <pre><code>List&lt;T&gt; list1 = new ArrayList();  \nList&lt;T&gt; list2 = new LinkedList();  \nList&lt;T&gt; list3 = new Vector();  \nList&lt;T&gt; list4 = new Stack();  \n\n//Where T is the type of the object.\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#queue_interface","title":"Queue Interface","text":"<ul> <li><code>Queue</code> interface maintains the first-in-first-out order. It can be defined as an ordered list that is used to hold the elements which are about to be processed. There are various classes like PriorityQueue, Deque, and ArrayDeque which implements the Queue interface.</li> <li><code>Queue Interface</code> contains methods as in the table below:</li> </ul> Method Description boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. E element() Retrieves, but does not remove, the head of this queue. boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. E peek() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. E poll() Retrieves and removes the head of this queue, or returns null if this queue is empty. E remove() Retrieves and removes the head of this queue. <ul> <li><code>Queue</code> interface can be instantiated as:</li> </ul> <pre><code>Queue &lt;T&gt; pq = new PriorityQueue&lt;&gt; ();\u00a0  \nQueue &lt;T&gt; ad = new ArrayDeque&lt;&gt; ();\u00a0\n\n//Where T is the type of the object.\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#deque_interface","title":"Deque Interface","text":"<ul> <li><code>Deque</code> interface extends the Queue interface. In Deque, we can remove and add the elements from both the side. Deque stands for a double-ended queue which enables us to perform the operations at both the ends.</li> <li><code>Deque</code> interface contains methods as in the table below</li> </ul> Method Description <code>boolean add(E e)</code> Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. <code>void addFirst(E e)</code> Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions. <code>void addLast(E e)</code> Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions. <code>boolean contains(Object o)</code> Returns true if this deque contains the specified element. <code>Iterator&lt;E&gt; descendingIterator()</code> Returns an iterator over the elements in this deque in reverse sequential order. <code>E element()</code> Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). <code>E getFirst()</code> Retrieves, but does not remove, the first element of this deque. <code>E getLast()</code> Retrieves, but does not remove, the last element of this deque. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this deque in proper sequence. <code>boolean offer(E e)</code> Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. <code>boolean offerFirst(E e)</code> Inserts the specified element at the front of this deque unless it would violate capacity restrictions. <code>boolean offerLast(E e)</code> Inserts the specified element at the end of this deque unless it would violate capacity restrictions. <code>E peek()</code> Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. <code>E peekFirst()</code> Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty. <code>E peekLast()</code> Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty. <code>E poll()</code> Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. <code>E pollFirst()</code> Retrieves and removes the first element of this deque, or returns null if this deque is empty. <code>E pollLast()</code> Retrieves and removes the last element of this deque, or returns null if this deque is empty. <code>E pop()</code> Pops an element from the stack represented by this deque. <code>void push(E e)</code> Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. <code>E remove()</code> Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). <code>boolean remove(Object o)</code> Removes the first occurrence of the specified element from this deque. <code>E removeFirst()</code> Retrieves and removes the first element of this deque. <code>boolean removeFirstOccurrence(Object o)</code> Removes the first occurrence of the specified element from this deque. <code>E removeLast()</code> Retrieves and removes the last element of this deque. <code>boolean removeLastOccurrence(Object o)</code> Removes the last occurrence of the specified element from this deque. <code>int size()</code> Returns the number of elements in this deque. <ul> <li><code>Deque</code> can be instantiated as:</li> </ul> <pre><code>Deque&lt;T&gt; ad = new ArrayDeque&lt;&gt; (); \n\n//Where T is the type of the object.  \n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#set_interface","title":"Set Interface","text":"<ul> <li><code>Set</code> Interface in Java is present in java.util package. It extends the Collection interface. It represents the unordered set of elements which doesn't allow us to store the duplicate items. We can store at most one null value in <code>Set</code>. <code>Set</code> is implemented by HashSet, LinkedHashSet, and TreeSet.</li> <li><code>Set</code> interface contains methods as in the table below.</li> </ul> Method Description <code>boolean add(E e)</code> Adds the specified element to this set if it is not already present (optional operation). <code>boolean addAll(Collection&lt;? extends E&gt; c)</code> Adds all of the elements in the specified collection to this set if they're not already present (optional operation). <code>void clear()</code> Removes all of the elements from this set (optional operation). <code>boolean contains(Object o)</code> Returns true if this set contains the specified element. <code>boolean containsAll(Collection&lt;?&gt; c)</code> Returns true if this set contains all of the elements of the specified collection. <code>boolean equals(Object o)</code> Compares the specified object with this set for equality. <code>int hashCode()</code> Returns the hash code value for this set. <code>boolean isEmpty()</code> Returns true if this set contains no elements. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this set. <code>boolean remove(Object o)</code> Removes the specified element from this set if it is present (optional operation). <code>boolean removeAll(Collection&lt;?&gt; c)</code> Removes from this set all of its elements that are contained in the specified collection (optional operation). <code>boolean retainAll(Collection&lt;?&gt; c)</code> Retains only the elements in this set that are contained in the specified collection (optional operation). <code>int size()</code> Returns the number of elements in this set (its cardinality). <code>default Spliterator&lt;E&gt; spliterator()</code> Creates a Spliterator over the elements in this set. <code>Object[] toArray()</code> Returns an array containing all of the elements in this set. <code>&lt;T&gt; T[] toArray(T[] a)</code> Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array. <ul> <li><code>Set</code> can be instantiated as:</li> </ul> <pre><code>Set&lt;T&gt; hs = new HashSet&lt;&gt; (); \nSet&lt;T&gt; lhs = new LinkedHashSet&lt;&gt; (); \nSet&lt;T&gt; ts = new TreeSet&lt;&gt; (); \n\n//Where T is the type of the object.  \n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#sortedset_interface","title":"SortedSet Interface","text":"<ul> <li><code>SortedSet</code> is the alternate of Set interface that provides a total ordering on its elements. The elements of the SortedSet are arranged in the increasing (ascending) order. The <code>SortedSet</code> provides the additional methods that inhibit the natural ordering of the elements.</li> <li><code>SortedSet</code> interface contains methods as in the table below.</li> </ul> Method Description <code>Comparator&lt;? super E&gt; comparator()</code> Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements. <code>E first()</code> Returns the first (lowest) element currently in this set. <code>SortedSet&lt;E&gt; headSet(E toElement)</code> Returns a view of the portion of this set whose elements are strictly less than toElement. <code>E last()</code> Returns the last (highest) element currently in this set. <code>default Spliterator&lt;E&gt;   spliterator()</code> Creates a Spliterator over the elements in this sorted set. <code>SortedSet&lt;E&gt; subSet(E fromElement, E toElement)</code> Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. <code>SortedSet&lt;E&gt; tailSet(E fromElement)</code> Returns a view of the portion of this set whose elements are greater than or equal to fromElement. <ul> <li>The <code>SortedSet</code> can be instantiated as:</li> </ul> <pre><code>SortedSet&lt;T&gt; ts = new TreeSet&lt;&gt; (); \n\n//Where T is the type of the object.  \n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#map","title":"Map","text":"<ul> <li><code>Map</code> Interface: A map is a data structure that supports the key-value pair mapping for the data. This interface doesn\u2019t support duplicate keys because the same key cannot have multiple mappings. A map is useful if there is data and we wish to perform operations on the basis of the key. This map interface is implemented by various classes like HashMap, TreeMap, etc. Since all the subclasses implement the map, we can instantiate a map object with any of these classes. For example.</li> </ul> <pre><code>Map&lt;T&gt; hm = new HashMap&lt;&gt; ();\u00a0  \nMap&lt;T&gt; tm = new TreeMap&lt;&gt; ();  \n\u00a0  \n//Where T is the type of the object.\n</code></pre> <ul> <li><code>Map</code> interface contains methods as in the table below.</li> </ul> Method Description <code>void clear()</code> Removes all of the mappings from this map (optional operation). <code>default V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). <code>default V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code> If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. <code>default V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <code>boolean containsKey(Object key)</code> Returns true if this map contains a mapping for the specified key. <code>boolean containsValue(Object value)</code> Returns true if this map maps one or more keys to the specified value. <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> Returns a Set view of the mappings contained in this map. <code>boolean equals(Object o)</code> Compares the specified object with this map for equality. <code>default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code> Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. <code>V get(Object key)</code> Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. <code>default V getOrDefault(Object key, V defaultValue)</code> Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key. <code>int hashCode()</code> Returns the hash code value for this map. <code>boolean isEmpty()</code> Returns true if this map contains no key-value mappings. <code>Set&lt;K&gt; keySet()</code> Returns a Set view of the keys contained in this map. <code>default V merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</code> If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. <code>V put(K key, V value)</code> Associates the specified value with the specified key in this map (optional operation). <code>void putAll(Map&lt;? extends K,? extends V&gt; m)</code> Copies all of the mappings from the specified map to this map (optional operation). <code>default V putIfAbsent(K key, V value)</code> If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value. <code>V remove(Object key)</code> Removes the mapping for a key from this map if it is present (optional operation). <code>default boolean remove(Object key, Object value)</code> Removes the entry for the specified key only if it is currently mapped to the specified value. <code>default V replace(K key, V value)</code> Replaces the entry for the specified key only if it is currently mapped to some value. <code>default boolean replace(K key, V oldValue, V newValue)</code> Replaces the entry for the specified key only if currently mapped to the specified value. <code>default void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. <code>int size()</code> Returns the number of key-value mappings in this map. <code>Collection&lt;V&gt; values()</code> Returns a Collection view of the values contained in this map.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#collection_framework_implementations","title":"Collection Framework Implementations","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#arraylist","title":"ArrayList","text":"<ul> <li>Java <code>ArrayList</code> class uses a dynamic array for storing the elements. It is like an array, but there is no size limit. We can add or remove elements anytime. So, it is much more flexible than the traditional array. It is found in the java.util package. It is like the Vector in C++.</li> <li>The <code>ArrayList</code> in Java can have the duplicate elements also. It implements the List interface so we can use all the methods of the <code>List</code> interface here. The <code>ArrayList</code> maintains the insertion order internally.</li> <li>It inherits the <code>AbstractList</code> class and implements <code>List</code> interface.</li> </ul> <ul> <li> <p>The important points about the Java <code>ArrayList</code> class are:</p> <ul> <li>Java <code>ArrayList</code> class can contain duplicate elements.</li> <li>Java <code>ArrayList</code> class maintains insertion order.</li> <li>Java <code>ArrayList</code> class is non synchronized.</li> <li>Java <code>ArrayList</code> allows random access because the array works on an index basis.</li> <li>In <code>ArrayList</code>, manipulation is a little bit slower than the <code>LinkedList</code> in Java because a lot of shifting needs to occur if any element is removed from the array list.</li> </ul> </li> <li> <p>We can not create an array list of the primitive types, such as int, float, char, etc. It is required to use the required wrapper class in such cases. For example:</p> </li> </ul> <pre><code>ArrayList&lt;int&gt; al = ArrayList&lt;int&gt;(); // does not work  \nArrayList&lt;Integer&gt; al = new ArrayList&lt;Integer&gt;(); // works fine  \n</code></pre> <ul> <li>Java <code>ArrayList</code> gets initialized by the size. The size is dynamic in the array list, which varies according to the elements getting added or removed from the list.</li> <li>Note that this implementation is not synchronized.\u00a0If multiple threads access an\u00a0<code>ArrayList</code>\u00a0instance concurrently, and at least one of the threads modifies the list structurally, it\u00a0must\u00a0be synchronized externally. (A structural modification is any operation that adds or deletes one or more elements, or explicitly resizes the backing array; merely setting the value of an element is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the list. If no such object exists, the list should be \"wrapped\" using the\u00a0method below. This is best done at creation time, to prevent accidental unsynchronized access to the list.</li> </ul> <pre><code>List&lt;T&gt; list = Collections.synchronizedList(new ArrayList(...));\n\n//Where T is the type of the object.\n</code></pre> <ul> <li><code>ArrayList</code> contains constructors as below:</li> </ul> Constructor Description <code>ArrayList()</code> Constructs an empty list with an initial capacity of ten. <code>ArrayList(Collection&lt;? extends E&gt; c)</code> Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator. <code>ArrayList(int initialCapacity)</code> Constructs an empty list with the specified initial capacity. <ul> <li>All implemented methods of <code>ArrayList</code> are shown as in the table below:</li> </ul> Method Description <code>boolean add(E e)</code> Appends the specified element to the end of this list. <code>void add(int index, E element)</code> Inserts the specified element at the specified position in this list. <code>boolean addAll(Collection&lt;? extends E&gt; c)</code> Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. <code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code> Inserts all of the elements in the specified collection into this list, starting at the specified position. <code>void clear()</code> Removes all of the elements from this list. <code>Object clone()</code> Returns a shallow copy of this ArrayList instance. <code>boolean contains(Object o)</code> Returns true if this list contains the specified element. <code>void ensureCapacity(int minCapacity)</code> Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument. <code>void forEach(Consumer&lt;? super E&gt; action)</code> Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. <code>E get(int index)</code> Returns the element at the specified position in this list. <code>int indexOf(Object o)</code> Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. <code>boolean isEmpty()</code> Returns true if this list contains no elements. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this list in proper sequence. <code>int lastIndexOf(Object o)</code> Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. <code>ListIterator&lt;E&gt; listIterator()</code> Returns a list iterator over the elements in this list (in proper sequence). <code>ListIterator&lt;E&gt; listIterator(int index)</code> Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. <code>E remove(int index)</code> Removes the element at the specified position in this list. <code>boolean remove(Object o)</code> Removes the first occurrence of the specified element from this list, if it is present. <code>boolean removeAll(Collection&lt;?&gt; c)</code> Removes from this list all of its elements that are contained in the specified collection. <code>boolean removeIf(Predicate&lt;? super E&gt; filter)</code> Removes all of the elements of this collection that satisfy the given predicate. <code>protected void   removeRange(int fromIndex, int toIndex)</code> Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. <code>void replaceAll(UnaryOperator&lt;E&gt; operator)</code> Replaces each element of this list with the result of applying the operator to that element. <code>boolean retainAll(Collection&lt;?&gt; c)</code> Retains only the elements in this list that are contained in the specified collection. <code>E set(int index, E element)</code> Replaces the element at the specified position in this list with the specified element. <code>int size()</code> Returns the number of elements in this list. <code>void sort(Comparator&lt;? super E&gt; c)</code> Sorts this list according to the order induced by the specified Comparator. <code>Spliterator&lt;E&gt;   spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this list. <code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code> Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. <code>Object[] toArray()</code> Returns an array containing all of the elements in this list in proper sequence (from first to last element). <code>&lt;T&gt; T[] toArray(T[] a)</code> Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. <code>void trimToSize()</code> Trims the capacity of this ArrayList instance to be the list's current size.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#linkedlist","title":"LinkedList","text":"<ul> <li><code>LinkedList</code> is a part of the <code>Collection framework</code> present in <code>java.util package</code>. This class is an implementation of the <code>LinkedList</code> data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node. </li> <li>Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays. It also has a few disadvantages like the nodes cannot be accessed directly instead we need to start from the head and follow through the link to reach a node we wish to access.</li> <li><code>LinkedList</code> class uses a doubly linked list to store the elements. It provides a linked-list data structure.<ul> <li><code>A Doubly Linked List (DLL)</code> contains an extra pointer, typically called the <code>previous pointer</code>, together with the <code>next pointer</code> and data which are there in the singly linked list.</li> </ul> </li> </ul> <ul> <li>It inherits the <code>AbstractList</code> class and implements <code>List</code> and <code>Deque</code> interfaces.</li> </ul> <ul> <li> <p>The important points about Java LinkedList are:</p> <ul> <li>Java <code>LinkedList</code> class can contain duplicate elements.</li> <li>Java <code>LinkedList</code> class maintains insertion order.</li> <li>Java <code>LinkedList</code> class is non synchronized.</li> <li>In Java <code>LinkedList</code> class, manipulation is fast because no shifting needs to occur.</li> <li>Java <code>LinkedList</code> class can be used as a list, stack or queue.</li> </ul> </li> <li> <p>Like <code>ArrayList</code>, the implementation of <code>LinkedList</code> is not synchronized and in case we want <code>LinkedList</code> become synchronized, the list should be \"wrapped\" using the\u00a0method below.</p> </li> </ul> <pre><code>List&lt;T&gt; list = Collections.synchronizedList(new LinkedList(...));\n\n//Where T is the type of the object.\n</code></pre> <ul> <li><code>LinkedList</code> contains constructors as below:</li> </ul> Constructor Description <code>LinkedList()</code> Constructs an empty list. <code>LinkedList(Collection&lt;? extends E&gt; c)</code> Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator. <ul> <li>All implemented methods of <code>LinkedList</code> are shown as in the table below:</li> </ul> Method Description <code>boolean add(E e)</code> Appends the specified element to the end of this list. <code>void add(int index, E element)</code> Inserts the specified element at the specified position in this list. <code>boolean addAll(Collection&lt;? extends E&gt; c)</code> Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. <code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code> Inserts all of the elements in the specified collection into this list, starting at the specified position. <code>void addFirst(E e)</code> Inserts the specified element at the beginning of this list. <code>void addLast(E e)</code> Appends the specified element to the end of this list. <code>void clear()</code> Removes all of the elements from this list. <code>Object   clone()</code> Returns a shallow copy of this LinkedList. <code>boolean contains(Object o)</code> Returns true if this list contains the specified element. <code>Iterator&lt;E&gt; descendingIterator()</code> Returns an iterator over the elements in this deque in reverse sequential order. <code>E element()</code> Retrieves, but does not remove, the head (first element) of this list. <code>E get(int index)</code> Returns the element at the specified position in this list. <code>E getFirst()</code> Returns the first element in this list. <code>E getLast()</code> Returns the last element in this list. <code>int indexOf(Object o)</code> Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. <code>int lastIndexOf(Object o)</code> Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. <code>ListIterator&lt;E&gt; listIterator(int index)</code> Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list. <code>boolean offer(E e)</code> Adds the specified element as the tail (last element) of this list. <code>boolean offerFirst(E e)</code> Inserts the specified element at the front of this list. <code>boolean offerLast(E e)</code> Inserts the specified element at the end of this list. <code>E peek()</code> Retrieves, but does not remove, the head (first element) of this list. <code>E peekFirst()</code> Retrieves, but does not remove, the first element of this list, or returns null if this list is empty. <code>E peekLast()</code> Retrieves, but does not remove, the last element of this list, or returns null if this list is empty. <code>E poll()</code> Retrieves and removes the head (first element) of this list. <code>E pollFirst()</code> Retrieves and removes the first element of this list, or returns null if this list is empty. <code>E pollLast()</code> Retrieves and removes the last element of this list, or returns null if this list is empty. <code>E pop()</code> Pops an element from the stack represented by this list. <code>void push(E e)</code> Pushes an element onto the stack represented by this list. <code>E remove()</code> Retrieves and removes the head (first element) of this list. <code>E remove(int index)</code> Removes the element at the specified position in this list. <code>boolean remove(Object o)</code> Removes the first occurrence of the specified element from this list, if it is present. <code>E removeFirst()</code> Removes and returns the first element from this list. <code>boolean removeFirstOccurrence(Object o)</code> Removes the first occurrence of the specified element in this list (when traversing the list from head to tail). <code>E removeLast()</code> Removes and returns the last element from this list. <code>boolean removeLastOccurrence(Object o)</code> Removes the last occurrence of the specified element in this list (when traversing the list from head to tail). <code>E set(int index, E element)</code> Replaces the element at the specified position in this list with the specified element. <code>int size()</code> Returns the number of elements in this list. <code>Spliterator&lt;E&gt;   spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this list. <code>Object[] toArray()</code> Returns an array containing all of the elements in this list in proper sequence (from first to last element). <code>&lt;T&gt; T[] toArray(T[] a)</code> Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#vector","title":"Vector","text":"<ul> <li> <p>The\u00a0<code>Vector</code>\u00a0class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a\u00a0<code>Vector</code>\u00a0can grow or shrink as needed to accommodate adding and removing items after the\u00a0<code>Vector</code>\u00a0has been created.</p> </li> <li> <p>Each vector tries to optimize storage management by maintaining a\u00a0<code>capacity</code>\u00a0and a\u00a0<code>capacityIncrement</code>. The\u00a0<code>capacity</code>\u00a0is always at least as large as the vector size; it is usually larger because as components are added to the vector, the vector's storage increases in chunks the size of\u00a0<code>capacityIncrement</code>. An application can increase the capacity of a vector before inserting a large number of components; this reduces the amount of incremental reallocation.</p> </li> <li> <p>The iterators returned by this class's <code>iterator</code> and <code>list Iterator</code> methods are <code>fail-fast</code>: if the vector is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove or add methods, the iterator will throw a <code>ConcurrentModificationException</code>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. The Enumerations returned by the elements method are not fail-fast.</p> </li> <li> <p>Note that the <code>fail-fast</code> behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of <code>unsynchronized</code> concurrent modification. Fail-fast iterators throw <code>ConcurrentModificationException</code> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: the <code>fail-fast</code> behavior of iterators should be used only to detect bugs.</p> </li> <li> <p>As of the Java 2 platform v1.2, this class was retrofitted to implement the List interface, making it a member of the <code>Java Collections Framework</code>. Unlike the new collection implementations, <code>Vector is synchronized</code>. If a thread-safe implementation is not needed, it is recommended to use <code>ArrayList</code> in place of <code>Vector</code>.</p> </li> <li> <p><code>Vector</code> defines three protected data members as below.</p> </li> </ul> Modifier and Type Field Description protected int capacityIncrement The amount by which the capacity of the vector is automatically incremented when its size becomes greater than its capacity. protected int elementCount The number of valid components in this Vector object. protected Object[] elementData The array buffer into which the components of the vector are stored. <ul> <li><code>Vector</code> defines constructors as below.</li> </ul> Constructor Description <code>Vector()</code> Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero. <code>Vector(Collection&lt;? extends E&gt; c)</code> Constructs a vector containing the elements of the specified collection, in the order they are returned by the collection's iterator. <code>Vector(int initialCapacity)</code> Constructs an empty vector with the specified initial capacity and with its capacity increment equal to zero. <code>Vector(int initialCapacity, int capacityIncrement)</code> Constructs an empty vector with the specified initial capacity and capacity increment. <ul> <li>All methods of <code>Vector</code> are showed as below.</li> </ul> Modifier Description <code>boolean add(E e)</code> Appends the specified element to the end of this Vector. <code>void add(int index, E element)</code> Inserts the specified element at the specified position in this Vector. <code>boolean addAll(Collection&lt;? extends E&gt; c)</code> Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator. <code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code> Inserts all of the elements in the specified Collection into this Vector at the specified position. <code>void addElement(E obj)</code> Adds the specified component to the end of this vector, increasing its size by one. <code>int capacity()</code> Returns the current capacity of this vector. <code>void clear()</code> Removes all of the elements from this Vector. <code>Object clone()</code> Returns a clone of this vector. <code>boolean contains(Object o)</code> Returns true if this vector contains the specified element. <code>boolean containsAll(Collection&lt;?&gt; c)</code> Returns true if this Vector contains all of the elements in the specified Collection. <code>void copyInto(Object[] anArray)</code> Copies the components of this vector into the specified array. <code>E elementAt(int index)</code> Returns the component at the specified index. <code>Enumeration&lt;E&gt;   elements()</code> Returns an enumeration of the components of this vector. <code>void ensureCapacity(int minCapacity)</code> Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument. <code>boolean equals(Object o)</code> Compares the specified Object with this Vector for equality. <code>E firstElement()</code> Returns the first component (the item at index 0) of this vector. <code>void forEach(Consumer&lt;? super E&gt; action)</code> Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. <code>E get(int index)</code> Returns the element at the specified position in this Vector. <code>int hashCode()</code> Returns the hash code value for this Vector. <code>int indexOf(Object o)</code> Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element. <code>int indexOf(Object o, int index)</code> Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found. <code>void insertElementAt(E obj, int index)</code> Inserts the specified object as a component in this vector at the specified index. <code>boolean isEmpty()</code> Tests if this vector has no components. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this list in proper sequence. <code>E lastElement()</code> Returns the last component of the vector. <code>int lastIndexOf(Object o)</code> Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element. <code>int lastIndexOf(Object o, int index)</code> Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found. <code>ListIterator&lt;E&gt; listIterator()</code> Returns a list iterator over the elements in this list (in proper sequence). <code>ListIterator&lt;E&gt; listIterator(int index)</code> Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. <code>E remove(int index)</code> Removes the element at the specified position in this Vector. <code>boolean remove(Object o)</code> Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged. <code>boolean removeAll(Collection&lt;?&gt; c)</code> Removes from this Vector all of its elements that are contained in the specified Collection. <code>void removeAllElements()</code> Removes all components from this vector and sets its size to zero. <code>boolean removeElement(Object obj)</code> Removes the first (lowest-indexed) occurrence of the argument from this vector. <code>void removeElementAt(int index)</code> Deletes the component at the specified index. <code>boolean removeIf(Predicate&lt;? super E&gt; filter)</code> Removes all of the elements of this collection that satisfy the given predicate. <code>protected void removeRange(int fromIndex, int toIndex)</code> Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. <code>void replaceAll(UnaryOperator&lt;E&gt; operator)</code> Replaces each element of this list with the result of applying the operator to that element. <code>boolean retainAll(Collection&lt;?&gt; c)</code> Retains only the elements in this Vector that are contained in the specified Collection. <code>E set(int index, E element)</code> Replaces the element at the specified position in this Vector with the specified element. <code>void setElementAt(E obj, int index)</code> Sets the component at the specified index of this vector to be the specified object. <code>void setSize(int newSize)</code> Sets the size of this vector. <code>int size()</code> Returns the number of components in this vector. <code>void sort(Comparator&lt;? super E&gt; c)</code> Sorts this list according to the order induced by the specified Comparator. <code>Spliterator&lt;E&gt;   spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this list. <code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code> Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive. <code>Object[] toArray()</code> Returns an array containing all of the elements in this Vector in the correct order. <code>&lt;T&gt; T[] toArray(T[] a)</code> Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array. <code>String toString()</code> Returns a string representation of this Vector, containing the String representation of each element. <code>void trimToSize()</code> Trims the capacity of this vector to be the vector's current size.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#stack","title":"Stack","text":"<ul> <li>The\u00a0<code>Stack</code>\u00a0class represents a <code>last-in-first-out</code> (LIFO) stack of objects. It extends class\u00a0<code>Vector</code>\u00a0with five operations that allow a vector to be treated as a stack. The usual\u00a0push\u00a0and\u00a0pop\u00a0operations are provided, as well as a method to\u00a0peek\u00a0at the top item on the stack, a method to test for whether the stack is\u00a0empty, and a method to\u00a0search\u00a0the stack for an item and discover how far it is from the top.</li> <li>For the new implementations, we should favor the <code>Deque</code> interface and its implementations. <code>Deque</code> defines a more complete and consistent set of LIFO operations. However, we may still need to deal with the <code>Stack</code> class, especially in legacy code, so it's important to understand it well.</li> <li>When a stack is first created, it contains no items but it will have the default capacity of 10. If the number of added elements exceeds the total <code>Stack</code> size, it will be doubled automatically. However, its size will never shrink after removing elements.</li> <li> <p><code>Stack</code> is a direct subclass of <code>Vector</code>; this means that similarly to its superclass, it's a <code>synchronized</code> implementation.</p> </li> <li> <p><code>Stack</code> defines constructors as below.</p> </li> </ul> Constructor Description Stack() Creates an empty Stack. <ul> <li>All implemented methods of <code>Stack</code> are shown as in the table below: </li> </ul> Method Description boolean   empty() Tests if this stack is empty. E peek() Looks at the object at the top of this stack without removing it from the stack. E pop() Removes the object at the top of this stack and returns that object as the value of this function. E push(E item) Pushes an item onto the top of this stack. int   search(Object o) Returns the 1-based position where an object is on this stack.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#priorityqueue","title":"PriorityQueue","text":"<ul> <li>A <code>PriorityQueue</code> is used when the objects are supposed to be processed based on the priority. It is known that a <code>Queue</code> follows the <code>First-In-First-Out</code> algorithm, but sometimes the elements of the queue are needed to be processed according to the priority, that\u2019s when the <code>PriorityQueue</code> comes into play.</li> <li>An unbounded <code>PriorityQueue</code> based on a priority heap. The elements of the priority queue are ordered according to their natural ordering, or by a <code>Comparator</code> provided at queue construction time, depending on which constructor is used. A <code>priority queue</code> does not permit null elements. A <code>PriorityQueue</code> relying on natural ordering also does not permit insertion of non-comparable objects (doing so may result in ClassCastException).</li> <li>A priority queue is unbounded, but has an internal capacity governing the size of an array used to store the elements on the queue. It is always at least as large as the queue size. As elements are added to a priority queue, its capacity grows automatically. The details of the growth policy are not specified.</li> <li> <p>A few important points on Priority Queue are as follows: </p> <ul> <li>PriorityQueue doesn\u2019t permit null.</li> <li>We can\u2019t create a PriorityQueue of Objects that are non-comparable</li> <li>PriorityQueue are unbound queues.</li> <li>The head of this queue is the least element with respect to the specified ordering. If multiple elements are tied for the least value, the head is one of those elements \u2014 ties are broken arbitrarily.</li> <li>Since PriorityQueue is not thread-safe, java provides PriorityBlockingQueue class that implements the BlockingQueue interface to use in a java multithreading environment.</li> <li>The queue retrieval operations poll,  remove,  peek, and element access the element at the head of the queue.</li> <li>It provides O(log(n)) time for add and poll methods.</li> <li>It inherits methods from AbstractQueue, AbstractCollection, Collection, and Object class.</li> </ul> </li> <li> <p><code>PriorityQueue</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>PriorityQueue()</code> Creates a PriorityQueue with the default initial capacity (11) that orders its elements according to their natural ordering. <code>PriorityQueue(Collection&lt;? extends E&gt; c)</code> Creates a PriorityQueue containing the elements in the specified collection. <code>PriorityQueue(Comparator&lt;? super E&gt; comparator)</code> Creates a PriorityQueue with the default initial capacity and whose elements are ordered according to the specified comparator. <code>PriorityQueue(int initialCapacity)</code> Creates a PriorityQueue with the specified initial capacity that orders its elements according to their natural ordering. <code>PriorityQueue(int initialCapacity, Comparator&lt;? super E&gt; comparator)</code> Creates a PriorityQueue with the specified initial capacity that orders its elements according to the specified comparator. <code>PriorityQueue(PriorityQueue&lt;? extends E&gt; c)</code> Creates a PriorityQueue containing the elements in the specified priority queue. <code>PriorityQueue(SortedSet&lt;? extends E&gt; c)</code> Creates a PriorityQueue containing the elements in the specified sorted set. <ul> <li><code>PriorityQueue</code> contains all methods below:</li> </ul> Method Description <code>boolean add(E e)</code> Inserts the specified element into this priority queue. <code>void clear()</code> Removes all of the elements from this priority queue. <code>Comparator&lt;? super E&gt; comparator()</code> Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements. <code>boolean contains(Object o)</code> Returns true if this queue contains the specified element. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this queue. <code>boolean offer(E e)</code> Inserts the specified element into this priority queue. <code>E peek()</code> Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. <code>E poll()</code> Retrieves and removes the head of this queue, or returns null if this queue is empty. <code>boolean remove(Object o)</code> Removes a single instance of the specified element from this queue, if it is present. <code>int size()</code> Returns the number of elements in this collection. <code>Spliterator&lt;E&gt; spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this queue. <code>Object[] toArray()</code> Returns an array containing all of the elements in this queue. <code>&lt;T&gt; T[] toArray(T[] a)</code> Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#arraydeque","title":"ArrayDeque","text":"<ul> <li>The <code>ArrayDeque</code> in Java provides a way to apply resizable-array in addition to the implementation of the <code>Deque</code> interface. It is also known as <code>Array Double Ended Queue</code> or <code>Array Deck</code>. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue. </li> <li> <p>Few important features of ArrayDeque are as follows:  </p> <ul> <li>Array deques have no capacity restrictions and they grow as necessary to support usage.</li> <li>They are not thread-safe which means that in the absence of external synchronization, ArrayDeque does not support concurrent access by multiple threads.</li> <li>Null elements are prohibited in the ArrayDeque.</li> <li>ArrayDeque class is likely to be faster than Stack when used as a stack.</li> <li>ArrayDeque class is likely to be faster than LinkedList when used as a queue. </li> </ul> </li> <li> <p><code>ArrayDeque</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>ArrayDeque()</code> Constructs an empty array deque with an initial capacity sufficient to hold 16 elements. <code>ArrayDeque(Collection&lt;? extends E&gt; c)</code> Constructs a deque containing the elements of the specified collection, in the order they are returned by the collection's iterator. <code>ArrayDeque(int numElements)</code> Constructs an empty array deque with an initial capacity sufficient to hold the specified number of elements. <ul> <li><code>ArrayDeque</code> contains all methods below:</li> </ul> Method Description <code>boolean add(E e)</code> Inserts the specified element at the end of this deque. <code>void addFirst(E e)</code> Inserts the specified element at the front of this deque. <code>void addLast(E e)</code> Inserts the specified element at the end of this deque. <code>void clear()</code> Removes all of the elements from this deque. <code>ArrayDeque&lt;E&gt; clone()</code> Returns a copy of this deque. <code>boolean contains(Object o)</code> Returns true if this deque contains the specified element. <code>Iterator&lt;E&gt; descendingIterator()</code> Returns an iterator over the elements in this deque in reverse sequential order. <code>E element()</code> Retrieves, but does not remove, the head of the queue represented by this deque. <code>E getFirst()</code> Retrieves, but does not remove, the first element of this deque. <code>E getLast()</code> Retrieves, but does not remove, the last element of this deque. <code>boolean isEmpty()</code> Returns true if this deque contains no elements. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this deque. <code>boolean offer(E e)</code> Inserts the specified element at the end of this deque. <code>boolean offerFirst(E e)</code> Inserts the specified element at the front of this deque. <code>boolean offerLast(E e)</code> Inserts the specified element at the end of this deque. <code>E peek()</code> Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty. <code>E peekFirst()</code> Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty. <code>E peekLast()</code> Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty. <code>E poll()</code> Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. <code>E pollFirst()</code> Retrieves and removes the first element of this deque, or returns null if this deque is empty. <code>E pollLast()</code> Retrieves and removes the last element of this deque, or returns null if this deque is empty. <code>E pop()</code> Pops an element from the stack represented by this deque. <code>void push(E e)</code> Pushes an element onto the stack represented by this deque. <code>E remove()</code> Retrieves and removes the head of the queue represented by this deque. <code>boolean remove(Object o)</code> Removes a single instance of the specified element from this deque. <code>E removeFirst()</code> Retrieves and removes the first element of this deque. <code>boolean removeFirstOccurrence(Object o)</code> Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail). <code>E removeLast()</code> Retrieves and removes the last element of this deque. <code>boolean removeLastOccurrence(Object o)</code> Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail). <code>int size()</code> Returns the number of elements in this deque. <code>Spliterator&lt;E&gt; spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this deque. <code>Object[] toArray()</code> Returns an array containing all of the elements in this deque in proper sequence (from first to last element). <code>&lt;T&gt; T[] toArray(T[] a)</code> Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#hashset","title":"HashSet","text":"<ul> <li>The <code>HashSet</code> class implements the Set interface, backed by a hash table which is actually a <code>HashMap</code> instance. No guarantee is made as to the iteration order of the set which means that the class does not guarantee the constant order of elements over time. </li> <li>This class permits the null element. The class also offers constant time performance for the basic operations like add, remove, contains, and size assuming the hash function disperses the elements properly among the buckets, which we shall see further in the article. </li> <li> <p>A few important features of <code>HashSet</code> are: </p> <ul> <li>Implements Set Interface.</li> <li>The underlying data structure for <code>HashSet</code> is <code>Hashtable</code>.</li> <li>As it implements the <code>Set</code> Interface, duplicate values are not allowed.</li> <li>Objects that you insert in <code>HashSet</code> are not guaranteed to be inserted in the same order. Objects are inserted based on their hash code.</li> <li>NULL elements are allowed in <code>HashSet</code>.</li> <li><code>HashSet</code> also implements Serializable and <code>Cloneable</code> interfaces.</li> </ul> </li> <li> <p><code>HashSet</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>HashSet()</code> Constructs a new, empty set; the backing HashMap instance has default initial capacity (16) and load factor (0.75). <code>HashSet(Collection&lt;? extends E&gt; c)</code> Constructs a new set containing the elements in the specified collection. <code>HashSet(int initialCapacity)</code> Constructs a new, empty set; the backing HashMap instance has the specified initial capacity and default load factor (0.75). <code>HashSet(int initialCapacity, float loadFactor)</code> Constructs a new, empty set; the backing HashMap instance has the specified initial capacity and the specified load factor. <ul> <li><code>HashSet</code> contains all methods below:</li> </ul> Method Description <code>boolean add(E e)</code> Adds the specified element to this set if it is not already present. <code>void clear()</code> Removes all of the elements from this set. <code>Object clone()</code> Returns a shallow copy of this HashSet instance: the elements themselves are not cloned. <code>boolean contains(Object o)</code> Returns true if this set contains the specified element. <code>boolean isEmpty()</code> Returns true if this set contains no elements. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this set. <code>boolean remove(Object o)</code> Removes the specified element from this set if it is present. <code>int size()</code> Returns the number of elements in this set (its cardinality). <code>Spliterator&lt;E&gt; spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this set.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#linkedhashset","title":"LinkedHashSet","text":"<ul> <li>The <code>LinkedHashSet</code> is an ordered version of <code>HashSet</code> that maintains a doubly-linked <code>List</code> across all elements. When the iteration order is needed to be maintained this class is used. When iterating through a <code>HashSet</code> the order is unpredictable, while a <code>LinkedHashSet</code> lets us iterate through the elements in the order in which they were inserted. When cycling through <code>LinkedHashSet</code> using an iterator, the elements will be returned in the order in which they were inserted.</li> <li> <p>The important points about the Java <code>LinkedHashSet</code> class are:</p> <ul> <li>Java <code>LinkedHashSet</code> class contains unique elements only like <code>HashSet</code>.</li> <li>Java <code>LinkedHashSet</code> class provides all optional set operations and permits null elements.</li> <li>Java <code>LinkedHashSet</code> class is non-synchronized.</li> <li>Java <code>LinkedHashSet</code> class maintains insertion order.</li> </ul> </li> <li> <p><code>LinkedHashSet</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>LinkedHashSet()</code> Constructs a new, empty linked hash set with the default initial capacity (16) and load factor (0.75). <code>LinkedHashSet(Collection&lt;? extends E&gt; c)</code> Constructs a new linked hash set with the same elements as the specified collection. <code>LinkedHashSet(int initialCapacity)</code> Constructs a new, empty linked hash set with the specified initial capacity and the default load factor (0.75). <code>LinkedHashSet(int initialCapacity, float loadFactor)</code> Constructs a new, empty linked hash set with the specified initial capacity and load factor. <ul> <li><code>LinkedHashSet</code> contains all methods below:</li> </ul> Method Description <code>Spliterator&lt;E&gt;   spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this set. Methods inherited from class java.util.HashSet add, clear, clone, contains, isEmpty, iterator, remove, size Methods inherited from class java.util.AbstractSet equals, hashCode, removeAll Methods inherited from class java.util.AbstractCollection addAll, containsAll, retainAll, toArray, toArray, toString Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, wait Methods inherited from interface java.util.Set add, addAll, clear, contains, containsAll, equals, hashCode, isEmpty, iterator, remove, removeAll, retainAll, size, toArray, toArray Methods inherited from interface java.util.Collection parallelStream, removeIf, stream Methods inherited from interface java.lang.Iterable forEach","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#treeset","title":"TreeSet","text":"<ul> <li><code>TreeSet</code> is one of the most important implementations of the <code>SortedSet</code> interface in Java that uses a Tree for storage. The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided. This must be consistent with equals if it is to correctly implement the Set interface. </li> <li> <p>A few important features of <code>TreeSet</code> are: </p> <ul> <li>It stores unique elements</li> <li>It doesn't preserve the insertion order of the elements</li> <li>It sorts the elements in ascending order</li> <li>It's not thread-safe</li> </ul> </li> <li> <p><code>TreeSet</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>TreeSet()</code> Constructs a new, empty tree set, sorted according to the natural ordering of its elements. <code>TreeSet(Collection&lt;? extends E&gt; c)</code> Constructs a new tree set containing the elements in the specified collection, sorted according to the natural ordering of its elements. <code>TreeSet(Comparator&lt;? super E&gt; comparator)</code> Constructs a new, empty tree set, sorted according to the specified comparator. <code>TreeSet(SortedSet&lt;E&gt; s)</code> Constructs a new tree set containing the same elements and using the same ordering as the specified sorted set. <ul> <li><code>TreeSet</code> contains all methods below:</li> </ul> Method Description <code>boolean add(E e)</code> Adds the specified element to this set if it is not already present. <code>boolean addAll(Collection&lt;? extends E&gt; c)</code> Adds all of the elements in the specified collection to this set. <code>E ceiling(E e)</code> Returns the least element in this set greater than or equal to the given element, or null if there is no such element. <code>void clear()</code> Removes all of the elements from this set. <code>Object clone()</code> Returns a shallow copy of this TreeSet instance. <code>Comparator&lt;? super E&gt; comparator()</code> Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements. <code>boolean contains(Object o)</code> Returns true if this set contains the specified element. <code>Iterator&lt;E&gt; descendingIterator()</code> Returns an iterator over the elements in this set in descending order. <code>NavigableSet&lt;E&gt; descendingSet()</code> Returns a reverse order view of the elements contained in this set. <code>E first()</code> Returns the first (lowest) element currently in this set. <code>E floor(E e)</code> Returns the greatest element in this set less than or equal to the given element, or null if there is no such element. <code>SortedSet&lt;E&gt; headSet(E toElement)</code> Returns a view of the portion of this set whose elements are strictly less than toElement. <code>NavigableSet&lt;E&gt; headSet(E toElement, boolean inclusive)</code> Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. <code>E higher(E e)</code> Returns the least element in this set strictly greater than the given element, or null if there is no such element. <code>boolean isEmpty()</code> Returns true if this set contains no elements. <code>Iterator&lt;E&gt; iterator()</code> Returns an iterator over the elements in this set in ascending order. <code>E last()</code> Returns the last (highest) element currently in this set. <code>E lower(E e)</code> Returns the greatest element in this set strictly less than the given element, or null if there is no such element. <code>E pollFirst()</code> Retrieves and removes the first (lowest) element, or returns null if this set is empty. <code>E pollLast()</code> Retrieves and removes the last (highest) element, or returns null if this set is empty. <code>boolean remove(Object o)</code> Removes the specified element from this set if it is present. <code>int size()</code> Returns the number of elements in this set (its cardinality). <code>Spliterator&lt;E&gt; spliterator()</code> Creates a late-binding and fail-fast Spliterator over the elements in this set. <code>NavigableSet&lt;E&gt; subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)</code> Returns a view of the portion of this set whose elements range from fromElement to toElement. <code>SortedSet&lt;E&gt; subSet(E fromElement, E toElement)</code> Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. <code>SortedSet&lt;E&gt; tailSet(E fromElement)</code> Returns a view of the portion of this set whose elements are greater than or equal to fromElement. <code>NavigableSet&lt;E&gt; tailSet(E fromElement, boolean inclusive)</code> Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#enummap","title":"EnumMap","text":"<ul> <li><code>EnumMap</code> is a specialized implementation of the Map interface for enumeration types. It extends <code>AbstractMap</code> and implements the Map interface in Java. It belongs to<code>java.util package</code>.</li> </ul> <ul> <li> <p>Important features of <code>EnumMap</code> are as follows:</p> <ul> <li><code>EnumMap</code> class is a member of the Java Collections Framework &amp; is not synchronized.</li> <li><code>EnumMap</code> is an ordered collection and they are maintained in the natural order of their keys(the natural order of keys means the order on which enum constants are declared inside enum type )</li> <li>It\u2019s a high-performance map implementation, much faster than <code>HashMap</code>. All keys of each <code>EnumMap</code> instance must be keys of a single enum type. <code>EnumMap</code> doesn\u2019t allow null key and throws <code>NullPointerException</code> when we attempt to insert the null key.</li> <li><code>Iterators</code> returned by the collection views are weakly consistent: they will never throw <code>ConcurrentModificationException</code> and they may or may not show the effects of any modifications to the map that occur while the iteration is in progress.</li> <li><code>EnumMap</code> is internally represented as arrays. This representation is extremely compact and efficient.</li> </ul> </li> <li> <p><code>EnumMap</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>EnumMap(Class&lt;K&gt; keyType)</code> Creates an empty enum map with the specified key type. <code>EnumMap(EnumMap&lt;K,? extends V&gt; m)</code> Creates an enum map with the same key type as the specified enum map, initially containing the same mappings (if any). <code>EnumMap(Map&lt;K,? extends V&gt; m)</code> Creates an enum map initialized from the specified map. <ul> <li><code>EnumMap</code> contains all methods below:</li> </ul> Method Description <code>void clear()</code> Removes all mappings from this map. <code>EnumMap&lt;K,V&gt; clone()</code> Returns a shallow copy of this enum map. <code>boolean containsKey(Object key)</code> Returns true if this map contains a mapping for the specified key. <code>boolean containsValue(Object value)</code> Returns true if this map maps one or more keys to the specified value. <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> Returns a Set view of the mappings contained in this map. <code>boolean equals(Object o)</code> Compares the specified object with this map for equality. <code>V get(Object key)</code> Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. <code>int hashCode()</code> Returns the hash code value for this map. <code>Set&lt;K&gt; keySet()</code> Returns a Set view of the keys contained in this map. <code>V put(K key, V value)</code> Associates the specified value with the specified key in this map. <code>void putAll(Map&lt;? extends K,? extends V&gt; m)</code> Copies all of the mappings from the specified map to this map. <code>V remove(Object key)</code> Removes the mapping for this key from this map if present. <code>int size()</code> Returns the number of key-value mappings in this map. <code>Collection&lt;V&gt; values()</code> Returns a Collection view of the values contained in this map.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#treemap","title":"TreeMap","text":"<ul> <li>Java <code>TreeMap</code> class is a <code>red-black tree</code> based implementation. It provides an efficient means of storing key-value pairs in sorted order.</li> </ul> <ul> <li> <p>The important points about Java TreeMap class are:</p> <ul> <li>Java TreeMap contains values based on the key. It implements the <code>NavigableMap</code> interface and extends <code>AbstractMap</code> class.</li> <li>Java TreeMap contains only unique elements.</li> <li>Java TreeMap cannot have a null key but can have multiple null values.</li> <li>Java TreeMap is non synchronized.</li> <li>Java TreeMap maintains ascending order.</li> </ul> </li> <li> <p><code>TreeMap</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>TreeMap()</code> Constructs a new, empty tree map, using the natural ordering of its keys. <code>TreeMap(Comparator&lt;? super K&gt; comparator)</code> Constructs a new, empty tree map, ordered according to the given comparator. <code>TreeMap(Map&lt;? extends K,? extends V&gt; m)</code> Constructs a new tree map containing the same mappings as the given map, ordered according to the natural ordering of its keys. <code>TreeMap(SortedMap&lt;K,? extends V&gt; m)</code> Constructs a new tree map containing the same mappings and using the same ordering as the specified sorted map. <ul> <li><code>TreeMap</code> contains all methods below:</li> </ul> Method Description <code>Map.Entry&lt;K,V&gt; ceilingEntry(K key)</code> Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key. <code>K ceilingKey(K key)</code> Returns the least key greater than or equal to the given key, or null if there is no such key. <code>void clear()</code> Removes all of the mappings from this map. <code>Object   clone()</code> Returns a shallow copy of this TreeMap instance. <code>Comparator&lt;? super K&gt; comparator()</code> Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys. <code>boolean containsKey(Object key)</code> Returns true if this map contains a mapping for the specified key. <code>boolean containsValue(Object value)</code> Returns true if this map maps one or more keys to the specified value. <code>NavigableSet&lt;K&gt; descendingKeySet()</code> Returns a reverse order NavigableSet view of the keys contained in this map. <code>NavigableMap&lt;K,V&gt; descendingMap()</code> Returns a reverse order view of the mappings contained in this map. <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> Returns a Set view of the mappings contained in this map. <code>Map.Entry&lt;K,V&gt;   firstEntry()</code> Returns a key-value mapping associated with the least key in this map, or null if the map is empty. <code>K firstKey()</code> Returns the first (lowest) key currently in this map. <code>Map.Entry&lt;K,V&gt; floorEntry(K key)</code> Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key. <code>K floorKey(K key)</code> Returns the greatest key less than or equal to the given key, or null if there is no such key. <code>void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code> Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. <code>V get(Object key)</code> Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. <code>SortedMap&lt;K,V&gt; headMap(K toKey)</code> Returns a view of the portion of this map whose keys are strictly less than toKey. <code>NavigableMap&lt;K,V&gt; headMap(K toKey, boolean inclusive)</code> Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. <code>Map.Entry&lt;K,V&gt; higherEntry(K key)</code> Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key. <code>K higherKey(K key)</code> Returns the least key strictly greater than the given key, or null if there is no such key. <code>Set&lt;K&gt;   keySet()</code> Returns a Set view of the keys contained in this map. <code>Map.Entry&lt;K,V&gt;   lastEntry()</code> Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. <code>K lastKey()</code> Returns the last (highest) key currently in this map. <code>Map.Entry&lt;K,V&gt; lowerEntry(K key)</code> Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key. <code>K lowerKey(K key)</code> Returns the greatest key strictly less than the given key, or null if there is no such key. <code>NavigableSet&lt;K&gt; navigableKeySet()</code> Returns a NavigableSet view of the keys contained in this map. <code>Map.Entry&lt;K,V&gt; pollFirstEntry()</code> Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty. <code>Map.Entry&lt;K,V&gt; pollLastEntry()</code> Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. <code>V put(K key, V value)</code> Associates the specified value with the specified key in this map. <code>void putAll(Map&lt;? extends K,? extends V&gt; map)</code> Copies all of the mappings from the specified map to this map. <code>V remove(Object key)</code> Removes the mapping for this key from this TreeMap if present. <code>V replace(K key, V value)</code> Replaces the entry for the specified key only if it is currently mapped to some value. <code>boolean replace(K key, V oldValue, V newValue)</code> Replaces the entry for the specified key only if currently mapped to the specified value. <code>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. <code>int size()</code> Returns the number of key-value mappings in this map. <code>NavigableMap&lt;K,V&gt; subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)</code> Returns a view of the portion of this map whose keys range from fromKey to toKey. <code>SortedMap&lt;K,V&gt;   subMap(K fromKey, K toKey)</code> Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. <code>SortedMap&lt;K,V&gt;   tailMap(K fromKey)</code> Returns a view of the portion of this map whose keys are greater than or equal to fromKey. <code>NavigableMap&lt;K,V&gt; tailMap(K fromKey, boolean inclusive)</code> Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. <code>Collection&lt;V&gt; values()</code> Returns a Collection view of the values contained in this map.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#hashtable","title":"HashTable","text":"<ul> <li>The <code>Hashtable</code> class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value. To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the hashCode method and the equals method.</li> </ul> <ul> <li> <p>Features of Hashtable</p> <ul> <li>It is similar to HashMap, but is synchronized.</li> <li>Hashtable stores key/value pair in hash table.</li> <li>In Hashtable we specify an object that is used as a key, and the value we want to associate to that key. The key is then hashed, and the resulting hash code is used as the index at which the value is stored within the table.</li> <li>The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.</li> <li>HashMap doesn\u2019t provide any Enumeration, while Hashtable provides not fail-fast Enumeration.</li> </ul> </li> <li> <p><code>Hashtable</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>Hashtable()</code> Constructs a new, empty hashtable with a default initial capacity (11) and load factor (0.75). <code>Hashtable(int initialCapacity)</code> Constructs a new, empty hashtable with the specified initial capacity and default load factor (0.75). <code>Hashtable(int initialCapacity, float loadFactor)</code> Constructs a new, empty hashtable with the specified initial capacity and the specified load factor. <code>Hashtable(Map&lt;? extends K,? extends V&gt; t)</code> Constructs a new hashtable with the same mappings as the given Map. <ul> <li><code>HashTable</code> contains all methods below:</li> </ul> Method Description <code>void clear()</code> Clears this hashtable so that it contains no keys. <code>Object   clone()</code> Creates a shallow copy of this hashtable. <code>V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction</code>) Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). <code>V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code> If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. <code>V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <code>boolean contains(Object value)</code> Tests if some key maps into the specified value in this hashtable. <code>boolean containsKey(Object key)</code> Tests if the specified object is a key in this hashtable. <code>boolean containsValue(Object value)</code> Returns true if this hashtable maps one or more keys to this value. <code>Enumeration&lt;V&gt;   elements()</code> Returns an enumeration of the values in this hashtable. <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> Returns a Set view of the mappings contained in this map. <code>boolean equals(Object o)</code> Compares the specified Object with this Map for equality, as per the definition in the Map interface. <code>void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code> Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. <code>V get(Object key)</code> Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. <code>V getOrDefault(Object key, V defaultValue)</code> Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key. <code>int hashCode()</code> Returns the hash code value for this Map as per the definition in the Map interface. <code>boolean isEmpty()</code> Tests if this hashtable maps no keys to values. <code>Enumeration&lt;K&gt;   keys()</code> Returns an enumeration of the keys in this hashtable. <code>Set&lt;K&gt;   keySet()</code> Returns a Set view of the keys contained in this map. <code>V merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt;</code> remappingFunction) If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. <code>V put(K key, V value)</code> Maps the specified key to the specified value in this hashtable. <code>void putAll(Map&lt;? extends K,? extends V&gt; t)</code> Copies all of the mappings from the specified map to this hashtable. <code>V putIfAbsent(K key, V value)</code> If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value. <code>protected void   rehash()</code> Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently. <code>V remove(Object key)</code> Removes the key (and its corresponding value) from this hashtable. <code>boolean remove(Object key, Object value)</code> Removes the entry for the specified key only if it is currently mapped to the specified value. <code>V replace(K key, V value)</code> Replaces the entry for the specified key only if it is currently mapped to some value. <code>boolean replace(K key, V oldValue, V newValue)</code> Replaces the entry for the specified key only if currently mapped to the specified value. <code>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. <code>int size()</code> Returns the number of keys in this hashtable. <code>String   toString()</code> Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters \", \" (comma and space). <code>Collection&lt;V&gt; values()</code> Returns a Collection view of the values contained in this map.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#hashmap","title":"HashMap","text":"<ul> <li>Java <code>HashMap</code> class implements the Map interface which allows us to store key and value pair, where keys should be unique. If you try to insert the duplicate key, it will replace the element of the corresponding key. It is easy to perform operations using the key index like update, delete, etc. <code>HashMap</code> class is found in the <code>java.uti</code>l package.</li> </ul> <ul> <li> <p><code>HashMap</code> in Java is like the legacy <code>Hashtable</code> class, but it is not synchronized. It allows us to store the null elements as well, but there should be only one null key. Since Java 5, it is denoted as HashMap, where K stands for key and V for value. It inherits the <code>AbstractMap</code> class and implements the <code>Map</code> interface. <li> <p>Features of HashMap</p> <ul> <li>Java HashMap contains values based on the key.</li> <li>Java HashMap contains only unique keys.</li> <li>Java HashMap may have one null key and multiple null values.</li> <li>Java HashMap is non synchronized.</li> <li>Java HashMap maintains no order.</li> <li>The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.</li> </ul> </li> <li> <p><code>HashMap</code> contains constructors as below:</p> </li> Constructor Description <code>HashMap()</code> Constructs an empty HashMap with the default initial capacity (16) and the default load factor (0.75). <code>HashMap(int initialCapacity)</code> Constructs an empty HashMap with the specified initial capacity and the default load factor (0.75). <code>HashMap(int initialCapacity, float loadFactor)</code> Constructs an empty HashMap with the specified initial capacity and load factor. <code>HashMap(Map&lt;? extends K,? extends V&gt; m)</code> Constructs a new HashMap with the same mappings as the specified Map. <ul> <li><code>HashMap</code> contains all methods below:</li> </ul> Method Description <code>void clear()</code> Removes all of the mappings from this map. <code>Object   clone()</code> Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned. <code>V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). <code>V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code> If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. <code>V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <code>boolean containsKey(Object key)</code> Returns true if this map contains a mapping for the specified key. <code>boolean containsValue(Object value)</code> Returns true if this map maps one or more keys to the specified value. <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> Returns a Set view of the mappings contained in this map. <code>void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code> Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. <code>V get(Object key)</code> Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. <code>V getOrDefault(Object key, V defaultValue)</code> Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key. <code>boolean isEmpty()</code> Returns true if this map contains no key-value mappings. <code>Set&lt;K&gt; keySet()</code> Returns a Set view of the keys contained in this map. <code>V merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</code> If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. <code>V put(K key, V value)</code> Associates the specified value with the specified key in this map. <code>void putAll(Map&lt;? extends K,? extends V&gt; m)</code> Copies all of the mappings from the specified map to this map. <code>V putIfAbsent(K key, V value)</code> If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value. <code>V remove(Object key)</code> Removes the mapping for the specified key from this map if present. <code>boolean remove(Object key, Object value)</code> Removes the entry for the specified key only if it is currently mapped to the specified value. <code>V replace(K key, V value)</code> Replaces the entry for the specified key only if it is currently mapped to some value. <code>boolean replace(K key, V oldValue, V newValue)</code> Replaces the entry for the specified key only if currently mapped to the specified value. <code>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. <code>int size()</code> Returns the number of key-value mappings in this map. <code>Collection&lt;V&gt; values()</code> Returns a Collection view of the values contained in this map.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#linkedhashmap","title":"LinkedHashMap","text":"<ul> <li>The <code>LinkedHashMap</code> class is very similar to HashMap in most aspects. However, the linked hash map is based on both hash table and linked list to enhance the functionality of hash map.</li> <li>It maintains a doubly-linked list running through all its entries in addition to an underlying array of default size 16.</li> <li>To maintain the order of elements, the linked hashmap modifies the <code>Map.Entry</code> class of <code>HashMap</code> by adding pointers to the next and previous entries:</li> </ul> <ul> <li> <p>Important Features of a <code>LinkedHashMap</code> are listed as follows:</p> <ul> <li>A LinkedHashMap contains values based on the key. It implements the Map interface and extends the HashMap class.</li> <li>It contains only unique elements.</li> <li>It may have one null key and multiple null values.</li> <li>It is non-synchronized.</li> <li>It is the same as HashMap with an additional feature that it maintains insertion order. For example, when we run the code with a HashMap, we get a different order of elements.</li> </ul> </li> <li> <p><code>LinkedHashMap</code> contains constructors as below:</p> </li> </ul> Constructor Description <code>LinkedHashMap()</code> Constructs an empty insertion-ordered LinkedHashMap instance with the default initial capacity (16) and load factor (0.75). <code>LinkedHashMap(int initialCapacity)</code> Constructs an empty insertion-ordered LinkedHashMap instance with the specified initial capacity and a default load factor (0.75). <code>LinkedHashMap(int initialCapacity, float loadFactor)</code> Constructs an empty insertion-ordered LinkedHashMap instance with the specified initial capacity and load factor. <code>LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)</code> Constructs an empty LinkedHashMap instance with the specified initial capacity, load factor and ordering mode. <code>LinkedHashMap(Map&lt;? extends K,? extends V&gt; m)</code> Constructs an insertion-ordered LinkedHashMap instance with the same mappings as the specified map. <ul> <li><code>LinkedHashMap</code> contains all methods below:</li> </ul> Method Description <code>void clear()</code> Removes all of the mappings from this map. <code>boolean containsValue(Object value)</code> Returns true if this map maps one or more keys to the specified value. <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> Returns a Set view of the mappings contained in this map. <code>void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code> Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. <code>V get(Object key)</code> Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. <code>V getOrDefault(Object key, V defaultValue)</code> Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key. <code>Set&lt;K&gt;   keySet()</code> Returns a Set view of the keys contained in this map. <code>protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code> Returns true if this map should remove its eldest entry. <code>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. <code>Collection&lt;V&gt; values()</code> Returns a Collection view of the values contained in this map.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#components_comparison","title":"Components Comparison","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#hashmap_and_hashtable","title":"HashMap And HashTable","text":"<ul> <li><code>HashMap</code> and <code>Hashtable</code> both are used to store data in key and value form. Both are using hashing technique to store unique keys.</li> </ul> HashMap Hashtable <code>HashMap</code> allows one null key and multiple null values <code>Hashtable</code> does not allow any null key or value <code>HashMap</code> is non synchronized. It is not thread-safe and can not be shared between many threads without proper synchronization code <code>Hashtable</code> is synchronized. It is thread-safe and can be shared with many threads <code>HashMap</code> is fast <code>Hashtable</code> is slow <ul> <li>We can make the <code>HashMap</code> as synchronized by calling this code:</li> </ul> <pre><code>Map m = Collections.synchronizedMap(hashMap);\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#arraylist_and_linkedlist","title":"ArrayList And LinkedList","text":"<ul> <li><code>ArrayList</code> and <code>LinkedList</code> both implemented list interface and maintains insertion order. Both are non synchronized classes.</li> </ul> ArrayList LinkedList <code>ArrayList</code> internally uses a dynamic array to store the elements <code>LinkedList</code> internally uses a doubly linked list to store the elemnents Manipulation with <code>ArrayList</code> is slow because it internally uses an array. If any element is removed from the array, all the bits are shifted in memory Manipulation with <code>LinkedList</code> is faster than <code>ArrayList</code> because it uses a doubly linked list, so no bit shifting is required in memory An <code>ArrayList</code> can act as a list only because it implements List only <code>LinkedList</code> class can act as a list and queue both because it implements List and Dequeue interfaces <code>ArrayList</code> is better for storing and accessing data <code>LinkedList</code> is better for manipulation data","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Collection%20Framework/#references","title":"References","text":"<ul> <li>GeeksForGeeks</li> <li>JavaTPoint</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Composition%20Over%20Inheritance%20Principle/","title":"Java Composition Over Inheritance Principle","text":"","tags":["Java","Principles"]},{"location":"Java/Java%20Control%20Structures/","title":"Java Control Structures","text":"","tags":["Java"]},{"location":"Java/Java%20Core%20Introduction/","title":"Java Core Introduction","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Core%20Introduction/#history","title":"History","text":"<ul> <li>Java is a\u00a0programming language\u00a0and a\u00a0platform. Java is a high level, robust, object-oriented and secure programming language.</li> <li>James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991. Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee. Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.</li> <li>Platform: Any hardware or software environment in which a program runs, is known as a platform. Since Java has a runtime environment (JRE) and API, it is called a platform.</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Core%20Introduction/#java_basic","title":"Java Basic","text":"<ul> <li>Java Environment Setup</li> <li>Java Keywords </li> <li>Java Modifiers</li> <li>Java Collection Framework</li> <li>Java Datatypes</li> <li>Java Control Structures</li> <li>OOP<ul> <li>OOP Encapsulation</li> <li>OOP Abstraction</li> <li>OOP Inheritance</li> <li>OOP Polymorphism</li> <li>OOP Method Overriding</li> </ul> </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Core%20Introduction/#java_advances","title":"Java Advances","text":"<ul> <li>Java Threads</li> <li>Java Exceptions</li> <li>Java Generic</li> <li>Java File Handling</li> <li>Java Reflection</li> <li>Java Regular Expressions</li> <li>Java Enums</li> <li>Java Annotations</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Core%20Introduction/#advanced_topics","title":"Advanced Topics","text":"<ul> <li>Java 8<ul> <li>Java 8 Interface With Default Method</li> <li>Java 8 Interface With Static Method</li> <li>Java 8 Functional Interface</li> <li>Java 8 Lambda Expression</li> <li>Java 8 Stream</li> </ul> </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Core%20Introduction/#references","title":"References","text":"<ul> <li>tutorialspoint</li> <li>javatpoint</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20DRY%20Principles/","title":"Java DRY Principles","text":"","tags":["Java","Principles"]},{"location":"Java/Java%20DRY%20Principles/#what_is_the_dry_principle","title":"What Is The DRY Principle?","text":"<ul> <li><code>DRY</code> stands for <code>Don\u2019t Repeat Yourself</code>. It\u2019s a software development principle with the goal of removing logic duplication.</li> <li>The <code>DRY</code> code principle was originally made with software engineering in mind and coined by <code>Andy Hunt</code> and <code>Dave Thomas</code> in their book, <code>The Pragmatic Programmer.</code> They believed that <code>every piece of knowledge must have a single, unambiguous, authoritative representation within a system</code>. As the field of analytics engineering and data transformation develops, there\u2019s a growing need to adopt software engineering best practices, including writing DRY code.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20DRY%20Principles/#benefit","title":"Benefit","text":"<ul> <li>The advantages of the <code>DRY</code> principle include the following:<ul> <li>It makes the codebase easier to maintain since if we wanted to change the logic or add to it, we\u2019d only need to change it in one place instead of multiple locations where the logic appears</li> <li>It makes the code easier to read because there\u2019ll be less redundancy in the code</li> </ul> </li> <li>It\u2019s important to mention that misusing <code>DRY</code> (creating functions where we don\u2019t need to, making unnecessary abstractions, and so on) can lead to more complexity in our code rather than simplicity.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20DRY%20Principles/#dont_be_wet","title":"Don't Be WET","text":"<ul> <li><code>WET</code>, which stands for <code>Write Everything Twice,</code> is the opposite of <code>DRY</code>. It's a tongue-in-cheek reference to code that doesn\u2019t exactly meet the <code>DRY</code> standard. In a practical sense, <code>WET</code> code typically involves the repeated writing of the same code throughout a project, whereas <code>DRY</code> code would represent the repeated reference of that code.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20DRY%20Principles/#see_also","title":"See Also","text":"<ul> <li>Java Principles</li> <li>Java KISS Principle</li> <li>Java SOLID Principles</li> <li>Java Composition Over Inheritance Principle</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20DRY%20Principles/#references","title":"References","text":"<ul> <li>docs.getdbt.com</li> <li>baeldung</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20Datatypes/","title":"Java Datatypes","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#java_datatypes_1","title":"Java Datatypes","text":"<ul> <li> <p>Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java: <code>Primitive</code> and <code>Reference</code> types.</p> </li> <li> <p>Primitive types include:</p> <ul> <li>Numeric types: byte, short, int, long, float, double.</li> <li>Character type: char.</li> <li>Boolean type: boolean.</li> </ul> </li> <li> <p>Reference types include:</p> <ul> <li>Classes</li> <li>Interfaces</li> <li>Arrays</li> <li>Enumerations</li> </ul> </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#java_primitive_data_types","title":"Java Primitive Data Types","text":"<ul> <li>As listed above, we have 8 primitives defined in Java are\u00a0int,\u00a0byte,\u00a0short,\u00a0long,\u00a0float,\u00a0double,\u00a0boolean\u00a0and\u00a0char.\u00a0These aren't considered objects and represent raw values. They're stored directly on the stack. Below is the table that contain default values and example for each types.</li> </ul> Type Size (bits) Minimum Maximum Example byte 8 -2^7 2^7\u2013 1 byte b = 100; short 16 -2^15 2^15\u2013 1 short s = 30000; int 32 -2^31 2^31\u2013 1 int i = 100000000; long 64 -2^63 2^63\u2013 1 long l = 100000000000000; float 32 -2^-149 (2-2-23)\u00b72^127 float f = 1.456f; double 64 -2^-1074 (2-2-52)\u00b72^1023 double f = 1.456789012345678; char 16 0 2^16\u2013 1 char c = \u2018c'; boolean 1 \u2013 \u2013 boolean b = true;","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#byte_data_type","title":"Byte Data Type","text":"<ul> <li> <p>The byte data type is an example of primitive data type. It is an 8-bit signed two's complement integer. Its value-range lies between -128 to 127 (inclusive). Its minimum value is -128 and maximum value is 127. Its default value is 0.</p> </li> <li> <p>The byte data type is used to save memory in large arrays where the memory savings is most required. It saves space because a byte is 4 times smaller than an integer. It can also be used in place of \"int\" data type.</p> </li> </ul> <pre><code>byte b = 100;\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#short_data_type","title":"Short Data Type","text":"<ul> <li> <p>The short data type is a 16-bit signed two's complement integer. Its value-range lies between -32,768 to 32,767 (inclusive). Its minimum value is -32,768 and maximum value is 32,767. Its default value is 0.</p> </li> <li> <p>The short data type can also be used to save memory just like byte data type. A short data type is 2 times smaller than an integer.</p> </li> </ul> <pre><code>short s = 30000;\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#int_data_type","title":"Int Data Type","text":"<ul> <li> <p>The int data type is a 32-bit signed two's complement integer. Its value-range lies between - 2,147,483,648 (-2^31) to 2,147,483,647 (2^31 -1) (inclusive). Its minimum value is - 2,147,483,648 and maximum value is 2,147,483,647. Its default value is 0.</p> </li> <li> <p>The int data type is generally used as a default data type for integral values unless if there is no problem about memory.</p> </li> </ul> <pre><code>int i = 100000000;\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#long_data_type","title":"Long Data Type","text":"<ul> <li>The long data type is a 64-bit two's complement integer. Its value-range lies between -9,223,372,036,854,775,808(-2^63) to 9,223,372,036,854,775,807(2^63 -1)(inclusive). Its minimum value is - 9,223,372,036,854,775,808 and maximum value is 9,223,372,036,854,775,807. Its default value is 0. The long data type is used when you need a range of values more than those provided by int.</li> </ul> <pre><code>long l = 100000000000000;\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#float_data_type","title":"Float Data Type","text":"<p>The float data type is a single-precision 32-bit IEEE 754 floating point. Its value range is unlimited. It is recommended to use a float (instead of double) if you need to save memory in large arrays of floating point numbers. The float data type should never be used for precise values, such as currency. Its default value is 0.0F.</p> <pre><code>float f = 1.456f;\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#double_data_type","title":"Double Data Type","text":"<p>The double data type is a double-precision 64-bit IEEE 754 floating point. Its value range is unlimited. The double data type is generally used for decimal values just like float. The double data type also should never be used for precise values, such as currency. Its default value is 0.0d.</p> <pre><code>double f = 1.456789012345678;\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#char_data_type","title":"Char Data Type","text":"<ul> <li>The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':</li> </ul> <pre><code>char level = 'A'\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#boolean_data_type","title":"Boolean Data Type","text":"<ul> <li>A boolean type is declared with the boolean keyword and can only take the values true or false:</li> </ul> <pre><code>boolean isJavaFun = true;\nboolean isFishTasty = false;\nSystem.out.println(isJavaFun);     // Outputs true\nSystem.out.println(isFishTasty);   // Outputs false\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#stringbuffer_and_stringbuilder","title":"StringBuffer And StringBuilder","text":"StringBuffer StringBuilder <code>StringBuffer</code> (synchronized) and thread-safe. It means there are no two threads can access to a method of <code>StringBuffer</code> class at the same time <code>StringBuilder</code> (non-synchronized) and no thread-safe. It means there are two threads can access to a method of <code>StringBuilder</code> class at the same time <code>StringBuffer</code> is low <code>StringBuilder</code> is fast","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Datatypes/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/","title":"Java Environment Setup","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#basic_concepts","title":"Basic Concepts","text":"<ul> <li>Before installing Java and setup environment on our machine, we need to understand basic concepts as JDK, JRE, JVM and IDE. So what are they?</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#jdk","title":"JDK","text":"<ul> <li><code>JDK</code>(Java Development Kit) is a software development environment used for making applets and Java applications. It contains a complete Java Runtime Environment, Java developers can use it on Windows, macOS, Solaris, and Linux. JDK helps them to code and run Java programs. It is possible to install more than one JDK version on the same computer.</li> </ul> <ul> <li>Below there is a comprehensive list of mostly used components of Jdk which are very useful during the development of a java application.</li> </ul> Component Use javac Java compiler converts source code into Java bytecode. java The loader of the java apps. javap Class file disassembler. javadoc Documentation generator. jar Java Archiver helps manage JAR files. appletviewer Debugging of Java applets without a web browser. xjc Accepts an XML schema and generates Java classes. apt Annotation-processing tool. jdb Debugger. jmc Java Mission Control. JConsole Monitoring and Management Console. pack200 JAR compression tool. extcheck Utility tool to detects JAR file conflicts. idlj IDL-to-Java compiler. keytool The keystore manipulating tool. jstatd jstat daemon (experimental). jstat JVM statistics monitoring tool. jshell jshell introduced in java 9. jstack Prints Java stack traces(experimental). jrunscript Java command-line script shell. jhat Java Heap Analysis Tool (experimental). jpackage Generate self-contained application bundles. javaws Web Start launcher for JNLP applications. javah C header and stub generator. jarsigner jar signing and verification tool. jinfo configuration information(experimental). javafxpackager Package and sign JavaFX applications.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#jre","title":"JRE","text":"<ul> <li><code>JRE</code>(Java Runtime Environment) is a piece of a software which is designed to run other software. It contains the class libraries, loader class, and JVM. In simple terms, if you want to run Java program you need JRE. If you are not a programmer, you don\u2019t need to install JDK, but just JRE to run Java programs. Though, all JDK versions comes bundled with Java Runtime Environment, so you do not need to download and install the JRE separately in your PC.</li> </ul> <ul> <li> <p>The JDK and JRE interact with one another to create a sustainable runtime environment that enables the seamless execution of Java-based applications in virtually any operating system. The following make up the JRE runtime architecture:</p> </li> <li> <p><code>ClassLoader</code>: The Java ClassLoader dynamically loads all classes necessary to run a Java program. Since Java classes are only loaded into memory when they're required, the JRE uses ClassLoaders to automate this process on demand.</p> </li> <li> <p><code>Bytecode verifier</code>: The bytecode verifier ensures the format and accuracy of Java code before it passes to the interpreter. In the event that code violates system integrity or access rights, the class will be considered corrupted and won't be loaded.</p> </li> <li> <p><code>Interpreter</code>: After the bytecode successfully loads, the Java interpreter creates an instance of the JVM that allows the Java program to be executed natively on the underlying machine.</p> </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#jvm","title":"JVM","text":"<ul> <li><code>JVM</code>(Java Virtual Machine) is an engine that provides a runtime environment to drive the Java Code or applications. It converts Java bytecode into machine language. JVM is a part of Java Run Environment (JRE). It cannot be separately downloaded and installed. To install JVM, you need to install JRE.</li> <li>In many other programming languages, the compiler produces machine code for a specific system. However, Java compiler produces code for a virtual machine which is called as JVM.</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#ide","title":"IDE","text":"<ul> <li>An integrated development environment (IDE) is software for building applications that combines common developer tools into a single graphical user interface (GUI). An IDE typically consists of:<ul> <li>Source code editor: A text editor that can assist in writing software code with features such as syntax highlighting with visual cues, providing language specific auto-completion, and checking for bugs as code is being written.</li> <li>Local build automation: Utilities that automate simple, repeatable tasks as part of creating a local build of the software for use by the developer, like compiling computer source code into binary code, packaging binary code, and running automated tests.</li> <li>Debugger: A program for testing other programs that can graphically display the location of a bug in the original code.</li> </ul> </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#java_environment_setup_1","title":"Java Environment Setup","text":"<ul> <li>So if we are developers so we would like to install JDK and IDE into our computer for working with java. If we are users, we just need to install JRE to run java application on our computer.</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#install_jdk","title":"Install JDK","text":"<ul> <li>Go to this oracle page to download JDK8.</li> <li>For Linux user, please following steps below.</li> <li>Then use command below to extract the binary package and put it at folder that you want to use.</li> </ul> <pre><code>tar -xvf package-name.tar.gz\n</code></pre> <ul> <li>Set JAVA_HOME and PATH</li> </ul> <pre><code>sudo gedit ~/.bashrc\n</code></pre> <ul> <li>Then put these lines below to the end of file</li> </ul> <pre><code>export JAVA_HOME=/home/duc/solfwares/jdk1.8.0_333\nexport PATH=$PATH:$JAVA_HOME/bin\n</code></pre> <ul> <li>Use command below to check JDK installation</li> </ul> <pre><code>~$ java -version\njava version \"1.8.0_333\"\nJava(TM) SE Runtime Environment (build 1.8.0_333-b02)\nJava HotSpot(TM) 64-Bit Server VM (build 25.333-b02, mixed mode)\n</code></pre> <ul> <li>For Window user, please view this site</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#install_intellij_ide","title":"Install Intellij IDE","text":"<ul> <li>For Linux user, you can go to <code>Store</code> and find <code>Intellij Community</code></li> <li>For Window user, you can go to this site to download and install.</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#run_example_java","title":"Run Example Java","text":"<ul> <li>Open Intellij and create your first project following the instruction on this page </li> <li>Create a <code>HelloWorld</code> java class.</li> </ul> HelloWorld.class<pre><code>package com.java.core;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n\n}\n</code></pre> <ul> <li>Then run it by Intellij and you can see the result as below.</li> </ul> <pre><code>Hello World!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Environment%20Setup/#references","title":"References","text":"<ul> <li>RedHat</li> <li>Guru99</li> <li>Geeksforgeeks.</li> <li>Jetbrains</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Exceptions/","title":"Java Exceptions","text":"","tags":["Java"]},{"location":"Java/Java%20Exceptions/#checked_and_unchecked_exception_in_java","title":"Checked And Unchecked Exception In Java","text":"<ul> <li>There are 2 types of exception in java: checked and unchecked. All <code>checked exception</code> class are inherited from Exception class except RuntimeException. RuntimeException is the base class of all <code>unchecked exception</code> class, that is also a signal to recognize which one is checked exception or unchecked exception. </li> <li>The difference between checked and unchecked exception classes is the time to identify the exception can happen. With checked exception, checking is happened in compile time, some IDE will help us by showing syntax errors if we use a method that can throw any checked exception without try/catch. We have some checked exception: <code>IOException</code>, <code>Interrupted Exception</code>, <code>XMLParseException</code>... With unchecked Exception, checking exception can happen or not is only happened in the Runtime time and IDE will not help us identify it. Some popular unchecked exception: <code>NullPointerException</code>, <code>IndexOutOfBoundException</code>, <code>ClassCastException</code>...</li> <li>So, in programming the unchecked exception can be thrown in cases program have errors with logic. For errors that can be handle, the checked exception should be thrown.</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Exceptions/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Generic/","title":"Java Generic","text":"","tags":["Java"]},{"location":"Java/Java%20Generic/#java_generic_1","title":"Java Generic","text":"<ul> <li>Java Generics was added in Java 5 to provide compile time type checking and removing risk of ClassCastException which was common while working with collection classes.</li> </ul> <pre><code>    // Before Java 5\n\n    List list = new ArrayList();\n</code></pre> <pre><code>    // Java 5 and after\n\n    List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n</code></pre>","tags":["Java"]},{"location":"Java/Java%20Generic/#generic_class","title":"Generic Class","text":"<ul> <li>We can define our own classes with generic type. A generic type is a class or interface that is parameterized over types. We use bracket (&lt;&gt;) to specify the type parameter.</li> </ul> GenericType.java<pre><code>package com.java.core.generic;\n\npublic class GenericType&lt;T&gt; {\n\n    private T t;\n\n    public T getT() {\n        return t;\n    }\n\n    public void setT(T t) {\n        this.t = t;\n    }\n}\n</code></pre> <ul> <li>Then we can create this class with setting any parameter type that we want as below:</li> </ul> JavaGeneric.java<pre><code>package com.java.core.generic;\n\npublic class JavaGeneric {\n\n    public static void main(String[] args) {\n        GenericType&lt;String&gt; stringGenericType = new GenericType&lt;&gt;();\n        stringGenericType.setT(\"this is a string\");\n        System.out.println(stringGenericType.getT().getClass().getSimpleName());\n\n        GenericType&lt;Long&gt; longGenericType = new GenericType&lt;&gt;();\n        longGenericType.setT(100L);\n        System.out.printf(longGenericType.getT().getClass().getSimpleName());\n    }\n\n}\n</code></pre> <ul> <li>When we run the main method, then we should see the result as below. It means, the parameter of GenericType class can be <code>String</code> or <code>Long</code> base on the type in the &lt;&gt; that we want when we create the GenericType class.</li> </ul> <pre><code>String\nLong\nProcess finished with exit code 0\n</code></pre>","tags":["Java"]},{"location":"Java/Java%20Generic/#generic_interface","title":"Generic Interface","text":"Application.java<pre><code>package com.java.core.generic;  \n\npublic interface Application&lt;T, S&gt; {  \n\n    T getApplication(S appId);  \n\n}\n</code></pre> <ul> <li>Java Generic Type:  Java Generic Type naming convention helps us understanding code easily and having a naming convention is one of the best practices of Java programming language.</li> <li>The most commonly used type parameter names are:</li> </ul> <pre><code>E - Element (used extensively by Java Collection Framework. Ex: ArrayList, Set, etc)\nK - Key (Used in Map)\nN - Number\nT - Type\nV - Value (Used in Map)\nS, U, V etc - 2nd, 3rdm 4th types\n</code></pre>","tags":["Java"]},{"location":"Java/Java%20Generic/#generic_method","title":"Generic Method","text":"<pre><code>public static &lt;T&gt; T cloneObject(T t, Class&lt;T&gt; type) {\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        String objectString = mapper.writeValueAsString(t);\n        return mapper.readValue(objectString, type);\n    } catch (JsonProcessingException e) {\n        Throw new RuntimeException(\"Clone object error!: \" + e.getMessage());\n    }\n}\n</code></pre>","tags":["Java"]},{"location":"Java/Java%20Generic/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java"]},{"location":"Java/Java%20KISS%20Principle/","title":"Java KISS Principle","text":"","tags":["Java","Principles"]},{"location":"Java/Java%20KISS%20Principle/#what_is_the_kiss_principle","title":"What Is The KISS Principle?","text":"<ul> <li><code>KISS</code> (Keep It Simple, Stupid) is a principle that aims to avoid complexity in code. Complexity can make your code harder to understand, test, and modify. <code>KISS</code> encourages you to write code that is clear, concise, and self-explanatory. This way, you can avoid unnecessary features, dependencies, or abstractions that can confuse you or other developers who work on your code.</li> <li>After all, programming languages are for humans to understand \u2014 computers can only understand 0 and 1 \u2014 so keep coding simple and straightforward. Each method should only solve one small problem, not many use cases. If you have a lot of conditions in the method, break these out into smaller methods. It will not only be easier to read and maintain, but it can help find bugs a lot faster.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20KISS%20Principle/#how_to_apply_kiss","title":"How To Apply KISS?","text":"<ul> <li>Try to write simple code. Think of many solutions for your problem, then choose the best, simplest one and transform that into your code. Whenever you find lengthy code, divide that into multiple methods \u2014 right-click and refactor in the editor. Try to write small blocks of code that do a single task.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20KISS%20Principle/#benefit","title":"Benefit","text":"<ul> <li>if the code is written simply, then there will not be any difficulty in understanding that code, and also will be easy to modify and maintain by other developers.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20KISS%20Principle/#see_also","title":"See Also","text":"<ul> <li>Java Principles</li> <li>Java DRY Principles</li> <li>Java SOLID Principles</li> <li>Java Composition Over Inheritance Principle</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20KISS%20Principle/#references","title":"References","text":"<ul> <li>linkedin</li> <li>dzone.com</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20Keywords/","title":"Java Keywords","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Keywords/#java_keywords_1","title":"Java Keywords","text":"<ul> <li>Java has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers.</li> </ul> Keyword Description abstract A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from) assert For debugging boolean A data type that can only store true and false values break Breaks out of a loop or a switch block byte A data type that can store whole numbers from -128 and 127 case Marks a block of code in switch statements catch Catches exceptions generated by try statements char A data type that is used to store a single character class Defines a class continue Continues to the next iteration of a loop const Defines a constant. Not in use - use final instead default Specifies the default block of code in a switch statement do Used together with while to create a do-while loop double A data type that can store whole numbers from 1.7e\u2212308 to 1.7e+308 else Used in conditional statements enum Declares an enumerated (unchangeable) type exports Exports a package with a module. New in Java 9 extends Extends a class (indicates that a class is inherited from another class) final A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override) finally Used with exceptions, a block of code that will be executed no matter if there is an exception or not float A data type that can store whole numbers from 3.4e\u2212038 to 3.4e+038 for Create a for loop goto Not in use, and has no function if Makes a conditional statement implements Implements an interface import Used to import a package, class or interface instanceof Checks whether an object is an instance of a specific class or an interface int A data type that can store whole numbers from -2147483648 to 2147483647 interface Used to declare a special type of class that only contains abstract methods long A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808 module Declares a module. New in Java 9 native Specifies that a method is not implemented in the same Java source file (but in another language) new Creates new objects package Declares a package private An access modifier used for attributes, methods and constructors, making them only accessible within the declared class protected An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses public An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class requires Specifies required libraries inside a module. New in Java 9 return Finished the execution of a method, and can be used to return a value from a method short A data type that can store whole numbers from -32768 to 32767 static A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class strictfp Restrict the precision and rounding of floating point calculations super Refers to superclass (parent) objects switch Selects one of many code blocks to be executed synchronized A non-access modifier, which specifies that methods can only be accessed by one thread at a time this Refers to the current object in a method or constructor throw Creates a custom error throws Indicates what exceptions may be thrown by a method transient A non-accesss modifier, which specifies that an attribute is not part of an object's persistent state try Creates a try...catch statement var Declares a variable. New in Java 10 void Specifies that a method should not have a return value volatile Indicates that an attribute is not cached thread-locally, and is always read from the \"main memory\" while Creates a while loop <ul> <li>Note: <code>true</code>,\u00a0<code>false</code>, and\u00a0<code>null</code>\u00a0are not keywords, but they are literals and reserved words that cannot be used as identifiers.</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Keywords/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Keywords/#references","title":"References","text":"<ul> <li>w3schools</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/","title":"Java Modifiers","text":"","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#java_modifiers_1","title":"Java Modifiers","text":"<ul> <li><code>Modifiers</code>\u00a0are specific keywords present in Java using that we can make changes to the characteristics of a variable, method, or class and limit its scope. Java programming language has a rich set of Modifiers.</li> <li>There are two types of <code>modifiers</code> in Java: <code>access modifiers</code> and <code>non-access modifiers</code>.</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#access_modifiers","title":"Access Modifiers","text":"<ul> <li>The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods, and class by applying the access modifier on it.</li> <li>There are 4 types of Java access modifiers:</li> </ul> Access Modifier Descriptions <code>private</code> The access level of a private modifier is only within the class. It cannot be accessed from outside the class. <code>default</code> The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default. <code>protected</code> The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package. <code>public</code> The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package. Access Modifier Within Class Within Package Outside Package By Subclass Only Outside Package <code>private</code> Y N N N <code>default</code> Y Y N N <code>protected</code> Y Y Y N <code>public</code> Y Y Y Y <ul> <li>Let's see the example below for more details.</li> <li>For example, we have a class <code>AccessExample</code> in the package <code>com.java.core.accessmodifier.samepackage</code> as below.</li> </ul> AccessExample.java<pre><code>package com.java.core.accessmodifier.samepackage;\n\npublic class AccessExample {\n    private String privateVariable;       // private access modifier\n\n    String defaultVariable;              // default access modifier\n\n    protected String protectedVariable;  // protected access modifier\n\n    public String publicVariable;        // public access modifier\n\n    public void accessExample() {\n        // Access within the class\n        privateVariable = \"Private variable accessed within the class\";\n        defaultVariable = \"Default variable accessed within the class\";\n        protectedVariable = \"Protected variable accessed within the class\";\n        publicVariable = \"Public variable accessed within the class\";\n\n    }\n}\n</code></pre> <ul> <li>This class contains 4 fields with 4 access modifiers. So by default, all fields with all these access modifiers can be accessed inside it.</li> <li>Now, let's create another class which is in the same package with the class above. As you can see, for the private field, we can't access it.</li> </ul> SamePackage.java<pre><code>package com.java.core.accessmodifier.samepackage;\n\npublic class SamePackage {\n\n    public void accessExample() {\n        // Access within the package\n        AccessExample obj = new AccessExample();\n        obj.defaultVariable = \"Default variable accessed within the package\";\n        obj.protectedVariable = \"Protected variable accessed within the package\";\n        obj.publicVariable = \"Public variable accessed within the package\";\n    }\n\n}\n</code></pre> <ul> <li>Next, let's create another package with another class which will extends the <code>AccessExample</code> class as below.</li> </ul> SubclassExample.java<pre><code>package com.java.core.accessmodifier.anotherpackage;\n\nimport com.java.core.accessmodifier.samepackage.AccessExample;\n\npublic class SubclassExample extends AccessExample {\n    public void accessExample() {\n        // Access outside the package by subclass only\n        protectedVariable = \"Protected variable accessed outside the package by subclass only\";\n        publicVariable = \"Public variable accessed outside the package by subclass only\";\n    }\n}\n</code></pre> <ul> <li>As you can see, we can only access the <code>protectedVariable</code> and <code>publicVariable</code>.</li> <li>Finally, let's create another class in the another package which doesn't extend the <code>AccessExample</code> class, then we can see that we only can access the <code>publicVariable</code>.</li> </ul> OutsidePackageExample.java<pre><code>package com.java.core.accessmodifier.anotherpackage;\n\nimport com.java.core.accessmodifier.samepackage.AccessExample;\n\npublic class OutsidePackageExample {\n    public void accessExample() {\n        // Access outside the package\n        AccessExample obj = new AccessExample();\n        obj.publicVariable = \"Public variable accessed outside the package\";\n    }\n}\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#non-access_modifiers","title":"Non-Access Modifiers","text":"<ul> <li>The <code>non-access modifiers</code> provide information about the characteristics of a class, method, or variable to the JVM. There are seven types of Non-Access modifiers in Java.</li> </ul> Modifier Name Overview static The member belongs to the class, not to objects of that class. final Variable values can't be changed once assigned, methods can't be abstract If applied to a method - has to be implemented in a subclass, if synchronized Controls thread access to a block/method. volatile The variable value is always read from the main memory, not from transient The member is skipped when serializing an object.","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#final_keyword_in_java","title":"Final Keyword In Java","text":"<ul> <li>The <code>final</code> keyword in java is used to restrict the user. The java <code>final</code> keyword can be used in many context. Final can be<ul> <li>variable</li> <li>method</li> <li>class</li> </ul> </li> <li>The final keyword can be applied with the variables, a final variable that have no value, it is called blank final variable or uninitialized final variable. It can be initialized in the constructor only. The blank final variable can be static also which will be initialized in the static block only.</li> <li>If you make any variable as final, you can not change the value of final variable (It will be constant)</li> <li>If you make any method as final, you can not override it.</li> <li> <p>If you make any class as final, you can not inherit it.</p> </li> <li> <p>Example with <code>final for variable</code></p> </li> </ul> FinalVariableExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic class FinalVariableExample {\n\n    public static final String CONSTANT_VARIABLE = \"This is a constant\";\n    private final String finalParameter;\n\n\n    public FinalVariableExample(String finalParameter) {\n        this.finalParameter = finalParameter;\n    }\n\n    public String getFinalParameter() {\n        return finalParameter;\n    }\n}\n</code></pre> JavaFinalMain.java<pre><code>package com.java.core.nonmodifier;  \n\npublic class JavaFinalMain {  \n\n    public static void main(String[] args) {  \n  FinalVariableExample finalVariableExample = new FinalVariableExample(\"Final Parameter value\");\n        System.out.println(finalVariableExample.getFinalParameter());\n        System.out.println(FinalClassExample.CONSTANT_VARIABLE);\n    }  \n\n}\n</code></pre> Result<pre><code>Final Parameter value\nThis is a constant\n</code></pre> <ul> <li>Example with <code>final for method</code></li> </ul> FinalMethodExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic class FinalMethodExample {\n\n    public final void printSomething(String something) {\n        System.out.println(\"Final Method printSomething: \" + something);\n    }\n\n    public void printData(String data) {\n        System.out.println(\"printData: \" + data);\n    }\n\n}\n</code></pre> ExtendFinalMethodExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic class ExtendFinalMethodExample extends FinalMethodExample {\n\n//    can not override final method of FinalMethodExample. Compile Error\n//    @Override\n//    public final void printSomething(String something) {\n//        System.out.println(\"printSomething: \" + something);\n//    }\n\n    @Override\n    public void printData(String data) {\n        System.out.println(\"Override printDate: \" + data);\n    }\n\n}\n</code></pre> JavaFinalMain.java<pre><code>package com.java.core.nonmodifier;\n\npublic class JavaFinalMain {\n\n    public static void main(String[] args) {\n        FinalMethodExample finalMethodExample = new FinalMethodExample();\n        finalMethodExample.printSomething(\"printSomething\");\n        finalMethodExample.printData(\"printDate\");\n\n        ExtendFinalMethodExample extendFinalMethodExample = new ExtendFinalMethodExample();\n        extendFinalMethodExample.printData(\"printData\");\n    }\n\n}\n</code></pre> Result<pre><code>Final Method printSomething: printSomething\nprintData: printData\nOverride printDate: printData\n</code></pre> <ul> <li>Example with <code>final for Class</code></li> </ul> FinalMethodExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic final class FinalClassExample {\n\n    private String exampleParam;\n\n    public void printSomething(String something) {\n        System.out.println(\"FinalClass printSomething: \" + something);\n    }\n\n    public String getExampleParam() {\n        return exampleParam;\n    }\n\n    public void setExampleParam(String exampleParam) {\n        this.exampleParam = exampleParam;\n    }\n}\n</code></pre> ExtendFinalClassExample.java<pre><code>package com.java.core.nonmodifier;\n\n//Can not extend Compile Error\npublic class ExtendFinalClassExample extends FinalClassExample {\n\n}\n</code></pre> JavaFinalMain.java<pre><code>package com.java.core.nonmodifier;\n\npublic class JavaFinalMain {\n\n    public static void main(String[] args) {\n        FinalClassExample finalClassExample = new FinalClassExample();\n        finalClassExample.setExampleParam(\"final class with example param\");\n        System.out.println(finalClassExample.getExampleParam());\n        finalClassExample.printSomething(\"something\");\n    }\n\n}\n</code></pre> Result<pre><code>final class with example param\nFinalClass printSomething: something\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#java_static_keyword","title":"Java Static Keyword","text":"<ul> <li> <p>The <code>static</code> keyword in Java is used for memory management mainly. We can apply <code>static</code> keyword with <code>variables</code>, <code>methods</code>, <code>blocks</code> and <code>nested classes</code>. The static keyword belongs to the class than an instance of the class.</p> </li> <li> <p>We can apply <code>static</code> keyword with</p> <ul> <li>Variable (also known as a class variable)</li> <li>Method (also known as a class method)</li> <li>Block</li> <li>Nested class</li> <li>Imports</li> </ul> </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#static_variable","title":"Static Variable","text":"<ul> <li>The <code>static variable</code> can be used to refer to the common property of all objects (which is not unique for each object). The static variable gets memory only once in the class area at the time of class loading.</li> <li>Variables\u00a0declared\u00a0<code>static</code>\u00a0can be accessed via the class name (instead of the usual object reference, e.g. (<code>MyClass.staticVariable</code>),\u00a0and they can be accessed without the class being instantiated.</li> <li><code>static variable</code> makes our program memory efficient (i.e., it saves memory).</li> <li>So for example, Let's create a class with a static field as below.</li> </ul> StaticVariable.java<pre><code>package com.java.core.nonmodifier;\n\npublic class StaticVariableClassExample {\n\n    static int count; // static variable\n\n    public StaticVariableClassExample() {\n        count++; // accessing and modifying static variable\n    }\n\n}\n</code></pre> <ul> <li>In this class, we just simply have a static field and a constructor which will modify the value of this static field.</li> <li>Now, let's create a main class and use the static variable of the class above.</li> </ul> JavaStaticMain.java<pre><code>package com.java.core.nonmodifier;\n\npublic class JavaStaticMain {\n\n    public static void main(String[] args) {\n        System.out.println(\"countValue is \" + StaticVariableClassExample.count);\n        StaticVariableClassExample staticVariable = new StaticVariableClassExample();\n        System.out.println(\"countValue is \" + StaticVariableClassExample.count);\n    }\n}\n</code></pre> <pre><code>countValue is 0\ncountValue is 1\n\nProcess finished with exit code 0\n</code></pre> <ul> <li>As you can see, we can access the static field via class name and without the instantiated of <code>StaticVariable</code> class </li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#static_method","title":"Static Method","text":"<ul> <li> <p>If we apply static keyword with any method, it is known as <code>static method</code>.</p> <ul> <li>A static method belongs to the class rather than the object of a class.</li> <li>A static method can be invoked without the need for creating an instance of a class.</li> <li>A static method can access static data member and can change the value of it.</li> </ul> </li> <li> <p>The <code>static</code>\u00a0methods can only use\u00a0<code>static</code>\u00a0variables and call other\u00a0<code>static</code>\u00a0methods, and cannot refer to\u00a0<code>this</code>\u00a0or\u00a0<code>super</code>\u00a0in any way (an object instance might not even exist when we call a\u00a0<code>static</code>\u00a0method, so\u00a0<code>this</code>\u00a0wouldn't make sense).</p> </li> </ul> <p>Note: It's very important to note that\u00a0<code>static</code>\u00a0variables and methods\u00a0<code>can't</code>\u00a0access non-<code>static</code>\u00a0(instance) variables and methods. On the other hand, non-<code>static</code> variables and methods\u00a0can\u00a0access\u00a0<code>static</code>\u00a0variables and methods.</p> <ul> <li> <p>This is logical, as\u00a0<code>static</code>\u00a0members exist even without an object of that class, whereas\u00a0<code>instance</code>\u00a0members exist only after a class has been instantiated.</p> </li> <li> <p>So for example, Let's create a class with a static method as below.</p> </li> </ul> StaticMethodClassExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic class StaticMethodClassExample {\n\n    private String exampleVariable;\n    private static String staticExampleVariable;\n\n    public static int add(int a, int b) { // static method\n        //this.exampleVariable = \"Example Value\";   //Can't access exampleVariable\n        staticExampleVariable = \"Example Static Value\";\n        System.out.println(staticExampleVariable);\n        return a + b;\n    }\n\n}\n</code></pre> <ul> <li>Then inside this class, we can't access the class variable from the static method and like the static variable we can access the static method without the instantiated class.</li> </ul> StaticMethodClassExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic class JavaStaticMain {\n\n    public static void main(String[] args) {\n\n        System.out.println(\"Sum of a and b: \" + StaticMethodClassExample.add(5,5));\n\n    }\n}\n</code></pre> <pre><code>Example Static Value\nSum of a and b: 10\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#static_block","title":"Static Block","text":"<ul> <li> <p><code>Static block</code>: A static block is a block of code that is associated with a static keyword and is executed only once when the class is loaded into memory. It can be used for static initialization of a class.</p> </li> <li> <p><code>Calling static block</code>: A static block is automatically called as soon as the class is loaded in memory. There is no need to explicitly call it. It can also be executed before the main method at the time of classloading.</p> </li> <li> <p><code>Static block and JDK version</code>: A static block can print if the JDK version is 1.6 or previous. If the JDK version is later, it will throw an error.</p> </li> <li> <p><code>Number and order of static blocks</code>: A class can have any number of static blocks and they can appear anywhere in the class body. They are called in the order that they appear in the source code</p> </li> <li> <p>So let's take an example, we will create a class with name <code>StaticBlockClassExample</code> as below.</p> </li> </ul> StaticBlockClassExample.java<pre><code>package com.java.core.nonmodifier;\n\npublic class StaticBlockClassExample {\n\n    static int count;\n\n    static {\n        count = 10; // initializing static variable in static block\n        System.out.println(\"count Value is: \" + count);\n    }\n\n}\n</code></pre> <ul> <li>As you can see in the static block we can instantiate the value for static variables. </li> <li>Next, if we define static blocks inside the main class then they will be executed before the main method is executed and the order of static blocks will base on where they are defined in the source code.</li> </ul> JavaStaticMain.java<pre><code>package com.java.core.nonmodifier;\n\npublic class JavaStaticMain {\n\n\n    static {\n        System.out.println(\"This static block runs before the main method of JavaStaticMain 1\");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"StaticBlockClassExample count Value is: \" + StaticBlockClassExample.count);\n    }\n\n    static {\n        System.out.println(\"This static block runs before the main method of JavaStaticMain 2\");\n    }\n\n}\n</code></pre> <ul> <li>Now, let's execute the main class then you can see the log as below.</li> </ul> <pre><code>This static block runs before the main method of JavaStaticMain 1\nThis static block runs before the main method of JavaStaticMain 2\ncount Value is: 10\nStaticBlockClassExample count Value is: 10\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Modifiers/#references","title":"References","text":"<ul> <li>Javatpoint</li> <li>Stackabuse</li> <li>Source Code</li> </ul>","tags":["Java","JavaBasic"]},{"location":"Java/Java%20Principles/","title":"Java Principles","text":"","tags":["Java","Principles"]},{"location":"Java/Java%20Principles/#what_are_java_design_principles","title":"What Are Java Design Principles?","text":"<ul> <li>In Java, the design principles are the set of advice used as rules in design making. In Java, the design principles are similar to the design patterns concept. The only difference between the design principle and design pattern is that the design principles are more generalized and abstract. The design pattern contains much more practical advice and concrete. The design patterns are related to the entire class problems, not just generalized coding practices.</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20Principles/#some_common_principles","title":"Some Common Principles","text":"<ul> <li>There are some of the common design principles are as follows:</li> <li>Java SOLID Principles</li> <li>Java KISS Principle</li> <li>Java DRY Principles</li> <li>Java Composition Over Inheritance Principle</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20Principles/#see_also","title":"See Also","text":"<ul> <li>Java SOLID Principles</li> <li>Java KISS Principle</li> <li>Java DRY Principles</li> <li>Java Composition Over Inheritance Principle</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20Principles/#references","title":"References","text":"<ul> <li>JavaTPoint</li> </ul>","tags":["Java","Principles"]},{"location":"Java/Java%20Regular%20Expressions/","title":"Java Regular Expressions","text":"<p>tags: [\"Java\"] status: \"Inprogress\" created: 2023-05-21 13:49 modified: 2023-06-05 21:18</p>"},{"location":"Java/Java%20SOLID%20Principles/","title":"Java SOLID Principles","text":"","tags":["Java","Principles"]},{"location":"Java/Java%20Threads/","title":"Java Threads","text":"","tags":["Java"]},{"location":"Java/Java%20Threads/#thread_safety_in_java","title":"Thread Safety In Java","text":"<ul> <li>Thread safety in java is the process to make our program safe to use in multi threads environment, there are different ways through which we can make our program thread safe.</li> <li>Synchonization is the easiest and most widely used tool for thread safety in java. JVM guarantees that synchronized code will be executed by only on thread at a time. Java keyword <code>synchronized</code> is used to create synchronized code and internally it uses locks on object or class to make sure only one thread is executing the synchronized code.</li> <li>Using Atomic Wrapper Classes from java.util.concurrent.atomic package Ex: <code>AtomicInterger</code></li> <li>Using locks from java.util.concurrent.locks package</li> <li>Using thread safe collection classes, ex: <code>Hashtable</code></li> <li>Using volitile keyword with variable to make every thread read the data from memory, not read from thread cache.</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Threads/#java_threadlocal","title":"Java ThreadLocal","text":"<ul> <li><code>ThreadLocal</code> in java is another way to achieve thread-safety apart from writing immutable classes. Thread local can be considered as a scope of access like session scope or request scope. In threadlocal, you can set any object and this object will be local and global to the specific thread which is accessing this object.</li> <li>Java <code>ThreadLocal</code> class provides thread-local variables. It enables you to create variables that can only be read and write by the same thread. If two threads are executing the same code and that code has a referece to a thread <code>ThreadLocal</code> variable then the two threads can not see the local variable of each other.</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Threads/#java_threadpool","title":"Java ThreadPool","text":"<ul> <li>Java <code>ThreadPool</code> represents a group of worker threads that are waiting for the job and reuse many times. In case of thread pool, a group of fixed size thread pool is pulled out and assigned a job by the service provider. After completion of the job, thread is contained in the thread pool again.</li> <li>Advantages of java thread pool:</li> <li>Better performance: It saves time because there is no need to create new thread.</li> <li>Thread pool is used in Servlet and JSP where container creates a thread pool to process the request. </li> <li>We will continue to discuss about thread pool in Spring <code>@Async</code> annotation.</li> </ul>","tags":["Java"]},{"location":"Java/Java%20Threads/#see_also","title":"See Also","text":"<ul> <li>Java Core Introduction</li> </ul>","tags":["Java"]},{"location":"Java/OOP%20Abstraction/","title":"OOP Abstraction Introduction","text":"","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Abstraction/#what_is_the_abstraction_in_oop","title":"What Is The Abstraction In OOP?","text":"<ul> <li><code>Abstraction</code> is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.</li> <li>In Java, <code>abstraction</code> is achieved using Abstract classes and interfaces.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Abstraction/#abstract_class","title":"Abstract Class","text":"<ul> <li>A class which contains the <code>abstract</code> keyword in its declaration is known as abstract class.<ul> <li><code>Abstract classes</code> may or may not contain <code>abstract methods</code>, i.e., methods without body ( public void get(); )</li> <li>But, if a class has at least one <code>abstract method</code>, then the class must be declared abstract.</li> <li>If a class is declared abstract, it cannot be instantiated.</li> <li>To use an abstract class, you have to  inherit it from another class, provide implementations to the abstract methods in it.</li> <li>If you inherit an abstract class, you have to provide implementations to all the abstract methods in it.</li> </ul> </li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Abstraction/#abstraction_example","title":"Abstraction Example","text":"<ul> <li>To create an abstract class, just use the <code>abstract</code> keyword before the class keyword, in the class declaration. Then to create <code>abstract</code> methods, you also put the <code>abstract</code> keyword after the access modifier of methods and these methods must not have body.</li> </ul> Employee.java<pre><code>    package com.java.core.abstraction;\n\n    public abstract class Employee {\n\n            private String name;\n            private String address;\n            private String id;\n\n            public Employee(String name, String address, String id) {\n                    this.name = name;\n                    this.address = address;\n                    this.id = id;\n            }\n\n            protected abstract double getBaseSalary();\n            protected abstract double getBonus();\n\n            public String getName() {\n                    return name;\n            }\n\n            public void setName(String name) {\n                    this.name = name;\n            }\n\n            public String getAddress() {\n                    return address;\n            }\n\n            public void setAddress(String address) {\n                    this.address = address;\n            }\n\n            public String getId() {\n                    return id;\n            }\n\n            public void setId(String id) {\n                    this.id = id;\n            }\n\n            @Override\n            public String toString() {\n                    return \"Employee{\" +\n                                    \"name='\" + name + '\\'' +\n                                    \", address='\" + address + '\\'' +\n                                    \", id='\" + id + '\\'' +\n                                    '}';\n            }\n    }\n</code></pre> <ul> <li>We can inherit the properties of <code>Employee abstract class</code> just like concrete class in the following way.</li> </ul> <p>Employee.java<pre><code>    package com.java.core.abstraction;\n\n    public class Developer extends Employee {\n\n            public Developer(String name, String address, String id) {\n                    super(name, address, id);\n            }\n\n            @Override\n            protected double getBaseSalary() {\n                    return 100;\n            }\n\n            @Override\n            protected double getBonus() {\n                    return 50;\n            }\n    }\n</code></pre> - As you can see, in then <code>Employee abstract class</code> we have two <code>abstract methods</code> so we have to <code>@Override</code> them in <code>Developer</code> child class for providing implementations.</p> <ul> <li>Here, for testing, you cannot instantiate the <code>Employee</code> class, but you can instantiate the <code>Developer</code> Class, and using this instance you can access all the fields and methods of <code>Employee</code> class as shown below.</li> </ul> JavaAbstractionMain.java<pre><code>    package com.java.core.abstraction;\n\n    public class JavaAbstractionMain {\n\n            public static void main(String[] args) {\n                    Employee developer = new Developer(\"Duc\", \"HCM\", \"12345\");\n                    System.out.println(developer);\n                    System.out.println(\"Base-Salary: \" + developer.getBaseSalary());\n                    System.out.println(\"Bonus: \" + developer.getBonus());\n            }\n\n    }\n</code></pre> <pre><code>Employee{name='Duc', address='HCM', id='12345'}\nBase-Salary: 100.0\nBonus: 50.0\n\nProcess finished with exit code 0\n</code></pre>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Abstraction/#see_also","title":"See Also","text":"<ul> <li>OOP</li> <li>OOP Inheritance</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Abstraction/#references","title":"References","text":"<ul> <li>Tutorialspoint</li> <li>Full Source Code</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Encapsulation/","title":"OOP Encapsulation Introduction","text":"","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Encapsulation/#what_is_the_encapsulation_in_oop","title":"What Is The Encapsulation In OOP?","text":"<ul> <li><code>Encapsulation</code> in Java is a mechanism to wrap up variables(data) and methods(code) together as a single unit. It is the process of hiding information details and protecting data and behavior of the object.</li> <li>In Java, a <code>class</code> is an example of <code>encapsulation</code> in that it consists of data and methods that have been bundled into a single unit (wrapping) and restricted accesses from other classes by  access modifiers (hiding information).</li> <li>To achieve <code>encapsulation</code> in Java, a class has to set attributes (variables) as <code>private</code> and provide public <code>setter</code> and <code>getter</code> methods to modify and view these attributes. See example below.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Encapsulation/#encapsulation_example","title":"Encapsulation Example","text":"<ul> <li>Create an <code>encapsulation</code> class with name Motorcycle.</li> </ul> Motorcycle.java<pre><code>public class Motorcycle {\n\n    private String name;\n    private String color;\n    private String model;\n\n    public String getName() {  \n    return name;  \n    }  \n\n    public void setName(String name) {  \n            this.name = name;  \n    }  \n\n    public String getColor() {  \n            return color;  \n    }  \n\n    public void setColor(String color) {  \n            this.color = color;  \n    }  \n\n    public String getModel() {  \n            return model;  \n    }  \n\n    public void setModel(String model) {  \n            this.model = model;  \n    }\n\n}\n</code></pre> <ul> <li>Test the class Motorcycle.</li> </ul> Main.java<pre><code>public class Main {\n\n    public static void main(String[] args) {\n\n        Motorcycle motorcycle = new Motorcycle();\n        motorcycle.setName(\"Wave\");\n        motorcycle.setColor(\"Black\");\n        motorcycle.setModel(\"Wave Alpha\");\n\n        System.out.println(motorcycle.getName());\n        System.out.println(motorcycle.getColor());\n        System.out.println(motorcycle.getModel());\n\n    }\n\n}\n</code></pre> <pre><code>//result\n\nWave\nBlack\nWave Alpha\n</code></pre>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Encapsulation/#see_also","title":"See Also","text":"<ul> <li>OOP</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Inheritance/","title":"OOP Inheritance Introduction","text":"","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Inheritance/#what_is_the_inheritance_in_oop","title":"What Is The Inheritance In OOP?","text":"<ul> <li><code>Inheritance</code> in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOP.</li> <li>The idea behind <code>inheritance</code> in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.</li> <li>Inheritance represents the IS-A relationship which is also known as a <code>parent-child</code> relationship.</li> <li>Using <code>inheritance</code> in Java will help us:<ul> <li> Overriding methods.</li> <li>Code reusability.</li> </ul> </li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Inheritance/#java_inheritance_syntax","title":"Java Inheritance Syntax","text":"<ul> <li>The <code>extends</code> keyword indicates that you are making a new class that derives from an existing class. The meaning of \"extends\" is to increase the functionality.</li> <li>In the terminology of Java, a class which is inherited is called a <code>parent</code> or <code>superclass</code>, and the new class is called <code>child</code> or <code>subclass</code>.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Inheritance/#inheritance_example","title":"Inheritance Example","text":"<ul> <li>Let's define a parent class <code>Animal</code> as below</li> </ul> Animal.java<pre><code>    package com.java.core.inheritance;\n\n    public class Animal {\n\n            private String name;\n\n            public void eat() {\n                    System.out.println(\"eating...\");\n            }\n\n            public void sleep() {\n                    System.out.println(\"sleeping at forest!\");\n            }\n\n            public String getName() {\n                    return name;\n            }\n\n            public void setName(String name) {\n                    this.name = name;\n            }\n    }\n</code></pre> <ul> <li>Then create a subclass which is <code>extends</code> from <code>Animal</code></li> </ul> Dog.java<pre><code>    package com.java.core.inheritance;\n\n    public class Dog extends Animal {\n\n            public void bark() {\n                    System.out.println(\"barking...\");\n            }\n\n            @Override\n            public void sleep() {\n                    System.out.println(\"sleeping at human's house!\");\n            }\n\n    }\n</code></pre> <ul> <li>Now, test the child class <code>Dog</code> and you will see the child class can inherit attribute name and method eat from parent class <code>Animal</code>. Moreover, It is also <code>@Override</code> the method <code>sleep()</code> from it's parent.</li> </ul> JavaInheritanceMain.java<pre><code>    package com.java.core.inheritance;  \n\n    public class JavaInheritanceMain {  \n\n            public static void main(String[] args) {  \n                    Dog dog = new Dog();  \n                    dog.setName(\"Bulldog\");  \n\n                    System.out.println(dog.getName());  \n                    dog.eat();  \n                    dog.bark();  \n                    dog.sleep();  \n            }\n    }\n</code></pre> <pre><code>Bulldog\neating...\nbarking...\nsleeping at human's house!\n</code></pre>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Inheritance/#see_also","title":"See Also","text":"<ul> <li>OOP Method Overriding</li> <li>OOP</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Inheritance/#references","title":"References","text":"<ul> <li>Javatpoint</li> <li>Full Source Code</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Method%20Overriding/","title":"Method Overriding In Java","text":"","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Method%20Overriding/#what_is_the_method_overriding","title":"What Is The Method Overriding?","text":"<ul> <li>If subclass (child class) has the same method as declared in the parent class, it is known as <code>method overriding in Java</code>.</li> <li>In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Method%20Overriding/#usage_of_java_method_overriding","title":"Usage Of Java Method Overriding","text":"<ul> <li><code>Method overriding</code> is used to provide the specific implementation of a method which is already provided by its superclass.</li> <li>Method overriding is used for runtime OOP Polymorphism.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Method%20Overriding/#rules_for_java_method_overriding","title":"Rules For Java Method Overriding","text":"<ul> <li>The method must have the same name as in the parent class</li> <li>The method must have the same parameter as in the parent class.</li> <li>There must be an IS-A relationship (OOP Inheritance).</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Method%20Overriding/#see_also","title":"See Also","text":"<ul> <li>OOP Inheritance</li> <li>OOP Polymorphism</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Method%20Overriding/#references","title":"References","text":"<ul> <li>Javatpoint</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Polymorphism/","title":"OOP Polymorphims Introduction","text":"","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Polymorphism/#what_is_the_polymorphims_in_oop","title":"What Is The Polymorphims In OOP?","text":"<ul> <li><code>Polymorphism</code> is the ability of an object to take on many forms. The most common use of <code>polymorphism</code> in OOP occurs when a parent class reference is used to refer to a child class object.</li> <li>Any Java object that can pass more than one IS-A test is considered to be polymorphic. In Java, all Java objects are polymorphic since any object will pass the IS-A test for their own type and for the class Object.</li> <li>It is important to know that the only possible way to access an object is through a reference variable. A reference variable can be of only one type. Once declared, the type of a reference variable cannot be changed.</li> <li>The reference variable can be reassigned to other objects provided that it is not declared final. The type of the reference variable would determine the methods that it can invoke on the object.</li> <li>A reference variable can refer to any object of its declared type or any sub-type of its declared type. A reference variable can be declared as a class or interface type.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Polymorphism/#polymorphims_example","title":"Polymorphims Example","text":"Animal.java<pre><code>package com.java.core.polymorphims;  \n\npublic class Animal {  \n\n    private String name;  \n\n    public String getName() {  \n        return name;  \n    }  \n\n    public void setName(String name) {  \n        this.name = name;  \n    }  \n\n    @Override  \n    public String toString() {  \n        return \"Animal{\" +  \n                \"name='\" + name + '\\'' +  \n                '}';  \n    }  \n}\n</code></pre> Vegetarian.java<pre><code>package com.java.core.polymorphims;  \n\npublic interface Vegetarian {  \n\n    String eatVegetables();  \n\n}\n</code></pre> Deer.java<pre><code>package com.java.core.polymorphims;  \n\npublic class Deer extends Animal implements Vegetarian {  \n\n    @Override  \n    public String eatVegetables() {  \n        return this.getName() + \" eating grass!\";  \n    }  \n\n}\n</code></pre> <ul> <li> <p>Now, the Deer class is considered to be polymorphic since this has multiple OOP Inheritance. Following are true for the above examples \u2212</p> <ul> <li>A Deer IS-A Animal</li> <li>A Deer IS-A Vegetarian</li> <li>A Deer IS-A Deer</li> <li>A Deer IS-A Object</li> </ul> </li> <li> <p>When we apply the reference variable facts to a Deer object reference, the following declarations are legal.</p> </li> </ul> JavaPolymorphimsMain.java<pre><code>package com.java.core.polymorphims;\n\npublic class JavaPolymorphimsMain {\n\n    public static void main(String[] args) {\n        Deer deer = new Deer();\n        deer.setName(\"Deer\");\n        System.out.println(deer.eatVegetables());\n\n        Animal animal = deer;\n        System.out.println(animal.getName());\n\n        Vegetarian vegetarian = deer;\n        System.out.println(vegetarian.eatVegetables());\n\n        Object object = deer;\n        System.out.println(object);\n    }\n\n}\n</code></pre> <ul> <li>Then you will see the result as below:</li> </ul> <pre><code>Deer eating grass!\nDeer\nDeer eating grass!\nAnimal{name='Deer'}\n</code></pre> <ul> <li>Now let do another example with with <code>Polymorphims</code> about virtual method. See example below.</li> </ul> Employee.java<pre><code>package com.java.core.polymorphims;  \n\npublic class Employee {  \n\n    private String name;  \n    private String id;  \n    private double salary;  \n\n    public Employee(String name, String id, double salary) {  \n        this.name = name;  \n        this.id = id;  \n        this.salary = salary;  \n    }  \n\n    public double calculateSalary() {  \n        return salary;  \n    }  \n\n    public String getName() {  \n        return name;  \n    }  \n\n    public void setName(String name) {  \n        this.name = name;  \n    }  \n\n    public String getId() {  \n        return id;  \n    }  \n\n    public void setId(String id) {  \n        this.id = id;  \n    }  \n\n    public double getSalary() {  \n        return salary;  \n    }  \n\n    public void setSalary(double salary) {  \n        this.salary = salary;  \n    }  \n}\n</code></pre> Developer.java<pre><code>package com.java.core.polymorphims;\n\npublic class Developer extends Employee {\n\n    public Developer(String name, String id, double salary) {\n        super(name, id, salary);\n    }\n\n    @Override\n    public double calculateSalary() {\n        return this.getSalary() + 100;\n    }\n\n}\n</code></pre> JavaPolymorphimsMain.java<pre><code>package com.java.core.polymorphims;\n\npublic class JavaPolymorphimsMain {\n\n    public static void main(String[] args) {\n\n        Employee developer = new Developer(\"Duc\", \"12345\", 100);\n        System.out.println(\"Duc \" + developer.calculateSalary());\n\n        Employee employee = new Developer(\"Han\", \"56789\", 200);\n        System.out.println(\"Han \" + employee.calculateSalary());\n\n        Employee director = new Employee(\"John\", \"55555\", 100);\n        System.out.println(\"John \" + director.getSalary());\n\n    }\n\n}\n</code></pre> <ul> <li>Now, let's run test and you will see the result as below:</li> </ul> <pre><code>Duc 200.0\nHan 300.0\nJohn 100.0\n</code></pre> <ul> <li>As you can see, so base on creating <code>Employee</code> or <code>Developer</code> by <code>new</code> keyword, the method <code>calculateSalary</code> would be different at the runtime.</li> <li>This behavior is referred to as virtual method invocation, and these methods are referred to as virtual methods. An overridden method is invoked at run time, no matter what data type the reference is that was used in the source code at compile time, It will choose the data type that defined after <code>new</code> keyword.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Polymorphism/#see_also","title":"See Also","text":"<ul> <li>OOP</li> <li>OOP Inheritance</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP%20Polymorphism/#references","title":"References","text":"<ul> <li>tutorialspoint</li> <li>Full Source Code</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP/","title":"Object Oriented Programming (OOP) Introduction","text":"","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP/#what_is_the_object","title":"What Is The Object?","text":"<ul> <li>Every entity in this universe can be an <code>object</code>. An <code>object</code> can have <code>attributes</code> and <code>behaviors</code>.<ul> <li><code>Attributes</code>:  are properties of the object, for ex: Name, Color, Size and so on.</li> <li><code>Behaviors</code>: actions of the object, for ex: Do, Move, Run, and so on.</li> </ul> </li> <li>For example, we have a motorcycle object. <ul> <li>So this motorcycle object can have <code>attributes</code>: <ul> <li>Name: Honda</li> <li>Color: Black</li> <li>Made-In: Japanese</li> <li>Model: Wave</li> </ul> </li> <li>This motorcycle object also can have <code>behaviors</code>;<ul> <li>Run</li> <li>Stop</li> <li>Start Engine</li> </ul> </li> </ul> </li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP/#what_is_the_class","title":"What Is The Class?","text":"<ul> <li>In <code>OOP</code>, the <code>Class</code> defines the blueprint of Objects. They define the properties and behaviors of the objects. For example, Laptop is a class and your laptop is an instance of it.</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP/#what_is_the_oop","title":"What Is The OOP?","text":"<ul> <li><code>Object-oriented programming (OOP)</code> is a programming paradigm based on the concept of object, which can contain data and code:<ul> <li>Data in the form of fields (often known as attributes or properties).</li> <li>Code, in the form of procedures (often known as methods or functions).</li> </ul> </li> <li>Another definition of <code>OOP</code> is a way to build flexible and reusable code to develop more advanced modules and libraries.</li> <li><code>OOP</code> has 4 main concepts:<ul> <li>OOP Encapsulation</li> <li>OOP Abstraction</li> <li>OOP Inheritance</li> <li>OOP Polymorphism</li> </ul> </li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"Java/OOP/#references","title":"References","text":"<ul> <li>Full source code</li> </ul>","tags":["Java","OOP","JavaBasic"]},{"location":"JavaScript/JavaScript%20Functions/","title":"JavaScript Functions","text":"","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Functions/#javascript_functions_1","title":"JavaScript Functions","text":"<ul> <li>In JavaScript, to declare a function, you use the\u00a0<code>function</code>\u00a0keyword, followed by the function name, a list of parameters, and the function body.</li> <li>A function can accept zero, one, or multiple parameters. In the case of multiple parameters, you need to use a comma to separate two parameters.</li> </ul> <pre><code>function functionName() {\n    // function body\n    // ...\n}\n\nfunction functionName2(parameter1) {\n    // function body\n    // ...\n}\n\nfunction functionName2(parameter1, parameter2) {\n    // function body\n    // ...\n}\n</code></pre> <ul> <li>In JavaScript we can store functions as variables, pass them to other functions as arguments, and return them from other functions as values.</li> </ul> <pre><code>function add(a, b) {\n    return a + b;\n}\n\nlet sum = add;\n\nfunction average(a, b, fn) {\n    return fn(a, b) / 2;\n}\n\nlet result = average(10, 20, sum);\n\nconsole.log(result); //output 15\n</code></pre> <ul> <li>Since <code>functions</code> are values, we can return a function from another function.</li> </ul> <pre><code>function compareBy(propertyName) {\n  return function (a, b) {\n    let x = a[propertyName],\n      y = b[propertyName];\n\n    if (x &gt; y) {\n      return 1;\n    } else if (x &lt; y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n}\nlet products = [\n  { name: 'iPhone', price: 900 },\n  { name: 'Samsung Galaxy', price: 850 },\n  { name: 'Sony Xperia', price: 700 },\n];\n\n// sort products by name\nconsole.log('Products sorted by name:');\nproducts.sort(compareBy('name'));\nconsole.table(products);\n\n// Products sorted by name:\n//\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n//\u2502 (index) \u2502       name       \u2502 price \u2502\n//\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n//\u2502    0    \u2502 'Samsung Galaxy' \u2502  850  \u2502\n//\u2502    1    \u2502  'Sony Xperia'   \u2502  700  \u2502\n//\u2502    2    \u2502     'iPhone'     \u2502  900  \u2502\n//\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n// sort products by price\nconsole.log('Products sorted by price:');\nproducts.sort(compareBy('price'));\nconsole.table(products);\n\n//Products sorted by price:\n//\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n//\u2502 (index) \u2502       name       \u2502 price \u2502\n//\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n//\u2502    0    \u2502  'Sony Xperia'   \u2502  700  \u2502\n//\u2502    1    \u2502 'Samsung Galaxy' \u2502  850  \u2502\n//\u2502    2    \u2502     'iPhone'     \u2502  900  \u2502\n//\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Functions/#anonymous_functions","title":"Anonymous Functions","text":"<ul> <li>An anonymous function is a function without a name. Note that if we don\u2019t place the anonymous function inside the\u00a0<code>()</code>, we\u2019ll get a syntax error. The\u00a0<code>()</code>\u00a0makes the anonymous function an expression that returns a function object.</li> </ul> <pre><code>(function () {\n   //...\n});\n</code></pre> <ul> <li>An anonymous function is not accessible after its initial creation. Therefore, we often need to assign it to a variable. When we assign an anonymous function to a variable, we don't need to wrap it into the <code>()</code> anymore.</li> </ul> <pre><code>let show = function() {\n    console.log('Anonymous function');\n};\n\nshow();\n</code></pre> <ul> <li>Like the normal JavaScript function we can use the Anonymous Functions as arguments to other functions.</li> </ul> <pre><code>setTimeout(function() {\n    console.log('Execute later after 1 second')\n}, 1000);\n</code></pre> <ul> <li>the anonymous functions can be executed immediately after the declaration, we just need to put <code>()</code> right after the anonymous functions.</li> </ul> <pre><code>(function () {\n    console.log('Immediately invoked function execution');\n})();\n</code></pre> <pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\n(function () {\n    console.log(person.firstName} + ' ' + person.lastName);\n})(person);\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Functions/#arrow_functions","title":"Arrow Functions","text":"<ul> <li>ES6 introduced arrow function expressions that provide a shorthand for declaring anonymous functions</li> </ul> <pre><code>let show = function () {\n    console.log('Anonymous function');\n};\n\nlet show = () =&gt; console.log('Anonymous function');\n\n\nlet add = function (a, b) {\n    return a + b;\n};\n\nlet add = (a, b) =&gt; a + b;   \n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Functions/#javascript_recursive_function","title":"JavaScript Recursive Function","text":"<ul> <li>A recursive function is a function that calls itself until it doesn\u2019t. And this technique is called recursion.</li> <li>A recursive function always has a condition to stop calling itself. Otherwise, it will call itself indefinitely. So a recursive function typically looks like the following:</li> </ul> <pre><code>function recurse() {\n    if(condition) {\n        // stop calling itself\n        //...\n    } else {\n        recurse();\n    }\n}\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Functions/#see_also","title":"See Also","text":"<ul> <li>JavaScript Introduction</li> <li>JavaScript Syntax and Variables</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Functions/#references","title":"References","text":"<ul> <li>javascripttutorial</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Introduction/","title":"JavaScript Introduction","text":"","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Introduction/#what_is_the_javascript","title":"What Is the JavaScript?","text":"<ul> <li><code>JavaScript</code> is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.</li> <li>JavaScript was first known as\u00a0LiveScript,\u00a0but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name\u00a0LiveScript. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers.</li> <li>The\u00a0ECMA-262 Specification\u00a0defined a standard version of the core JavaScript language.<ul> <li>JavaScript is a lightweight, interpreted programming language.</li> <li>Designed for creating network-centric applications.</li> <li>Complementary to and integrated with Java.</li> <li>Complementary to and integrated with HTML.</li> <li>Open and cross-platform</li> </ul> </li> <li>More information</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Introduction/#javascript_fundamentals","title":"JavaScript Fundamentals","text":"<ul> <li>JavaScript Syntax and Variables: Get familiar with JavaScript syntax, data types, and variable declarations.</li> <li>Operators and Expressions: Learn about arithmetic, comparison, and logical operators, as well as expressions.</li> <li>Control Flow: Understand conditional statements (if/else, switch), loops (for, while), and error handling (try/catch).</li> <li>JavaScript Functions: Explore how to define and use functions to organize and reuse code.</li> <li>Arrays: Learn how to work with arrays, perform common operations, and iterate over elements.</li> <li>JavaScript Objects: Understand JavaScript objects, properties, methods, and object-oriented programming concepts.</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/","title":"JavaScript Objects","text":"","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#javascript_objects_1","title":"JavaScript Objects","text":"<ul> <li>In JavaScript, an object is an unordered collection of key-value pairs. Each key-value pair is called a property.</li> <li>The key of a property can be a string. And the value of a property can be any value, e.g., a string, a number, an array, and even a function.</li> <li>To create an object we can use the object literal notation as below.</li> </ul> person.js<pre><code>let person = {};\n</code></pre> <ul> <li>To create an object with properties, we use the <code>key:value</code> within the curly braces.</li> </ul> person.js<pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#accessing_properties","title":"Accessing Properties","text":"","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#the_dot_notation","title":"The dot notation <code>.</code>","text":"<ul> <li>To access properties of an object we can use dot notation. This is the most common way that we usually use</li> </ul> person.js<pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\nconsole.log(person.firstName); \nconsole.log(person.lastName);\n\n//John\n//Doe\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#array-like_notation","title":"Array-Like Notation <code>[]</code>","text":"<ul> <li>There is also has another way to access the value of an object\u2019s property via the array-like notation:</li> </ul> <pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\nconsole.log(person['firstName']);\nconsole.log(person['lastName']);\n\n//John\n//Doe\n</code></pre> <ul> <li>When property names contain spaces, we can place it inside quotes.</li> </ul> person.js<pre><code>let person = {\n    'first name': 'John',\n    'last name': 'Doe'\n};\n\nconsole.log(person.'first name'); \nconsole.log(person.'last name');\n\n//John\n//Doe\n</code></pre> <p>Note: This will not work if we use dot .</p>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#modifying_the_value_of_a_property","title":"Modifying the value of a property","text":"<ul> <li>To change the value of a property, you use the\u00a0 assignment operator =</li> </ul> person.js<pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\nperson.firstName = 'Tom'\nconsole.log(person.firstName); \nconsole.log(person.lastName);\n\n//Tom\n//Doe\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#add_a_property_to_object","title":"Add A Property To Object","text":"<ul> <li>We can add a property to an object after object creation.</li> </ul> person.js<pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\nperson.age = 25;\n\nconsole.log(person.firstName); \nconsole.log(person.lastName);\nconsole.log(person.age);\n\n\n//John\n//Doe\n//25\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#delete_a_property_from_object","title":"Delete A Property From Object","text":"<ul> <li>To delete a property of an object, you use the\u00a0<code>delete</code>\u00a0operator:</li> </ul> person.js<pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\nperson.age = 25;\ndelete person.age;\n\nconsole.log(person.firstName); \nconsole.log(person.lastName);\nconsole.log(person.age);\n\n\n//John\n//Doe\n//undefined\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#checking_if_a_property_exists","title":"Checking if a property exists","text":"<ul> <li>To check if a property exists in an object, you use the\u00a0<code>in</code>\u00a0operator:</li> </ul> person.js<pre><code>let person = {\n    firstName: 'John',\n    lastName: 'Doe'\n};\n\nconsole.log(person.firstName); \nconsole.log(person.lastName);\nconsole.log('lastName' in person);\nconsole.log('age' in person);\n\n\n//John\n//Doe\n//true\n//false\n</code></pre>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#see_also","title":"See Also","text":"<ul> <li>JavaScript Introduction</li> <li>JavaScript Syntax and Variables</li> <li>JavaScript Functions</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Objects/#references","title":"References","text":"<ul> <li>javascripttutorial</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Syntax%20and%20Variables/","title":"JavaScript Syntax and Variables","text":"","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Syntax%20and%20Variables/#javascript_keywords","title":"JavaScript Keywords","text":"Keyword/Reserved Word Description abstract Reserved for future use. It was originally intended for defining abstract methods. arguments Refers to an array-like object that contains the arguments passed to a function. await Pauses the execution of an async function until a Promise is resolved or rejected. boolean A primitive data type representing a logical value: true or false. break Terminates the current loop or switch statement. byte Reserved for future use. It was intended for working with binary data. case Defines a case in a switch statement. catch Catches and handles exceptions in a try-catch block. char Reserved for future use. It was intended for working with character data. class Defines a class in JavaScript (introduced in ECMAScript 2015). const Declares a block-scoped constant variable. continue Skips the current iteration of a loop. debugger Stops the execution of JavaScript and invokes the debugger. default Specifies the default case in a switch statement. delete Deletes a property from an object. do Executes a block of code until a condition is false. double Reserved for future use. It was intended for working with floating-point numbers. else Executes a block of code if the condition is false (used with if statements). enum Reserved for future use. It was intended for creating enumerations. eval Evaluates a string as JavaScript code. export Exports functions, objects, or values from a module. extends Inherits properties and methods from a parent class (used with class declarations). false A Boolean value representing false. final Reserved for future use. It was intended for preventing inheritance or overriding. finally Specifies a block of code to be executed after a try block, regardless of an exception. float Reserved for future use. It was intended for working with floating-point numbers. for Executes a block of code for a specified number of times. function Declares a function. goto Reserved for future use. It was intended for jumping to a labeled statement. if Executes a block of code if the condition is true. implements Reserved for future use. It was intended for implementing interfaces. import Imports functions, objects, or values from a module. in Checks if a specified property is in an object. instanceof Checks if an object is an instance of a specified class. int Reserved for future use. It was intended for working with integers. interface Reserved for future use. It was intended for defining interfaces. let Declares a block-scoped local variable (introduced in ECMAScript 2015). long Reserved for future use. It was intended for working with large integers. native Reserved for future use. It was intended for indicating native methods. new Creates an instance of an object. null Represents the absence of a value or an uninitialized variable. var Declares a javascript variable package Reserved for future use. It was intended for organizing related classes. private Reserved for future use. It was intended for defining private members of a class. protected Reserved for future use. It was intended for defining protected members of a class. public Reserved for future use. It was intended for defining public members of a class. return Exits a function and specifies its return value. short Reserved for future use. It was intended for working with small integers. static Defines a static method or property for a","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Syntax%20and%20Variables/#variables","title":"Variables","text":"<ul> <li>We can declare a variable by using 3 keywords: <code>var</code>, <code>let</code> and <code>const</code>.</li> </ul> <pre><code>var message1 = \"message 1\";\nlet message2 = \"message 2\";\nconst message3 = \"message 3\";\n</code></pre> <ul> <li>In which, by using the <code>var</code> keyword the variable can be global or local scope if we define it outside a function the variable will have global scope otherwise if we define it inside a function it will be local scope.</li> <li>ES6 provides a new way of declaring a variable by using the\u00a0<code>let</code>\u00a0keyword. The\u00a0<code>let</code>\u00a0keyword is similar to the\u00a0<code>var</code>\u00a0keyword, except that these variables are blocked-scope. In JavaScript, blocks are denoted by curly braces <code>{}</code> , for example, the <code>if else, for, do while, while, try catch</code> and so on:</li> <li>Like the <code>let</code> keyword, the <code>const</code> keyword declares blocked-scope variables. However, the block-scoped variables declared by the const keyword can\u2019t be reassigned.</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Syntax%20and%20Variables/#see_also","title":"See Also","text":"<ul> <li>JavaScript Introduction</li> <li>JavaScript Functions</li> <li>JavaScript Objects</li> </ul>","tags":["JavaScript"]},{"location":"JavaScript/JavaScript%20Syntax%20and%20Variables/#references","title":"References","text":"<ul> <li>javascripttutorial</li> </ul>","tags":["JavaScript"]},{"location":"Kubernetes/Helm/","title":"Helm","text":"","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#what_is_helm","title":"What Is Helm?","text":"<ul> <li> <p>Helm is a package manager for Kubernetes applications. It simplifies the process of defining, installing, and upgrading even the most complex Kubernetes applications. Helm uses a packaging format called \"charts,\" which are a collection of pre-configured Kubernetes resources.</p> </li> <li> <p>Here are the key components and concepts associated with Helm:</p> </li> </ul> Concept Description Helm A package manager for Kubernetes applications that simplifies application installation and management. Charts Collections of pre-configured Kubernetes resources defining how to deploy specific applications. Templates Helm chart components that include Kubernetes resource manifests with placeholders for customization. Values Parameters allowing customization of Helm charts during installation without modifying the templates. Release An instance of a Helm chart installed in a Kubernetes cluster, created with specific values. Repository Storage for Helm charts, which can be public or private and are typically hosted on various services. Dependency Management Helm supports specifying and managing dependencies between charts, enabling complex application composition. <ul> <li>Here's the workflow for using Helm presented as a table:</li> </ul> Step Description 1. Create or Obtain a Chart You can either create your own Helm charts for your applications or obtain pre-made charts from public or private repositories. Many popular applications and services offer Helm charts. 2. Customize Values Customize the configuration of a Helm chart by providing custom values. These values override the defaults defined in the chart. 3. Install the Chart Use the Helm CLI to install the chart into your Kubernetes cluster. Specify the release name and values file (if needed). Helm will create the necessary Kubernetes resources based on the chart and values. 4. Upgrade and Rollback Helm provides tools to easily upgrade a release to a new version of the chart or roll back to a previous version if issues arise during deployment or updates. 5. Uninstall When you're finished with an application, use Helm to uninstall the release. Helm will remove all associated resources, ensuring a clean removal.","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#why_helm","title":"Why Helm?","text":"<ul> <li>In the Minikube Sample Project, we already knew the way to deploy a simple Spring Boot application and MongoDB with Kubernetes. However, what will we do if we need to clone this application setup to multiple environment like DEV, TEST, STG, etc. So, we have to create multiple yaml files for every environment and we have to apply every file manually right?. It really take many efforts and time to operate  multiple environments and it makes us also hard to control all environments. So <code>Helm</code> will be the solution for us.</li> <li>Imagine that we will have some template files which define the structure for deploying an application on Kubernetes as we did in Minikube Sample Project. However, we can map values from value files into these template files using Helm. so it means with a template set we can use it to deploy multi environments because every environment we will map with a value file. Let's see the image below.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#install_helm","title":"Install Helm","text":"<ul> <li>Please check Linux Setup For Developer at section <code>Helm</code>.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#helm_example","title":"Helm Example","text":"<ul> <li>In this example we will base on the Minikube Sample Project to continue clone two environment DEV, and TEST by using helm.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#create_helm_project","title":"Create Helm Project","text":"<ul> <li>After install <code>Helm</code>, we can  use the command below to create a Helm project.</li> </ul> <pre><code>helm create &lt;Name&gt;\n</code></pre> <pre><code>helm create sample\n</code></pre> <ul> <li>Then we will have some generated folder and files as below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/kubernetes/helm/sample$ ls\ncharts/  Chart.yaml  templates/ values.yaml\n</code></pre> File/Folder Purpose Usage charts/ Folder for managing subcharts. Used to include and manage subcharts, which are nested Helm charts that can be used within the parent chart to modularize and reuse components. Chart.yaml Metadata file for the Helm chart. Contains metadata about the chart, including its name, version, description, and other details. This information is used for tracking, searching, and managing chart releases. templates/ Folder for Kubernetes resource templates. Contains YAML templates for Kubernetes resource manifests. These templates often include placeholders for values that can be customized during chart installation. Helm uses these templates to generate actual manifests. values.yaml File for default configuration values. Specifies default configuration values for the chart. Users can override these defaults by providing their own <code>values.yaml</code> file during chart installation. This allows for easy customization without altering the chart's templates. <ul> <li>In this example, we just focus on creating resource templates and configuration value files because we just to deploy a simple application on multiple environments.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#creating_templates","title":"Creating Templates","text":"<ul> <li>So let's create yaml templates files in the folder <code>templates</code> as we did in the Minikube Sample Project.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#configure_templates","title":"Configure Templates","text":"<ul> <li>Let's start with the <code>mongo-config.yaml</code> , normally without using helm we will have the <code>mongo-config.yaml</code> with the content as below.</li> </ul> mongo-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mongo-config\ndata:\n  mongo-url: mongo-service\n  mongo-port: \"27017\"\n</code></pre> <ul> <li>We can see that the values of <code>name</code>, <code>mongo-url</code> and <code>mongo-port</code> are hard-coded. So we can't use this file for multiple environments because we can't change the values. </li> <li>Now, let's update the content of the <code>mongo-config.yaml</code> in the <code>templates</code> folder as below.</li> </ul> mongo-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Values.mongo.config.name }}\ndata:\n  mongo-url: {{ .Values.mongo.app.name }}\n  mongo-port: \"{{ .Values.mongo.containers.port }}\"\n</code></pre> <ul> <li>Now, the values of values of <code>name</code>, <code>mongo-url</code> and <code>mongo-port</code> can be mapped from a values file by using the template expression, so with multiple environments, we just need to define multiple values file.</li> <li> <p>The template expression can be explained as below. Ex: we have <code>{{ .Values.mongo.config.name }}</code></p> <ul> <li><code>{{</code> ... <code>}}</code>: Double curly braces denote the start and end of a template expression. Everything inside these braces is evaluated as a template.</li> <li><code>.</code>: The period <code>.</code> represents the current context within the template. In the context of a Helm chart, this often refers to the root context, which includes values, templates, and other chart-related data.</li> <li><code>Values</code>: In Helm charts, <code>.Values</code> is a special object that contains all the values defined in the <code>values.yaml</code> file or provided by the user during chart installation. It's a way to access and interpolate these values into templates.</li> <li><code>mongo</code>: This is a key within the <code>.Values</code> object. It indicates that you are accessing a value nested under the <code>mongo</code> key.</li> <li><code>config</code>: Similarly, <code>config</code> is another key nested within the <code>mongo</code> key.</li> <li><code>name</code>: Finally, <code>name</code> is the specific value being accessed under the <code>config</code> key.</li> </ul> </li> <li> <p>Then in the <code>values.yaml</code> we will have the configuration for <code>{{ .Values.mongo.config.name }}</code> as below:</p> </li> </ul> values.yaml<pre><code>mongo:\n  config:\n    name: mongo-config-dev\n</code></pre> <ul> <li> <p>With this approach, we can make any field in the template to be configurable and in the <code>values.yaml</code> file we can also structure the configuration as we expect.</p> </li> <li> <p>So, we will apply this way for other resource template files. Let's update resource templates for MongoDB with the following yaml files as below.</p> </li> </ul> mongo-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Values.mongo.config.name }}\ndata:\n  mongo-url: {{ .Values.mongo.app.name }}\n  mongo-port: \"{{ .Values.mongo.containers.port }}\"\n</code></pre> mongo-pvc.yaml<pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: {{ .Values.mongo.pvc.name }}\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: {{ .Values.mongo.pvc.storage }}\n</code></pre> mongo-secret.yaml<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Values.mongo.secret.name }}\ntype: Opaque\ndata:\n  mongo-user: {{ .Values.mongo.secret.data.mongoUser }}\n  mongo-password: {{ .Values.mongo.secret.data.mongoPassword }}\n</code></pre> mongo-deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ .Values.mongo.app.name }}\n  labels:\n    app: {{ .Values.mongo.app.name }}\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: {{ .Values.mongo.app.name }}\n  template:\n    metadata:\n      labels:\n        app: {{ .Values.mongo.app.name }}\n    spec:\n      containers:\n      - name: {{ .Values.mongo.containers.name }}\n        image: {{ .Values.mongo.containers.image }}\n        ports:\n        - containerPort: {{ .Values.mongo.containers.port }}\n        env:\n        - name: MONGO_INITDB_ROOT_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: {{ .Values.mongo.secret.name }}\n              key: mongo-user\n        - name: MONGO_INITDB_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ .Values.mongo.secret.name }}\n              key: mongo-password\n        volumeMounts:\n        - name: mongo-storage\n          mountPath: /data/db\n      volumes:\n      - name: mongo-storage\n        persistentVolumeClaim:    \n          claimName: {{ .Values.mongo.pvc.name }}\n</code></pre> mongo-service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ .Values.mongo.app.name }}\nspec:\n  selector:\n    app: {{ .Values.mongo.app.name }}\n  ports:\n    - protocol: TCP\n      name: mongo-port\n      port: {{ .Values.mongo.containers.port }}\n      targetPort: {{ .Values.mongo.containers.port }}\n</code></pre> <ul> <li>With the MongoDB template files above, we will have the configurations in the <code>values.yaml</code> for DEV environment as below.</li> </ul> values.yaml<pre><code>mongo:\n  app:\n    name: mongo-app-dev\n  containers:\n    name: mongo-dev\n    image: mongo\n    port: 27017\n  pvc:\n    name: mongo-pvc-dev\n    storage: 512Mi\n  config:\n    name: mongo-config-dev\n  secret:\n    name: mongo-secret-dev\n    data:\n      mongoUser: cm9vdA==\n      mongoPassword: ZXhhbXBsZQ==\n</code></pre> <ul> <li>Next, we will continue to map the content for the resource template files of the Spring Boot application as below.</li> </ul> springboot-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Values.springboot.config.name }}\ndata:\n  env: {{ .Values.springboot.config.data.env }}\n</code></pre> spring-boot-deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ .Values.springboot.app.name }}\n  labels:\n    app: {{ .Values.springboot.app.name }}\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: {{ .Values.springboot.app.name }}\n  template:\n    metadata:\n      labels:\n        app: {{ .Values.springboot.app.name }}\n    spec:\n      containers:\n      - name: {{ .Values.springboot.containers.name }}\n        image: {{ .Values.springboot.containers.image }}\n        imagePullPolicy: Never\n        ports:\n        - containerPort: {{ .Values.springboot.containers.port }}\n        env:\n        - name: USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: {{ .Values.mongo.secret.name }}\n              key: mongo-user\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ .Values.mongo.secret.name }}\n              key: mongo-password\n        - name: DB_URL\n          valueFrom:\n            configMapKeyRef:\n              name: {{ .Values.mongo.config.name }}\n              key: mongo-url\n        - name: PORT\n          valueFrom:\n            configMapKeyRef:\n              name: {{ .Values.mongo.config.name }}\n              key: mongo-port\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: {{ .Values.springboot.config.name }}\n              key: env\n</code></pre> spring-boot-service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ .Values.springboot.app.name }}\nspec:\n  type: NodePort\n  selector:\n    app: {{ .Values.springboot.app.name }}\n  ports:\n    - protocol: TCP\n      name: spring-boot-port\n      port: {{ .Values.springboot.containers.port }}\n      targetPort: {{ .Values.springboot.containers.port }}\n      nodePort: {{ .Values.springboot.app.nodePort }}\n</code></pre> <ul> <li>So with these Spring Boot application template files. We will update the <code>values.yaml</code> for deploying Spring Boot application as below.</li> </ul> values.yaml<pre><code>mongo:\n  app:\n    name: mongo-app-dev\n  containers:\n    name: mongo-dev\n    image: mongo\n    port: 27017\n  pvc:\n    name: mongo-pvc-dev\n    storage: 512Mi\n  config:\n    name: mongo-config-dev\n  secret:\n    name: mongo-secret-dev\n    data:\n      mongoUser: cm9vdA==\n      mongoPassword: ZXhhbXBsZQ==\n\nspringboot:\n  app:\n    name: spring-boot-app-dev\n    nodePort: 31000\n  containers:\n    name: spring-boot-app-dev\n    image: json-schema-validator:0.0.1-SNAPSHOT\n    port: 8080\n  config:\n    name: spring-boot-config-dev\n    data:\n      env: dev\n</code></pre> <ul> <li>Now, we have just finished creating deployment templates and repair configurations for DEV deployment in the <code>values.yaml</code> file. So, to repair deployment for TEST environment, we just need to create another values file, let's call it as <code>values-test.yaml</code> with the configuration as below.</li> </ul> values-test.yaml<pre><code>mongo:\n  app:\n    name: mongo-app-test\n  containers:\n    name: mongo-test\n    image: mongo\n    port: 27017\n  pvc:\n    name: mongo-pvc-test\n    storage: 512Mi\n  config:\n    name: mongo-config-test\n  secret:\n    name: mongo-secret-test\n    data:\n      mongoUser: cm9vdA==\n      mongoPassword: cGFzc3dvcmQ=\n\nspringboot:\n  app:\n    name: spring-boot-app-test\n    nodePort: 32000\n  containers:\n    name: spring-boot-app-test\n    image: json-schema-validator:0.0.1-SNAPSHOT\n    port: 8080\n  config:\n    name: spring-boot-config-test\n    data:\n      env: test\n</code></pre>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#deployment_rollout","title":"Deployment Rollout","text":"<ul> <li>Now, to apply helm for deploying DEV and TEST environments, we will run commands below.</li> </ul> <pre><code>helm install -f &lt;path to values file&gt; &lt;name of helm chart release&gt; &lt;path to helm chart&gt;\n</code></pre> <pre><code>helm install -f helm/sample/values.yaml my-sample-dev helm/sample/\n</code></pre> Command Explanation <code>helm install</code> Installs a Helm chart in a Kubernetes cluster. <code>-f helm/sample/values.yaml</code> Specifies a values file to customize the chart's configuration. <code>my-sample-dev</code> Names the release created by the installation. <code>helm/sample/</code> Indicates the path to the Helm chart to be installed. <ul> <li>After executing the command above for deploying DEV environment, we can see the results below.</li> </ul> <ul> <li>As you can see, in the <code>values.yaml</code> which is used for DEV deployment, we configured exporting node port <code>31000</code>, so we can check the DEV application through some api calls with postman.</li> <li>The <code>ip</code> address in the api is the ip address of minikube instance, we can get it by running the command.</li> </ul> <pre><code>minikube ip\n</code></pre> <ul> <li>Now, to deploy TEST environment, we also will run the command as we did for DEV with different values file and helm chart release name.</li> </ul> <pre><code>helm install -f helm/sample/values-test.yaml my-sample-test helm/sample/\n</code></pre> <ul> <li>Then we can see the result as below.</li> </ul> <ul> <li> <p>As you can see, in the <code>values-test.yaml</code> which is used for TEST deployment, we configured exporting node port <code>32000</code>, so we can check the TEST application through some api calls with postman.</p> </li> <li> <p>So we have finished deployment for 2 environments DEV and TEST by using Helm. We can see that Helm helps us saving time a lots and maybe in future if we need to create new environment, we just need to create new <code>values</code> file and update the configuration values.</p> </li> <li> <p>Last but not least, if we have changed some values in the <code>values.yaml</code> or <code>values-test.yaml</code>. We can use the command below to update the helm chart.</p> </li> </ul> <pre><code>helm upgrade -f &lt;path to values file&gt; &lt;name of helm chart release&gt; &lt;path to helm chart&gt;\n</code></pre> <pre><code>helm upgrade -f helm/sample/values.yaml my-sample-dev helm/sample/\n</code></pre> Command Explanation <code>helm upgrade</code> Updates an existing Helm release with new configurations or a new version of the chart. <code>-f helm/sample/values.yaml</code> Specifies a values file to customize the updated chart's configuration. <code>my-sample-dev</code> Names the release to be upgraded. <code>helm/sample/</code> Indicates the path to the updated Helm chart. Helm will look in this directory for the new chart version. <ul> <li>Then in the case, we want to remove a environment deployment, we can run command below.</li> </ul> <pre><code>helm uninstall my-sample-dev\n</code></pre> <ul> <li>Then the DEV environment will be removed which included all deployment, secret, configMap, pvc of mongo and spring boot services also.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#see_also","title":"See Also","text":"<ul> <li>Minikube Sample Project</li> <li>Linux Setup For Developer</li> <li>Docker With SpringBoot</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Helm/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Install%20Kubernetes/","title":"Install Kubernetes","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#before_you_begin","title":"Before you begin","text":"<ul> <li>One or more machines running a deb/rpm-compatible Linux OS; for example: Ubuntu or CentOS.</li> <li>2 GiB or more of RAM per machine--any less leaves little room for your apps.</li> <li>At least 2 CPUs on the machine that you use as a control-plane node.</li> <li>Full network connectivity among all machines in the cluster. You can use either a public or a private network.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#general_setup_for_control_planes_and_node_machines","title":"General Setup For Control Planes and Node Machines","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#set_static_ips","title":"Set Static IPs","text":"<ul> <li>using <code>ifconfig</code> to check the current IPv4. For example the current IPv4 is <code>192.168.1.22</code></li> </ul> <pre><code>enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.1.22  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 2405:4802:a2ec:f390:ffff:ffff:ffff:fffa  prefixlen 128  scopeid 0x0&lt;global&gt;\n        inet6 2405:4802:a2ec:f390:a00:27ff:fe7c:7d0  prefixlen 64  scopeid 0x0&lt;global&gt;\n        inet6 fe80::a00:27ff:fe7c:7d0  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:7c:07:d0  txqueuelen 1000  (Ethernet)\n        RX packets 84129  bytes 52901171 (52.9 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 87368  bytes 64687379 (64.6 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 415761  bytes 148967335 (148.9 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 415761  bytes 148967335 (148.9 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <ul> <li>Then now, using the command below to edit file <code>50-cloud-init.yaml</code></li> </ul> <pre><code>sudo cat /etc/netplan/50-cloud-init.yaml\n</code></pre> <ul> <li>Update the content of this file as below.</li> </ul> <pre><code># This file is generated from information provided by the datasource.  Changes\n# to it will not persist across an instance reboot.  To disable cloud-init's\n# network configuration capabilities, write a file\n# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:\n# network: {config: disabled}\nnetwork:\n    ethernets:\n        enp0s3:\n            dhcp4: false\n            addresses:\n              - 192.168.1.22/24\n            nameservers:\n              addresses:\n                - 8.8.8.8\n                - 8.8.4.4\n            routes:\n              - to: default\n                via: 192.168.1.1\n    version: 2\n</code></pre> Key/Item Description Value network Top-level key defining the network configuration. (N/A) ethernets Specifies Ethernet interfaces for network configuration. (N/A) enp0s3 The name of the Ethernet interface being configured. <code>enp0s3</code> <code>dhcp4</code> Indicates whether DHCP is used for IPv4. <code>false</code> <code>addresses</code> Static IPv4 addresses assigned to the interface. <code>192.168.1.22/24</code> <code>nameservers</code> DNS servers for domain name resolution. <code>8.8.8.8</code>, <code>8.8.4.4</code> <code>routes</code> Defines custom routes for network traffic. (N/A) <code>to</code> Specifies the destination for the route. <code>default</code> indicates all traffic. <code>default</code> <code>via</code> The gateway IP address for the route. <code>192.168.1.1</code> version Specifies the version of the Netplan YAML syntax being used. <code>2</code> <ul> <li>Then run the command below to try and apply the latest configuration.</li> </ul> <pre><code>sudo netplan try\nsudo netplan apply\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#turn_off_swap_permanently","title":"Turn Off Swap Permanently","text":"<ul> <li>Run commands below to turn off swap and make it turn off permanently after reboot.</li> </ul> <pre><code># turn off swap\nsudo swapoff -a\n\n# update /etc/fstab file to turn off it permanently\nsudo sed -i.bak '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#install_docker","title":"Install Docker","text":"<ul> <li>Run commands below to install Docker.</li> </ul> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#setup_container_runtime","title":"Setup Container Runtime","text":"<ul> <li>Run the command below:</li> </ul> <pre><code>sudo su -\nmkdir -p /etc/containerd\ncontainerd config default&gt;/etc/containerd/config.toml\n</code></pre> <ul> <li>Then restart the <code>containerd</code> service and check the status.</li> </ul> <pre><code>sudo systemctl restart containerd\nsudo systemctl enable containerd\nsudo systemctl status containerd\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#setup_cgroup_driver","title":"Setup cgroup driver","text":"<ul> <li>Use the command below to open the <code>config.toml</code>.</li> </ul> <pre><code>sudo vi /etc/containerd/config.toml\n</code></pre> <ul> <li>Then find the option <code>SystemCgroup</code> following part and set the value of it to true.</li> </ul> <pre><code>......\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n\n    [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n        base_runtime_spec = \"\"\n        cni_conf_dir = \"\"\n        cni_max_conf_num = 0\n        container_annotations = []\n        pod_annotations = []\n        privileged_without_host_devices = false\n        privileged_without_host_devices_all_devices_allowed = false\n        runtime_engine = \"\"\n        runtime_path = \"\"\n        runtime_root = \"\"\n        runtime_type = \"io.containerd.runc.v2\"\n        sandbox_mode = \"podsandbox\"\n        snapshotter = \"\"\n\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n        BinaryName = \"\"\n        CriuImagePath = \"\"\n        CriuPath = \"\"\n        CriuWorkPath = \"\"\n        IoGid = 0\n        IoUid = 0\n        NoNewKeyring = false\n        NoPivotRoot = false\n        Root = \"\"\n        ShimCgroup = \"\"\n        SystemdCgroup = true\n\n......\n</code></pre> <ul> <li>Then restart the <code>containerd</code> service and check the status.</li> </ul> <pre><code>sudo systemctl restart containerd\nsudo systemctl enable containerd\nsudo systemctl status containerd\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#installing_kubeadm_kubelet_and_kubectl","title":"Installing kubeadm, kubelet and kubectl","text":"<ul> <li> <p>You will install these packages on all of your machines:</p> <ul> <li><code>kubeadm</code>: the command to bootstrap the cluster.</li> <li><code>kubelet</code>: the component that runs on all of the machines in your cluster and does things like starting pods and containers.</li> <li><code>kubectl</code>: the command line util to talk to your cluster.</li> </ul> </li> <li> <p>These instructions are for Kubernetes v1.32.</p> </li> <li> <p>Update the\u00a0<code>apt</code>\u00a0package index and install packages needed to use the Kubernetes\u00a0<code>apt</code>\u00a0repository:</p> </li> </ul> <pre><code>sudo apt-get update\n# apt-transport-https may be a dummy package; if so, you can skip that package\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n</code></pre> <ul> <li>Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:</li> </ul> <pre><code># If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.\n# sudo mkdir -p -m 755 /etc/apt/keyrings\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n</code></pre> <ul> <li>Add the appropriate Kubernetes\u00a0<code>apt</code>\u00a0repository. Please note that this repository have packages only for Kubernetes 1.32; for other Kubernetes minor versions, you need to change the Kubernetes minor version in the URL to match your desired minor version (you should also check that you are reading the documentation for the version of Kubernetes that you plan to install).</li> </ul> <pre><code># This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n</code></pre> <ul> <li>Update the\u00a0<code>apt</code>\u00a0package index, install <code>kubelet</code>, <code>kubeadm</code> and <code>kubectl</code>, and pin their version:</li> </ul> <pre><code>sudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl\n</code></pre> <ul> <li>Enable the kubelet service before running kubeadm:</li> </ul> <pre><code>sudo systemctl enable --now kubelet\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#setup_control_plane","title":"Setup Control Plane","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#creating_a_cluster_with_kubeadm","title":"Creating a cluster with kubeadm","text":"<ul> <li>Run commands below to check the network and make sure kubelet is enabled and pulls all the necessary container images for setting up the Kubernetes control plane.</li> </ul> <pre><code>lsmod | grep br_netfilter\nsudo systemctl enable kubelet\nsudo kubeadm config images pull\n</code></pre> Command Explanation <code>lsmod \\| grep br_netfilter</code> Lists all the loaded kernel modules and filters the output to show the <code>br_netfilter</code> module. <code>sudo systemctl enable kubelet</code> Enables the <code>kubelet</code> service to start automatically on system boot. <code>sudo kubeadm config images pull</code> Pulls the required container images for setting up the Kubernetes control plane. <ul> <li>Then run the command below to init the control plane.</li> </ul> <pre><code>sudo kubeadm init \\\n  --pod-network-cidr=192.168.0.0/16 \\\n  --cri-socket unix:///run/containerd/containerd.sock \\\n  --apiserver-advertise-address=192.168.1.22\n</code></pre> Command/Option Explanation <code>kubeadm init</code> Command to bootstrap a Kubernetes control plane node. This sets up all necessary components like the API server, controller manager, and scheduler. <code>--pod-network-cidr=192.168.0.0/16</code> Specifies the CIDR block for the pod network. This is required to configure the networking for pods in the cluster. The value <code>192.168.0.0/16</code> is a common range for a pod network. It must match the network settings of the CNI plugin (like Flannel or Calico) you will install. <code>--cri-socket unix:///run/containerd/containerd.sock</code> Specifies the socket path to the container runtime interface (CRI). In this case, it points to the <code>containerd</code> socket. By default, Kubernetes may look for the <code>docker</code> socket, so this option ensures it uses <code>containerd</code>. <code>--apiserver-advertise-address=192.168.12.13</code> Sets the IP address that the Kubernetes API server will advertise for communication with other nodes in the cluster. This should be the IP address of the control plane node. - After run the command above then you can also see the <code>join command</code> for the worker node in the output of the terminal as below. <pre><code>sudo kubeadm join 192.168.1.22:6443 --token dgtbv1.5nhmqg7t4tr2denr --discovery-token-ca-cert-hash sha256:06495669b7f2d19e411041ee95488efd0e71f3b9b5e80952c12079cc77c9b137\n</code></pre> <ul> <li>Let's save this command, it will be used later in worker nodes to join into the control plane.</li> <li>If you forgot saving the <code>join command</code> then you can generate the new one by using this command.</li> </ul> <pre><code>kubeadm token create --print-join-command\n</code></pre> <ul> <li>Next, to make kubectl work for your non-root user, run these commands, which are also part of the kubeadm init output:</li> </ul> <pre><code>mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#install_network_plugin_on_control_plane","title":"Install Network Plugin On Control Plane","text":"<ul> <li>Run commands below to install <code>Calico</code> network plugin.</li> </ul> <pre><code>kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml\n\nkubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml\n\nwatch kubectl get pods --all-namespaces\n</code></pre> <ul> <li>Run command below to enable pods can run on control plane.</li> </ul> <pre><code>kubectl taint nodes --all node-role.kubernetes.io/control-plane-\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Install%20Kubernetes/#setup_worker_node","title":"Setup Worker Node","text":"<ul> <li>Run the <code>join command</code> which we saved before during setting up the control plane. For example.</li> </ul> <pre><code>sudo kubeadm join 192.168.1.22:6443 --token dgtbv1.5nhmqg7t4tr2denr --discovery-token-ca-cert-hash sha256:06495669b7f2d19e411041ee95488efd0e71f3b9b5e80952c12079cc77c9b137\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Kubernetes%20Introduction/","title":"Kubernetes Introduction","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/","title":"Minikube Introduction","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#what_is_the_minikube","title":"What Is The Minikube?","text":"<ul> <li><code>Minikube</code> is local <code>Kubernetes</code>, focusing on making it easy to learn and develop for <code>Kubernetes</code>.</li> <li><code>Minikube</code> quickly sets up a local <code>Kubernetes</code> cluster on macOS, Linux, and Windows. </li> <li>What you\u2019ll need <ul> <li>2 CPUs or more</li> <li>2GB of free memory</li> <li>20GB of free disk space</li> <li>Internet connection</li> <li>Container or virtual machine manager, such as:\u00a0 Docker, QEMU, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMware Fusion/Workstation</li> </ul> </li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#installing_minikube","title":"Installing Minikube","text":"<ul> <li>Please view Linux Setup For Developer for installing <code>Minikube</code> on your Linux system.</li> <li>If you are using Window or MacOs please view this page for more information.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#minikube_commands","title":"Minikube Commands","text":"<ul> <li>After installing the Minikube, you can use two commands below to start MiniKube and the DashBoard for the Minikube.</li> </ul> <pre><code>minikube start\nminikube dashboard\n</code></pre> <ul> <li>You can find all commands of <code>Minikube</code> in the table below.</li> </ul> Command Description <code>minikube start</code> Starts a local Kubernetes cluster. <code>minikube dashboard</code> Opens the Kubernetes dashboard in your browser. <code>minikube status</code> Displays the status of the local Kubernetes cluster. <code>minikube ip</code> Displays the IP address of the local Kubernetes cluster. <code>minikube delete</code> Deletes the local Kubernetes cluster. <code>minikube image load</code> Loads a Docker image into the local Kubernetes cluster. <code>minikube service</code> Creates a Kubernetes service for a Pod. <code>minikube profile list</code> Lists all minikube profiles. <code>minikube profile use</code> Switches to a minikube profile. <code>minikube help</code> Displays help for a minikube command. <code>minikube addons list</code> Lists all available addons. <code>minikube addons enable [addon]</code> Enables an addon. <code>minikube addons disable [addon]</code> Disables an addon. <code>minikube config</code> Shows the minikube configuration. <code>minikube config set [key] [value]</code> Sets a minikube configuration value. <code>minikube ssh</code> Opens a shell to the minikube VM. <code>minikube ssh-key</code> Prints the SSH key for the minikube VM. <code>minikube docker-env</code> Prints environment variables for connecting to the Docker daemon inside minikube. <code>minikube podman-env</code> Prints environment variables for connecting to the Podman daemon inside minikube. <code>minikube cp</code> Copies a file or directory from your host machine to the minikube VM. <code>minikube mount</code> Mounts a directory from your host machine to the minikube VM. <code>minikube logs</code> Displays the logs for a Pod or container. <code>minikube pause</code> Pauses the minikube cluster. <code>minikube unpause</code> Unpauses the minikube cluster. <code>minikube tunnel</code> Opens a tunnel to the Kubernetes API server. <code>minikube update-check</code> Checks for updates to minikube. <code>minikube update-context</code> Updates the kubectl context for minikube. <code>minikube version</code> Displays the version of minikube.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#minikube_architecture","title":"Minikube Architecture","text":"<ul> <li>As we knew in Kubernetes Introduction, to set up a Kubernetes  production cluster, we would to prepare multiple master and worker nodes. It means we have to prepare several separated virtual or physical machines. So for learning or testing purpose on local it will take many efforts and resources.</li> <li><code>Minikube</code> is simpler it is basically one node cluster where the master processes and the work processes both run on one node and this node will have a docker container runtime pre-installed so we will be able to run the containers or the pods with containers on this node.</li> </ul> <ul> <li>The way it is going to run on our machine is through a Container or virtual machine manager, such as: Docker, QEMU, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMware Fusion/Workstation. So basically <code>Minikube</code> will create a container or a Virtual Machine environment on our machine and our node will run in that environment.</li> <li>Overall, <code>Minikube</code> is a one node kubernetes cluster that runs in container or a Virtual Machine on our machine which we can use for testing kubernetes on our local.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#kubectl","title":"Kubectl","text":"<ul> <li><code>Kubectl</code> is a command line tool for interacting with Kubernetes clusters. It is the primary interface through which administrators and developers can manage and control Kubernetes resources. Kubectl allows us to perform various operations on Kubernetes clusters, including deploying applications, inspecting and managing cluster resources, debugging applications, and more.</li> </ul> <ul> <li>Please view Linux Setup For Developer for installing <code>Kubectl</code> on your Linux system.</li> <li>Below is all commands of <code>Kubectl</code> which are grouped into tables.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#cluster_management","title":"Cluster Management","text":"Command Description kubectl config Manage kubeconfig files and contexts. kubectl cluster-info Display cluster information.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_management","title":"Resource Management","text":"Command Description kubectl apply Apply configuration changes to cluster resources. kubectl get Retrieve resource information. kubectl describe View detailed resource information. kubectl create Create a new resource. kubectl delete Delete a resource. kubectl edit Edit a resource's configuration. kubectl exec Run a command inside a Pod. kubectl logs View container logs. kubectl port-forward Forward ports from a Pod to your local machine. kubectl attach Attach to a running container.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_inspection_and_status","title":"Resource Inspection and Status","text":"Command Description kubectl describe Describe resources in detail. kubectl get events List events related to resources. kubectl top Display resource usage statistics (e.g., CPU, memory). kubectl rollout status Check the status of a rollout (e.g., for Deployments). kubectl rollout history View rollout history.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_scaling","title":"Resource Scaling","text":"Command Description kubectl scale Scale the number of replicas for a resource. kubectl autoscale Configure horizontal pod autoscaling.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_editing_and_patching","title":"Resource Editing and Patching","text":"Command Description kubectl edit Edit resource configurations. kubectl patch Apply partial changes to a resource. kubectl apply -f - Apply changes from stdin.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_labeling","title":"Resource Labeling","text":"Command Description kubectl label Add or update labels on resources. kubectl annotate Add or update annotations on resources.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_port_forwarding","title":"Resource Port Forwarding","text":"Command Description kubectl port-forward Forward ports from a Pod to your local machine.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_deletion","title":"Resource Deletion","text":"Command Description kubectl delete Delete resources by name, label, or other criteria. kubectl delete all Delete all resources in a namespace.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_inspection_and_debugging","title":"Resource Inspection and Debugging","text":"Command Description kubectl get logs Fetch logs from a container. kubectl describe pod Describe details of a Pod. kubectl logs -f Stream container logs.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_status_checking","title":"Resource Status Checking","text":"Command Description kubectl get pods Check the status of Pods. kubectl get services Check the status of Services. kubectl get nodes Check the status of cluster nodes. kubectl get pv/pvc Check the status of PersistentVolumes and PersistentVolumeClaims.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_exporting_and_importing","title":"Resource Exporting and Importing","text":"Command Description kubectl get -o json/yaml Export resource configurations. kubectl apply -f Import resources from configuration files.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#resource_role-based_access_control_rbac","title":"Resource Role-Based Access Control (RBAC)","text":"Command Description kubectl auth Manage Role-Based Access Control (RBAC) settings. kubectl auth can-i Check if a user or group has specific permissions.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#namespace_management","title":"Namespace Management","text":"Command Description kubectl create namespace Create a new namespace. kubectl delete namespace Delete a namespace and its resources.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#context_and_configuration","title":"Context and Configuration","text":"Command Description kubectl config Manage kubeconfig files, contexts, and clusters. kubectl config use-context Switch between contexts. kubectl config current-context Display the current context.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#other_commands","title":"Other Commands","text":"Command Description kubectl version Display the client and server Kubernetes versions. kubectl wait Wait for resources to reach a specific condition.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#debugging_and_troubleshooting","title":"Debugging and Troubleshooting","text":"Command Description kubectl debug Create a new Pod for debugging purposes. kubectl trace Trace system calls in running containers.","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#see_also","title":"See Also","text":"<ul> <li>Linux Setup For Developer</li> <li>Kubernetes Introduction</li> <li>Minikube Sample Project</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Introduction/#references","title":"References","text":"<ul> <li>Minikube</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/","title":"Minikube Sample Project","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#project_overview","title":"Project Overview","text":"<ul> <li>In this <code>Minikube</code> sample project we will focusing on deploying a Spring Boot application service and a MongoDB on <code>Minikube</code> and we can use postman from our host machine to call Spring Boot apis.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#mongodb_deployment","title":"MongoDB Deployment","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_configmaps","title":"Setup ConfigMaps","text":"<ul> <li> <p>In Kubernetes, a <code>ConfigMap</code> is an API resource that provides a way to decouple configuration artifacts from your containerized applications. It allows you to store and manage non-sensitive configuration data in key-value pairs. <code>ConfigMaps</code> are commonly used to configure applications, environment variables, command-line arguments, configuration files, or any other configuration data needed by containers running in a Pod.</p> </li> <li> <p>Let's create a yaml file name <code>mongo-config.yaml</code> with the content as below.</p> </li> </ul> mongo-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mongo-config\ndata:\n  mongo-url: mongo-service\n  mongo-port: \"27017\"\n</code></pre> <ul> <li>Okay in this configuration we have the field <code>kind: ConfigMap</code>.  the field <code>kind</code> means we indicate the type of Kubernetes resource being created and it's value is <code>ConfigMap</code>, which is an object used to store configuration data separately from the application code.</li> <li>Then we have <code>metadata.name: mongo-config</code> this is the name of this ConfigMap we will use this name later in deployment configuration.</li> <li> <p>Then below field <code>data</code> we will have <code>key: value</code> pair in the ConfigMap. Currently, we have The key is \"mongo-url\" and the value is \"mongo-service\" This means that the ConfigMap will store the value \"mongo-service\" under the key \"mongo-url.\" Same for the <code>mongo-port</code> with value <code>27017</code>.</p> </li> <li> <p>Finally, we will execute the command below to apply the <code>ConfigMap</code> to <code>minikube</code></p> </li> </ul> <pre><code>kubectl apply -n default -f mongo-config.yaml\n</code></pre> <ul> <li><code>-n default</code> means we will deploy this ConfigMap to namespace <code>default</code>.</li> <li> <p><code>-f mongo-config.yaml</code> meas we specify this file to deploy,</p> </li> <li> <p>We can use command below to check which namespace that we are using.</p> </li> </ul> <pre><code>kubectl config get-contexts\n</code></pre> <ul> <li>Now, let's open <code>kubernetes dashboard</code> then we can see the ConfigMap deployed successfully.</li> </ul> <p></p>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_secrets","title":"Setup Secrets","text":"<ul> <li> <p>In Kubernetes, \"Secrets\" are a resource type that allows you to store and manage sensitive information, such as passwords, tokens, or any confidential data. Secrets are used to keep this sensitive data secure and separate from the main container image or configuration files, reducing the risk of exposing sensitive information in a compromised container or version control system.</p> </li> <li> <p>Let's create a yaml file name <code>mongo-secret.yaml</code> with the content as below.</p> </li> </ul> mongo-secret.yaml<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: mongo-secret\ntype: Opaque  \ndata:\n  mongo-user: cm9vdA==\n  mongo-password: ZXhhbXBsZQ==\n</code></pre> <ul> <li>In this config file, we have the <code>kind: Secret</code> which is used to store and manage sensitive information securely.</li> <li>Then we have <code>metadata.name: mongo-secret</code> this is the name of this <code>Secret</code> we will use this name later in deployment configuration.</li> <li> <p>Like <code>ConfigMap</code> we also have <code>key: value</code> pair in under field <code>data</code>. Currently we are storing MongoDB credentials with <code>username</code> and <code>password</code>.</p> </li> <li> <p>Next, we will execute the command below to apply the <code>Secret</code> to <code>minikube</code></p> </li> </ul> <pre><code>kubectl apply -n default -f mongo-secret.yaml\n</code></pre> <ul> <li>Same as <code>ConfigMap</code> after applying we can see the <code>mongo-secret</code> on <code>kubernetes dashboard</code></li> </ul> <p></p>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_persistent_volume_claim_pvc","title":"Setup Persistent Volume Claim (PVC)","text":"<ul> <li>In Kubernetes, a Persistent Volume Claim (PVC) is a resource used by applications to request storage resources from the underlying storage infrastructure. PVCs abstract away the details of the underlying storage implementation, allowing developers to request storage without having to know the specific details of the storage infrastructure.</li> <li>Let's create a yaml file name <code>mongo-pvc.yaml</code> with the content as below.</li> </ul> mongo-pvc.yaml<pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mongo-pvc\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 512Mi\n</code></pre> <ul> <li>The <code>kind: PersistentVolumeClaim</code> indicates the type of Kubernetes resource being created with a <code>PersistentVolumeClaim</code> (PVC).</li> <li>Then we have <code>metadata.name: mongo-pvc</code> this is the name of this <code>PersistentVolumeClaim</code> we will use this name later in deployment configuration.</li> <li> <p><code>spec</code>: The \"spec\" section specifies the desired state of the PVC.</p> <ul> <li><code>accessModes</code>: This field indicates the desired access mode for the persistent volume. In this case, the access mode is set to <code>ReadWriteMany</code>. It means that the volume can be mounted as read-write by multiple pods simultaneously, making it suitable for use in scenarios where multiple pods need to read and write to the same volume.</li> <li><code>resources</code>: This field defines the resource requests for the PVC.<ul> <li><code>requests</code>: This subsection specifies the desired storage capacity for the PVC.</li> <li><code>storage: 512Mi</code>: This line sets the storage request to 512 megabytes (MiB) of storage capacity. It means that the PVC is requesting a persistent volume with at least 512MiB of storage space.</li> </ul> </li> </ul> </li> <li> <p>Next, we will execute the command below to apply the <code>PCV</code> to <code>minikube</code>.</p> </li> </ul> <pre><code>kubectl apply -n default -f mongo-pvc.yaml \n</code></pre> <p></p>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_deployment","title":"Setup Deployment","text":"<ul> <li> <p>In Kubernetes, a \"Deployment\" is a higher-level resource that provides declarative updates for Pods and ReplicaSets. It is used to manage the deployment and scaling of applications within a Kubernetes cluster. Deployments ensure that a specified number of replicas (Pods) are running and available at all times, allowing for application availability, resilience, and easy rolling updates.</p> </li> <li> <p>Let's create a yaml file name <code>mongo-deployment.yaml</code> with the content as below.</p> </li> </ul> mongo-deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongo-deployment\n  labels:\n    app: mongo-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongo-app\n  template:\n    metadata:\n      labels:\n        app: mongo-app\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo\n        ports:\n        - containerPort: 27017\n        env:\n        - name: MONGO_INITDB_ROOT_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: mongo-secret\n              key: mongo-user\n        - name: MONGO_INITDB_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mongo-secret\n              key: mongo-password      \n        volumeMounts:\n        - name: mongo-storage\n          mountPath: /data/db\n      volumes:\n      - name: mongo-storage\n        persistentVolumeClaim:    \n          claimName: mongo-pvc\n</code></pre> <ul> <li> <p><code>kind: Deployment</code>: The \"kind\" field indicates the type of Kubernetes resource being created. Here, it's a Deployment, which manages the desired number of replicas of a pod.</p> </li> <li> <p><code>metadata</code>: This section contains metadata about the Deployment, such as its name and labels.</p> <ul> <li><code>name: mongo-deployment</code>: This line defines the name of the Deployment. It will be referred to by this name in other parts of the Kubernetes configuration.</li> <li><code>labels: app: mongo-app</code>: This line assigns a label to the Deployment, setting it as \"mongo-app.\" Labels are used to identify and select resources in Kubernetes.</li> </ul> </li> <li> <p><code>spec</code>: The \"spec\" section defines the desired state of the Deployment.</p> <ul> <li><code>replicas: 1</code>: This line specifies that the Deployment should manage one replica (pod) of the MongoDB container.</li> <li><code>selector</code>: This section defines how the Deployment selects which pods it manages.<ul> <li><code>matchLabels: app: mongo-app</code>: This line specifies that the Deployment should manage pods with the label \"app\" set to \"mongo-app.\"</li> </ul> </li> <li><code>template</code>: This section defines the pod template for creating replicas.<ul> <li><code>metadata</code>: This subsection contains metadata for the pod template, such as labels.<ul> <li><code>labels: app: mongo-app</code>: This line sets the \"app\" label to \"mongo-app\" for the pods created by the Deployment.</li> </ul> </li> <li><code>spec</code>: This subsection specifies the desired state of the pod template.<ul> <li><code>containers</code>: This section defines the containers to be run within the pod.<ul> <li><code>name: mongodb</code>: This line sets the name of the container to \"mongodb.\"</li> <li><code>image: mongo</code>: This line specifies the container image to use, in this case, \"mongo,\" which represents the official MongoDB container image.</li> <li><code>ports</code>: This section specifies the ports that the container should listen on.<ul> <li><code>containerPort: 27017</code>: This line sets the container port to 27017, which is the default port for MongoDB.</li> </ul> </li> <li><code>env</code>: This section defines environment variables to be set in the container.<ul> <li><code>name: MONGO_INITDB_ROOT_USERNAME</code>: This line sets the environment variable name to \"MONGO_INITDB_ROOT_USERNAME.\" It is set using the value of a secret key.<ul> <li><code>valueFrom: secretKeyRef: name: mongo-secret</code>: This line indicates that the value for the environment variable is sourced from a secret named \"mongo-secret.\"<ul> <li><code>key: mongo-user</code>: This line specifies that the value is extracted from the \"mongo-user\" key within the \"mongo-secret\" secret.</li> </ul> </li> </ul> </li> <li><code>name: MONGO_INITDB_ROOT_PASSWORD</code>: This line sets the environment variable name to \"MONGO_INITDB_ROOT_PASSWORD.\" It is set using the value of a secret key.<ul> <li><code>valueFrom: secretKeyRef: name: mongo-secret</code>: This line indicates that the value for the environment variable is sourced from a secret named \"mongo-secret.\"<ul> <li><code>key: mongo-password</code>: This line specifies that the value is extracted from the \"mongo-password\" key within the \"mongo-secret\" secret.</li> </ul> </li> </ul> </li> </ul> </li> <li><code>volumeMounts</code>: This section defines volume mounts for the container.<ul> <li><code>name: mongo-storage</code>: This line sets the name of the volume mount to \"mongo-storage.\"<ul> <li><code>mountPath: /data/db</code>: This line specifies the mount path within the container where the persistent storage will be mounted. In this case, it's mounted at \"/data/db,\" which is the default data directory for MongoDB.</li> </ul> </li> </ul> </li> </ul> </li> <li><code>volumes</code>: This section defines volumes to be used by the pod.<ul> <li><code>name: mongo-storage</code>: This line sets the name of the volume to \"mongo-storage.\"<ul> <li><code>persistentVolumeClaim: claimName: mongo-pvc</code>: This line indicates that the volume is backed by a PersistentVolumeClaim named \"mongo-pvc.\" The PVC is responsible for dynamically provisioning the required storage.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Next, we will execute the command below to apply the <code>Deployment</code> to <code>minikube</code>.</p> </li> </ul> <pre><code>kubectl apply -n default -f mongo-deployment.yaml\n</code></pre> <p></p>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_service","title":"Setup Service","text":"<ul> <li> <p>In Kubernetes, a \"Service\" is a resource that defines a logical set of Pods and a policy by which to access them. Services enable network connectivity to Pods, abstracting away the underlying details of how Pods are implemented or where they are located within a cluster.</p> </li> <li> <p><code>Services</code> provide several key benefits as in the table below.</p> </li> </ul> Aspect Description Load Balancing Services provide automatic load balancing across matching Pods, distributing incoming traffic evenly for improved availability. Service Discovery Services offer stable IP addresses and DNS names, allowing reliable discovery and communication with backend Pods. Network Policies Services can be used with Network Policies to control and secure network traffic between Pods, defining communication rules. Abstracts Pod Changes Services ensure Pods remain accessible via a stable IP and DNS name, even when Pods are scaled, replaced, or rescheduled. Support for External Traffic Services can be configured to expose Pods to external traffic using types like \"NodePort\" and \"LoadBalancer,\" making applications accessible from outside the cluster. <ul> <li>Types of Service.</li> </ul> Service Type Description ClusterIP Default type, exposes the Service on an internal IP within the cluster, suitable for internal communication between services. NodePort Exposes the Service on a static port on each Node's IP, allowing external access via the Node's IP address and the NodePort. LoadBalancer Creates an external load balancer in cloud providers (e.g., AWS, GCP, Azure) with an external IP address, used for exposing services to the internet. ExternalName Maps a Service to a DNS name, enabling Pods within the cluster to access external services by name. <ul> <li>Let's create a yaml file name <code>mongo-service.yaml</code> with the content as below.</li> </ul> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: mongo-service\nspec:\n  selector:\n    app: mongo-app\n  ports:\n    - protocol: TCP\n      name: mongo-port\n      port: 27017\n      targetPort: 27017\n</code></pre> <ul> <li><code>apiVersion: v1</code>: This line specifies the API version of Kubernetes objects used in this manifest. In this case, it's \"v1,\" which is a stable version of the API.</li> <li><code>kind: Service</code>: The \"kind\" field indicates that this YAML defines a Kubernetes Service resource. Services are used to expose Pods to network traffic.</li> <li><code>metadata</code>: This section contains metadata about the Service.<ul> <li><code>name: mongo-service</code>: This line sets the name of the Service to \"mongo-service.\" This name is how you will reference and identify the Service within the Kubernetes cluster.</li> </ul> </li> <li> <p><code>spec</code>: The \"spec\" section specifies the desired state of the Service.</p> <ul> <li><code>selector</code>: This field is used to select the Pods that the Service will route network traffic to. In this case, it selects Pods with a label \"app\" set to \"mongo-app.\" This means any Pods in the cluster with the label \"app: mongo-app\" will be considered part of this Service.</li> <li><code>ports</code>: This field defines the ports configuration for the Service.<ul> <li><code>- protocol: TCP</code>: This section specifies the protocol to use for the port. It's set to TCP, which is the standard protocol for most network services.</li> <li><code>name: mongo-port</code>: This line provides a name for the port. This name can be used as an identifier for this port within the Service configuration. In this case, it's named \"mongo-port.\"</li> <li><code>port: 27017</code>: This line sets the port number on which the Service will listen for incoming network traffic. In this example, it's configured to listen on port 27017, which is a common port for MongoDB database connections.</li> <li><code>targetPort: 27017</code>: This line specifies the target port on the Pods to which the incoming traffic will be forwarded. In this case, it matches the port number 27017, which is the port that MongoDB typically listens on inside the Pods labeled with \"app: mongo-app.\"</li> </ul> </li> </ul> </li> <li> <p>Next, we will execute the command below to apply the <code>Deployment</code> to <code>minikube</code>.</p> </li> </ul> <pre><code>kubectl apply -n default -f mongo-service.yaml\n</code></pre> <p></p>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#port_foarward","title":"Port Foarward","text":"<ul> <li><code>Port Forward</code> is a networking technique that allows a computer, typically a client computer or local machine, to access services or ports on a remote server or another computer securely over a network. It's commonly used for tasks like accessing a remote database, web server, or other network services.</li> <li>In the context of Kubernetes and containerized applications, <code>Port Forward</code> typically refers to a feature provided by the Kubernetes command-line tool, kubectl. Kubernetes port forwarding enables us to access a specific port of a Pod running within our Kubernetes cluster as if it were running on your local machine. This can be extremely useful for debugging, accessing services that are not exposed externally, or interacting with applications running inside Pods.</li> <li>We will use the <code>kubectl port-forward</code> command to specify the name of the Pod and the local and remote port numbers you want to forward. For example:</li> </ul> <pre><code>kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;remote-port&gt;\n</code></pre> <pre><code>duc@duc-MS-7E01:~$ kubectl get pods\nNAME                                    READY   STATUS    RESTARTS      AGE\nmongo-app-dev-6b4cb8bcd4-2mcjs          1/1     Running   4 (13m ago)   49d\nmongo-app-test-84784c45-tlw5f           1/1     Running   4 (13m ago)   49d\nmongo-deployment-75797ccb4-ttpff        1/1     Running   1 (13m ago)   11h\nspring-boot-app-dev-684c858666-n2rmt    1/1     Running   4 (10h ago)   49d\nspring-boot-app-test-65df5dc659-wq2sh   1/1     Running   4 (13m ago)   49d\n</code></pre> <pre><code>kubectl port-forward mongo-deployment-75797ccb4-ttpff 27017:27017\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#testing","title":"Testing","text":"<ul> <li>Okay after the <code>port-forward</code>, we can use <code>MongoDB Compass</code>to access our mongodb that we deployed on minikube.</li> <li>We will use the host as <code>localhost:27017</code>. The port <code>27017</code> is the port that we forwarded on the step above.</li> </ul> <ul> <li>Then we will put the username and password that we defined in the <code>mongo-secret.yaml</code>. Note we have to decode the username and password for using.</li> </ul> <ul> <li>Finally, we can see the successful connection as in the image below.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#spring_boot_deployment","title":"Spring Boot Deployment","text":"","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#building_a_spring_boot_docker_image","title":"Building A Spring Boot Docker Image","text":"<ul> <li>Before deep dive into the Spring Boot Deployment, we need to take a look about preparing a Spring Boot Docker image. In this example I will take the image from the example Docker With SpringBoot.</li> <li>Firstly, let's clone the spring boot project json-schema-validator then we can see the <code>Dockerfile</code> with the content as below.</li> </ul> Dockerfile<pre><code># Use the base image with Java 8 and Alpine Linux\nFROM openjdk:8\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the compiled Spring Boot application JAR file into the container\nCOPY target/json-schema-validator-0.0.1-SNAPSHOT.jar /app/json-schema-validator-0.0.1-SNAPSHOT.jar\n\n# Expose the port that the Spring Boot application listens on\nEXPOSE 8080\n\n# Set the command to run the Spring Boot application when the container starts\nCMD [\"java\", \"-jar\", \"-Dspring.profiles.active=${ENV}\", \"json-schema-validator-0.0.1-SNAPSHOT.jar\"]\n</code></pre> <ul> <li> <p>As you can see we have the command <code>-Dspring.profiles.active=${ENV}</code>. So the spring boot profile will be gotten from  environment variable of Docker Container. Then in later steps of Kubernetes deployment we have to make sure setting environment variable <code>ENV</code> into the Docker Container.</p> </li> <li> <p>Okay after we built the image and uploaded into our docker repository local.</p> </li> </ul> <pre><code>duc@duc-MS-7E01:~$ docker images\nREPOSITORY                                      TAG              IMAGE ID       CREATED         SIZE\njson-schema-validator                           0.0.1-SNAPSHOT   5b8be2a059af   6 weeks ago     575MB\n</code></pre> <ul> <li>Then we will realize that this Docker Image is in the Docker Repository of our local machine not on the Minikube Docker Deamon. So how can we push this docker image <code>json-schema-validator</code> into the Docker Deamon of <code>MiniKube</code>?</li> <li>Luckily, Minikube had provided for us a way to do that with the command <code>minikube docker-env</code>.</li> </ul> <pre><code>minikube docker-env\n</code></pre> <ul> <li><code>minikube docker-env</code>: This is a Minikube command that generates a series of environment variables and outputs them to the terminal. These environment variables are specifically configured to point our local Docker client to the Docker daemon running within the Minikube virtual machine.</li> </ul> <pre><code>duc@duc-MS-7E01:~$ minikube docker-env\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp://192.168.49.2:2376\"\nexport DOCKER_CERT_PATH=\"/home/duc/.minikube/certs\"\nexport MINIKUBE_ACTIVE_DOCKERD=\"minikube\"\n\n# To point your shell to minikube's docker-daemon, run:\n# eval $(minikube -p minikube docker-env)\n</code></pre> <ul> <li> <p>Then now, we will see, to make the outputs of a command and run them as shell commands, we will use <code>eval</code>. The <code>eval</code> command is a shell built-in that is used to execute the output of a command as shell commands. It takes the output of the command enclosed in backticks or <code>$()</code> and runs it as if it were a series of commands typed directly into the shell.</p> </li> <li> <p>So now, to make our shell point to minikube's docker-daemon, we can run the command below.</p> </li> </ul> <pre><code>eval $(minikube docker-env)\n</code></pre> <ul> <li>So, when we run <code>eval $(minikube docker-env)</code>, we are essentially executing the environment variable settings provided by <code>minikube docker-env</code>. These settings tell our local Docker client to communicate with the Docker daemon inside the Minikube VM rather than the default Docker daemon on our local machine.</li> <li>Then now, we can republish docker image <code>json-schema-validator</code> and it will be contained inside the Minikube Docker Repository.</li> </ul> <pre><code>duc@duc-MS-7E01:~$ docker images\nREPOSITORY                                TAG              IMAGE ID       CREATED         SIZE\nmongo                                     latest           00307f461add   2 hours ago     735MB\nmongo                                     &lt;none&gt;           01e8e54fc538   2 weeks ago     720MB\njson-schema-validator                     0.0.1-SNAPSHOT   b2825af6cd67   7 weeks ago     575MB\nmongo                                     &lt;none&gt;           fb5fba25b25a   7 weeks ago     654MB\n&lt;none&gt;                                    &lt;none&gt;           a3da09095a2a   7 weeks ago     575MB\n&lt;none&gt;                                    &lt;none&gt;           4395c7f01b35   7 weeks ago     575MB\n&lt;none&gt;                                    &lt;none&gt;           bd372b2d3b3c   7 weeks ago     575MB\n&lt;none&gt;                                    &lt;none&gt;           f8ac84215bf4   7 weeks ago     575MB\nmongo                                     &lt;none&gt;           1f3d6ec739d8   8 weeks ago     654MB\nregistry.k8s.io/kube-apiserver            v1.26.3          1d9b3cbae03c   5 months ago    134MB\nregistry.k8s.io/kube-controller-manager   v1.26.3          ce8c2293ef09   5 months ago    123MB\nregistry.k8s.io/kube-scheduler            v1.26.3          5a7904736932   5 months ago    56.4MB\nregistry.k8s.io/kube-proxy                v1.26.3          92ed2bec97a6   5 months ago    65.6MB\nregistry.k8s.io/etcd                      3.5.6-0          fce326961ae2   9 months ago    299MB\nregistry.k8s.io/pause                     3.9              e6f181688397   10 months ago   744kB\nkubernetesui/dashboard                    &lt;none&gt;           07655ddf2eeb   11 months ago   246MB\nkubernetesui/metrics-scraper              &lt;none&gt;           115053965e86   15 months ago   43.8MB\nregistry.k8s.io/coredns/coredns           v1.9.3           5185b96f0bec   15 months ago   48.8MB\ngcr.io/k8s-minikube/storage-provisioner   v5               6e38f40d628d   2 years ago     31.5MB\n</code></pre> <ul> <li>Keep in mind that once we've executed <code>eval $(minikube docker-env)</code>, our local Docker client will remain configured to interact with Minikube until we close the terminal session or reset the environment variables. This allows for a seamless development experience when building and testing containerized applications with Minikube.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_configmaps_1","title":"Setup ConfigMaps","text":"<ul> <li>Like we did with the MongoDB before, let's create a yaml file name <code>springboot-config.yaml</code> with the content as below.</li> </ul> springboot-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: spring-boot-config\ndata:\n  env: dev\n</code></pre> <ul> <li>Currently, we have The key is \"env\" and the value is \"dev\". We will use this variable to set into the Docker Container environment in later step.</li> <li>Next, we will execute the command below to apply the <code>ConfigMaps</code> to <code>minikube</code>.</li> </ul> <pre><code>kubectl apply -n default -f springboot-config.yaml\n</code></pre>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_deployment_1","title":"Setup Deployment","text":"<ul> <li>Let's create a yaml file name <code>spring-boot-deployment.yaml</code> with the content as below.</li> </ul> spring-boot-deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spring-boot-deployment\n  labels:\n    app: spring-boot-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: spring-boot-app\n  template:\n    metadata:\n      labels:\n        app: spring-boot-app\n    spec:\n      containers:\n      - name: spring-boot-app\n        image: json-schema-validator:0.0.1-SNAPSHOT\n        imagePullPolicy: Never\n        ports:\n        - containerPort: 8080\n        env:\n        - name: USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: mongo-secret\n              key: mongo-user\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mongo-secret\n              key: mongo-password\n        - name: DB_URL\n          valueFrom:\n            configMapKeyRef:\n              name: mongo-config\n              key: mongo-url\n        - name: PORT\n          valueFrom:\n            configMapKeyRef:\n              name: mongo-config\n              key: mongo-port      \n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: spring-boot-config\n              key: env\n</code></pre> <ul> <li><code>apiVersion: apps/v1</code> specifies the API version for this Kubernetes resource. It uses the Apps API version, which is commonly used for Deployments.</li> <li><code>kind: Deployment</code> indicates that this YAML defines a Deployment resource. Deployments are used to manage the desired state of a set of replica Pods.</li> <li><code>metadata</code> provides metadata about the Deployment:<ul> <li><code>name: spring-boot-deployment</code> sets the name of the Deployment to \"spring-boot-deployment.\" This is the name by which the Deployment can be referenced in Kubernetes.</li> <li><code>labels</code> assigns labels to the Deployment. In this case, the Deployment is labeled with \"app: spring-boot-app,\" which can be used for selecting and organizing resources in Kubernetes.</li> </ul> </li> <li> <p><code>spec</code> specifies the desired state of the Deployment:</p> <ul> <li><code>replicas: 1</code> indicates that the Deployment should manage one replica (Pod) of the Spring Boot application. You can adjust this number to scale the application   </li> <li><code>selector</code> defines the Pod selector used by the Deployment to identify which Pods it should manage:<ul> <li><code>matchLabels</code> specifies that the Deployment should manage Pods with the label \"app\" set to \"spring-boot-app.\" This label corresponds to the labels set earlier in the metadata section.</li> </ul> </li> <li><code>template</code> specifies the Pod template that the Deployment will use for creating replicas:<ul> <li><code>metadata</code> provides metadata for the Pod template:<ul> <li><code>labels</code> assigns labels to the Pods created by the Deployment. In this case, the Pods are labeled with \"app: spring-boot-app.\"</li> </ul> </li> <li><code>spec</code> defines the desired state of the Pods:<ul> <li><code>containers</code> specifies the containers to run in the Pod:<ul> <li><code>name: spring-boot-app</code> sets the name of the container within the Pod.</li> <li><code>image: json-schema-validator:0.0.1-SNAPSHOT</code> specifies the Docker image to use for the container. It appears to be named \"json-schema-validator\" with the version \"0.0.1-SNAPSHOT.\"</li> <li><code>imagePullPolicy: Never</code> indicates that Kubernetes should never attempt to pull the container image from a remote registry. It assumes the image is already available locally.</li> <li><code>ports</code> defines the ports that the container should listen on:<ul> <li><code>containerPort: 8080</code> sets the container to listen on port 8080.</li> </ul> </li> <li><code>env</code>: This section specifies environment variables for the container:</li> <li>Environment variables like <code>USERNAME</code>, <code>PASSWORD</code>, <code>DB_URL</code>, <code>PORT</code>, and <code>ENV</code> are defined. These variables are set using values from ConfigMaps and Secrets, making it easy to configure the Spring Boot application without modifying the container image.<ul> <li><code>USERNAME</code> and <code>PASSWORD</code> are sourced from a Secret named \"mongo-secret.\"</li> <li><code>DB_URL</code> and <code>PORT</code> are sourced from a ConfigMap named \"mongo-config.\"</li> <li><code>ENV</code> is sourced from a ConfigMap named \"spring-boot-config.\" </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Next, we will execute the command below to apply the <code>Deployment</code> to <code>minikube</code>.</p> </li> </ul> <pre><code>kubectl apply -n default -f spring-boot-deployment.yaml\n</code></pre> <p></p>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#setup_service_1","title":"Setup Service","text":"<ul> <li>Let's create a yaml file name <code>spring-boot-service.yaml</code> with the content as below.</li> </ul> spring-boot-service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: spring-boot-service\nspec:\n  type: NodePort\n  selector:\n    app: spring-boot-app\n  ports:\n    - protocol: TCP\n      name: spring-boot-port\n      port: 8080\n      targetPort: 8080\n      nodePort: 30000\n</code></pre> <ul> <li><code>apiVersion: v1</code>: This specifies the Kubernetes API version for this resource. In this case, it's using the \"v1\" version, which is the core Kubernetes API version.</li> <li><code>kind: Service</code>: This indicates that this YAML configuration defines a Kubernetes Service resource. Services are used to expose and make network connections to Pods within the cluster.</li> <li><code>metadata</code>: This section provides metadata about the Service:<ul> <li><code>name: spring-boot-service</code>: It sets the name of the Service to \"spring-boot-service.\" This name is how the Service can be referenced within the Kubernetes cluster.</li> </ul> </li> <li> <p><code>spec</code>: This section specifies the desired state of the Service:</p> <ul> <li><code>type: NodePort</code>: It indicates that this Service should be of type NodePort. NodePort is one of the Service types in Kubernetes and exposes the Service on a static port on each Node in the cluster. It allows external traffic to reach the Service using the Node's IP address and the NodePort.</li> <li><code>selector</code>: This field defines a selector that determines which Pods the Service should route traffic to. In this case, the selector specifies that the Service should route traffic to Pods with the label \"app\" set to \"spring-boot-app.\" This label corresponds to the labels set on the Pods.</li> <li><code>ports</code>: This section specifies the ports configuration for the Service:<ul> <li><code>- protocol: TCP</code>: This section specifies the protocol to use for the port, which is TCP in this case.</li> <li><code>name: spring-boot-port</code>: It provides a name for the port. This name can be used as an identifier for this port within the Service configuration.</li> <li><code>port: 8080</code>: This line sets the port number on which the Service will listen for incoming network traffic. In this example, it's configured to listen on port 8080.</li> <li><code>targetPort: 8080</code>: This line specifies the target port on the Pods to which incoming traffic will be forwarded. It matches the port number 8080, which is the port that the Spring Boot application inside the Pods is listening on.</li> <li><code>nodePort: 30000</code>: This line sets the NodePort, which is the external port that will be open on each Node in the cluster. In this case, the Service will be accessible externally on NodePort 30000.</li> </ul> </li> </ul> </li> <li> <p>Next, we will execute the command below to apply the <code>Service</code> to <code>minikube</code>.</p> </li> </ul> <pre><code>kubectl apply -n default -f spring-boot-service.yaml\n</code></pre> <p></p> <ul> <li>Okay so, we finished deployments for MongoDB and Spring Boot Service which will connect to MongoDB. Let's continue to test it in following section.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#testing_1","title":"Testing","text":"<ul> <li>Because in Minikube we have </li> <li>Now, let's run the command below to get the <code>minikube node ip</code>.</li> </ul> <pre><code>minikube ip\n</code></pre> <pre><code>duc@duc-MS-7E01:~$ minikube ip\n192.168.49.2\n</code></pre> <ul> <li>So, we can access to the Spring Boot application which is deployed in a Node of Minikube with this Node Ip and the Node port <code>30000</code> that we exported in the <code>spring-boot-service.yaml</code> before.</li> <li>Let's open Postman and try to call some apis of Spring Booot service with the IP and PORT above.</li> </ul> <ul> <li>We can see that we can store and get json schema from MongoDB with 2 apis from our Spring Boot application and they are all deployed in Minikube Node.</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#see_also","title":"See Also","text":"<ul> <li>Kubernetes Introduction</li> <li>Minikube Introduction</li> <li>Docker With SpringBoot</li> <li>Spring Boot With Json Schema Validator</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Minikube%20Sample%20Project/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Kubernetes"]},{"location":"Kubernetes/Zero%20Downtime%20Deployment/","title":"Zero Downtime Deployment","text":"","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Zero%20Downtime%20Deployment/#what_is_the_zero_downtime_deployment","title":"What Is The Zero Downtime Deployment?","text":"<ul> <li><code>Zero downtime deployment</code> in Kubernetes is a process that allows updates to take place without causing any interruption to the service. This is achieved by incrementally replacing the current Pods with new ones and usually called <code>Rolling update</code>.</li> <li><code>Rolling Updates</code>: By default, Kubernetes deployments roll-out pod version updates with a rolling update strategy. This strategy aims to prevent application downtime by keeping at least some instances up-and-running at any point in time while performing the updates. Old pods are only shutdown after new pods of the new deployment version have started-up and became ready to handle traffic.</li> <li>Depending on the workload and available compute resources, we can configure how many instances we want to over- or under-provision at any time. For example, given three desired replicas, should we create three new pods immediately and wait for all of them to start up, should we terminate all old pods except one, or do the transition one-by-one.</li> <li>To make <code>Kubernetes</code> knows the pods are ready to to handle traffic or shutdown we have to configure the <code>Readiness Probe</code> and <code>Liveness Probe</code>. Kubernetes will only route the client traffic to the pods with a healthy `Liveness Probe.</li> <li>The pods have to provide a method for <code>Kubernetes</code> then it can check the health status of them. In Spring Boot 3.x Actuator &amp; Graceful Shutdown we used Spring Boot Actuator for monitoring and managing Spring Boot application. It also exporting <code>Liveness and Readiness Probes</code> which will help Spring Boot integrates better with Kubernetes deployment environment.</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Zero%20Downtime%20Deployment/#zero_downtime_configuration_example","title":"Zero Downtime Configuration Example","text":"<ul> <li> <p>To speed up the configuration we will reuse the examples from other topics as below.</p> <ol> <li>For Spring Boot Actuator configuration we will result the Spring Boot project of topic Spring Boot 3.x Actuator &amp; Graceful Shutdown.</li> <li>Then to build the Docker Image for that Spring Boot project we will result the <code>Dockerfile</code> in the topic Docker With SpringBoot</li> <li>Then to public the docker image of step above to the Minikube Docker Repository we will review step Spring Boot Deployment in Minikube Sample Project.</li> <li>Finally, we will reuse the existing deployment configuration in topic Helm.</li> </ol> </li> <li> <p>Let's do the step 1 to step 3 by yourself. For the step 4 we just need to copy the all the files in the folder <code>sample</code> of <code>Helm</code> and paste to another folder ex: <code>zero-downtime</code>.</p> </li> </ul> <p></p> <ul> <li>Now, let's open the <code>spring-boot-deployment.yaml</code> and put the configurations as below.</li> </ul> spring-boot-deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ .Values.springboot.app.name }}\n  labels:\n    app: {{ .Values.springboot.app.name }}\nspec:\n  replicas: 1\n  strategy:\n   rollingUpdate:\n     maxSurge: 1\n     maxUnavailable: 0\n   type: RollingUpdate\n  selector:\n    matchLabels:\n      app: {{ .Values.springboot.app.name }}\n  template:\n    metadata:\n      labels:\n        app: {{ .Values.springboot.app.name }}  \n      annotations:  \n        # each invocation of the template function randAlphaNum will generate a unique random string. Thus random string always changes and causes the deployment to roll.\n        rollme: {{ randAlphaNum 5 | quote }}\n    spec:\n      containers:\n      - name: {{ .Values.springboot.containers.name }}\n        image: {{ .Values.springboot.containers.image }}\n        imagePullPolicy: Never\n        readinessProbe:\n          httpGet:\n            path: /actuator/health/readiness\n            port: {{ .Values.springboot.containers.port }}\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            path: /actuator/health/liveness\n            port: {{ .Values.springboot.containers.port }}\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/bash\", \"-c\", \"sleep 15\"]\n        ports:\n        - containerPort: {{ .Values.springboot.containers.port }}\n        env:\n        - name: USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: {{ .Values.mongo.secret.name }}\n              key: mongo-user\n        - name: PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ .Values.mongo.secret.name }}\n              key: mongo-password\n        - name: DB_URL\n          valueFrom:\n            configMapKeyRef:\n              name: {{ .Values.mongo.config.name }}\n              key: mongo-url\n        - name: PORT\n          valueFrom:\n            configMapKeyRef:\n              name: {{ .Values.mongo.config.name }}\n              key: mongo-port\n        - name: ENV\n          valueFrom:\n            configMapKeyRef:\n              name: {{ .Values.springboot.config.name }}\n              key: env\n</code></pre> <ul> <li>There are two new parts that we added into the existing configuration. The first part is used for configuring the strategy for the <code>Rolling update</code>.</li> </ul> <pre><code>...\n\nspec:\n  replicas: 1\n  strategy:\n   rollingUpdate:\n     maxSurge: 1\n     maxUnavailable: 0\n   type: RollingUpdate\n\n....\n</code></pre> <ul> <li><code>replicas: 1</code>: This specifies that the desired number of replicas (instances) of your application should be 1. Replicas are multiple instances of your application running in the Kubernetes cluster.</li> <li> <p><code>strategy</code>: This section defines the deployment strategy, determining how updates to your application are rolled out.</p> <ul> <li><code>rollingUpdate</code>: This indicates that updates should be rolled out gradually, replacing old replicas with new ones.<ul> <li><code>maxSurge: 1</code>: During an update, this allows one additional replica to be created before old replicas are terminated. This can be helpful to ensure that there's always at least one instance running during the update.</li> <li><code>maxUnavailable: 0</code>: Specifies that during an update, there should be no more than 0 unavailable replicas. This ensures that there is no downtime during the update process; new replicas are created before old ones are terminated.</li> </ul> </li> <li><code>type: RollingUpdate</code>: This specifies that the update strategy is a rolling update. In a rolling update, new replicas are gradually introduced while old ones are gradually terminated, minimizing the impact on the overall application.</li> </ul> </li> <li> <p>Next second part below will be used for configuring the <code>readinessProbe</code>,  <code>livenessProbe</code> and <code>lifecycle</code> of the <code>pod</code>.</p> </li> </ul> <pre><code>......\n\n    spec:\n      containers:\n      - name: {{ .Values.springboot.containers.name }}\n        image: {{ .Values.springboot.containers.image }}\n        imagePullPolicy: Never\n        readinessProbe:\n          httpGet:\n            path: /actuator/health/readiness\n            port: {{ .Values.springboot.containers.port }}\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n        livenessProbe:\n          httpGet:\n            path: /actuator/health/liveness\n            port: {{ .Values.springboot.containers.port }}\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/bash\", \"-c\", \"sleep 15\"]\n        ports:\n        - containerPort: {{ .Values.springboot.containers.port }}\n\n......\n</code></pre> <ul> <li><code>readinessProbe</code>: Configures a probe to check the readiness of the application.<ul> <li><code>httpGet</code>: Performs an HTTP GET request on the specified path (<code>/actuator/health/readiness</code>) and port to determine if the application is ready.</li> <li><code>initialDelaySeconds</code>: Specifies the number of seconds after the container has started before the readiness probe is initiated.</li> <li><code>periodSeconds</code>: Specifies how often (in seconds) to perform the readiness probe.</li> <li><code>successThreshold</code>: Specifies the number of consecutive successes required for the probe to be considered successful.</li> </ul> </li> <li><code>livenessProbe</code>: Configures a probe to check the <code>liveness</code> of the application.<ul> <li><code>httpGet</code>: Performs an HTTP GET request on the specified path (<code>/actuator/health/liveness</code>) and port to determine if the application is live.</li> <li><code>initialDelaySeconds</code>: Specifies the number of seconds after the container has started before the liveness probe is initiated.</li> <li><code>periodSeconds</code>: Specifies how often (in seconds) to perform the <code>liveness</code> probe.</li> <li><code>successThreshold</code>: Specifies the number of consecutive successes required for the probe to be considered successful.</li> </ul> </li> <li><code>lifecycle</code>: Defines actions to be executed at the lifecycle phase of the container.<ul> <li><code>preStop</code>: Specifies a command to be executed before the container is terminated. In this case, it sleeps for 15 seconds (<code>sleep 15</code>) to allow graceful termination.</li> </ul> </li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Zero%20Downtime%20Deployment/#testing","title":"Testing","text":"<ul> <li>Now, let's use command below to deploy the helm chart.</li> </ul> <pre><code>helm upgrade -f helm/zero-downtime/values.yaml my-sample-dev helm/zero-downtime/\n</code></pre> <ul> <li>If you deployed your helm chart before then run the command below to upgrade the helm chart.</li> </ul> <pre><code>helm upgrade -f helm/zero-downtime/values.yaml my-sample-dev helm/zero-downtime/\n</code></pre> <ul> <li> <p>Now, to test the <code>Zero Downtime</code> let's use K6 and call the api of the Pod continuously for a period of time and deploy the pod again through upgrading the helm chart in that time. We should see there is no any failed api call after K6 finished the execution.</p> </li> <li> <p>We have the execution scripts for K6 as below. You can view more at K6 topic.</p> </li> </ul> k6.js<pre><code>import http from \"k6/http\";\nimport { sleep } from \"k6\";\n\nexport const options = {\n  // Key configurations for Stress in this section\n  stages: [\n    { duration: \"30s\", target: 10 }, // traffic ramp-up from 1 to 10 users over 30s.\n    { duration: \"1m\", target: 10 }, // stay at 10 users for 1 minutes\n    { duration: \"1m\", target: 0 }, // ramp-down to 0 users\n  ],\n};\n\nexport default function () {\n  http.get(\n    \"http://192.168.49.2:31000/v1/json/validator/schemas/CustomerJsonSchemaValidatorDev\"\n  );\n  sleep(1);\n}\n</code></pre> <ul> <li>Then we use the command below to execute the K6.</li> </ul> <pre><code>k6 run k6.js\n</code></pre> <ul> <li>After the K6 is running let's use the upgrade helm chart command to redeploy the pod.</li> </ul> <pre><code>helm upgrade -f helm/zero-downtime/values.yaml my-sample-dev helm/zero-downtime/\n</code></pre> <p>In this example we will try to deploy 2 times when the K6 scripts is running. We will see the result as below.</p> <pre><code>\u250c\u2500(~/study/kubernetes)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500(duc@duc-MS-7E01:pts/2)\u2500\u2510\n\u2514\u2500(15:01:13 on main)\u2500\u2500&gt;                                                                                                               \u2500\u2500(CN,Thg 204)\u2500\u2518\nhelm upgrade -f helm/zero-downtime/values.yaml my-sample-dev helm/zero-downtime/\nRelease \"my-sample-dev\" has been upgraded. Happy Helming!\nNAME: my-sample-dev\nLAST DEPLOYED: Sun Feb  4 15:02:25 2024\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 35\nTEST SUITE: None\n\u250c\u2500(~/study/kubernetes)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500(duc@duc-MS-7E01:pts/2)\u2500\u2510\n\u2514\u2500(15:02:26 on main)\u2500\u2500&gt;                                                                                                               \u2500\u2500(CN,Thg 204)\u2500\u2518\nhelm upgrade -f helm/zero-downtime/values.yaml my-sample-dev helm/zero-downtime/\nRelease \"my-sample-dev\" has been upgraded. Happy Helming!\nNAME: my-sample-dev\nLAST DEPLOYED: Sun Feb  4 15:03:27 2024\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 36\nTEST SUITE: None\n</code></pre> <ul> <li>Then after the K6 finished we can see there is no any failed request. It means the configurations for <code>Zero Downtime deployment</code> work correctly.</li> </ul> <pre><code>\u250c\u2500(~/study/kubernetes/helm/zero-downtime)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500(duc@duc-MS-7E01:pts/1)\u2500\u2510\n\u2514\u2500(15:02:13 on main)\u2500\u2500&gt; k6 run k6.js                                                                                                  \u2500\u2500(CN,Thg 204)\u2500\u2518\n\n          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n     /\\  /  \\     |  |/  /   /  /    \n    /  \\/    \\    |     (   /   \u203e\u203e\\  \n   /          \\   |  |\\  \\ |  (\u203e)  | \n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 10 max VUs, 3m0s max duration (incl. graceful stop):\n           * default: Up to 10 looping VUs for 2m30s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n     data_received..................: 10 MB  67 kB/s\n     data_sent......................: 151 kB 1.0 kB/s\n     http_req_blocked...............: avg=21.73\u00b5s  min=1.14\u00b5s  med=10.11\u00b5s  max=786.42\u00b5s p(90)=12.7\u00b5s  p(95)=15.88\u00b5s\n     http_req_connecting............: avg=9.27\u00b5s   min=0s      med=0s       max=630.97\u00b5s p(90)=0s      p(95)=0s     \n     http_req_duration..............: avg=7.88ms   min=1.16ms  med=7.19ms   max=199.43ms p(90)=11.24ms p(95)=13.01ms\n       { expected_response:true }...: avg=7.88ms   min=1.16ms  med=7.19ms   max=199.43ms p(90)=11.24ms p(95)=13.01ms\n     http_req_failed................: 0.00%  \u2713 0        \u2717 1075\n     http_req_receiving.............: avg=590.28\u00b5s min=27.09\u00b5s med=559.36\u00b5s max=3.54ms   p(90)=1ms     p(95)=1.19ms \n     http_req_sending...............: avg=41.9\u00b5s   min=8.35\u00b5s  med=41.76\u00b5s  max=176.7\u00b5s  p(90)=54.12\u00b5s p(95)=61.43\u00b5s\n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s      p(95)=0s     \n     http_req_waiting...............: avg=7.25ms   min=1.13ms  med=6.54ms   max=198.04ms p(90)=10.19ms p(95)=11.78ms\n     http_reqs......................: 1075   7.159722/s\n     iteration_duration.............: avg=1s       min=1s      med=1s       max=1.2s     p(90)=1.01s   p(95)=1.01s  \n     iterations.....................: 1075   7.159722/s\n     vus............................: 1      min=1      max=10\n     vus_max........................: 10     min=10     max=10\n\n\nrunning (2m30.1s), 00/10 VUs, 1075 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 00/10 VUs  2m30s\n</code></pre>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Zero%20Downtime%20Deployment/#see_also","title":"See Also","text":"<ul> <li>Spring Boot 3.x Actuator &amp; Graceful Shutdown</li> <li>Docker With SpringBoot</li> <li>Minikube Sample Project</li> <li>Helm</li> <li>K6</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Kubernetes/Zero%20Downtime%20Deployment/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Kubernetes","Helms"]},{"location":"Linux/Fedora%20Tips/","title":"Fedora Tips","text":"","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_softwares_and_tools","title":"Install Softwares And Tools","text":"","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_neofetch","title":"Install NeoFetch","text":"<ul> <li>Run the command below</li> </ul> <pre><code>sudo yum install neofetch\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_htop","title":"Install Htop","text":"<ul> <li>Run the command below</li> </ul> <pre><code>sudo yum install htop\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_chrome","title":"Install Chrome","text":"<ul> <li>Go to <code>Software application</code> and install chrome from there. Installing by download RPM file may not be worked.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_flameshot","title":"Install Flameshot","text":"<pre><code>sudo dnf install flameshot\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_gnome_tweaks","title":"Install Gnome Tweaks","text":"<pre><code>sudo dnf install gnome-tweaks \n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_docker_-_docker_compose","title":"Install Docker - Docker Compose","text":"<ul> <li>Go to this page and following the instruction.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_hugo","title":"Install Hugo","text":"<ul> <li>Run the command below to install Hugo</li> </ul> <pre><code>sudo dnf install hugo\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_zsh","title":"Install ZSH","text":"<ul> <li>Zsh\u00a0(short for\u00a0Z Shell) is a feature-rich and powerful shell program for Unix-like operating systems with lots of interactive features. It is an extended version of the\u00a0Bourne Shell (sh), with a large number of new features, and support for plugins and themes. It is designed for interactive use and it is also a powerful scripting language.</li> </ul> <pre><code>sudo dnf install zsh\n</code></pre> <ul> <li>Check <code>zsh</code> installed version</li> </ul> <pre><code>zsh --version\n</code></pre> <ul> <li>Configure <code>zsh</code></li> </ul> <pre><code>zsh\n</code></pre> <ul> <li> <p>Then you will see the instruction for the first configuration. </p> <ul> <li>Press\u00a01\u00a0to go to the main menu and configure each setting individually.</li> <li>Press\u00a02\u00a0to populate the\u00a0<code>.zshrc</code>\u00a0configuration file with the default parameters, which you can later change manually in the\u00a0<code>.zshrc</code>\u00a0file.</li> <li>Press\u00a00\u00a0to create an empty\u00a0<code>.zshrc</code>\u00a0configuration file and configure everything from scratch.</li> <li>Press\u00a0q\u00a0to exit the configuration and start it again the next time you enter <code>Zsh</code>.</li> </ul> </li> <li> <p>Then let's set the <code>zsh</code> as default shell.</p> </li> <li>Firstly, let's check the default shell</li> </ul> <pre><code>echo $SHELL\n</code></pre> <ul> <li>If the default <code>shell</code> is <code>/bin/bash</code> then we can change it to <code>zsh</code> by running the command below.</li> </ul> <pre><code>chsh -s $(which zsh)\n</code></pre> <ul> <li>After that, let's reload the <code>zsh</code> by command.</li> </ul> <pre><code>source ~/.zshrc\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_oh-my-zsh_in_fedora","title":"Install Oh-My-Zsh in Fedora","text":"<ul> <li>Install <code>oh-my-zsh</code> in fedora</li> </ul> <pre><code>sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n</code></pre> <ul> <li>Config theme for <code>oh-my-zsh</code>.</li> </ul> <pre><code>gedit $HOME/.zshrc\n</code></pre> <ul> <li>If you check,\u00a0<code>robbyrussel</code>\u00a0is the default theme for ZSH.</li> </ul> .zshrc<pre><code>...\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"robbyrussell\"\n...\n</code></pre> <ul> <li> <p>Therefore, to replace or change your ZSH theme, get the name of the theme from <code>$HOME/.oh-my-zsh/themes/</code> folder and substitute the <code>robbyrussell</code> with the new name of your preferred theme.</p> </li> <li> <p>For example, to change the themes to <code>fino-time</code> theme, <code>$HOME/.oh-my-zsh/themes/fino-time.zsh-theme</code></p> </li> </ul> .zshrc<pre><code>...\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"fino-time\"\n...\n</code></pre> <ul> <li>Then save and run command below to reload.</li> </ul> <pre><code>source ~/.zshrc\n</code></pre> <ul> <li>Then we can see the result as below.</li> </ul> <p></p>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_cups-pdf","title":"Install CUPS-PDF","text":"<ul> <li>This software is designed to produce PDF files in a heterogeneous network by providing a PDF printer on the central fileserver.</li> <li>Run commands below for installing <code>cups-pdf</code>.</li> </ul> <pre><code>sudo dnf update\n</code></pre> <pre><code>sudo dnf upgrade\n</code></pre> <pre><code>sudo dnf install cups-pdf\n</code></pre> <ul> <li>Then let's open file <code>/etc/cups/cups-pdf.conf</code>. Then change the path setting as below.</li> </ul> <pre><code>...\n\n###########################################################################\n#                                     #\n# Path Settings         #\n#                                     #\n###########################################################################\n\n### Key: Out (config)\n##  CUPS-PDF output directory \n##  special qualifiers: \n##     ${HOME} will be expanded to the user's home directory\n##     ${USER} will be expanded to the user name\n##  Add for Fedora (see ~/.config/user-dirs.dirs)\n##     ${DESKTOP} will be expanded to the user's desktop directory\n##  in case it is an NFS export make sure it is exported without\n##  root_squash! \n### Default: /var/spool/cups-pdf/${USER}\n\nOut ${HOME}\n\n...\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_virtual_box","title":"Install Virtual Box","text":"<ul> <li>Run commands below to install Virtual Box on Fedora 39.</li> </ul> <pre><code>sudo wget http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo -P /etc/yum.repos.d/\n</code></pre> <pre><code>sudo dnf install VirtualBox-7.0\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_croc","title":"Install Croc","text":"<pre><code>sudo dnf install croc\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_fzf","title":"Install Fzf","text":"<ul> <li>fzf is a general-purpose command-line fuzzy finder.</li> </ul> <pre><code>git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_postman","title":"Install Postman","text":"<ul> <li>Clone this repository from github and put it in anywhere you like postman-rpm </li> <li>Then run the script in that repository.</li> </ul> <pre><code>sh make-package.sh\n</code></pre> <ul> <li> <p>Then an <code>rpm package</code> will appear by the end of the process.</p> </li> <li> <p>Next install the <code>rpm package</code> with the command as below.</p> </li> </ul> <pre><code>sudo rpm -i &lt;postman-rpm-package-name&gt;\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#warp_vpn","title":"Warp VPN","text":"<ul> <li>Add <code>cloudflare-warp.repo</code> to <code>/etc/yum.repos.d/</code></li> </ul> <pre><code>curl -fsSl https://pkg.cloudflareclient.com/cloudflare-warp-ascii.repo | sudo tee /etc/yum.repos.d/cloudflare-warp.repo\n</code></pre> <ul> <li>Update repo</li> </ul> <pre><code>sudo yum update\n</code></pre> <ul> <li>Install</li> </ul> <pre><code>sudo yum install cloudflare-warp\n</code></pre> <ul> <li>Then use the command below to register WARP client to server. You just need to do this step one time.</li> </ul> <pre><code>warp-cli registration new\n</code></pre> <ul> <li>Then use the command below to connect WARP VPN</li> </ul> <pre><code>warp-cli connect\n</code></pre> <ul> <li>Use the command below to disconnect WARP VPN</li> </ul> <pre><code>warp-cli disconnect\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#install_pip","title":"Install Pip","text":"<ul> <li>By default, the PIP package is not installed on Fedora, so you will need to install it first. You can install it using the following command.</li> </ul> <pre><code>sudo dnf install python3-pip\n</code></pre> <ul> <li>Once the PIP package is installed, you can verify the PIP version with the following command.</li> </ul> <pre><code>pip3 --version\n</code></pre> <ul> <li>Update your PATH variable</li> <li>Sometimes, even after installing Python and pip, the \u201cpip command not found\u201d error may persist due to issues with your system\u2019s PATH variable. To fix this, you should add the pip binary directory to your PATH.</li> <li>If you\u2019re using the Bash shell, open the <code>.bashrc</code> file, while users of the Zsh shell should edit the <code>.zshrc</code> file.</li> </ul> <pre><code>export PATH=\"/usr/local/bin:/usr/bin:$PATH\"\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_issue_with_flathub","title":"Fix Issue With Flathub","text":"<ul> <li>When you install application with <code>flatpak</code>, you might get the error <code>no remote refs found similar to flathub</code> as below.</li> </ul> <pre><code>sudo flatpak install md.obsidian.Obsidian.flatpakref\nerror: No entry for app/md.obsidian.Obsidian/x86_64/stable in remote 'flathub' summary flatpak cache \n</code></pre> <ul> <li>To fix this issue we just need to run the script below to add the the flathub repository.</li> </ul> <pre><code>flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\n</code></pre> <ul> <li>Then now, you run command for installing your appliction again, then you can see it is successful.</li> </ul> <pre><code>sudo flatpak install md.obsidian.Obsidian.flatpakref\nRequired runtime for md.obsidian.Obsidian/x86_64/stable (runtime/org.freedesktop.Platform/x86_64/22.08) found in remote flathub\nDo you want to install it? [Y/n]: Y\n\nmd.obsidian.Obsidian permissions:\n    ipc                    network        pulseaudio       ssh-auth\n    wayland                x11            dri              file access [1]\n    dbus access [2]        tags [3]\n\n    [1] /media, /mnt, /run/media, home,\n        xdg-run/app/com.discordapp.Discord:create\n    [2] org.freedesktop.portal.Fcitx\n    [3] proprietary\n\n\n        ID                                   Branch Op Remote  Download\n 1. [\u2713] md.obsidian.Obsidian.Locale          stable i  flathub   6.3\u00a0kB / 3.3\u00a0MB\n 2. [\u2713] org.freedesktop.Platform.GL.default  22.08  i  flathub 130.7\u00a0MB / 131.0\u00a0MB\n 3. [\u2713] org.freedesktop.Platform.Locale      22.08  i  flathub  17.8\u00a0kB / 333.0\u00a0MB\n 4. [\u2713] org.freedesktop.Platform.VAAPI.Intel 22.08  i  flathub  10.9\u00a0MB / 10.8\u00a0MB\n 5. [\u2713] org.freedesktop.Platform.openh264    2.2.0  i  flathub   1.2\u00a0MB / 944.3\u00a0kB\n 6. [\u2713] org.freedesktop.Platform             22.08  i  flathub 214.1\u00a0MB / 214.4\u00a0MB\n 7. [\u2713] md.obsidian.Obsidian                 stable i  flathub 130.7\u00a0MB / 132.2\u00a0MB\n\nInstallation complete.\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#disable_automatic_airplane_mode_when_lib_is_open","title":"Disable Automatic Airplane Mode When Lib Is Open","text":"<ul> <li>For laptop user, there could be a quite annoying issue that the <code>Airplane Mode</code> automatically turns on when lid is opened on HP laptop.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#create_service_to_remap_the_scancode","title":"Create service to remap the scancode","text":"<ul> <li>Firstly, press\u00a0Ctrl+Alt+T\u00a0on keyboard to open terminal. When it opens, run command to create a service file and edit via Gedit text editor:</li> </ul> <pre><code>sudo gedit /etc/systemd/system/hp-keycodes.service\n</code></pre> <ul> <li>When file opens, paste below lines and save it.</li> </ul> <pre><code>[Unit]  \nDescription=HP setkeycodes fix\n\n[Service]  \nType=oneshot  \nRestart=no  \nRemainAfterExit=no  \nExecStart=/usr/bin/setkeycodes e057 240 e058 240\n\n[Install]  \nWantedBy=rescue.target  \nWantedBy=multi-user.target  \nWantedBy=graphical.target\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#enable_the_service","title":"Enable the service","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable hp-keycodes.service\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#undo_the_changes","title":"Undo the changes","text":"<pre><code>sudo systemctl disable hp-keycodes.service\nsudo rm /etc/systemd/system/hp-keycodes.service\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#disable_swap_memrory","title":"Disable Swap Memrory","text":"<ul> <li>On fedora, if you use the command below for disable swap memory.</li> </ul> <pre><code>sudo swapoff -a\n</code></pre> <ul> <li>Then it will not successful. The swap memory will be enable automatically again after.</li> <li>So, to disable swap memory permanently you should use the command below and reboot your computer.</li> </ul> <pre><code>sudo dnf remove zram-generator-defaults\n</code></pre> <ul> <li>This command will remove the package which generates its configuration for using swap memory.</li> <li>After execute the command above, you should see the successful result as below.</li> </ul> <pre><code>Dependencies resolved.\n================================================================================\n Package                     Arch       Version             Repository     Size\n================================================================================\nRemoving:\n zram-generator-defaults     noarch     1.1.2-2.fc37        @anaconda     320  \nRemoving unused dependencies:\n zram-generator              x86_64     1.1.2-2.fc37        @anaconda     952 k\n\nTransaction Summary\n================================================================================\nRemove  2 Packages\n\nFreed space: 953 k\nIs this ok [y/N]: y\nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\n  Preparing        :                                                        1/1 \n  Erasing          : zram-generator-defaults-1.1.2-2.fc37.noarch            1/2 \n  Erasing          : zram-generator-1.1.2-2.fc37.x86_64                     2/2 \n  Running scriptlet: zram-generator-1.1.2-2.fc37.x86_64                     2/2 \n  Verifying        : zram-generator-1.1.2-2.fc37.x86_64                     1/2 \n  Verifying        : zram-generator-defaults-1.1.2-2.fc37.noarch            2/2 \n\nRemoved:\n  zram-generator-1.1.2-2.fc37.x86_64                                            \n  zram-generator-defaults-1.1.2-2.fc37.noarch                                   \n\nComplete!\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#remote_desktop_sharing","title":"Remote Desktop Sharing","text":"","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#enable_remote_desktop_sharing","title":"Enable Remote Desktop Sharing","text":"<ul> <li>Go to the <code>setting</code> -&gt; <code>sharing</code> -&gt; turn on enable sharing button as in the image below.</li> </ul> <ul> <li>Then click on <code>Remote Desktop</code>. Inside the <code>Remote Desktop</code>, enable <code>Remote Desktop</code> and <code>Remote Control</code> as in the image below.</li> </ul> <ul> <li>Check the username and password which we will use to login when connect to this  Linux machine from another computer.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#connect_to_remote_desktop_by_linux_machine","title":"Connect To Remote Desktop By Linux Machine","text":"<ul> <li>Go to <code>Software</code> application and install the <code>Remmina</code> application.</li> </ul> <ul> <li>Then open the <code>Remmina</code> application, choose type <code>RDP</code> and put the IP address of the remote desktop in your LAN network as in the image below and press <code>enter</code>.</li> </ul> <ul> <li>Then you will need to input the username and password that we configured in the Remote Desktop Linux machine.</li> </ul> <ul> <li>Finally, you can access your remote desktop as in the image below.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_error_can_not_start_virtual_machine_on_virtual_box","title":"Fix Error Can Not Start Virtual Machine On Virtual Box","text":"<ul> <li>If you see the error as below.</li> </ul> <pre><code>Kernel driver not installed (rc=-1908)  \n\nThe VirtualBox Linux kernel driver is either not loaded or not set up correctly. Please try setting it up again by executing  \n\n'/sbin/vboxconfig'  \n\nas root.  \n\nIf your system has EFI Secure Boot enabled you may also need to sign the kernel modules (vboxdrv, vboxnetflt, vboxnetadp, vboxpci) before you can load them. Please see your Linux system's documentation for more information.  \n\nwhere: suplibOsInit what: 3 VERR_VM_DRIVER_NOT_INSTALLED (-1908) - The support driver is not installed. On linux, open returned ENOENT.\n</code></pre> <ul> <li>Then run commands below for fixing on Fedora 39, virtual box 7.0.14.</li> </ul> <pre><code>sudo dnf install kernel-devel kernel-headers dkms qt5-qtx11extras  elfutils-libelf-devel zlib-devel\n</code></pre> <pre><code>wget https://www.virtualbox.org/download/oracle_vbox.asc &amp;&amp; \\\nsudo rpm --import oracle_vbox.asc\n</code></pre> <pre><code>sudo /sbin/vboxconfig\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_error_can_not_open_terminal_in_virtual_box","title":"Fix Error Can not Open Terminal In Virtual Box","text":"<ul> <li>If you can not open the Terminal of Ubuntu in Virtual Box. You can do some steps below.</li> <li>Firstly go to <code>Setting</code> --&gt; <code>Region &amp; Language</code></li> <li>Next go to section <code>My Account</code><ul> <li>change <code>Language</code> to `English (United States).</li> <li>change <code>Formats</code> to <code>United States</code>.</li> </ul> </li> <li>Next go to section <code>Login Screen</code><ul> <li>change <code>Language</code> to `English (United States).</li> <li>change <code>Formats</code> to <code>United States</code>.</li> </ul> </li> <li>Finally Reboot the Ubuntu Virtual Machine.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_can_not_copy_paste_from_parent_machine_to_virtual_machine","title":"Fix Can Not Copy &amp; Paste From Parent Machine To Virtual Machine","text":"<ul> <li>In Ubuntu Virtual Box choose <code>Devices</code> then choose <code>Insert Guest Additions CD Image...</code></li> <li>Then open injected Image Disk and run commands below.</li> </ul> <pre><code>su root\n</code></pre> <pre><code>sudo usermod -a -G sudo vboxuser\n</code></pre> <pre><code>su vboxuser\n</code></pre> <ul> <li>Then run command below to install tools.</li> </ul> <pre><code>sudo ./VBoxLinuxAdditions.run\n</code></pre> <ul> <li>Finally reboot the Ubuntu virtual machine then you can copy &amp; paste between parent and Ubuntu virtual machine.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#add_fedora_device_into_tailscale","title":"Add Fedora Device Into Tailscale","text":"<pre><code>curl -fsSL https://tailscale.com/install.sh | sh\n</code></pre>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_nvidia_driver_on_fedora_40","title":"Fix Nvidia Driver On Fedora 40","text":"<ul> <li>Check installed packages for nvidia driver.</li> </ul> <pre><code>dnf list installed \\*nvidia\\*\n</code></pre> <pre><code>Installed Packages\nakmod-nvidia.x86_64                      3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nkmod-nvidia-6.9.8-200.fc40.x86_64.x86_64 3:555.58.02-1.fc40 @@commandline       \nnvidia-gpu-firmware.noarch               20240709-1.fc40    @updates            \nnvidia-modprobe.x86_64                   3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nnvidia-persistenced.x86_64               3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nnvidia-settings.x86_64                   3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nxorg-x11-drv-nvidia.x86_64               3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nxorg-x11-drv-nvidia-cuda.x86_64          3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nxorg-x11-drv-nvidia-cuda-libs.x86_64     3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nxorg-x11-drv-nvidia-kmodsrc.x86_64       3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nxorg-x11-drv-nvidia-libs.x86_64          3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\nxorg-x11-drv-nvidia-power.x86_64         3:555.58.02-1.fc40 @rpmfusion-nonfree-nvidia-driver\n</code></pre> <ul> <li>Remove installed nvidia packages.</li> </ul> <pre><code>sudo dnf remove \\*nvidia\\* --exclude nvidia-gpu-firmware\n</code></pre> <ul> <li>Reinstall the lastest nvidia packages.</li> </ul> <pre><code>sudo dnf install akmod-nvidia xorg-x11-drv-nvidia-cuda\n</code></pre> <ul> <li>Checks the akmod packages and try all.</li> </ul> <pre><code>sudo akmods --force\n</code></pre> <ul> <li>Reboot and access to BIOS system.</li> <li>Important: Now let's turn-off the <code>Secure Boot</code> in BIOS.</li> <li>Then reboot and in the login screen choose login with <code>Gnome on XOrg</code>.</li> <li>Finally we can see the </li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_cant_control_gpu_fan_in_nvidia_settings","title":"Fix Can't Control GPU Fan In Nvidia Settings","text":"<ul> <li>Create a configuration file name <code>Xwrapper.config</code> with the path <code>/etc/X11/Xwrapper.config</code> as below.</li> </ul> <pre><code>sudo gedit /etc/X11/Xwrapper.config\n</code></pre> <ul> <li>Then let's add 2 lines below into that file.</li> </ul> Xwrapper.config<pre><code>allowed_users=anybody\nneeds_root_rights=yes\n</code></pre> <ul> <li>Then save and reboot the system.</li> <li>Then we can control the GPU Fan Setting as in the image below.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#make_second_hard_disk_as_fedora_installer","title":"Make Second Hard Disk As Fedora Installer","text":"<ul> <li>This session will be useful if you using Windows and you want to install the Fedora but you don't have the USB stick and you only have 2 Disks: one disk is used for Windows and the other Disk is free. If you have the USB stick then just go with it as documented in the fedora documentation</li> <li>Firstly on the Windows machine you should create a WSL2 machine. You can follow steps in WSL2 or the Microsoft Documentation.</li> <li>Then for the Free Disk that don't have the installed Windows. Let's open the <code>Disk Management</code> of Windows and delete the volume of that Disk. </li> </ul> <ul> <li> <p>Now, let's mount the hard disk into the WSL2 machine.</p> </li> <li> <p>Let's open the <code>Windows Power Shell</code> with the <code>Administration</code> and use the command below to list all the available disks with the <code>DeviceID</code></p> </li> </ul> <pre><code> GET-CimInstance -query \"SELECT * from Win32_DiskDrive\"\n</code></pre> <ul> <li>Then you can see the results as below.</li> </ul> <pre><code>PS C:\\Users\\Duc&gt; GET-CimInstance -query \"SELECT * from Win32_DiskDrive\"\n\nDeviceID           Caption              Partitions Size          Model\n--------           -------              ---------- ----          -----\n\\\\.\\PHYSICALDRIVE0 WDC WD40EFPX-68C6CN0 0          4000784417280 WDC WD40EFPX-68C6CN0\n\\\\.\\PHYSICALDRIVE3 KINGSTON SNV2S500G   1          500105249280  KINGSTON SNV2S500G\n\\\\.\\PHYSICALDRIVE1 WDC WD40EFPX-68C6CN0 0          4000784417280 WDC WD40EFPX-68C6CN0\n\\\\.\\PHYSICALDRIVE2 KINGSTON SNV2S500G   3          500105249280  KINGSTON SNV2S500G\n</code></pre> <ul> <li>Now, you can detect disk that you want to mount and use the command below with the <code>DeviceID</code>.</li> </ul> <pre><code>wsl --mount \\\\.\\PHYSICALDRIVE2\n</code></pre> <ul> <li>Then let's run the command below to identify the desk that you want to format as <code>FAT32</code>.</li> </ul> <pre><code>lsblk -f\n</code></pre> <ul> <li> <p>This command lists all block devices and their current filesystem information.\u00a0Locate the partition you intend to format (e.g.,\u00a0<code>/dev/sdb1</code>).</p> </li> <li> <p>Then run the command below to format the disk to <code>FAT32</code></p> </li> </ul> <pre><code>sudo mkfs.vfat /dev/sdb1\n</code></pre> <ul> <li>Now, in the WSL2 machine let's download the Fedora Distro that you want. For example we will download the <code>Fedora Silverblue 42</code> ISO file by using the command below.</li> </ul> <pre><code>wget https://download.fedoraproject.org/pub/fedora/linux/releases/42/Silverblue/x86_64/iso/Fedora-Silverblue-ostree-x86_64-42-1.1.iso\n</code></pre> <ul> <li>Then run the command below to create the Fedora boot disk.</li> </ul> <pre><code>dd if=/path/to/Fedora-Live-Security-x86_64-21.iso of=/dev/sdb1\n</code></pre> <ul> <li>For example.</li> </ul> <pre><code>dd if=Fedora-Silverblue-ostree-x86_64-42-1.1.iso of=/dev/sdb1\n</code></pre> <ul> <li>After all, let's reboot and in the boot option, let's choose the disk that you install Fedora installation and now you can do the Fedora installation and you can install on the disk that you installed Windows.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#fix_issue_flameshot_not_show_icon_in_gnome","title":"Fix Issue Flameshot Not Show Icon In Gnome","text":"<ul> <li>After install the <code>Flameshot</code> app and then you open but the icon of the flameshot application doesn't appear on the top bar then you should install this gnome extension: AppIndicator and KStatusNotifierItem Support.</li> </ul>","tags":["Linux"]},{"location":"Linux/Fedora%20Tips/#use_podman_of_host_machine_from_toolbox_in_fedora_silverblue","title":"Use Podman Of Host Machine From ToolBox In Fedora Silverblue","text":"<ul> <li>If you are using the Fedora Silverblue then you can see that, by default the <code>Podman</code> is installed in the host machine and if you are using toolbox which is actually a podman container and there is no <code>podman</code> installation there. So to use the installed <code>Podman</code> in the host machine from the toolbox then you use the command below.</li> </ul> <pre><code>flatpak-spawn --host &lt;command&gt;\n</code></pre> <ul> <li>For example</li> </ul> <pre><code>flatpak-spawn --host podman ps\n</code></pre> <ul> <li>Then you can see the result.</li> </ul> <pre><code>CONTAINER ID  IMAGE                                         COMMAND               CREATED     STATUS       PORTS       NAMES\n2c372dd86f0f  registry.fedoraproject.org/fedora-toolbox:42  toolbox --log-lev...  7 days ago  Up 13 hours              fedora-toolbox-42\n</code></pre> <ul> <li>Now, let's create alias for the command above then you don't have to type a long command every time you want to use podman from the host machine.</li> <li>Let's open the <code>~/.zshrc</code> and add the command below to the end of that file.</li> </ul> <pre><code>alias podman=\"flatpak-spawn --host podman\"\nalias podman-compose=\"flatpak-spawn --host podman-compose\"\n</code></pre> <ul> <li>Then reload the <code>~/.zshrc</code> by using the command <code>source ~/.zshrc</code>.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/","title":"Linux Commands","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#basic_linux_commands","title":"Basic Linux Commands","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#install_deb_files","title":"Install .deb files","text":"<pre><code>sudo dpkg -i package_file.deb\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#remove_an_application","title":"Remove an application","text":"<pre><code>sudo apt remove application-name\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#create_a_new_file","title":"Create a new file","text":"<pre><code>touch fileName.md\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#search_a_file_that_you_dont_remember_exactly_the_name","title":"Search a file that you don't remember exactly the name","text":"<ul> <li>Search files that contains \"school\" and \"note\".</li> </ul> <pre><code>locate -i school*note\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#search_text_in_a_given_file","title":"Search text in a given file","text":"<ul> <li>Search all lines in file notepad.txt that contains word \"blue\"</li> </ul> <pre><code>grep blue notepad.txt\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#view_first_lines_of_any_text_file","title":"View first lines of any text file.","text":"<ul> <li>Show the first five lines.</li> </ul> <pre><code>head -n 5 filename.md\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#view_the_last_10_lines_of_any_text_file","title":"View the last 10 lines of any text file.","text":"<ul> <li>Show the last 10 lines.</li> </ul> <pre><code>tail -n 10 filename.md\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#compare_2_files_line_by_line","title":"Compare 2 files line by line","text":"<ul> <li>Show lines that are different between 2 files.</li> </ul> <pre><code>diff file1.md file2.md\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#turn_off_swap_memory","title":"Turn Off Swap Memory","text":"<pre><code>sudo swapoff -a\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#open_folder_ui_from_terminal","title":"Open Folder UI From Terminal","text":"<ul> <li>Use the command below to open the current folder UI from terminal</li> </ul> <pre><code>xdg-open .\n</code></pre> <ul> <li>If you want to open a specific folder UI from terminal then you can put the path.</li> </ul> <pre><code>xdg-open xdg-open ~/Downloads\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#install_rpm_files","title":"Install .rpm files","text":"<pre><code>sudo rpm -i package_file.rpm\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#fix_cant_mount_drive_ntfs","title":"Fix Can't Mount Drive NTFS","text":"<pre><code>sudo ntfsfix &lt;drive lable&gt;\n\n# Example\n\nsudo ntfsfix /dev/sda\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#mount_drive_by_terminal","title":"Mount Drive By Terminal","text":"<ul> <li>Create a folder for mounting</li> </ul> <pre><code>mkdir ~/share\n</code></pre> <ul> <li>List Disks</li> </ul> <pre><code>lsblk\n</code></pre> <pre><code>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS                                                    \u2502 2367* sudo umount /dev/sda                                                            \nloop0    7:0    0     4K  1 loop /var/lib/snapd/snap/bare/5                                     \u2502 2368  cd                                                                              \nloop1    7:1    0  63.9M  1 loop /var/lib/snapd/snap/core20/2105                                \u2502 2369  clear                                                                           \nloop2    7:2    0 349.7M  1 loop /var/lib/snapd/snap/gnome-3-38-2004/143                        \u2502 2370* sudo umount /dev/sda                                                            \nloop3    7:3    0  91.7M  1 loop /var/lib/snapd/snap/gtk-common-themes/1535                     \u2502 2371* ls                                                                              \nloop4    7:4    0  40.9M  1 loop /var/lib/snapd/snap/snapd/20290                                \u2502 2372* sudo mount /dev/sda  /home/duc/Shared                                           \nloop5    7:5    0 417.2M  1 loop /var/lib/snapd/snap/wine-platform-7-stable-core20/6            \u2502 2373* systemctl deamon-reload                                                         \nloop6    7:6    0 495.1M  1 loop /var/lib/snapd/snap/wine-platform-runtime-core20/91            \u2502 2374* systemctl daemon-reload                                                         \nsda      8:0    0 465.8G  0 disk                                                                \u2502 2375  history                                                                         \nsdb      8:16   0 238.5G  0 disk                                                                \u2502 2376* sudo systemctl daemon-reload                                                    \n\u251c\u2500sdb1   8:17   0   600M  0 part /boot/efi                                                      \u2502 2377* clear                                                                           \n\u251c\u2500sdb2   8:18   0     1G  0 part /boot                                                          \u2502 2378* ls                                                                              \n\u2514\u2500sdb3   8:19   0 236.9G  0 part /home       \n</code></pre> <ul> <li>Print device attributes.</li> </ul> <pre><code>sudo blkid\n</code></pre> <ul> <li>Mount disk to folder.</li> </ul> <pre><code>sudo mount &lt;disk&gt; &lt;mount folder&gt;\n</code></pre> <pre><code>sudo mount /dev/sda /home/duc/share\n</code></pre> <ul> <li>Mount with Options.</li> </ul> <pre><code>sudo mount -o rw,user,uid=1000,dmask=007,fmask=117  /dev/sda  /home/duc/Shared\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#auto_mount_drives","title":"Auto mount Drives","text":"<ul> <li>Find the fdisk list command to see all drives and their partitions.</li> </ul> <pre><code>sudo fdisk -l\n</code></pre> <ul> <li>The blkid command allows you to display information about available block devices. This will allow you to view the filesystem type, UUID, labels, and more.</li> </ul> <pre><code>sudo blkid\n</code></pre> <ul> <li>Edit <code>fstab</code> file</li> </ul> <pre><code>cd /etc/\n</code></pre> <ul> <li>create a copy of <code>fstab</code> file for backup.</li> </ul> <pre><code>sudo cp fstab fstab.backup\n</code></pre> <ul> <li>Edit our fstab file. Add line with information like below for the drive that you want to mount it automatically.</li> </ul> <pre><code>UUID=a213ed98-641f-4f67-9480-d92a8d7e82f7       /media/duc/Backup   ext4    defaults        0       0\n</code></pre> Field Value Description UUID <code>a213ed98-641f-4f67-9480-d92a8d7e82f7</code> Universally Unique Identifier for the partition. This ensures a persistent identifier for the filesystem, even if device names like <code>/dev/sda1</code> change. Mount Point <code>/media/duc/Backup</code> Directory where the filesystem will be mounted. The partition will be accessible at this path after mounting. Filesystem Type <code>ext4</code> Filesystem type for the partition. In this case, it\u2019s an <code>ext4</code> filesystem, which is commonly used in Linux. Mount Options <code>defaults</code> Set of default mount options, which includes: <code>rw</code> (read/write), <code>suid</code>, <code>dev</code>, <code>exec</code>, <code>auto</code> (automatically mount at boot), <code>nouser</code> (only root can mount), <code>async</code>. Dump Field <code>0</code> Indicates whether the filesystem should be backed up using the <code>dump</code> utility. <code>0</code> means it will not be included in backups. Pass Field <code>0</code> Controls the order of filesystem checking by <code>fsck</code> during boot. <code>0</code> means it will not be checked. <code>1</code> means check first (usually for root), <code>2</code> means check after root.","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#tar_command_examples","title":"Tar Command Examples","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#options","title":"options","text":"<pre><code>-c  create\n-x  extract\n-v  verbose mode\n-f  filename\n-t  view content of archive file.\n-j  bzip2\n-z  gzip\n-r  add\n-W  verify\n--wildcards\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#create","title":"create","text":"<pre><code># create tar\ntar -cvf FILE_TO_BE_CREATED.tar /path/to/files\n\n# create tar.gz\ntar -cvfz FILE_TO_BE_CREATED.tar.gz /path/to/files\ntar -cvfz FILE_TO_BE_CREATED.tgz /path/to/files\n\n# create tar.bz2\ntar -cvfj FILE_TO_BE_CREATED.tar.bz2 /path/to/files\ntar -cvfj FILE_TO_BE_CREATED.tar.tbz /path/to/files\ntar -cvfj FILE_TO_BE_CREATED.tar.tb2 /path/to/files\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#untar","title":"untar","text":"<pre><code># untar files in current directory ##\ntar -xvf FILE_TO_BE_UNTARRED.tar\ntar -xvf FILE_TO_BE_UNTARRED.tar.gz\ntar -xvf FILE_TO_BE_UNTARRED.tar.bz2\n\n# untar files in specified Directory\ntar -xvf FILE_TO_BE_UNTARRED.tar -C /path/to/files\ntar -xvf FILE_TO_BE_UNTARRED.tar.gz -C /path/to/files\ntar -xvf FILE_TO_BE_UNTARRED.tar.bz2 -C /path/to/files\n\n# untar single file\ntar -xvf FILE_TO_BE_UNTARRED.tar SINGLE_FILE_WITH_ANY_FILE_EXTENSION\ntar -xvfz FILE_TO_BE_UNTARRED.tar.gz SINGLE_FILE_WITH_ANY_FILE_EXTENSION\ntar -xvfj FILE_TO_BE_UNTARRED.tar.bz2 SINGLE_FILE_WITH_ANY_FILE_EXTENSION\n\n# untar single file, using verbose arguments\ntar --extract --file=FILE_TO_BE_UNTARRED.tar SINGLE_FILE_WITH_ANY_FILE_EXTENSION\ntar --extract --file=FILE_TO_BE_UNTARRED.bz2 SINGLE_FILE_WITH_ANY_FILE_EXTENSION\ntar --extract --file=FILE_TO_BE_UNTARRED.tar.gz SINGLE_FILE_WITH_ANY_FILE_EXTENSION\n\n# untar multiple files from tar, tar.gz, tar.bz2\ntar -xvf FILE_TO_BE_UNTARRED.tar \"FILE_TWO\" \"FILE_TWO\"\ntar -xvfz FILE_TO_BE_UNTARRED.tar.gz \"FILE_TWO\" \"FILE_TWO\"\ntar -xvfj FILE_TO_BE_UNTARRED.tar.bz2 \"FILE_TWO\" \"FILE_TWO\"\n\n# untar group of file using wildcard\n# example of wildcard: *\ntar -xvf FILE_TO_BE_UNTARRED.tar --wildcards 'WILDCARD_TO_BE_USED'\ntar -xvfz FILE_TO_BE_UNTARRED.tar --wildcards 'WILDCARD_TO_BE_USED'\ntar -xvfj FILE_TO_BE_UNTARRED.tar --wildcards 'WILDCARD_TO_BE_USED'\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#list","title":"list","text":"<pre><code># list content of tar archive file\ntar -tvf FILE_TO_BE_UNTARRED.tar\ntar -tvf FILE_TO_BE_UNTARRED.tar.gz\ntar -tvf FILE_TO_BE_UNTARRED.tar.bz2\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#add","title":"add","text":"<pre><code>tar -rvf FILE_TO_BE_UNTARRED.tar FILE_TO_BE_ADDED_WITH_ANY_EXTENSION\ntar -rvf FILE_TO_BE_UNTARRED.tar.gz FILE_TO_BE_ADDED_WITH_ANY_EXTENSION\ntar -rvf FILE_TO_BE_UNTARRED.tar.bz2 FILE_TO_BE_ADDED_WITH_ANY_EXTENSION\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Commands/#verify","title":"verify","text":"<pre><code>tar -tvfW FILE_TO_BE_UNTARRED.tar\ntar -tvfW FILE_TO_BE_UNTARRED.tar.gz\ntar -tvfW FILE_TO_BE_UNTARRED.tar.bz2\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Mint%20Tips/","title":"Linux Mint Tips","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Mint%20Tips/#install_softwares_and_tools","title":"Install Softwares And Tools","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Mint%20Tips/#postman","title":"Postman","text":"<ul> <li>Download Postman</li> </ul> <pre><code>wget https://dl.pstmn.io/download/latest/linux64 -O postman.tar.gz\n</code></pre> <ul> <li>Extract archive</li> </ul> <pre><code> sudo tar -xzf postman.tar.gz -C /opt\n</code></pre> <ul> <li>Make symlink</li> </ul> <pre><code>sudo ln -s /opt/Postman/Postman /usr/bin/postman\n</code></pre> <ul> <li>Remove downloaded file</li> </ul> <pre><code>rm postman.tar.gz\n</code></pre> <ul> <li>Make Desktop icon:</li> <li>Firstly, create desktop file using command below</li> </ul> <pre><code>sudo gedit /usr/share/applications/postman.desktop\n</code></pre> <ul> <li>Then paste the content below into that file and save it.</li> </ul> <pre><code>[Desktop Entry]\nType=Application\nName=Postman\nIcon=/opt/Postman/app/resources/app/assets/icon.png\nExec=\"/opt/Postman/Postman\"\nComment=Postman Desktop App\nCategories=Development;Code;\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Mint%20Tips/#install_ssh","title":"Install SSH","text":"<ul> <li>Install ssh server and client.</li> </ul> <pre><code>sudo apt install ssh\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/","title":"Linux Environment Setup For Developer","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#manual_installation","title":"Manual Installation","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_jdk","title":"Install JDK","text":"<ul> <li>Go to this oracle page to download JDK8</li> <li>Then use command below to extract the binary package and put it at folder that you want to use.</li> </ul> <pre><code>tar -xvf package-name.tar.gz\n</code></pre> <ul> <li>Set JAVA_HOME and PATH</li> </ul> <pre><code>sudo gedit ~/.bashrc\n</code></pre> <ul> <li>Then put these lines below to the end of file</li> </ul> <pre><code>export JAVA_HOME=/home/duc/solfwares/jdk1.8.0_333\nexport PATH=$PATH:$JAVA_HOME/bin\n</code></pre> <ul> <li>Use command below to check JDK installation</li> </ul> <pre><code>~$ java -version\njava version \"1.8.0_333\"\nJava(TM) SE Runtime Environment (build 1.8.0_333-b02)\nJava HotSpot(TM) 64-Bit Server VM (build 25.333-b02, mixed mode)\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_maven","title":"Install Maven","text":"<ul> <li>Download Maven at: https://maven.apache.org/download.cgi</li> <li>Then extract the zip file at any folder that you want.</li> </ul> <pre><code>tar -xvf package-name.tar.gz\n</code></pre> <ul> <li>Set MAVEN_HOME and PATH</li> </ul> <pre><code>sudo gedit ~/.bashrc\n</code></pre> <ul> <li>Then put these lines below to the end of file</li> </ul> <pre><code>export MAVEN_HOME=/home/duc/solfwares/apache-maven-3.8.6\nexport PATH=$PATH:$MAVEN_HOME/bin\n</code></pre> <ul> <li>Check Maven installation</li> </ul> <pre><code>~$ mvn -version\nApache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0)\nMaven home: /home/duc/solfwares/apache-maven-3.8.5-bin/apache-maven-3.8.5\nJava version: 1.8.0_312, vendor: Private Build, runtime: /usr/lib/jvm/java-8-openjdk-amd64/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"5.13.0-37-generic\", arch: \"amd64\", family: \"unix\"\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#set_up_maven_settingxml","title":"Set Up Maven Setting.xml","text":"<ul> <li>Go to <code>/home/&lt;user&gt;/.m2</code> , then past the file <code>setting.xml</code> there.</li> </ul> <pre><code>cp setting.xml /home/duc/.m2/setting.xml\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_gradle","title":"Install Gradle","text":"<ul> <li>Download binary Zip file of Gradle at: https://gradle.org/install/ </li> <li>Then extract the zip file at any folder that you want.</li> </ul> <pre><code>tar -xvf package-name.tar.gz\n</code></pre> <ul> <li>Set GRADLE_HOME and PATH</li> </ul> <pre><code>sudo gedit ~/.bashrc\n</code></pre> <ul> <li>Then put these lines below to the end of file</li> </ul> <pre><code>export GRADLE_HOME=/home/duc/solfwares/gradle-7.4.1-bin/gradle-7.4.1\nexport PATH=$PATH:$GRADLE_HOME/bin\n</code></pre> <ul> <li>Check Gradle installation</li> </ul> <pre><code>~$ gradle -version\n\n------------------------------------------------------------\nGradle 7.4.1\n------------------------------------------------------------\n\nBuild time:   2022-03-09 15:04:47 UTC\nRevision:     36dc52588e09b4b72f2010bc07599e0ee0434e2e\n\nKotlin:       1.5.31\nGroovy:       3.0.9\nAnt:          Apache Ant(TM) version 1.10.11 compiled on July 10 2021\nJVM:          1.8.0_312 (Private Build 25.312-b07)\nOS:           Linux 5.13.0-37-generic amd64\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_git","title":"Install Git","text":"<ul> <li>Use command below to install Git:</li> </ul> <pre><code>sudo apt install git\n</code></pre> <ul> <li>Check Git installation:</li> </ul> <pre><code>~$ git --version\ngit version 2.25.1\n</code></pre> <ul> <li>To avoid the specification of the username and password at every git push, use commands below</li> </ul> <pre><code>sudo git config credential.helper store\n\n# this command is used when you have many repos and you want to input username/password one time\nsudo git config --global credential.helper store\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_nodejs_and_npm","title":"Install Nodejs And Npm","text":"<ul> <li>User the command below to enable NodeSource repository.</li> </ul> <pre><code>curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -\n</code></pre> <ul> <li>User command below to install nodejs</li> </ul> <pre><code>sudo apt-get install -y nodejs\n</code></pre> <ul> <li>Check nodejs and npm installations</li> </ul> <pre><code>~$ node --version\nv16.15.1\n\n~$ npm --version\n8.11.0\n</code></pre> <ul> <li>There is also another way to install Nodejs.</li> <li>Go to the this link to download nodejs Linux Binaries.</li> <li>User the command below to extract the tar file at any folder</li> </ul> <p><pre><code>tar -xvf &lt;nodejs-binary-tar-file&gt;\n</code></pre> - Then set Nodejs Home and PATH</p> <pre><code>sudo gedit ~/.bashrc\n</code></pre> <ul> <li>Then put these lines at the end of file.</li> </ul> <pre><code>export NODEJS_HOME=/home/duc/solfwares/nodejs\nexport PATH=$PATH:$NODEJS_HOME/bin\n</code></pre> <ul> <li>Check nodejs and npm installations</li> </ul> <pre><code>~$ node --version\nv16.15.1\n\n~$ npm --version\n8.11.0\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_angular","title":"Install Angular","text":"<ul> <li>User command below to install Angular with lastest version</li> </ul> <pre><code>sudo npm install -g @angular/cli\n</code></pre> <ul> <li>Check angular installation</li> </ul> <pre><code>$ ng version\n\n     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n  / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n                |___/\n\n\nAngular CLI: 13.3.0\nNode: 16.14.2\nPackage Manager: npm 8.5.0\nOS: linux x64\n\nAngular: \n... \n\nPackage                      Version\n------------------------------------------------------\n@angular-devkit/architect    0.1303.0 (cli-only)\n@angular-devkit/core         13.3.0 (cli-only)\n@angular-devkit/schematics   13.3.0 (cli-only)\n@schematics/angular          13.3.0 (cli-only)\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_docker_-_docker_compose","title":"Install Docker - Docker Compose","text":"<ul> <li>Go to this page and following the instruction.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_mysql_workbench","title":"Install Mysql WorkBench","text":"<ul> <li> <p>Go to this page to download the mysql workbench deb file</p> </li> <li> <p>Then run command below to install</p> </li> </ul> <pre><code>sudo dpkg -i mysql-workbench-community_8.0.28-1ubuntu20.04_amd64.deb\n</code></pre> <ul> <li>If there are any error happened. Then continue to run command below for fixing</li> </ul> <pre><code>sudo apt --fix-broken install\n</code></pre> <ul> <li>Then go to Application to check installation or use command <code>mysql-workbench</code> to start application.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_dbeaver","title":"Install Dbeaver","text":"<ul> <li>Go to this page to download the .deb file. Ex: the file name after downloaded will be <code>dbeaver-ce_22.0.1_amd64.deb</code>.</li> <li>Then use the command below to install the Dbeaver.</li> </ul> <pre><code>sudo dpkg -i dbeaver-ce_22.0.1_amd64.deb\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_soapui","title":"Install SoapUI","text":"<ul> <li>Go to this page to download ## SoapUI Open Source.</li> <li>Then use command below to be able to execute the sh file.</li> </ul> <p><pre><code>chmod +x fileName.sh\n</code></pre> - Then follow the GUI installation and finish.</p>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_grunt","title":"Install Grunt","text":"<ul> <li>To install Grunt you can read the instruction right here.</li> <li>So firstly, you need to run the command below to install the <code>grunt-cli</code></li> </ul> <pre><code>npm install -g grunt-cli\n</code></pre> <ul> <li>Then we need to run the command below to install grunt dependencies</li> </ul> <pre><code>npm install grunt\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_spring_tool_suite_4","title":"Install Spring Tool Suite 4","text":"<ul> <li>Go to this website and download the binary package.</li> <li>Then extract it at any folder that you want.</li> <li>Then use the command below to create a desktop file for Spring Tool Suite application.</li> </ul> <pre><code>sudo gedit /usr/share/applications/STS.desktop\n</code></pre> <ul> <li>Then in the <code>STS.desktop</code> file add the configuration below.</li> </ul> <pre><code>[Desktop Entry]\nName=SpringSource Tool Suite\nComment=SpringSource Tool Suite\nExec=/home/{PATH_TO_STS_EXTRACTED_FOLDER}/SpringToolSuite4\nIcon=/home/{PATH_TO_STS_EXTRACTED_FOLDER}/icon.xpm\nStartupNotify=true\nTerminal=false\nType=Application\nCategories=Development;IDE;Java;\n</code></pre> <ul> <li>Then save and reboot your computer.</li> <li>Then you should see the STS application in the applications as below.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_hugo","title":"Install Hugo","text":"<pre><code>sudo apt install hugo\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#minikube","title":"MiniKube","text":"<ul> <li>Run 2 command below.</li> </ul> <pre><code>curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube &amp;&amp; rm minikube-linux-amd64\n</code></pre> <ul> <li>More Information</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#kubectl","title":"Kubectl","text":"<ul> <li>Install using native package management.</li> <li>Update the\u00a0<code>apt</code>\u00a0package index and install packages needed to use the Kubernetes\u00a0<code>apt</code>\u00a0repository:</li> </ul> <pre><code>sudo apt-get update\n# apt-transport-https may be a dummy package; if so, you can skip that package\nsudo apt-get install -y apt-transport-https ca-certificates curl\n</code></pre> <ul> <li>Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:</li> </ul> <pre><code>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n</code></pre> <ul> <li>Add the appropriate Kubernetes apt repository. If you want to use Kubernetes version different than v1.28, replace v1.28 with the desired minor version in the command below:</li> </ul> <pre><code># This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n</code></pre> <ul> <li>Update\u00a0<code>apt</code>\u00a0package index, then install kubectl:</li> </ul> <pre><code>sudo apt-get update\nsudo apt-get install -y kubectl\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#helm","title":"Helm","text":"<ul> <li>To install Helm let's run commands as below.</li> </ul> <pre><code>curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg &gt; /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n</code></pre> <ul> <li>View more information</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#kubernetes_dashboard","title":"Kubernetes Dashboard","text":"<ul> <li>To install Kubernetes Dashboard please run the commands below.</li> </ul> <pre><code># Add kubernetes-dashboard repository\nhelm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/\n# Deploy a Helm Release named \"kubernetes-dashboard\" using the kubernetes-dashboard chart\nhelm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard\n</code></pre> <ul> <li>More information</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#k6","title":"K6","text":"<ul> <li>For Debian Ubuntu, please run commands below.</li> </ul> <pre><code>sudo gpg -k\nsudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69\necho \"deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main\" | sudo tee /etc/apt/sources.list.d/k6.list\nsudo apt-get update\nsudo apt-get install k6\n</code></pre> <ul> <li>After that, let's open terminal and type <code>k6</code> we should see the result below.</li> </ul> <pre><code>duc@duc-MS-7E01:~$ k6\n\n          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n     /\\  /  \\     |  |/  /   /  /    \n    /  \\/    \\    |     (   /   \u203e\u203e\\  \n   /          \\   |  |\\  \\ |  (\u203e)  | \n  / __________ \\  |__| \\__\\ \\_____/ .io\n\nUsage:\n  k6 [command]\n\nAvailable Commands:\n  archive     Create an archive\n  cloud       Run a test on the cloud\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  inspect     Inspect a script or archive\n  login       Authenticate with a service\n  pause       Pause a running test\n  resume      Resume a paused test\n  run         Start a test\n  scale       Scale a running test\n  stats       Show test metrics\n  status      Show test status\n  version     Show application version\n\nFlags:\n  -a, --address string      address for the REST API server (default \"localhost:6565\")\n  -c, --config string       JSON config file (default \"/home/duc/.config/loadimpact/k6/config.json\")\n  -h, --help                help for k6\n      --log-format string   log output format\n      --log-output string   change the output for k6 logs, possible values are stderr,stdout,none,loki[=host:port],file[=./path.fileformat] (default \"stderr\")\n      --no-color            disable colored output\n  -q, --quiet               disable progress updates\n  -v, --verbose             enable verbose logging\n\nUse \"k6 [command] --help\" for more information about a command.\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#keepass2","title":"KeePass2","text":"<ul> <li><code>KeePass2</code> is a tool for storing credentials with a master password, credentials will be stored in a file which is encrypted and we can't decrypt this file to get credentials without master password, so it is also safe for us to transfer this file over the internet.</li> <li>To install the <code>KeePass2</code>, please run following commands below.</li> </ul> <pre><code>sudo add-apt-repository ppa:ubuntuhandbook1/keepass2\n</code></pre> <pre><code>sudo apt update\n</code></pre> <pre><code>sudo apt install keepass2\n</code></pre> <ul> <li>To remove <code>KeePass2</code> out of your computer, run commands below</li> </ul> <pre><code>sudo apt remove --autoremove keepass2\n</code></pre> <pre><code>sudo add-apt-repository --remove ppa:ubuntuhandbook1/keepass2\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#tmux","title":"Tmux","text":"<ul> <li> <p>Tmux is a terminal multiplexer; it allows you to create several \"pseudo terminals\" from a single terminal. This is very useful for running multiple programs with a single connection, such as when you're remotely connecting to a machine using Secure Shell (SSH).</p> </li> <li> <p>Tmux also decouples your programs from the main terminal, protecting them from accidentally disconnecting. You can detach tmux from the current terminal, and all your programs will continue to run safely in the background. Later, you can reattach tmux to the same or a different terminal.</p> </li> <li> <p>To Install <code>Tmux</code> just run the command below.</p> </li> </ul> <pre><code>sudo apt install tmux\n</code></pre> <ul> <li>Then to start <code>Tmux</code> just use command <code>tmux</code></li> <li>Tmux provides several keybindings to execute commands quickly in a tmux session. Here are some of the most useful ones.</li> <li>First, create a new tmux session if you're not already in one. You can name your session by passing the parameter -s {name} to the tmux new command when creating a new session:</li> </ul> <pre><code>$ tmux new -s Session1\nCtrl+B D \u2014 Detach from the current session.\nCtrl+B % \u2014 Split the window into two panes horizontally.\nCtrl+B \" \u2014 Split the window into two panes vertically.\nCtrl+B Arrow Key (Left, Right, Up, Down) \u2014 Move between panes.\nCtrl+B X \u2014 Close pane.\nCtrl+B C \u2014 Create a new window.\nCtrl+B N or P \u2014 Move to the next or previous window.\nCtrl+B 0 (1,2...) \u2014 Move to a specific window by number.\nCtrl+B : \u2014 Enter the command line to type commands. Tab completion is available.\nCtrl+B ? \u2014 View all keybindings. Press Q to exit.\nCtrl+B W \u2014 Open a panel to navigate across windows in multiple sessions.\nFor additional keybindings, consult the tmux man pages.\n</code></pre> <ul> <li>Please view osdc_cheatsheet-tmux-2021.6.25.pdf for more information.</li> <li>Next, let's create file <code>.tmux.conf</code> in home directory with the content as below.</li> </ul> <pre><code># Change the default prefix key from Ctrl-b to Ctrl-a\n#unbind C-b\n#set-option -g prefix C-b\n#bind-key C-b send-prefix\n\n# Start window and pane numbering from 1 instead of 0\nset -g base-index 1\nsetw -g pane-base-index 1\n\n# Enable mouse support\nset -g mouse on\n\n# Set default terminal to 256 colors\nset -g default-terminal \"screen-256color\"\n\n# Set vi-style keybindings for copy mode\nsetw -g mode-keys vi\n\n# Copy and paste with system clipboard (requires xclip or reattach-to-user-namespace)\n\n# Copy mouse selection to tmux buffer AND to the (X11) clipboard\nbind-key -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel \"xclip -in -selection clipboard\"\n\n# Copy tmux buffer to (X11) clipboard (e.g., using prefix + y)\nbind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'\n\n# Reload config with 'r' key\nbind r source-file ~/.tmux.conf \\; display \"Tmux config reloaded!\"\n\n# Status bar customization\nset -g status-position bottom\nset -g status-bg '#2d3436' # Dark grey background\nset -g status-fg white    # White foreground\nset -g status-left '#[fg=green]#[bold]Session: #S #[default]'\nset -g status-right '#[fg=cyan]#[bold]%H:%M %d-%b-%y #[default]'\n</code></pre> <ul> <li>Then save and use the command below to reload tmux config.</li> </ul> <pre><code>tmux source-file ~/.tmux.conf\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#openssh_server","title":"OpenSSH Server","text":"<ul> <li>Run the command below to install openssh server.</li> </ul> <pre><code>sudo apt-get install openssh-server\n</code></pre> <ul> <li>Enable the ssh service by typing:</li> </ul> <pre><code>sudo systemctl enable ssh\nsudo systemctl enable ssh --now\n</code></pre> <ul> <li>Start the ssh service by typing</li> </ul> <pre><code>sudo systemctl start ssh\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_homebrew","title":"Install HomeBrew","text":"<ul> <li>Run the command below to install <code>HomeBrew</code></li> </ul> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <ul> <li>For more information: brew.sh</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_podman","title":"Install Podman","text":"<ul> <li>Run command below to install podman. However, you may not get the latest version of <code>podman</code> because it depends on the version of your linux system.</li> </ul> <pre><code>sudo apt install podman\n</code></pre> <ul> <li>Recommend to use <code>HomeBrew</code> because it provides the latest version.</li> </ul> <pre><code>brew install podman\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_podman_compose","title":"Install Podman Compose","text":"<ul> <li>Run the command below at home.</li> </ul> <pre><code>curl -o ~/.local/bin/podman-compose https://raw.githubusercontent.com/containers/podman-compose/main/podman_compose.py\nchmod +x ~/.local/bin/podman-compose\n</code></pre> <ul> <li>Then let's install this dependency below.</li> </ul> <pre><code>sudo pip3 install dotenv\n</code></pre> <ul> <li>Recommend to use <code>HomeBrew</code> because it provides the latest version and all needed dependencies.</li> </ul> <pre><code>brew install podman-compose\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_tool_installation","title":"ASDF Tool Installation","text":"<ul> <li> <p><code>asdf</code>\u00a0is a tool version manager. All tool version definitions are contained within one file (<code>.tool-versions</code>) which you can check in to your project's Git repository to share with your team, ensuring everyone is using the\u00a0exact\u00a0same versions of tools.</p> </li> <li> <p>The old way of working required multiple CLI version managers, each with their distinct API, configurations files and implementation (e.g.\u00a0<code>$PATH</code>\u00a0manipulation, shims, environment variables, etc...).\u00a0<code>asdf</code>\u00a0provides a single interface and configuration file to simplify development workflows, and can be extended to all tools and runtimes via a simple plugin interface.</p> </li> <li> <p>More information</p> </li> <li> <p>To Install asdf firstly, let's install <code>curl</code> and <code>git</code></p> </li> </ul> <pre><code>sudo apt install curl git\n</code></pre> <ul> <li>Then clone this official repository below</li> </ul> <pre><code>git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.17.0\n</code></pre> <ul> <li>Then add following lines below into <code>~/.bashrc</code></li> </ul> ~/.bashrc<pre><code># other codes........\n\nexport PATH=\"$PATH:${HOME}/.asdf/bin\"\nexport ASDF_DATA_DIR=\"/home/duc/.asdf\"\nexport PATH=\"$ASDF_DATA_DIR/shims:$PATH\"\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_plugins","title":"ASDF Plugins","text":"<ul> <li>We can view many plugins for <code>asdf</code> in this repository. In this part I  just put some common plugins that we usually use.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#add_a_plugin","title":"Add A Plugin","text":"<ul> <li>Add plugins via their Git URL:</li> </ul> <pre><code>asdf plugin add &lt;name&gt; &lt;git-url&gt;\n# asdf plugin add elm https://github.com/vic/asdf-elm\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_installed_plugins","title":"List Installed Plugins","text":"<pre><code>asdf plugin list\n# asdf plugin list\n# java\n# nodejs\n</code></pre> <pre><code>asdf plugin list --urls\n# asdf plugin list\n# java            https://github.com/halcyon/asdf-java.git\n# nodejs          https://github.com/asdf-vm/asdf-nodejs.git\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_all_available_plugins","title":"List All Available Plugins","text":"<pre><code>asdf plugin list all\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#update_plugins","title":"Update Plugins","text":"<pre><code>asdf plugin update --all\n</code></pre> <pre><code>asdf plugin update &lt;name&gt;\n# asdf plugin update erlang\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#remove_plugin","title":"Remove Plugin","text":"<pre><code>asdf plugin remove &lt;name&gt;\n# asdf plugin remove erlang\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_built_plugins_recommendation","title":"ASDF Built Plugins (Recommendation)","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_all_built-in_plugins","title":"List All Built-In Plugins","text":"<ul> <li>To get the built-in plugins, we can use the command below to check.</li> </ul> <pre><code>asdf plugin list all\n</code></pre> <ul> <li>Then we can see the results with names and repository links as below.</li> </ul> <pre><code>\u256d\u2500duc at ducs-computer in ~ 24-05-28 - 20:53:08                  20:53:17 [805/808]\n\u2570\u2500\u25cb asdf plugin list all                                                           \n1password-cli                 https://github.com/NeoHsu/asdf-1password-cli.git\nact                           https://github.com/gr1m0h/asdf-act.git         \nactionlint                    https://github.com/crazy-matt/asdf-actionlint.git    \naction-validator              https://github.com/mpalmer/action-validator.git\nadr-tools                     https://gitlab.com/td7x/asdf/adr-tools.git   \nag                            https://github.com/koketani/asdf-ag.git     \nage                           https://github.com/threkk/asdf-age     \nagebox                        https://github.com/slok/asdf-agebox.git   \nage-plugin-yubikey            https://github.com/joke/asdf-age-plugin-yubikey\nair                           https://github.com/pdemagny/asdf-air\naks-engine                    https://github.com/robsonpeixoto/asdf-aks-engine.git\nalias                         https://github.com/andrewthauer/asdf-alias.git\nallure                        https://github.com/comdotlinux/asdf-allure.git  \nalp                           https://github.com/asdf-community/asdf-alp.git\namass                         https://github.com/dhoeric/asdf-amass.git\namazon-ecr-credential-helper  https://github.com/dex4er/asdf-amazon-ecr-credential-\n\n.............\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#add_plugins_with_built-in_plugin_names","title":"Add Plugins With Built-In Plugin Names","text":"<ul> <li>So instead of add plugins manually by command <code>asdf plugin add &lt;name&gt; &lt;git-url&gt;</code> we can use a shorter command below.</li> </ul> <pre><code>asdf plugin add &lt;plugin names&gt;\n</code></pre> <ul> <li>Then to add <code>plugins</code> we just put the names.</li> </ul> <pre><code>asdf plugin add java nodejs maven yarn\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_versions","title":"ASDF Versions","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_all_available_versions","title":"List All Available Versions","text":"<pre><code>asdf list all &lt;name&gt;\n# asdf list all erlang\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_a_version","title":"Install A Version","text":"<pre><code>asdf install &lt;name&gt; &lt;version&gt;\n# asdf install erlang 17.3\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_installed_versions","title":"List Installed Versions","text":"<pre><code>asdf list &lt;name&gt;\n# asdf list erlang\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#set_current_version","title":"Set Current Version","text":"<pre><code>asdf global &lt;name&gt; &lt;version&gt;\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#view_current_version","title":"View Current Version","text":"<pre><code>asdf current\n# asdf current\n# erlang          17.3          /Users/kim/.tool-versions\n# nodejs          6.11.5        /Users/kim/cool-node-project/.tool-versions\n\nasdf current &lt;name&gt;\n# asdf current erlang\n# erlang          17.3          /Users/kim/.tool-versions\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#uninstall_version","title":"Uninstall Version","text":"<pre><code>asdf uninstall &lt;name&gt; &lt;version&gt;\n# asdf uninstall erlang 17.3\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_with_java","title":"ASDF With Java","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#add_java_plugin","title":"Add Java Plugin","text":"<pre><code>asdf plugin add java https://github.com/halcyon/asdf-java.git\n</code></pre> <ul> <li>Or shorter command.</li> </ul> <pre><code>asdf plugin add java \n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#find_all_java_versions","title":"Find All Java Versions","text":"<pre><code>asdf list all java\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_specific_java_versions","title":"Install Specific Java Versions","text":"<ul> <li>Install Java 8</li> </ul> <pre><code>asdf install java adoptopenjdk-8.0.382+5\n</code></pre> <ul> <li>Install Java 11</li> </ul> <pre><code>asdf install java adoptopenjdk-11.0.20+8\n</code></pre> <ul> <li>Install Java 17</li> </ul> <pre><code>asdf install java adoptopenjdk-17.0.8+7\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_installed_java_versions","title":"List Installed Java Versions","text":"<pre><code>asdf list java\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#set_desire_java_version","title":"Set Desire Java Version","text":"<ul> <li>For example, java 8</li> </ul> <pre><code>asdf global java adoptopenjdk-8.0.382+5\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#uninstall_a_java_version","title":"Uninstall A Java Version","text":"<ul> <li>For example, Java 11</li> </ul> <pre><code>asdf uninstall java adoptopenjdk-11.0.20+8\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_with_nodejs","title":"ASDF With NodeJs","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#add_nodejs_plugin","title":"Add NodeJs Plugin","text":"<pre><code>asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n</code></pre> <ul> <li>Or shorter command.</li> </ul> <pre><code>asdf plugin add nodejs\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#find_all_nodejs_versions","title":"Find All NodeJs Versions","text":"<pre><code>asdf list all nodejs\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_specific_nodejs_versions","title":"Install Specific NodeJs Versions","text":"<ul> <li>Install NodeJs 18.16.1</li> </ul> <pre><code>asdf install nodejs 18.16.1\n</code></pre> <ul> <li>Install NodeJs 20.5.0</li> </ul> <pre><code>asdf install nodejs 20.5.0\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_installed_nodejs_versions","title":"List Installed NodeJs Versions","text":"<pre><code>asdf list nodejs\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#set_nodejs_version","title":"Set NodeJs Version","text":"<ul> <li>For example, NodeJs 18.16.1</li> </ul> <pre><code>asdf global nodejs 18.16.1\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#uninstall_a_nodejs_version","title":"Uninstall A NodeJs Version","text":"<ul> <li>For example, NodeJs 20.5.0</li> </ul> <pre><code>asdf uninstall nodejs 20.5.0\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_with_maven","title":"ASDF With Maven","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#add_maven_plugin","title":"Add Maven Plugin","text":"<pre><code>asdf plugin add maven https://github.com/halcyon/asdf-maven.git\n</code></pre> <ul> <li>Or shorter command.</li> </ul> <pre><code>asdf plugin add maven\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#find_all_maven_versions","title":"Find All Maven Versions","text":"<pre><code>asdf list all maven\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#install_specific_maven_versions","title":"Install Specific Maven Versions","text":"<ul> <li>Install Maven 3.6.3</li> </ul> <pre><code>asdf install maven 3.6.3\n</code></pre> <ul> <li>Install Maven 3.9.3</li> </ul> <pre><code>asdf install maven 3.9.3\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#list_installed_maven_versions","title":"List Installed Maven Versions","text":"<pre><code>asdf list maven\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#set_maven_version","title":"Set Maven Version","text":"<ul> <li>For example, Maven 3.9.3</li> </ul> <pre><code>asdf global maven 3.9.3\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#uninstall_a_maven_version","title":"Uninstall A Maven Version","text":"<ul> <li>For example, Maven 3.6.3</li> </ul> <pre><code>asdf uninstall maven 3.6.3\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20For%20Developer/#asdf_tool-versions_configuration","title":"ASDF tool-versions Configuration","text":"<ul> <li>There is a case that we will work on multiple projects and every project will need different versions of tools or programming languages such as: Java, nodejs, maven. So if we just install specific version at global then when we switching between projects, we have to switch to the suitable versions.</li> <li>To avoid this issue, we can use <code>.tool-versions</code> file in every project and we will define the specific version for each one.</li> <li> <p>For example we have 2 projects:</p> <ul> <li>Project A:<ul> <li>Java: adoptopenjdk-17.0.8+7</li> <li>Nodejs: 18.18.0</li> <li>Maven: 3.9.3</li> </ul> </li> <li>Project B:<ul> <li>Java: adoptopenjdk-8.0.382+5</li> <li>Nodejs: 20.5.0</li> <li>Maven: 3.6.3</li> </ul> </li> </ul> </li> <li> <p>So we will define the <code>.tool-versions</code> at the root of the project A with the content as below.</p> </li> </ul> .tool-versions<pre><code>java adoptopenjdk-17.0.8+7  \nmaven 3.9.3  \nnodejs 18.18.0\n</code></pre> <ul> <li>Then for the <code>.tool-versions</code> of project B, we will have like this.</li> </ul> .tool-versions<pre><code>java adoptopenjdk-8.0.382+5  \nmaven 3.6.3  \nnodejs 20.5.0\n</code></pre> <ul> <li>Then let's run the command <code>asdf install</code> to install versions that we defined in the file <code>.tool-versions</code> in every project if we have not install them before with <code>asdf</code>.</li> <li> <p>Now, when we switch between projects for working, then specific versions of tools or programming languages will be changed automatically.</p> </li> <li> <p>For example if we check the selected versions in project A by <code>asdf</code> then we will see the result as below.</p> </li> </ul> <pre><code>asdf list java\n  adoptopenjdk-11.0.20+8\n *adoptopenjdk-17.0.8+7\n  adoptopenjdk-8.0.382+5\n</code></pre> <pre><code>asdf list nodejs\n  18.16.1\n *18.18.0\n  20.5.0\n</code></pre> <pre><code>asdf list maven\n  3.6.3\n *3.9.3\n</code></pre> <ul> <li>Then  if we check the selected versions in project B by <code>asdf</code> then we will see the result as below.</li> </ul> <pre><code>asdf list java\n  adoptopenjdk-11.0.20+8\n  adoptopenjdk-17.0.8+7\n *adoptopenjdk-8.0.382+5\n</code></pre> <pre><code>asdf list nodejs\n  18.16.1\n  18.18.0\n *20.5.0\n</code></pre> <pre><code>asdf list maven\n *3.6.3\n  3.9.3\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/","title":"Setup Tools","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#linux_setup_tools","title":"Linux Setup Tools","text":"","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_openvpn","title":"Install OPENVPN","text":"<ul> <li><code>Openvpn</code> is a tool that allow your computer to connect a  <code>private virtual network</code>. So that you can access foreign countries websites, blocked websites by network operator in your countries or the private network of your company.</li> <li>Use command below to install OpenVpn</li> </ul> <pre><code>sudo apt-get install openvpn\n</code></pre> <ul> <li>To run start openvpn with <code>.ovpn</code> file, run command</li> </ul> <pre><code>sudo openvpn --config sample.ovpn\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_neofetch","title":"Install NeoFetch","text":"<ul> <li><code>NeoFetch</code> is a tool that show you some general information about your linux operation system and hardwares that you are using.</li> <li>Use command below to install NeoFetch</li> </ul> <pre><code>sudo apt install neofetch\n</code></pre> <ul> <li>To use neofetch to view your system, run command</li> </ul> <pre><code>$ neofetch\n            .-/+oossssoo+/-.               duc@LNV-PF38LP1Q \n        `:+ssssssssssssssssss+:`           ---------------- \n      -+ssssssssssssssssssyyssss+-         OS: Ubuntu 20.04.4 LTS x86_64 \n    .ossssssssssssssssssdMMMNysssso.       Host: 20SUS0TF10 ThinkPad P15 Gen 1 \n   /ssssssssssshdmmNNmmyNMMMMhssssss/      Kernel: 5.13.0-37-generic \n  +ssssssssshmydMMMMMMMNddddyssssssss+     Uptime: 1 hour, 45 mins \n /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Packages: 1820 (dpkg), 12 (snap) \n.ssssssssdMMMNhsssssssssshNMMMdssssssss.   Shell: bash 5.0.17 \n+sssshhhyNMMNyssssssssssssyNMMMysssssss+   Resolution: 1920x1080 \nossyNMMMNyMMhsssssssssssssshmmmhssssssso   DE: GNOME \nossyNMMMNyMMhsssssssssssssshmmmhssssssso   WM: Mutter \n+sssshhhyNMMNyssssssssssssyNMMMysssssss+   WM Theme: Adwaita \n.ssssssssdMMMNhsssssssssshNMMMdssssssss.   Theme: Yaru-dark [GTK2/3] \n /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/    Icons: Yaru [GTK2/3] \n  +sssssssssdmydMMMMMMMMddddyssssssss+     Terminal: gnome-terminal \n   /ssssssssssshdmNNNNmyNMMMMhssssss/      CPU: Intel i7-10850H (12) @ 5.100GHz \n    .ossssssssssssssssssdMMMNysssso.       GPU: Intel UHD Graphics \n      -+sssssssssssssssssyyyssss+-         GPU: NVIDIA Quadro T1000 Mobile \n        `:+ssssssssssssssssss+:`           Memory: 3713MiB / 63940MiB \n            .-/+oossssoo+/-.\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_htop","title":"Install Htop","text":"<ul> <li><code>Htop</code> is a tool that helps you to monitor your linux system.</li> <li>To install <code>Htop</code> use the command below.</li> </ul> <pre><code>sudo apt install htop\n</code></pre> <ul> <li>To use htop, run the command</li> </ul> <p><pre><code>sudo htop\n</code></pre> - You can view the instructions at the bottom of htop.</p>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_warp_vpn","title":"Install WARP VPN","text":"<ul> <li>Go to this link to download <code>.deb</code> file for using on ubuntu.</li> <li>Use the command below to install the <code>.deb</code> file.</li> </ul> <pre><code>sudo dpkg -i &lt;name of file&gt;\n</code></pre> <ul> <li>Then use the command below to start WARP service</li> </ul> <pre><code>sudo systemctl start warp-svc\n</code></pre> <ul> <li>Then use the command below to register WARP client to server. You just need to do this step one time.</li> </ul> <pre><code>warp-cli register\n</code></pre> <ul> <li>Then use the command below to connect WARP VPN</li> </ul> <pre><code>warp-cli connect\n</code></pre> <ul> <li>Use the command below to disconnect WARP VPN</li> </ul> <pre><code>warp-cli disconnect\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#mkdocs_setup","title":"MkDocs Setup","text":"<ul> <li>Install python3-pip</li> </ul> <pre><code>sudo apt install python3-pip\n</code></pre> <ul> <li>Install mkdocs</li> </ul> <pre><code>pip3 install mkdocs\n</code></pre> <ul> <li>Install mkdocs-material</li> </ul> <pre><code>pip3 install mkdocs-material\n</code></pre> <ul> <li>Install mkdocs-mermaid2-plugin</li> </ul> <pre><code>pip3 install mkdocs-mermaid2-plugin\n</code></pre> <ul> <li>Install mkdocs-roamlinks-plugin</li> </ul> <pre><code>pip3 install mkdocs-roamlinks-plugin\n</code></pre> <ul> <li>Install mkdocs-awesome-pages-plugin</li> </ul> <pre><code>pip3 install mkdocs-awesome-pages-plugin\n</code></pre> <ul> <li>Install mkdocs-material-extensions</li> </ul> <pre><code>pip3 install mkdocs-material-extensions\n</code></pre> <ul> <li>Install mkdocs-glightbox plugin</li> </ul> <pre><code>pip3 install mkdocs-glightbox\n</code></pre> <ul> <li>Install mkdocs-rss-plugin</li> </ul> <pre><code>pip install mkdocs-rss-plugin\n</code></pre> <ul> <li>Upgrade mkdoc-material</li> </ul> <pre><code>pip3 install --upgrade --force-reinstall mkdocs-material\n</code></pre> <ul> <li>Install packages following <code>requirements.txt</code> file. For example we have a <code>requirements.txt</code> file as below.</li> </ul> <pre><code>mkdocs==1.6.0\nmkdocs-awesome-pages-plugin==2.9.2\nmkdocs-material-extensions==1.3.1\nmkdocs-mermaid2-plugin==1.1.0\nmkdocs-roamlinks-plugin==0.3.2\nmkdocs-material==9.5.26\nmkdocs-glightbox==0.4.0\nmkdocs-rss-plugin==1.12.2\n</code></pre> <ul> <li>Then to install those packages following versions in the <code>requirements.txt</code> we use the command below.</li> </ul> <pre><code>pip3 install -r requirements.txt\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_woe_usb","title":"Install WoE Usb","text":"<ul> <li>This application is used for creating USB Boot Windows.</li> <li>Update repository</li> </ul> <pre><code>sudo add-apt-repository ppa:tomtomtom/woeusb -y\n</code></pre> <ul> <li>Before you continue, run an APT update to reflect the newly imported PPA.</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install Woe USB with GUI</li> </ul> <pre><code>sudo apt install woeusb woeusb-frontend-wxgtk -y\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_fish_shell","title":"Install fish shell","text":"<ul> <li>What is fish?: Fish shell is a terminal shell. It has many features to help developers improve coding and skills.</li> <li>First Step: add repository</li> </ul> <pre><code>sudo apt-add-repository ppa:fish-shell/release-3\n</code></pre> <ul> <li>Second: update and install</li> </ul> <pre><code>sudo apt update\nsudo apt install fish\n</code></pre> <ul> <li>Third: replace the original terminal</li> </ul> <pre><code>sudo chsh -s /usr/bin/fish\n</code></pre> <ul> <li>If you want to back to the bash terminal, type this in terminal</li> </ul> <pre><code>sudo chsh -s 'which bash'\n</code></pre> <ul> <li>In case, get errors with <code>PAM: Authentication failure</code>.</li> </ul> <pre><code>sudo gedit /etc/pam.d/chsh\n</code></pre> <ul> <li>Replace:</li> </ul> <pre><code>auth       required   pam_shells.so\n</code></pre> <ul> <li>To:</li> </ul> <pre><code>auth       sufficient   pam_shells.so\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_oh_my_fish","title":"Install  Oh My fish","text":"<ul> <li> <p><code>Oh My Fish</code>\u00a0is a Fishshell framework that allows you to install packages which extend or modify the look and feel of your shell. It is easy to use, fast and extensible. Using <code>omf</code>, you can easily install themes that enriches the look of your shell and install plugins to tweak your fish shell as per your wish.</p> </li> <li> <p>Install oh-my-fish</p> </li> </ul> <pre><code>sudo apt-get update\ncurl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install &gt; install\nfish install\n</code></pre> <ul> <li>Install theme</li> </ul> <pre><code>omf install agnoster\n</code></pre> <ul> <li> <p>List of themes </p> </li> <li> <p>To setup theme</p> </li> </ul> <pre><code>omf theme agnoster\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_gnome_shell_extensions","title":"Install Gnome Shell Extensions","text":"<ul> <li>Install Gnome Shell Extensions.</li> </ul> <pre><code>sudo apt install gnome-shell-extensions\nsudo apt-get install chrome-gnome-shell\n</code></pre> <ul> <li>Then you can go to this page to install Extensions for your computer. Just choose an extension and click button <code>On</code>.</li> <li>Some useful Extensions you should install.</li> <li>User Themes: User Themes</li> <li>Vitals: System monitor.</li> <li>DashToPanel: Horizontal Dock.</li> <li>OpenWeather: Weather.</li> <li>CloudFlare: ON/OFF Warp VPN, Need to install WARP VPN first.</li> <li>Cloudflare-Warp-Fedora: Cloudflare Warp Fedora</li> <li>Caffeine: Caffeine.</li> <li>Blur My Shell: Blur Application Background.</li> <li>Rounded Window Corners: Make all windows rounded.</li> <li>Dash To Dock: Make dash becomes dock.</li> <li>Rounded Corners: Rounded Corners.</li> <li>Login Background: Login Background.</li> <li>Panel Corners: Panel Corners</li> <li>Desktop Clock: Desktop Clock</li> <li>Allow Locked Remote Desktop: Allow remote desktop connections when the screen is locked</li> <li>Ddterm: Drop down terminal extension for GNOME.</li> <li>Tactile: Tile windows on a custom grid using your keyboard.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_ibus-bamboo","title":"Install  Ibus-Bamboo","text":"<ul> <li>Ibus Bamboo is used for typing Vietnamese on ubuntu. To install it, you need to run commands below.</li> </ul> <pre><code>sudo add-apt-repository ppa:bamboo-engine/ibus-bamboo\nsudo apt-get update\nsudo apt-get install ibus ibus-bamboo --install-recommends\nibus restart\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_croc","title":"Install Croc","text":"<ul> <li> <p><code>croc</code>\u00a0is a tool that allows any two computers to simply and securely transfer files and folders. AFAIK,\u00a0croc\u00a0is the only CLI file-transfer tool that does\u00a0all\u00a0of the following:</p> <ul> <li>allows\u00a0any two computers\u00a0to transfer data (using a relay)</li> <li>provides\u00a0end-to-end encryption\u00a0(using PAKE)</li> <li>enables easy\u00a0cross-platform\u00a0transfers (Windows, Linux, Mac)</li> <li>allows\u00a0multiple file\u00a0transfers</li> <li>allows\u00a0resuming transfers\u00a0that are interrupted</li> <li>local server or port-forwarding\u00a0not needed</li> <li>ipv6-first\u00a0with ipv4 fallback</li> <li>can\u00a0use proxy, like tor</li> </ul> </li> <li> <p>To install croc, you can go to this github page and go to <code>Releases</code> and download file <code>.deb</code>. Then run command as below.</p> </li> </ul> <pre><code>sudo dpkg -i &lt;filename.deb&gt;\n\nsudo dpkg -i croc_9.6.5_Linux-64bit.deb\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_zsh","title":"Install Zsh","text":"<ul> <li>Install <code>zsh</code></li> </ul> <pre><code>sudo apt install zsh -y\n</code></pre> <ul> <li>Check <code>zsh</code> installed version</li> </ul> <pre><code>zsh --version\n</code></pre> <ul> <li>Configure <code>zsh</code> on Ubuntu</li> </ul> <pre><code>zsh\n</code></pre> <ul> <li> <p>Then you will see the instruction for the first configuration. </p> <ul> <li>Press\u00a01\u00a0to go to the main menu and configure each setting individually.</li> <li>Press\u00a02\u00a0to populate the\u00a0<code>.zshrc</code>\u00a0configuration file with the default parameters, which you can later change manually in the\u00a0<code>.zshrc</code>\u00a0file.</li> <li>Press\u00a00\u00a0to create an empty\u00a0<code>.zshrc</code>\u00a0configuration file and configure everything from scratch.</li> <li>Press\u00a0q\u00a0to exit the configuration and start it again the next time you enter <code>Zsh</code>.</li> </ul> </li> <li> <p>Then let's set the <code>zsh</code> as default shell.</p> </li> <li>Firstly, let's check the default shell</li> </ul> <pre><code>echo $SHELL\n</code></pre> <ul> <li>If the default <code>shell</code> is <code>/bin/bash</code> then we can change it to <code>zsh</code> by running the command below.</li> </ul> <pre><code>chsh -s $(which zsh)\n</code></pre> <ul> <li>After that, let's reload the <code>zsh</code> by command.</li> </ul> <pre><code>source ~/.zshrc\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_oh-my-zsh","title":"Install Oh-My-Zsh","text":"<ul> <li>Install <code>oh-my-zsh</code> on ubuntu.</li> </ul> <pre><code>sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n</code></pre> <ul> <li>Then let's change the theme of <code>oh-my-zsh</code>.</li> <li>Run command below to edit <code>.zshrc</code></li> </ul> <pre><code>gedit $HOME/.zshrc\n</code></pre> <ul> <li>If you check,\u00a0<code>robbyrussel</code>\u00a0is the default theme for <code>zsh</code>.</li> </ul> .zshrc<pre><code>...\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"robbyrussell\"\n...\n</code></pre> <ul> <li>Therefore, to replace or change your <code>zsh</code> theme, get the name of the theme from <code>$HOME/.oh-my-zsh/themes/</code> folder and substitute the <code>robbyrussell</code> with the new name of your preferred theme.</li> <li>For example, to change the themes to\u00a0<code>fino-time</code>\u00a0theme,\u00a0<code>$HOME/.oh-my-zsh/themes/fino-time.zsh-theme</code></li> </ul> .zshrc<pre><code>...\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"fino-time\"\n...\n</code></pre> <ul> <li>Then save and run command below to reload the <code>zsh</code></li> </ul> <pre><code>source ~/.zshrc\n</code></pre> <ul> <li>Then we can see the result as below.</li> </ul>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#post_install_zsh","title":"Post Install Zsh","text":"<ul> <li>If you are using <code>bash</code> for a long time and you had put some <code>configurations</code>, <code>alias</code> and <code>PATH</code> in <code>~/.bashrc</code> then when you switch to using <code>zsh</code> these configurations and settings will not working anymore. So we just simply copy <code>configurations</code>, <code>PATH</code> and <code>alias</code> from <code>~/.bashrc</code> to <code>~/.zshrc</code> then everything will work fine with <code>zsh</code> again.</li> </ul> .bashrc<pre><code>...\n\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n\nalias camunda-modeler='cd /home/duc/solfwares/camunda-modeler-5.14.0-linux-x64 &amp;&amp; ./camunda-modeler'\n\n# Load Angular CLI autocompletion.\nsource &lt;(ng completion script)\n</code></pre> .zshrc<pre><code>...\n\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n\nalias camunda-modeler='cd /home/duc/solfwares/camunda-modeler-5.14.0-linux-x64 &amp;&amp; ./camunda-modeler'\n\n# Load Angular CLI autocompletion.\nsource &lt;(ng completion script)\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_zsh_plugins","title":"Install Zsh plugins","text":"<ul> <li>By default the <code>oh-my-zsh</code> had provided a lot of plugins in the directory <code>$HOME/.oh-my-zsh/plugins/</code>. Then to apply them into our <code>zsh</code>. We just need to open <code>~/.zshrc</code> and edit the line <code>plugins=()</code> as below.</li> </ul> .zshrc<pre><code>...\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\n    git\n    npm\n    dotenv\n    asdf\n    cp\n    docker\n    docker-compose\n    grunt\n    helm\n    history\n    kubectl\n    minikube\n    mvn\n    ng\n    node\n    python\n    spring\n    sudo\n    tig\n    yarn\n)\n</code></pre> <ul> <li> <p>However, if we have some specific plugins that we want to configure for our <code>zsh</code> then we can download it under the directory <code>$HOME/.oh-my-zsh/custom/plugins/</code>.</p> </li> <li> <p>For example, we can clone <code>zsh-autocomplete</code> and <code>zsh-syntax-highlighting</code> plugins to our directory <code>$HOME/.oh-my-zsh/custom/plugins/</code> as below.</p> </li> </ul> <pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n</code></pre> <pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n</code></pre> <ul> <li>Then to apply them into our <code>zsh</code>. We just need to open <code>~/.zshrc</code> and edit the line <code>plugins=()</code> as below.</li> </ul> .zshrc<pre><code>...\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\n    git\n    npm\n    dotenv\n    asdf\n    cp\n    docker\n    docker-compose\n    grunt\n    helm\n    history\n    kubectl\n    minikube\n    mvn\n    ng\n    node\n    python\n    spring\n    sudo\n    tig\n    yarn\n    zsh-autosuggestions\n    zsh-syntax-highlighting\n)\n\n...\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_fzf","title":"Install Fzf","text":"<ul> <li>fzf is a general-purpose command-line fuzzy finder.</li> </ul> <pre><code>git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_intellij_toolbox","title":"Install Intellij ToolBox","text":"<ul> <li>Run command below to download the jetbrain toolbox</li> </ul> <pre><code>wget -O jetbrains-toolbox.tar.gz \"https://data.services.jetbrains.com/products/download?platform=linux&amp;code=TBA\"\n</code></pre> <ul> <li>Then extract the file tar.</li> </ul> <pre><code>tar -xf jetbrains-toolbox.tar.gz\n</code></pre> <ul> <li>Then install supported library.</li> </ul> <pre><code>sudo apt install libfuse2\n</code></pre> <ul> <li>Finally run command below to start.</li> </ul> <pre><code> ./jetbrains-toolbox\n</code></pre> <ul> <li>We can make an alias for it. Add the command below into the <code>~/.zshrc</code></li> </ul> <pre><code>alias toolbox=\"/home/duc/softwares/jetbrains-toolbox/jetbrains-toolbox\"\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_cmatrix","title":"Install cmatrix","text":"<ul> <li>To install cmatrix, let's run the command below.</li> </ul> <pre><code>sudo apt install cmatrix\n</code></pre> <ul> <li>To run <code>cmatrix</code> just use.</li> </ul> <pre><code>cmatrix\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#add_ubuntu_device_into_tailscale","title":"Add Ubuntu Device Into Tailscale","text":"<pre><code>curl -fsSL https://tailscale.com/install.sh | sh\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_cuda_toolkit_128_for_ubuntu_2204","title":"Install CUDA Toolkit 12.8 For Ubuntu 22.04","text":"<ul> <li>Run commands below to install or view more details.</li> </ul> <pre><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin\nsudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda-repo-ubuntu2204-12-8-local_12.8.0-570.86.10-1_amd64.deb\nsudo dpkg -i cuda-repo-ubuntu2204-12-8-local_12.8.0-570.86.10-1_amd64.deb\nsudo cp /var/cuda-repo-ubuntu2204-12-8-local/cuda-*-keyring.gpg /usr/share/keyrings/\nsudo apt-get update\nsudo apt-get -y install cuda-toolkit-12-8\n</code></pre> <ul> <li>Then verify that the drivers are installed by running the following command, which should print details about your GPU.</li> </ul> <pre><code>nvidia-smi\n</code></pre>","tags":["Linux"]},{"location":"Linux/Linux%20Setup%20Tools/#install_ollama_llm_runner","title":"Install Ollama LLM Runner","text":"<ul> <li>Run command below to install Ollama. View more details. If you are using Nvidia Graphic Card then you can install CUDA Toolkit then install Ollama later.</li> </ul> <pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre> <ul> <li>If you are using Open WebUI and want to connect with Ollama then you need to update the <code>ollama.service</code> as below.</li> <li>Open file <code>ollama.service</code> by command below.</li> </ul> <pre><code>sudo nano /etc/systemd/system/ollama.service\n</code></pre> <ul> <li>Then add the line `Environment=\"OLLAMA_HOST=0.0.0.0\" into the file as below.</li> </ul> <pre><code>[Unit]\nDescription=Ollama Service\nAfter=network-online.target\n\n[Service]\nExecStart=/usr/local/bin/ollama serve\nUser=ollama\nGroup=ollama\nRestart=always\nRestartSec=3\nEnvironment=\"PATH=/home/duc/.asdf/shims:/home/duc/.asdf/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/duc/.fz&gt;\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\n\n[Install]\nWantedBy=default.target\n</code></pre> <ul> <li>Then reload the service.</li> </ul> <pre><code>systemctl daemon-reload\nsystemctl restart ollama\n</code></pre>","tags":["Linux"]},{"location":"Linux/NeoVim/","title":"NeoVim Introduction","text":"","tags":["Linux"]},{"location":"Linux/NeoVim/#install","title":"Install","text":"<pre><code>sudo apt install neovim\n</code></pre> <ul> <li>To open neovim using command</li> </ul> <pre><code>nvim\n</code></pre>","tags":["Linux"]},{"location":"Linux/NeoVim/#vim_modes","title":"Vim Modes","text":"<ul> <li>By default when we open a file in vim, we are staying at command mode. In this mode we can do action like move, search, copy, delete line and so on.</li> <li>Then if we want to change to insert mode which allow us to write texts into a file. Then we just need to press <code>I</code> or <code>insert</code> for <code>insert mode</code>.  Then if you want to go back to <code>command mode</code> you just need to press <code>esc</code>.</li> </ul>","tags":["Linux"]},{"location":"Linux/NeoVim/#commands","title":"Commands","text":"<ul> <li>To move in neovim</li> </ul> <pre><code>h: to move left\nj: to move down\nk: to move up\nl: to move right\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Mate%20Tips/","title":"Ubuntu Mate Tips","text":"","tags":["Linux"]},{"location":"Linux/Ubuntu%20Mate%20Tips/#change_login_wallpaper","title":"Change Login Wallpaper","text":"<ul> <li>Open the terminal and enter command:</li> </ul> <pre><code>sudo pluma /usr/share/glib-2.0/schemas/30_ubuntu-mate.gschema.override\n</code></pre> <ul> <li>Edit line 2 (<code>background='/usr/share/backgrounds/ubuntu-mate-common/Green-Wall-Logo.png'</code>), replacing the path with the one to your wallpaper and save the changes.</li> </ul> <pre><code>sudo glib-compile-schemas /usr/share/glib-2.0/schemas/\n</code></pre> <ul> <li>Then just log out to see new wallpaper has been set successfully.</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/","title":"Ubuntu Tips","text":"","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#disable_silent_boot","title":"Disable Silent Boot","text":"<ul> <li>Open and edit the grub file with path as below:</li> </ul> <pre><code>sudo gedit /etc/default/grub\n</code></pre> <ul> <li>Then find the <code>GRUB_CMDLINE_LINUX_DEFAULT</code> and edit it as below.</li> </ul> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"fsck.mode=skip\"\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#apply_unity_login_screen_on_2204","title":"Apply Unity Login Screen On 22.04","text":"","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#setup_unity_login_style","title":"Setup Unity Login Style","text":"<ul> <li>Install <code>lightdm</code> and <code>unity-greeter</code></li> </ul> <pre><code>sudo apt install lightdm unity-greeter\n</code></pre> <ul> <li>Then you will see a display manager screen. Choose <code>Ok</code> --&gt; choose <code>lightdm</code>.</li> <li>Once installed, restart your computer and you\u2019ll see the new login screen.</li> <li>Configure LightDM login screen:</li> <li>Open terminal (Ctrl+Alt+T) and run command to install dconf-editor if you don\u2019t have it:</li> </ul> <pre><code>sudo apt install dconf-editor\n</code></pre> <ul> <li>Next, run command to grant lightdm user privilege to access control list:</li> </ul> <pre><code>xhost +SI:localuser:lightdm\n</code></pre> <p>Finally launch dconf editor via lightdm:</p> <pre><code>sudo -u lightdm dconf-editor\n</code></pre> <ul> <li>When it opens, navigate to \u201ccom/canonical/unity-greeter\u201c to change login background.</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#how_to_restore_gnome_login_screen","title":"How to Restore Gnome Login Screen:","text":"<ul> <li>To revert back the original GDM display manager. Firstly, open terminal and run command to disable LightDM:</li> </ul> <pre><code>sudo systemctl disable lightdm.service\n</code></pre> <ul> <li>Then launch the configure screen by running the command below:</li> </ul> <pre><code>sudo dpkg-reconfigure lightdm\n</code></pre> <ul> <li>This time choose <code>gdm3</code> to handle the login screen and hit Enter.</li> <li>Finally, remove lightdm as well as its dependency packages via command:</li> </ul> <pre><code>sudo apt remove --autoremove lightdm unity-greeter\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#disable_automatic_airplane_mode_when_lib_is_open","title":"Disable Automatic Airplane Mode When Lib Is Open","text":"<ul> <li>For laptop user, there could be a quite annoying issue that the <code>Airplane Mode</code> automatically turns on when lid is opened on HP laptop.</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#create_service_to_remap_the_scancode","title":"Create service to remap the scancode","text":"<ul> <li>Firstly, press\u00a0Ctrl+Alt+T\u00a0on keyboard to open terminal. When it opens, run command to create a service file and edit via Gedit text editor:</li> </ul> <pre><code>sudo gedit /etc/systemd/system/hp-keycodes.service\n</code></pre> <ul> <li>When file opens, paste below lines and save it.</li> </ul> <pre><code>[Unit]  \nDescription=HP setkeycodes fix\n\n[Service]  \nType=oneshot  \nRestart=no  \nRemainAfterExit=no  \nExecStart=/usr/bin/setkeycodes e057 240 e058 240\n\n[Install]  \nWantedBy=rescue.target  \nWantedBy=multi-user.target  \nWantedBy=graphical.target\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#enable_the_service","title":"Enable the service","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable hp-keycodes.service\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#undo_the_changes","title":"Undo the changes","text":"<pre><code>sudo systemctl disable hp-keycodes.service\nsudo rm /etc/systemd/system/hp-keycodes.service\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_team_and_slack_sharing_desktop_ubuntu_2204","title":"Fix Team and Slack Sharing Desktop Ubuntu 22.04","text":"<ul> <li>If you are using Ubuntu 22.04 for working you may facing the issue with sharing Desktop with black screen in Team and Slack meetings. So to fix this issue you need to disable wayland as below.</li> </ul> <pre><code>sudo gedit /etc/gdm3/custom.conf\n</code></pre> <ul> <li>Then set the config below.</li> </ul> <pre><code>WaylandEnable=false\n</code></pre> <ul> <li>Then reboot your computer and test sharing your screen on Team and Slack again.</li> <li>Note: If you are using a NVIDIA GeForce Graphic card. So please check what is the additional driver that you are using.  </li> <li>If <code>Nouveau</code> display driver as in the image below. Please <code>don't restart your computer now</code>.</li> </ul> <ul> <li>Let's go to <code>Setting</code> -&gt; <code>Color</code> -&gt; <code>ADd Profile</code> -&gt; <code>Standard Space - SRGB</code></li> </ul> <ul> <li> <p>Then now, you can restart your computer and test sharing your screen on Team and Slack again.</p> </li> <li> <p>You can view more information in links below:</p> <ul> <li>askubuntu.com</li> <li>askubuntu.com</li> </ul> </li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_issue_nvidia_x_setting_empty","title":"Fix Issue NVIDIA X SETTING Empty","text":"<ul> <li>Turn off Secure Boot in BIOS.</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#enable_control_fan_speed_for_nvidia_graphic_card","title":"Enable Control Fan Speed For NVIDIA Graphic Card","text":"<ul> <li>If you are using a NVIDA Graphc Card on Ubuntu you will see that fans of the NVIDIA Graphic Card will not run and if also can't set GPU fan speed as in the image below. You will get the error <code>Failed to set new Fan Speed</code>.</li> </ul> <ul> <li>Now, to handle this issue. Let's go to the directory below.</li> </ul> <pre><code>cd /./etc/X11/\n</code></pre> <ul> <li>Then let's open file <code>Xwrapper.config</code> and make sure this file contains two line below.</li> </ul> <pre><code>sudo gedit Xwrapper.config\n</code></pre> <pre><code># Xwrapper.config (Debian X Window System server wrapper configuration file)\n#\n# This file was generated by the post-installation script of the\n# xserver-xorg-legacy package using values from the debconf database.\n#\n# See the Xwrapper.config(5) manual page for more information.\n#\n# This file is automatically updated on upgrades of the xserver-xorg-legacy\n# package *only* if it has not been modified since the last upgrade of that\n# package.\n#\n# If you have edited this file but would like it to be automatically updated\n# again, run the following command as root:\n#   dpkg-reconfigure xserver-xorg-legacy\nallowed_users=anybody\nneeds_root_rights=yes\n</code></pre> <ul> <li>Then let's save this file and logout and login again.</li> <li>Now, when you open NVIDIA  setting again, and you now can set the new fan speed</li> </ul> <ul> <li>You can view more information there</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#issue_cant_open_ubuntu_software","title":"Issue Can't Open Ubuntu Software","text":"<ul> <li>If you face the issue can't open Ubuntu Software or Postman, just simply run the command below to reinstall Ubuntu Software.</li> </ul> <pre><code>sudo apt install --reinstall gnome-software\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_broken_installs","title":"Fix Broken Installs","text":"<ul> <li>You have broken Installs. To fix it open terminal and run the following commands.</li> </ul> <pre><code>sudo apt-get clean\n\nsudo apt-get install -f\nsudo dpkg --configure -a\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#using_scp","title":"Using SCP","text":"<ul> <li>Using SCP to Download a file from remote machine.</li> </ul> <pre><code>scp user@host:&lt;remote path&gt; &lt;local path&gt;\n</code></pre> <pre><code>scp duc@192.168.1.18:/home/duc/notes/\"sample/ file.txt\" /home/duc/Documents/notes\n</code></pre> <ul> <li>Using SCP to Download a folder from remote machine</li> </ul> <pre><code>scp -r user@host:&lt;remote path&gt; &lt;local path&gt;\n</code></pre> <pre><code>scp duc@192.168.1.18:/home/duc/notes /home/duc/Documents/notes/\n</code></pre> <ul> <li>Using SCP to Upload a file to remote machine.</li> </ul> <pre><code>scp &lt;local path&gt; user@host:&lt;remote path&gt;\n</code></pre> <pre><code>scp /home/duc/Documents/notes/\"sample/ file.txt\" duc@192.168.1.18:/home/duc/notes/\n</code></pre> <ul> <li>Using SCP to Upload a folder to remote machine</li> </ul> <pre><code>scp -r &lt;local path&gt; user@host:&lt;remote path&gt;\n</code></pre> <pre><code>scp /home/duc/Documents/notes duc@192.168.1.18:/home/duc/\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_error_can_not_open_terminal_in_virtual_box","title":"Fix Error Can not Open Terminal In Virtual Box","text":"<ul> <li>If you can not open the Terminal of Ubuntu in Virtual Box. You can do some steps below.</li> <li>Firstly go to <code>Setting</code> --&gt; <code>Region &amp; Language</code></li> <li>Next go to section <code>My Account</code><ul> <li>change <code>Language</code> to `English (United States).</li> <li>change <code>Formats</code> to <code>United States</code>.</li> </ul> </li> <li>Next go to section <code>Login Screen</code><ul> <li>change <code>Language</code> to `English (United States).</li> <li>change <code>Formats</code> to <code>United States</code>.</li> </ul> </li> <li>Finally Reboot the Ubuntu Virtual Machine.</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_can_not_copy_paste_from_parent_machine_to_virtual_machine","title":"Fix Can Not Copy &amp; Paste From Parent Machine To Virtual Machine","text":"<ul> <li>In Ubuntu Virtual Box choose <code>Devices</code> then choose <code>Insert Guest Additions CD Image...</code></li> <li>Then open injected Image Disk and run commands below.</li> </ul> <pre><code>su root\n</code></pre> <pre><code>sudo usermod -a -G sudo vboxuser\n</code></pre> <pre><code>su vboxuser\n</code></pre> <ul> <li>Then run command below to install tools.</li> </ul> <pre><code>sudo ./VBoxLinuxAdditions.run\n</code></pre> <ul> <li>Finally reboot the Ubuntu virtual machine then you can copy &amp; paste between parent and Ubuntu virtual machine.</li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_can_not_start_virtual_machine_in_virtual_box","title":"Fix Can Not Start Virtual Machine In Virtual Box","text":"<ul> <li>When you start the virtual machine in the virtual box, after upgrading Ubuntu to the higher version, if you got the error as below.</li> </ul> <pre><code>The VirtualBox Linux kernel driver is either not loaded or not set up correctly. Please try setting it up again by executing '/sbin/vboxconfig' as root.\n</code></pre> <ul> <li>So you can run the commands below to fix it.</li> </ul> <pre><code>sudo apt install --reinstall virtualbox-dkms &amp;&amp; sudo apt install libelf-dev\nsudo /sbin/vboxconfig\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#update_ubuntu_software_app","title":"Update Ubuntu Software App","text":"<ul> <li>Run command below to update Ubuntu Software app after upgraded Ubuntu version to 24.04.</li> </ul> <pre><code>sudo snap refresh\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#to_kill_a_process_with_pid","title":"To Kill A Process With Pid","text":"<pre><code>sudo kill &lt;PID&gt;\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_issue_cant_update_kubernetes_with_apt_update_in_ubuntu_2204","title":"Fix Issue Can't Update kubernetes With Apt Update In Ubuntu 22.04","text":"<pre><code>echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n</code></pre> <pre><code>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n</code></pre> <pre><code>sudo apt update\n</code></pre>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#upgrade_ubuntu_2204_to_2404","title":"Upgrade Ubuntu 22.04 To 24.04","text":"<ul> <li>Upgrade to Ubuntu 24.04 LTS from Ubuntu 22.04.4.<ul> <li>Can not upgrading directly from Ubuntu 22.04.4 to 24.04 LTS using the\u00a0<code>do-release-upgrade</code>\u00a0command because the official upgrade path isn\u2019t available yet.</li> <li>So upgraded Ubuntu 22.04.4. to Ubuntu 23.10 and then upgraded Ubuntu 23.10 to 24.04 LTS.</li> </ul> </li> </ul>","tags":["Linux"]},{"location":"Linux/Ubuntu%20Tips/#fix_can_not_open_chrome_on_ubuntu_2404","title":"Fix Can Not Open Chrome on Ubuntu 24.04","text":"<ul> <li>Remove the old configuration.</li> </ul> <pre><code>rm ~/.config/google-chrome/ -rf\n</code></pre>","tags":["Linux"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/","title":"ExpressJS Advanced Topics","text":"","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#middleware","title":"Middleware","text":"<ul> <li>In ExpressJS we already mentioned about the Middleware. So, basically the Middleware function is basically a function that takes a request object, and either returns a response to the client, or passes control to another Middleware function.</li> <li>So in <code>express</code>, every route handler function we have is technically a Middleware function, because it takes a request option, and in this case it returns a response to the client, so it terminates the request response cycle. </li> </ul> <ul> <li>Express includes a few built in Middleware functions, but we can also create custom Middleware functions that we can put at the front of our request processing pipeline. So every request that we get on the server, will go through our Middleware function, but this custom Middleware function, we can perform cross cutting concerns. For example, we can do logging, authentication, authorization, and so on.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#create_a_custom_middleware","title":"Create A Custom Middleware","text":"<ul> <li>Before beginning with the example, we will clone the existing example <code>express-demo</code> in ExpressJS and name it as <code>express-demo-middleware</code>.</li> <li>To use a Middleware function into <code>Express</code> we need to use the method <code>use</code>. For example.</li> </ul> <pre><code>app.use(express.json());\n...\n</code></pre> <ul> <li> <p>In Express, the <code>use()</code> method is a core function that is used to apply middleware to the application's request-response cycle.</p> <ul> <li> <p>Add Middleware Globally: We can use <code>app.use()</code> to add middleware that will be executed for every request made to the application. This is often used for tasks like logging, authentication, parsing request bodies, setting headers, and more.</p> </li> <li> <p>Add Middleware to Specific Routes: We can use <code>app.use()</code> with a specific path to apply middleware only to requests that match that path. For example, <code>app.use('/api', middlewareFunction)</code> would apply the middleware only to routes that start with <code>/api</code>.</p> </li> <li> <p>Chain Multiple Middleware Functions: We can chain multiple middleware functions together using multiple <code>app.use()</code> calls, which will execute in the order they are added.</p> </li> </ul> </li> </ul> <pre><code>const express = require('express');\nconst app = express();\n\n// Global Middleware\napp.use((req, res, next) =&gt; {\n    console.log('Middleware 1 - Global');\n    next(); // Pass control to the next middleware\n});\n\n// Middleware for a specific route\napp.use('/api', (req, res, next) =&gt; {\n    console.log('Middleware 2 - /api');\n    next();\n});\n\n// Another global middleware\napp.use((req, res, next) =&gt; {\n    console.log('Middleware 3 - Global');\n    next();\n});\n\napp.listen(3000, () =&gt; {\n    console.log('Server started on port 3000...');\n});\n</code></pre> <ul> <li> <p>Creating a Middleware function in Express involves defining a JavaScript function that takes three arguments: <code>req</code> (request), <code>res</code> (response), and <code>next</code>. The <code>next</code> argument is a function that, when called, passes control to the next middleware in the stack. If <code>next</code> is not called, the request-response cycle will not proceed beyond this middleware.</p> </li> <li> <p>Okay, let's start with simple global Middleware functions. Let's create 2 files: <code>logger.js</code> and <code>authentication.js</code> with the content as below in our <code>express-demo-middleware</code>.</p> </li> </ul> logger.js<pre><code>function log(req, res, next) {\n  console.log(\"Logging...\");\n  next();\n}\n\nmodule.exports = log;\n</code></pre> authentication.js<pre><code>function authenticate(req, res, next) {\n  console.log(\"Authenticating...\");\n  next();\n}\n\nmodule.exports = authenticate;\n</code></pre> <ul> <li>As we can see, two methods above contains 3 arguments <code>req</code>, <code>res</code> and <code>next</code> and we will call <code>next()</code> at the end of the function to make sure we pass the control to the other Middleware.</li> <li>Next, we will import those Middleware functions and use them as in the code below.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Now, let's start our node application and try to call any api, then we can see the Middleware functions are triggered.</li> </ul> <p></p> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nlistening on port 5000...\nLogging...\nAuthenticating...\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#built-in_middleware","title":"Built-In Middleware","text":"<ul> <li>In express we have a few built in Middleware functions. Below is the table contains all the built-in Middleware functions of Express.</li> </ul> Middleware Function Description <code>express.json()</code> Parses incoming JSON payloads and makes the parsed data available on <code>req.body</code>. <code>express.urlencoded()</code> Parses incoming URL-encoded payloads and makes the parsed data available on <code>req.body</code>. <code>express.text()</code> Parses incoming request payloads as plain text and makes the data available on <code>req.body</code>. <code>express.raw()</code> Parses incoming request payloads as buffers and makes the data available on <code>req.body</code>. <code>express.static()</code> Serves static files (e.g., HTML, CSS, images) from a specified directory. <code>express.Router()</code> Creates a modular route handler using the <code>Router</code> class. <code>express.cookieParser()</code> Parses <code>Cookie</code> header and populates <code>req.cookies</code> with an object of cookie key-value pairs. <code>express.session()</code> Adds session support, allowing you to store user data across requests. <code>express.csrf()</code> Implements Cross-Site Request Forgery (CSRF) protection by generating and validating tokens. <code>express.logger()</code> Logs information about incoming requests, including method, URL, response status, and response time. <code>express.compress()</code> Compresses response data before sending it to the client to reduce transfer size. <code>express.timeout()</code> Sets a maximum request processing time, terminating requests that exceed the specified duration. <code>express.errorHandler()</code> Handles errors and sends appropriate error responses. <code>express.cookieSession()</code> Provides session support by storing session data in cookies. <code>express.bodyParser()</code> Parses incoming request bodies (deprecated in favor of <code>express.json()</code> and <code>express.urlencoded()</code>). <code>express.methodOverride()</code> Overrides HTTP methods (e.g., POST to PUT/DELETE) using the <code>_method</code> query parameter or <code>X-HTTP-Method-Override</code> header. <code>express.basicAuth()</code> Implements basic authentication for routes. <code>express.query()</code> Parses the query string and populates <code>req.query</code> with the parsed query parameters. <code>express.responseTime()</code> Adds an <code>X-Response-Time</code> header to responses indicating the response time in milliseconds. <code>express.favicon()</code> Serves a favicon (icon associated with a website) from a specified file. <code>express.directory()</code> Serves a directory listing of files in a specified directory. <code>express.limit()</code> Limits the size of incoming request bodies. <code>express.vhost()</code> Supports virtual hosting (multiple domains on a single server) by directing requests to different middleware based on the host value. <code>express.jsonp()</code> Responds to JSONP requests (cross-domain requests using the <code>&lt;script&gt;</code> tag) by wrapping the JSON response in a callback function. <code>express.rawBody()</code> Provides raw request bodies without parsing. <code>express.sslify()</code> Redirects HTTP requests to HTTPS for secure communication. <code>express.xmlBodyParser()</code> Parses incoming XML request payloads and makes the parsed data available on <code>req.body</code>. <code>express.cors()</code> Adds Cross-Origin Resource Sharing (CORS) headers to responses, allowing controlled sharing of resources across domains. <ul> <li>Now, let's take an example for using built-in middlewares, we will use <code>express.urlencoded()</code> and <code>express.static()</code> methods as below.</li> </ul> <pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\n\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>With <code>app.use(express.urlencoded({extended: true}));</code> we will parses incoming request payloads as plain text and makes the data available on <code>req.body</code>.</li> <li>Next with <code>app.use(express.static('public'));</code> we will serve a static files (e.g., HTML, CSS, images) from a specified directory <code>public</code>.</li> <li>Let's create a folder <code>public</code> which contains a simple <code>index.html</code> file as below.</li> </ul> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    This is a static html file!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Then let's start the node application and use postman to test the <code>express.urlencoded()</code> built-in middleware as below.</li> </ul> <ul> <li>Then if we use browser and open <code>localhost:5000</code> we can see the static html file is loaded as below.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#third-party_middleware","title":"Third-Party Middleware","text":"<ul> <li>Third-party middleware in Express refers to middleware functions that are not built-in to the Express framework itself but are instead developed and maintained by the broader developer community. These middleware modules are created to handle specific tasks or functionalities that might be common in web applications, such as authentication, logging, data validation, security enhancements, and more.</li> <li>We can find all of third-party middleware at this official link of Express.</li> <li>Let's take an example by using some third-party middleware like Helmet and Morgan which are used for securing Express apps by setting HTTP response headers and logging HTTP Requests.</li> <li>Firstly, let's install the <code>Helmet</code> and <code>Morgan</code> third-party middlewares as below.</li> </ul> <pre><code>npm install helmet\nnpm install morgan\n</code></pre> <ul> <li>Then we use them in the <code>index.js</code> file as below.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\napp.use(morgan('tiny'));\n\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Now, let's start node application and call any api we will get the results as below.</li> </ul> <ul> <li>As you can see, with <code>Helmet</code> middleware we can see there are many security headers added into the response.</li> <li>Then if we look into the node application log, we can see the api that we call had logged.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nlistening on port 5000...\nLogging...\nAuthenticating...\nGET /api/courses 200 82 - 1.230 ms\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#environments","title":"Environments","text":"<ul> <li>In a more complex, or enterprise like application, we need to know what environment our code is running on. Is this a development environment, or a production environment?Perhaps we may want to enable or disable certain features based on the current environment. </li> <li>We learned about this process object in Global Object, this global object gives us the way to access to the current process. This process object has a property called <code>env</code>, which gives us the environment variables.</li> <li>Now we have a standard environment variable called <code>NODE_ENV</code>, and this environment variable returns the environment for this node application. If it's not set, here we're going to get undefined.</li> </ul> <pre><code>process.env.NODE_ENV  //return undifined if NODE_ENV is not set\n</code></pre> <ul> <li>Now we have another way to get the current environment, and that is for the app object. So this app object has a method called get that we use to get various settings about this application.</li> </ul> <pre><code>app.get('env');\n</code></pre> <ul> <li> <p>This method internally uses this environment variable to detect the current environment. However, if this environment variable is not set, this will return <code>development</code> by default.</p> </li> <li> <p>Okay let's add the log below into the <code>index.js</code> file.</p> </li> </ul> <pre><code>console.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n</code></pre> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\napp.use(morgan('tiny'));\n\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Now, when we start the application then we can see in the node application log 2 results <code>undefined</code> and <code>development</code> as below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: undefined\napp: development\nlistening on port 5000...\n</code></pre> <ul> <li>Then if we want to enable <code>morgan</code> only on the development machine. So we can write code like this.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  console.log('Morgan enabled...');\n}\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Now, let's start the node application then you can see the <code>Morgan</code> is enabled as below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: undefined\napp: development\nMorgan enabled...\nlistening on port 3000...\n</code></pre> <ul> <li>Then now, let's set env as <code>test</code> then we can see the <code>Morgan</code> is not enabled as below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ export NODE_ENV=test\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: test\napp: test\nlistening on port 3000...\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#configuration","title":"Configuration","text":"<ul> <li>Okay, now we will continue to learn how to store configuration settings for our node application and override them in each environment.</li> <li>There are many node packages for managing configuration and the most popular one is <code>config</code>.</li> <li>The <code>config</code> provides a way to define configuration parameters for different environments (development, production, testing, etc.) and makes it easy to access these settings within our code.</li> <li> <p>The <code>config</code> package allows use to:</p> <ul> <li>Define configuration files in various formats (JSON, YAML, etc.) for different environments.</li> <li>Access configuration values based on a hierarchical structure that includes environment-specific overrides.</li> <li>Easily switch between different configurations based on the environment in which your application is running.</li> <li>Provide default values for configuration options.</li> <li>Keep sensitive data, such as API keys or database credentials, separate from your code.</li> </ul> </li> <li> <p>Now, let's install <code>config</code> for using.</p> </li> </ul> <pre><code>npm install config\n</code></pre> <ul> <li>After that, let's create a folder <code>config</code> for storing application configurations following environment.</li> <li>In side the folder config, let's create 3 json files: <code>default.json</code>, <code>development.json</code> and <code>production.json</code> as below.</li> </ul> default.json<pre><code>{\n    \"name\": \"My Express App\"\n}\n</code></pre> development.json<pre><code>{\n    \"name\": \"My Express App - Development\",\n    \"mail\": {\n        \"host\": \"dev-mail-server\"\n    }\n}\n</code></pre> production.json<pre><code>{\n    \"name\": \"My Express App - Production\",\n    \"mail\": {\n        \"host\": \"prod-mail-server\"\n    }\n}\n</code></pre> <ul> <li>Then in the <code>index.js</code> , let's import the <code>config</code> package, then to get the configuration in json files we just simply use <code>config.get('&lt;fieldName&gt;')</code> as in the example below.</li> </ul> index.js<pre><code>const config = require('config');\nconst Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\n\n// Configuration\nconsole.log('Application Name: ' + config.get('name'));\nconsole.log('Mail Server: ' + config.get('mail.host'));\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  console.log('Morgan enabled...');\n}\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>As we can see, we will log out values that we get from json file using <code>config</code>. Let's start our node application with <code>development</code> env then we can see the result as below.</li> </ul> <pre><code>export NODE_ENV=development\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ export NODE_ENV=development\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: development\napp: development\nApplication Name: My Express App - Development\nMail Server: dev-mail-server\nMorgan enabled...\nlistening on port 5000...\n</code></pre> <ul> <li>Then let's try with <code>production</code> env.</li> </ul> <pre><code>export NODE_ENV=production\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ export NODE_ENV=production\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: production\napp: production\nApplication Name: My Express App - Production\nMail Server: prod-mail-server\nlistening on port 5000...\n</code></pre> <ul> <li>Okay, please note that in the json configuration files, we should not put sensitive value such as username/password or credentials because when we're checking our source code, to a repository, that password or that secret is visible to anyone who has access to that source control repository. So to deal with it we let's store these secrets in environment variables.</li> <li>For example, we will export an <code>app_password</code> environment variable and we will use config module to read it.</li> </ul> <pre><code>export app_password=123456\n</code></pre> <ul> <li>Then let's create a json file <code>custom-environment-variables.json</code> with the value is the environment name  that we have just exported above.</li> </ul> custom-environment-variables.json<pre><code>{\n    \"mail\": {\n        \"password\": \"app_password\"\n    }\n}\n</code></pre> <ul> <li>Next, let's go back to the <code>index.js</code> and add a  using the config module to get the environment variable through <code>custom-environment-variable.json</code> as below.</li> </ul> index.js<pre><code>const config = require('config');\nconst Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\napp.use(express.json());\n\napp.use(logger);\napp.use(authentication);\n\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\n\n// Configuration\nconsole.log('Application Name: ' + config.get('name'));\nconsole.log('Mail Server: ' + config.get('mail.host'));\n// console.log('Mail Password: ' + config.get('mail.password'));\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  console.log('Morgan enabled...');\n}\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Now, let's reload our node application again then we can see the <code>app_password</code> that we set into the environment.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-middleware$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: production\napp: production\nApplication Name: My Express App - Production\nMail Server: prod-mail-server\nMail Password: 123456\nlistening on port 5000...\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#debugging","title":"Debugging","text":"<ul> <li>When we work with nodejs, we usually use <code>console.log</code> for debug logging but this approach has some problems because not every time we will need to log out and usually we will remove it when we have done some code implementation and when we need it again we have to add the <code>console.log</code> manually. It will take time for us.</li> <li>So there is a better way is using <code>debug</code> node package.</li> <li> <p>The <code>debug</code> package is a third-party npm package for debugging Node.js applications. It provides a flexible and convenient way to add debug logs to your codebase, allowing you to toggle these logs on and off based on environment variables. The <code>debug</code> package is particularly useful for gaining insights into the behavior of your application during development and troubleshooting issues.</p> <ul> <li>Namespaced Debugging: The <code>debug</code> package allows you to create debug instances with different namespaces. This makes it easy to categorize and control different parts of your application's debugging output.</li> <li>Environment-Based Control: Debugging logs can be enabled or disabled based on environment variables. This means you can keep the debug logs in your code and control their visibility without having to modify the code itself.</li> <li>Color-Coded Output: The <code>debug</code> package provides color-coded output for better readability of debugging messages.</li> <li>Configurable Output Streams: You can configure where the debugging logs are sent. By default, they are sent to the console, but you can redirect them to other streams, such as files.</li> </ul> </li> <li> <p>Now, firstly let's create another project name <code>express-demo-debug</code> with the <code>package.json</code> as below.</p> </li> </ul> package.json<pre><code>{\n  \"name\": \"express-demo-debug\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"morgan\": \"^1.10.0\",\n    \"nodemon\": \"^3.0.1\"\n  }\n}\n</code></pre> <ul> <li>Then, let's create a simple <code>index.js</code> file as below.</li> </ul> index.js<pre><code>const express = require(\"express\");\nconst app = express();\nconst morgan = require('morgan');\n\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  console.log('Morgan enabled...');\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Then, let's install the <code>debug</code> node package using the command below.</li> </ul> <pre><code>npm install debug\n</code></pre> <ul> <li>Okay, let's create debug instances with namespaces. To create an instance with a namespace we will use the syntax as below.</li> </ul> <pre><code>const namespace = require('debug')('&lt;namespace&gt;');\n</code></pre> <ul> <li>In the example below we will create 2 namespaces <code>app:startup</code> and <code>app:db</code> and use them for logging information.</li> </ul> index.js<pre><code>const startupDebugger = require('debug')('app:startup');\nconst dbDebugger = require('debug')('app:db');\nconst express = require(\"express\");\nconst app = express();\nconst morgan = require('morgan');\n\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  startupDebugger('Morgan enabled...');\n}\n\n// DB work...\ndbDebugger('Connected to the database...');\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Next, we will set environment variable to decide which namespace we will use for debugging in our node application. For example we will use the namespace <code>app:startup</code>.</li> <li>So let's export an environment variable <code>DEBUG</code> with value is the namespace <code>app:startup</code></li> </ul> <pre><code>export DEBUG=app:startup\n</code></pre> <ul> <li>Then let's start our node application then you can see the result as below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ export DEBUG=app:startup\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\n  app:startup Morgan enabled... +0ms\nlistening on port 3000...\n</code></pre> <ul> <li>As you can see, only the log with namespace <code>app:startup</code> is logged out.</li> <li>Let's try to set the <code>DEBUG</code> environment with value <code>app:db</code> and start the node application again.</li> </ul> <pre><code>export DEBUG=app:db\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ export DEBUG=app:db\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\n  app:db Connected to the database... +0ms\nlistening on port 3000...\n</code></pre> <ul> <li> <p>Again, only the log with namespace <code>app:db</code> is logged out.</p> </li> <li> <p>Okay then, if we want to apply multiple namespace we can set the value for <code>DEBUG</code> environment as below.</p> </li> </ul> <pre><code>export DEBUG=app:startup,app:db\n</code></pre> <ul> <li>We will use the <code>,</code> between namespaces.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ export DEBUG=app:startup,app:db\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\n  app:startup Morgan enabled... +0ms\n  app:db Connected to the database... +0ms\nlistening on port 3000...\n</code></pre> <ul> <li>In case, we want to apply all the namespaces we can set like this.</li> </ul> <pre><code>export DEBUG=app:*\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ export DEBUG=app:*\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\n  app:startup Morgan enabled... +0ms\n  app:db Connected to the database... +0ms\nlistening on port 3000...\n</code></pre> <ul> <li>Now there's also a faster way to set the level of debugging we want to see, so we don't have to explicitly set the environment variable, using the export command. We can set the environment variable at the time of writing our application using the command below.</li> </ul> <pre><code>DEBUG=app:db nodemon index.js\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-debug$ DEBUG=app:db nodemon index.js\n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\n  app:db Connected to the database... +0ms\nlistening on port 3000...\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#templating_engines","title":"Templating Engines","text":"<ul> <li>A templating engine in Node.js is a tool that helps generate dynamic HTML content by combining templates and data. It allows us to create reusable templates with placeholders that are replaced with actual data when the template is rendered. This is particularly useful for generating web pages, emails, or any other content where you need to display dynamic data.</li> <li>There are various templating engines available for express applications. The most popular ones are <code>Pug</code>, which used to be called <code>Jade</code>. We also have <code>Mustache</code>, and <code>EGS</code>.</li> <li>Okay now, let's take an example with <code>Pug</code>.</li> <li>Firstly, let's clone project <code>express-demo-middleware</code> and name it as <code>express-demo-pug</code>.</li> <li>Next, let's install <code>Pug</code> as in the command below.</li> </ul> <pre><code>npm install pug\n</code></pre> <ul> <li>Next, let's create a folder <code>views</code> with a <code>pub</code> file <code>index.pug</code> as below.</li> </ul> index.pug<pre><code>html\n    head \n        title= title \n    body \n        h1= message\n</code></pre> <ul> <li>The title element's content is dynamically set using the Pug variable title. The = syntax denotes interpolation, meaning the value of title will be inserted into the HTML.</li> <li> <p>Inside the <code>&lt;body&gt;</code>, there is an <code>h1</code> element. Similar to before, the <code>h1</code> element's content is dynamically set using the Pug variable <code>message</code>.</p> </li> <li> <p>Then let's configure <code>express</code> to use <code>pug</code> as in the code below.</p> </li> </ul> <pre><code>app.set('view engine', 'pug');\napp.set('views', './views'); //default\n</code></pre> <ul> <li>Then let's update the default api <code>/</code> which will return an html file with the response as below.</li> </ul> <pre><code>//...\nres.render('index', {title: 'My Express App', message: 'Hello'});\n//...\n</code></pre> <ul> <li>As you can see, the first argument contains <code>index</code>  value, it is the name of <code>pug</code> file in folder <code>views</code>.  The second argument is the object that contain <code>key-value</code> pairs in which the key set in <code>index.pug</code>.</li> </ul> index.js<pre><code>const config = require('config');\nconst Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./logger');\nconst authentication = require('./authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\napp.set('view engine', 'pug');\napp.set('views', './views'); //default\n\napp.use(express.json());\napp.use(logger);\napp.use(authentication);\n\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\n\n// Configuration\nconsole.log('Application Name: ' + config.get('name'));\nconsole.log('Mail Server: ' + config.get('mail.host'));\nconsole.log('Mail Password: ' + config.get('mail.password'));\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  console.log('Morgan enabled...');\n}\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.render('index', {title: 'My Express App', message: 'Hello'});\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Now, let's start our node application and go to browser, we will see the result as below.</li> </ul> <p></p>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#structuring_express_applications","title":"Structuring Express Applications","text":"<ul> <li>In a real world application we don't want to write all that code inside <code>index.js</code>. So in this lecture, we will learn how to structure our application.</li> <li>Firstly, let's clone the project <code>express-demo-pug</code> to new project <code>express-demo-structure</code>.</li> <li>Then we will restructure the apis, let's create a folder <code>routes</code> and create a js file base on the api. For example in the <code>index.js</code> we have <code>/api/courses</code> apis. So we will create <code>courses.js</code> file in <code>routes</code> folder as below.</li> </ul> routes/course.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\nrouter.get(\"/\", (req, res) =&gt; {\n  res.send(courses);\n});\n\nrouter.get(\"/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\nrouter.post(\"/\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\nrouter.put(\"/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\nrouter.delete(\"/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nmodule.exports = router;\n</code></pre> <ul> <li>As you can see, we will use <code>express.Router()</code> to create a router object and we don't need to add <code>/api/courses</code> for every api again, we will do it in <code>index.js</code>. At the end of this file we will export the router object.</li> <li>We will do the same for home api <code>/</code> with file <code>home.js</code> as below.</li> </ul> home.js<pre><code>const express = require('express');\nconst router = express.Router();\n\nrouter.get(\"/\", (req, res) =&gt; {\n    res.render('index', {title: 'My Express App', message: 'Hello'});\n  });\n\nmodule.exports = router;  \n</code></pre> <ul> <li>Next, as we remember that in the <code>index.js</code> we have used a middlewares name <code>logger</code> and <code>authentication</code> from <code>logger.js</code> and <code>authentication.js</code> files respectively. So let's create a folder <code>middleware</code> and move these <code>js</code> files there.</li> <li>Finally in the <code>index.js</code>, we will remove all apis, we just need to import routes and middlewares and use them.</li> </ul> index.js<pre><code>const config = require('config');\nconst express = require(\"express\");\nconst app = express();\nconst logger = require('./middleware/logger');\nconst authentication = require('./middleware/authentication');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst courses = require('./routes/courses');\nconst home = require('./routes/home');\n\napp.set('view engine', 'pug');\napp.set('views', './views'); //default\n\napp.use(express.json());\napp.use(logger);\napp.use(authentication);\n\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log(`app: ${app.get('env')}`);\n\napp.use(express.urlencoded({extended: true}));\napp.use(express.static('public'));\napp.use(helmet());\napp.use('/api/courses', courses);\napp.use('/', home);\n\n\n// Configuration\nconsole.log('Application Name: ' + config.get('name'));\nconsole.log('Mail Server: ' + config.get('mail.host'));\nconsole.log('Mail Password: ' + config.get('mail.password'));\n\nif (app.get('env') === 'development') {\n  app.use(morgan('tiny'));\n  console.log('Morgan enabled...');\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>As you can see, for the imported routes. We will define the path for specific route that we imported.</li> </ul> index.js<pre><code>//...\napp.use('/api/courses', courses);\napp.use('/', home);\n//...\n</code></pre> <ul> <li>Let's start our node application again then we can see it can run normally.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo-structure$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nNODE_ENV: undefined\napp: development\nApplication Name: My Express App - Development\nMail Server: dev-mail-server\nMail Password: 1234\nMorgan enabled...\nlistening on port 3000...\n</code></pre> <ul> <li>Okay, that's all we will learn about connecting to MongoDb and setup authentication in next lectures.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#see_also","title":"See Also","text":"<ul> <li>ExpressJS</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS%20Advanced%20Topics/#references","title":"References","text":"<ul> <li>Node.js: The Complete Guide to Build RESTful APIs</li> <li>Full Source Code</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/","title":"ExpreesJS Introduction","text":"","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#what_is_the_expressjs","title":"What Is The ExpressJs?","text":"<ul> <li> <p><code>Express.js</code> is a small framework that works on top of NodeJs web server functionality to simplify its APIs and add helpful new features. It makes it easier to organize your application\u2019s functionality with <code>middleware</code> and <code>routing</code>. It adds helpful utilities to NodeJs HTTP objects and facilitates the rendering of dynamic HTTP objects.</p> </li> <li> <p>More information (https://www.geeksforgeeks.org/introduction-to-express/?ref=lbp)</p> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#why_expressjs","title":"Why ExpressJs?","text":"<ul> <li>Develops NodeJs web applications quickly and easily.</li> <li>It\u2019s simple to set up and personalise.</li> <li>Allows you to define application routes using HTTP methods and URLs.</li> <li>Includes a number of middleware modules that can be used to execute additional requests and responses activities.</li> <li>Simple to interface with a variety of template engines, including Jade, Vash, and EJS.</li> <li> <p>Allows you to specify a middleware for handling errors.</p> </li> <li> <p>More information (https://www.geeksforgeeks.org/introduction-to-express/?ref=lbp)</p> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#what_is_the_middleware","title":"What Is The Middleware?","text":"<ul> <li> <p><code>Middleware</code> in a NodeJs application refers to functions or modules that are executed in between the processing of an incoming request and the generation of a response. Middleware functions have access to the request and response objects, as well as the <code>next</code> function, which is used to pass control to the next middleware function in the chain.</p> </li> <li> <p><code>Middleware</code> functions can be used for a variety of purposes, such as logging, authentication, data validation, error handling, and more. They provide a way to modularize and organize the functionality of an application by breaking it into smaller, reusable components.</p> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#install_express","title":"Install Express","text":"<ul> <li>Now, let's create a project <code>express-demo</code> then run <code>npm init</code> to initialize <code>package.json</code>. After that let's install <code>Express</code> dependency to project by using the command below.</li> </ul> <pre><code>npm install express\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#building_first_web_server","title":"Building First Web Server","text":"<ul> <li>Okay, so let's create a file <code>index.js</code> and put the example code below.</li> </ul> index.js<pre><code>//imports the Express module\nconst express = require('express');\n\n//create an instance of the Express application by calling the `express()` function\nconst app = express();\n\n//defines a route for the HTTP GET request to the root URL path\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World');\n});\n\n//defines another route for the HTTP GET request to the path '/api/courses'\napp.get('/api/courses', (req, res) =&gt; {\n    res.send([1,2,3]);\n});\n\n\n//starts the Express server and makes it listen on port 3000\napp.listen(3000, () =&gt; console.log('listening on port 3000...'))\n</code></pre> <ul> <li>Okay, as you can see, we will use <code>require('express')</code> to import express module and we will create an instance of the Express application by calling the <code>express()</code> function and this instance will be stored in the constant  <code>app</code>. </li> <li>Next, from the <code>app</code> we can use supported functions of <code>express</code> to create Apis and start the server which will listen on given port (Ex: 3000). If the server is started successfully then a log will be printed out.</li> <li>Finally, let's start the <code>express-demo</code> and go to browser with 2 exported apis above, we can see the result as below.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#nodemon","title":"Nodemon","text":"<ul> <li><code>Nodemon</code> is a utility tool for NodeJs developers that helps with development workflow by automatically restarting the NodeJs application whenever changes are made to the source code files. It stands for \"Node Monitor,\" and its primary purpose is to save developers from manually stopping and restarting the NodeJs application each time they modify the code.</li> <li>To install <code>Nodemon</code>, let's use the command below.</li> </ul> <pre><code>npm install -g nodemon\n</code></pre> <ul> <li>Now, instead of starting our node application by using <code>node index.js</code>. We will start it with <code>nodemon</code>.</li> </ul> <pre><code>nodemon index.js\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nlistening on port 3000...\n</code></pre> <ul> <li>Now, if we make any change, then the server will be restarted automatically.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nlistening on port 3000...\n[nodemon] restarting due to changes...\n[nodemon] starting `node index.js`\nlistening on port 3000...\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#environment_variables","title":"Environment Variables","text":"<ul> <li>As we can see, in our code the server port is hard code with port 3000, it is worked on our machine but maybe it will not work on other machine. We should not force every machine have to spend port 3000 for our application. So to fix it, we can use an<code>environment variable</code>.</li> <li>An environment variable is basically a variable that is part of the environment in which a process runs. Its value is set outside this application.</li> <li>To read a value from the environment with nodejs we can use the syntax below.</li> </ul> <pre><code>process.env.&lt;Name Of Environment&gt;\n</code></pre> index.js<pre><code>const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!!!');\n});\n\napp.get('/api/courses', (req, res) =&gt; {\n    res.send([1,2,3]);\n});\n\n//Read the value of evnironment variable name PORT or 3000\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`))\n</code></pre> <ul> <li> <p>As we can see, we will read the value from the environment variable name <code>PORT</code> and if this environment variable doesn't exist then we will get the value 3000 for the port.</p> </li> <li> <p>Now, to set an environment variable name <code>PORT</code> to our machine we can use the command below.</p> </li> </ul> <pre><code>export &lt;ENV Name&gt;=&lt;ENV value&gt;\n</code></pre> <pre><code>export PORT=5000\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo$ export PORT=5000\nduc@duc-MS-7E01:~/study/nodejs-backend/udemy/express-demo$ nodemon index.js \n[nodemon] 3.0.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,cjs,json\n[nodemon] starting `node index.js`\nlistening on port 5000...\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#route_parameters","title":"Route Parameters","text":"<ul> <li>In Apis, we usually see there are some parameters on the <code>path</code>. So firstly, to define a parameter in the <code>api</code> we can use syntax <code>:&lt;parameterName&gt;</code></li> </ul> <pre><code>app.get('/api/courses/:&lt;paramaterName&gt;', (req, res) =&gt; {\n    //......\n});\n</code></pre> <pre><code>app.get('/api/courses/:id', (req, res) =&gt; {\n    //......\n});\n</code></pre> <ul> <li>The example above show how do we define a parameter <code>id</code> in the api.</li> <li>Next, to read a parameter value that we defined about, we will use <code>req.params.&lt;parameterName&gt;</code>.</li> </ul> <pre><code>app.get('/api/courses/:&lt;parameterName&gt;', (req, res) =&gt; {\n    const id = req.params.&lt;parameterName&gt;;\n});\n</code></pre> <ul> <li>Let's see the example below to read a parameter from the path with <code>express</code>.</li> </ul> index.js<pre><code>const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!!!');\n});\n\napp.get('/api/courses', (req, res) =&gt; {\n    res.send([1,2,3]);\n});\n\napp.get('/api/courses/:id', (req, res) =&gt; {\n    res.send(req.params.id);\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`))\n</code></pre> <ul> <li>With multiple parameters we also have the same way to define and get. Let's see the example below.</li> </ul> index.js<pre><code>const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!!!');\n});\n\napp.get('/api/courses', (req, res) =&gt; {\n    res.send([1,2,3]);\n});\n\napp.get('/api/courses/:id', (req, res) =&gt; {\n    res.send(req.params.id);\n});\n\n// multiple parameters in path and response is the params object\napp.get('/api/courses/:year/:month', (req, res) =&gt; {\n    res.send(req.params);\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`))\n</code></pre> <ul> <li>Okay, So we use <code>route parameters</code> for essential or required values whereas we use <code>query</code> string parameters for anything that is optional.</li> <li>So if we are going to use <code>query</code> string instead of <code>param</code> to provide some additional data to back end services. We will use the <code>req.query.&lt;QueryName&gt;</code>.</li> </ul> <pre><code>app.get('/api/courses/:year/:month', (req, res) =&gt; {\n    const name = req.query.&lt;QueryName&gt;;\n    //...\n});\n</code></pre> <pre><code>app.get('/api/courses/:year/:month', (req, res) =&gt; {\n    const sortBy = req.query.sortBy;\n    //...\n});\n</code></pre> index.js<pre><code>const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!!!');\n});\n\napp.get('/api/courses', (req, res) =&gt; {\n    res.send([1,2,3]);\n});\n\napp.get('/api/courses/:id', (req, res) =&gt; {\n    res.send(req.params.id);\n});\n\napp.get('/api/courses/:year/:month', (req, res) =&gt; {\n    // res.send(req.params);\n    res.send(req.query);\n});\n\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`))\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#handling_http_get_requests","title":"Handling HTTP Get Requests","text":"<ul> <li>Now, let's create some mock data and add them into the response for GET Apis that we created.</li> </ul> index.js<pre><code>const express = require('express');\nconst app = express();\n\nconst courses = [\n    { id: 1, name: \"course 1\" },\n    { id: 2, name: \"course 2\" },\n    { id: 3, name: \"course 3\" }\n]\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!!!');\n});\n\n// Return all the courses\napp.get('/api/courses', (req, res) =&gt; {\n    res.send(courses);\n});\n\n\n// Return the course by the input id\napp.get('/api/courses/:id', (req, res) =&gt; {\n    const course = courses.find(ci =&gt; ci.id === parseInt(req.params.id));\n    if (!course) res.status(404).send('The course with the given Id was not found');\n    res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`))\n</code></pre> <ul> <li>In the <code>/api/courses/:id</code> we will find the item in the mock array following the id, if there the item is not there then an error 404 will be response with a message.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#handling_http_post_requests","title":"Handling HTTP Post Requests","text":"<ul> <li>Now, let's create a POST <code>/api/courses</code> Api to create a Course object and push to the <code>courses</code> array as below.</li> </ul> index.js<pre><code>const express = require(\"express\");\nconst app = express();\n\n// use middleware `express.json` to parse request body to json\napp.use(express.json());\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\n// post api to add a course to courses array\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li> <p>Okay to get the request body json with express we can use <code>req.body</code> and to get the specific field in the request body we can use <code>req.body.&lt;fieldName&gt;</code>. However, by default we can't do that because the <code>req.body</code> is the an object with type <code>ReqBody</code> and we need to use a Middleware <code>express.json()</code> to parse the <code>req.body</code> to json. Let's see the example below.</p> </li> <li> <p>Firstly, we will tell Express to use the middleware <code>express.json()</code>. The <code>express.json()</code> is a built-in middleware function in the Express. Middleware functions in Express are functions that can process incoming HTTP requests before they reach the route handlers. <code>express.json()</code> middleware specifically parses incoming JSON payloads from HTTP requests and makes the parsed data available on the <code>req.body</code> property. It is designed to handle JSON data submitted in the request body, which is commonly used in API endpoints where clients send data in JSON format.</p> </li> </ul> <pre><code>const express = require(\"express\");\nconst app = express();\n\n// use the middle ware\napp.use(express.json());\n\n//....\n</code></pre> <ul> <li>Now, we can get the specific field from <code>req.body</code> json.</li> </ul> index.js<pre><code>const express = require(\"express\");\nconst app = express();\n\napp.use(express.json());\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Okay, let's use postman and call POST <code>/api/courses</code> with request body as below. Then we will receive a successful response.</li> </ul> <pre><code>{\n    \"name\": \"Express Course\"\n}\n</code></pre> <p></p> <ul> <li>Now, let call api GET <code>/api/courses</code>. Then we can see the new course had been added into the mock courses array.</li> </ul> <p></p>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#input_validation_with_joi","title":"Input Validation With Joi","text":"<ul> <li>Okay, when we work with request body of POST Apis we may need to do some validations on fields of request body. In nodejs there is a powerful library can support us which is <code>Joi</code>.</li> <li><code>Joi</code> is a popular and powerful library for input validation and data schema validation in NodeJs applications. It is commonly used with Express to validate and sanitize data received from clients in API requests or any other input data that needs validation.</li> <li>With <code>Joi</code>, we can define a schema for the expected data and validate incoming data against that schema. It allows us to ensure that the data conforms to specific rules, such as required fields, data types, length, format, and more. By validating input data, we can prevent invalid or malicious data from being processed by your application, enhancing security and reliability.</li> <li>Now, to using <code>Joi</code> in our node application we will need to install it by using the command below.</li> </ul> <pre><code>npm install joi\n</code></pre> <ul> <li>After that, we will import the <code>Joi</code> object into our <code>index.js</code> for using.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\n\n//....\n</code></pre> <ul> <li>Now, let's use <code>joi</code> to validate the request body in the POST Api as below.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\n\napp.use(express.json());\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\n// create a Joi schema to validate request body json. \napp.post(\"/api/courses\", (req, res) =&gt; {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required()\n  });\n  const result = schema.validate(req.body);\n  if (result.error) {\n    res.status(400).send(result.error.details);\n    return;\n  }\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>Okay we have <code>const schema = Joi.object({ name: Joi.string().min(3).required() });</code>. This is a <code>Joi</code> schema definition. It defines the validation rules for the incoming data in the request body. In this case, it specifies that the <code>name</code> property must be a string, have a minimum length of 3 characters, and be required (i.e., it cannot be empty).</li> <li>Next we have <code>const result = schema.validate(req.body);</code>: Here, the incoming data in the request body (<code>req.body</code>) is validated against the defined schema using the <code>validate</code> method of the <code>Joi</code> schema object. The <code>result</code> variable will hold the validation result, which includes an <code>error</code> property if the validation fails.</li> <li>Okay now, let's use postman and test with invalid data as below.</li> </ul> <ul> <li>The failed HTTP status and error details will be through if the request body doesn't match with the the validation rules.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#handling_http_put_requests","title":"Handling HTTP Put Requests","text":"<ul> <li>Next, we will continue to create a new PUT Api <code>/api/courses/:id</code> for updating a course in the mock array. In this Api we will do some validations.<ul> <li>Firstly, we will check the course id existed in the mock array or not.</li> <li>Then we will check the request body is valid or not.</li> </ul> </li> <li>Okay, let's see the example code below.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\n\napp.use(express.json());\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) {\n    res.status(400).send(error.details);\n    return;\n  }\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) {\n    res.status(400).send(error.details);\n    return;\n  }\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li> <p>As you can see, we will refactor the code a little bit with function <code>validateCourse</code>, we will use it for POST and PUT Apis. For the result of function <code>validateCourse</code> we are using the syntax <code>{ error }</code> it means in the returned object we only get the <code>error</code> field.</p> </li> <li> <p>Okay now, let's use postman to test this api.</p> </li> </ul> <p></p> <ul> <li>We will get error if the request body is not correct or the id is not found.</li> </ul> <p></p> <p></p> <p></p> <ul> <li>Then if everything is correct then we can see the course with id is updated.</li> </ul> <p></p> <p></p>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#handling_http_delete_requests","title":"Handling HTTP Delete Requests","text":"<ul> <li>Next, we will continue to create a new DELETE Api <code>/api/courses/:id</code> for deleting a course in the mock array. In this Api we just check the course id existed in the mock array or not.</li> <li>Okay, let's see the example code below.</li> </ul> index.js<pre><code>const Joi = require(\"joi\");\nconst express = require(\"express\");\nconst app = express();\n\napp.use(express.json());\n\nconst courses = [\n  { id: 1, name: \"course 1\" },\n  { id: 2, name: \"course 2\" },\n  { id: 3, name: \"course 3\" },\n];\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!!!\");\n});\n\napp.get(\"/api/courses\", (req, res) =&gt; {\n  res.send(courses);\n});\n\napp.get(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n  res.send(course);\n});\n\napp.post(\"/api/courses\", (req, res) =&gt; {\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  const course = {\n    id: courses.length + 1,\n    name: req.body.name,\n  };\n  courses.push(course);\n  res.send(course);\n});\n\napp.put(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const { error } = validateCourse(req.body);\n  if (error) return res.status(400).send(error.details);\n\n  course.name = req.body.name;\n  res.send(course);\n});\n\napp.delete(\"/api/courses/:id\", (req, res) =&gt; {\n  const course = courses.find((ci) =&gt; ci.id === parseInt(req.params.id));\n  if (!course)\n    return res.status(404).send(\"The course with the given Id was not found\");\n\n  const index = courses.indexOf(course);\n  courses.splice(index, 1);\n\n  res.send(course);\n});\n\n// app.get('/api/courses/:year/:month', (req, res) =&gt; {\n//     // res.send(req.params);\n//     res.send(req.query);\n// });\n\nfunction validateCourse(course) {\n  const schema = Joi.object({\n    name: Joi.string().min(3).required(),\n  });\n  return schema.validate(course);\n}\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () =&gt; console.log(`listening on port ${port}...`));\n</code></pre> <ul> <li>As we can see the delete Api is very simple, we just do the check and then delete the item in the array.</li> <li> <p>In the example code above, we also did some bug fixes at validation steps, we will add the <code>return</code>error right at these steps to make sure if the validation is failed then the code will not continue to run to the end of the Api function.</p> </li> <li> <p>Now, let's use postmand and test the delete api.</p> </li> </ul> <p></p> <ul> <li>We will get error if the request body is not correct or the id is not found.</li> </ul> <p></p> <ul> <li>If the id exists in the mock array then we can see the successful result as below.</li> </ul> <p></p> <p></p>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#see_also","title":"See Also","text":"<ul> <li>Node Package Manager</li> <li>ExpressJS Advanced Topics</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/ExpressJS/#references","title":"References","text":"<ul> <li>Node.js: The Complete Guide to Build RESTful APIs</li> <li>npmjs.com</li> <li>Full Source Code</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Global%20Object/","title":"Global Object","text":"","tags":["NodeJs"]},{"location":"NodeJs/Global%20Object/#what_is_the_global_object","title":"What Is The Global Object?","text":"<ul> <li>A global object is\u00a0an object that always exists in the global scope. In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the var keyword, they're created as members of the global object. (In NodeJs this is not the case.)</li> <li>We used this <code>console.log</code> function to log something on the console. Now this <code>console object</code> is what we call a <code>global object</code>. So its part of the <code>global</code> scope which means we can access it anywhere, in any files.</li> </ul> app.js<pre><code>var message = \"text message!\";\nconsole.log(message); //global.console.log(message)\n</code></pre> <ul> <li>We have a bunch of other objects and functions that are also globally available in Node.</li> <li>In Node when we try to define global variables with <code>var</code> keyword, they are not assigned into the global scope they are only a scope to the current js file (Ex: app.js) and not available out side of it. And this is because of Node's modular system.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Global%20Object/#see_also","title":"See Also","text":"<ul> <li>NodeJs Introduction</li> <li>Modules</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Global%20Object/#references","title":"References","text":"<ul> <li>Node.js: The Complete Guide to Build RESTful APIs</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Modules/","title":"Modules","text":"","tags":["NodeJs"]},{"location":"NodeJs/Modules/#what_are_modules","title":"What Are Modules?","text":"<ul> <li>So every file in a Node application is considered as a module. The variables and functions defined in that file or module are a scope to that file. In object oriented programming, terms we say they are private, they are not available outside that container, outside that module. </li> <li>If you want to use a variable or a function defined in a module, outside that module, you need to explicitly export it and make it public.</li> <li>In every Node application has at least one file or one module which we call the main module.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#create_a_module","title":"Create A Module","text":"<ul> <li>To create a module, we just simply create a js file, then we will need to use the <code>exports</code> keyword to tell NodeJs that the function can be used outside the module.</li> </ul> logger.js<pre><code>function log(message) {\n    console.log(message);\n}\n\nmodule.exports.log = log;\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#load_a_module","title":"Load A Module","text":"<ul> <li>To load a module, we will use the <code>require</code> keyword.</li> </ul> app.js<pre><code>const logger = require('./logger');\nlogger.log('text message');\n</code></pre> <ul> <li>Then we will execute the app.js file by using command <code>node app.js</code>. Then you can see the function of <code>logger.js</code> has been loaded successfully into <code>app.js</code> and printed the message as below.</li> </ul> <pre><code>text message\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#module_wrapper_function","title":"Module Wrapper Function","text":"<ul> <li>In Node, each module is wrapped by a Module Wrapper Function, which provides a private scope for the module and adds certain variables and functions to it. This wrapper function is automatically applied by Node.js behind the scenes when executing a module.</li> <li>The Module Wrapper Function has the following structure:</li> </ul> <pre><code>(function (exports, require, module, __filename, __dirname) {\n    // Module code is placed here\n});\n</code></pre> Parameter Description exports It is an object that represents the module's public interface. By assigning properties or methods to <code>exports</code>, you can make them accessible to other modules that require this module. require It is a function used to import other modules. You can use <code>require</code> to include external modules or other files within your project. module It is an object that represents the current module. It includes properties and methods related to the module, such as <code>module.exports</code>, which allows you to define the public interface of the module. <code>__filename</code> It is a string representing the absolute path of the current module file. <code>__dirname</code> It is a string representing the absolute path of the directory containing the current module file. <ul> <li>Here's an example to illustrate the Module Wrapper Function in action. Let's create a module named <code>math.js</code> that exports a simple function for adding two numbers:</li> </ul> math.js<pre><code>console.log(__filename)\nconsole.log(__dirname)\n\nfunction add(a, b) {\n    return a + b;\n}\n\nexports.add = add;\n</code></pre> <ul> <li>When this module is executed, Node.js wraps it with the Module Wrapper Function:</li> </ul> <pre><code>(function (exports, require, module, __filename, __dirname) {\n    // Module code is placed here\n\n        console.log(__filename)\n        console.log(__dirname)\n\n    function add(a, b) {\n        return a + b;\n    }\n\n    exports.add = add;\n});\n</code></pre> <pre><code>/home/user/study/nodejs-backend/udemy/modules/math.js\n/home/user/study/nodejs-backend/udemy/modules\n</code></pre> <ul> <li> <p>This wrapping allows the module to have its own private scope, preventing variables and functions from polluting the global scope. The <code>exports</code> object allows you to define the module's public interface and expose functions or values that can be accessed by other modules using <code>require</code>.</p> </li> <li> <p>By utilizing the Module Wrapper Function, Node.js provides a modular and encapsulated environment for building applications, allowing for better organization and reuse of code.</p> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#core_modules","title":"Core Modules","text":"<ul> <li><code>NodeJs</code> contains a lot of core modules that are built-in modules and we don't need to include any of them as external installations.</li> <li>The table below show all core modules that we had by default.</li> </ul> No. Core Module Description 1 assert For performing assertions and writing tests. 2 async_hooks For tracking asynchronous hooks. 3 buffer For working with binary data using buffers. 4 child_process For spawning child processes. 5 cluster For creating child processes to take advantage of multi-core systems. 6 crypto For cryptographic operations, such as hashing, encryption, and decryption. 7 dgram For working with UDP (User Datagram Protocol) datagrams. 8 dns For working with DNS (Domain Name System) operations. 9 domain For handling uncaught exceptions in a more controlled manner. 10 events For implementing event-driven architecture, creating and handling custom events. 11 fs (File System) For interacting with the file system, reading and writing files, and working with directories. 12 http For creating HTTP servers and clients, handling HTTP requests, and responses. 13 https Similar to the <code>http</code> module but for secure HTTPS connections. 14 http2 For creating HTTP/2 servers and clients. 15 net For creating TCP servers and clients, and handling network connections. 16 os (Operating System) Provides information about the operating system, including CPU, memory, network interfaces, etc. 17 path For working with file and directory paths, parsing, and manipulation. 18 perf_hooks For performance monitoring and hooking. 19 punycode For converting between Unicode and Punycode representations of domain names. 20 querystring For parsing and formatting URL query strings. 21 readline For reading input streams line by line. 22 repl For implementing a Read-Eval-Print-Loop (REPL) environment. 23 stream For working with streams of data, allowing efficient handling of large datasets. 24 string_decoder For decoding buffer objects into strings. 25 tls For working with TLS/SSL (Transport Layer Security/Secure Sockets Layer) encrypted connections. 26 trace_events For working with trace events in the V8 engine. 27 tty For interacting with terminal devices. 28 url For working with URL parsing and formatting. 29 util Contains utility functions that are helpful for various tasks, such as inheritance, formatting, and debugging. 30 v8 For accessing V8 engine information and statistics. 31 vm For running JavaScript code in a virtual machine context. 32 worker_threads For creating and interacting with worker threads. 33 zlib For compressing and decompressing data using the zlib library. <ul> <li>Now, we will check some main core modules that we will usually use in Node applications.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#path_module","title":"Path Module","text":"<ul> <li> <p>The <code>path</code> module is one of the core modules in Node.js, and it provides utilities for working with file and directory paths. It is used to handle and manipulate file and directory paths in a cross-platform manner, making it easier to write platform-independent code for file-related operations.</p> </li> <li> <p>The <code>path</code> module offers various methods to interact with file paths, such as joining paths, resolving paths, extracting information about paths, and more. This is particularly useful when dealing with file system operations and building file paths dynamically.</p> </li> <li> <p>To use the <code>path</code> module, you don't need to install anything separately, as it comes built-in with Node.js. To include the module in your code, you can require it like this:</p> </li> </ul> <pre><code>const path = require('path');\n</code></pre> <ul> <li>Example in using <code>path</code> module.</li> </ul> path.js<pre><code>const path = require('path');\n\n// Parse an absolute path of a file to an object with path information\nvar pathObj = path.parse(__filename);\n\nconsole.log(pathObj);\n\n\n//Result\n/*{\n    root: '/',\n    dir: '/home/duc/study/nodejs-backend/udemy/modules',\n    base: 'path.js',\n    ext: '.js',\n    name: 'path'\n  } \n*/\n</code></pre> <ul> <li>All methods of <code>path</code> module are showed as in the table below.</li> </ul> Method Description <code>path.join([...paths])</code> Joins path segments together using the platform-specific separator. Automatically handles differences in separators between operating systems. <code>path.resolve([...paths])</code> Resolves an absolute path based on the given path segments. Returns the absolute path of the specified file or directory, relative to the current working directory. <code>path.isAbsolute(path)</code> Determines if the given <code>path</code> is an absolute path (starts with a drive letter on Windows or <code>/</code> on Unix-based systems). <code>path.relative(from, to)</code> Returns the relative path from <code>from</code> to <code>to</code> based on the current working directory. <code>path.dirname(path)</code> Returns the directory name of a given <code>path</code>. <code>path.basename(path, [ext])</code> Extracts the last portion of a path (file name) from the provided <code>path</code>. Optionally, you can specify an extension to remove it from the result. <code>path.extname(path)</code> Extracts the file extension from a path and returns it. <code>path.parse(path)</code> Parses a path string and returns an object with properties representing the different parts of the path (root, dir, base, name, ext). <code>path.normalize(path)</code> Normalizes a path by removing any unnecessary separators and resolving relative path segments.","tags":["NodeJs"]},{"location":"NodeJs/Modules/#os_module","title":"OS Module","text":"<ul> <li> <p>The <code>os</code> module is one of the core modules in Node.js, and it provides various utilities for interacting with the operating system. It allows developers to access information about the underlying operating system, such as system architecture, platform, network interfaces, and more.</p> </li> <li> <p>To use the <code>os</code> module, you don't need to install anything separately, as it comes built-in with Node.js. To include the module in your code, you can require it like this:</p> </li> </ul> <pre><code>const os = require('os');\n</code></pre> <ul> <li>Example in using <code>path</code> module.</li> </ul> os-module.js<pre><code>const os = require('os')\n\n// get all memory in system\nvar totalMemory = os.totalmem();\n\n// get free memory in system\nvar freeMemory = os.freemem();\n\n// console.log('Total Memory: ' + totalMemory);\n\nconsole.log(`Total Memory: ${totalMemory}`);\nconsole.log(`Free Memory: ${freeMemory}`);\n\n\n//Result\n//Total Memory: 67175268352\n//Free Memory: 62142898176\n</code></pre> <p>For JavaScript we can't get those information because the JavaScript is run only on browsers and it can only information about windows or document objects it can't information about operating system. For NodeJs, it runs outside the browser so we can get those information and work with files, os, networks, etc.</p> <ul> <li>All methods of <code>path</code> module are showed as in the table below.</li> </ul> Method Description <code>os.arch()</code> Returns the CPU architecture of the operating system. <code>os.cpus()</code> Returns an array of objects containing information about each CPU core, such as model, speed, and times. <code>os.endianness()</code> Returns the endianness of the CPU. It can be either \"BE\" (big-endian) or \"LE\" (little-endian). <code>os.freemem()</code> Returns the amount of free system memory in bytes. <code>os.totalmem()</code> Returns the total amount of system memory in bytes. <code>os.homedir()</code> Returns the home directory of the current user. <code>os.hostname()</code> Returns the hostname of the operating system. <code>os.loadavg()</code> Returns an array containing the average load of the system for the last 1, 5, and 15 minutes. <code>os.networkInterfaces()</code> Returns an object with information about the network interfaces available on the system. <code>os.platform()</code> Returns the platform name of the operating system (e.g., 'win32', 'darwin', 'linux', etc.). <code>os.release()</code> Returns the release version of the operating system. <code>os.tmpdir()</code> Returns the temporary directory path. <code>os.type()</code> Returns the operating system name (e.g., 'Windows_NT', 'Darwin', 'Linux', etc.). <code>os.uptime()</code> Returns the uptime of the system in seconds. <code>os.userInfo([options])</code> Returns information about the current user. The optional <code>options</code> parameter can be used to specify the username to retrieve information for a specific user. <code>os.constants</code> An object containing various operating system-specific constants used by Node.js. <code>os.EOL</code> A string constant representing the end-of-line marker for the current operating system. <code>os.arch()</code> Returns the CPU architecture of the operating system. <code>os.EOL</code> A string constant representing the end-of-line marker for the current operating system.","tags":["NodeJs"]},{"location":"NodeJs/Modules/#file_system_module","title":"File System Module","text":"<ul> <li> <p>The file system module in Node.js, often referred to as the <code>fs</code> module, is one of the core modules that provides an API for working with the file system. It allows you to interact with the file system on your computer and perform various operations such as reading, writing, updating, and deleting files and directories.</p> </li> <li> <p>To use the <code>fs</code> module, you don't need to install anything separately, as it comes built-in with Node.js. To include the module in your code, you can require it like this:</p> </li> </ul> <pre><code>const fs = require('fs');\n</code></pre> <ul> <li>Example in using <code>path</code> module.</li> </ul> file-system.js<pre><code>const fs = require('fs');\n\n// list out all files in a dir\nconst files = fs.readdirSync('./');\nconsole.log(files);\n\n\n\n//Result\n\n/*\n    [\n        'app.js',\n        'filesystem.js',\n        'logger.js',\n        'math.js',\n        'osmodule.js',\n        'path.js'\n    ]\n*/\n</code></pre> <ul> <li>All methods of <code>file</code> module are listed as in the table below:</li> </ul> Method Description <code>fs.access(path[, mode], callback)</code> Asynchronously checks if the file or directory is accessible with the specified mode. <code>fs.appendFile(path, data[, options], callback)</code> Asynchronously appends data to a file, creating the file if it does not exist. <code>fs.chmod(path, mode, callback)</code> Asynchronously changes the permissions of a file or directory. <code>fs.chown(path, uid, gid, callback)</code> Asynchronously changes the ownership of a file or directory. <code>fs.close(fd, callback)</code> Asynchronously closes a file descriptor. <code>fs.copyFile(src, dest[, flags], callback)</code> Asynchronously copies a file. <code>fs.createReadStream(path[, options])</code> Creates a readable stream to read data from a file. <code>fs.createWriteStream(path[, options])</code> Creates a writable stream to write data to a file. <code>fs.unlink(path, callback)</code> Asynchronously deletes a file. <code>fs.unlinkSync(path)</code> Synchronously deletes a file. <code>fs.existsSync(path)</code> Synchronously checks if a file or directory exists. <code>fs.ftruncate(fd, len, callback)</code> Asynchronously truncates a file to the specified length. <code>fs.futimes(fd, atime, mtime, callback)</code> Asynchronously changes the file access and modification times. <code>fs.lchmod(path, mode, callback)</code> Asynchronously changes the permissions of a symbolic link. <code>fs.lchown(path, uid, gid, callback)</code> Asynchronously changes the ownership of a symbolic link. <code>fs.link(existingPath, newPath, callback)</code> Asynchronously creates a new hard link. <code>fs.lstat(path, callback)</code> Asynchronously gets the status of a symbolic link. <code>fs.mkdir(path[, options], callback)</code> Asynchronously creates a directory. <code>fs.mkdtemp(prefix[, options], callback)</code> Asynchronously creates a unique temporary directory. <code>fs.open(path, flags[, mode], callback)</code> Asynchronously opens a file. <code>fs.read(fd, buffer, offset, length, position, callback)</code> Asynchronously reads data from a file. <code>fs.readdir(path[, options], callback)</code> Asynchronously reads the contents of a directory. <code>fs.readFile(path[, options], callback)</code> Asynchronously reads the contents of a file. <code>fs.readlink(path[, options], callback)</code> Asynchronously reads the value of a symbolic link. <code>fs.realpath(path[, options], callback)</code> Asynchronously resolves the real path of a file or directory. <code>fs.rename(oldPath, newPath, callback)</code> Asynchronously renames a file or directory. <code>fs.rmdir(path, callback)</code> Asynchronously removes a directory. <code>fs.stat(path[, options], callback)</code> Asynchronously gets the status of a file or directory. <code>fs.symlink(target, path[, type], callback)</code> Asynchronously creates a symbolic link. <code>fs.truncate(path, len, callback)</code> Asynchronously truncates a file to the specified length. <code>fs.unlink(path, callback)</code> Asynchronously deletes a file. <code>fs.unwatchFile(filename[, listener])</code> Stops watching for changes on a file. <code>fs.utimes(path, atime, mtime, callback)</code> Asynchronously changes the file access and modification times. <code>fs.watch(filename[, options][, listener])</code> Watches for changes in a file or directory. <code>fs.write(fd, buffer[, offset[, length[, position]]], callback)</code> Asynchronously writes data to a file. <code>fs.writeFile(file, data[, options], callback)</code> Asynchronously writes data to a file, replacing the file if it already exists.","tags":["NodeJs"]},{"location":"NodeJs/Modules/#events_module","title":"Events Module","text":"<ul> <li>Event is a signal that indicates that something has happened in our application. </li> <li> <p>The <code>events</code> module in Node.js is one of the core modules that provides an implementation of the <code>EventEmitter</code> class. This module allows developers to work with and create custom events and event-driven architectures in Node.js applications.</p> </li> <li> <p>The <code>EventEmitter</code> class in the <code>events</code> module is the foundation for working with events in Node.js. It provides methods to register event listeners, emit events, and handle event emissions asynchronously. This event-driven paradigm is a fundamental concept in Node.js, allowing non-blocking and asynchronous execution of code.</p> </li> <li> <p>To use the <code>events</code> module, you don't need to install anything separately, as it comes built-in with Node.js. To include the module in your code, you can require it like this:</p> </li> </ul> <pre><code>const EventEmitter = require('events');\n</code></pre> <ul> <li>Example in using <code>events</code> module.</li> </ul> events.js<pre><code>// import class EventEmitter\nconst EventEmitter = require('events');\n\n// create an instance of EventEmitter class\nconst emitter = new EventEmitter();\n\n//Register a listener\nemitter.on('messageLogged', function(){\n    console.log('Listener called!')\n});\n\n// Raise an event\nemitter.emit('messageLogged');\n\n//Result\n// Listener called!\n</code></pre> <ul> <li>As you can see in the code above, we will listener an event name <code>messageLogged</code> and when the event <code>messageLogged</code> is emitted then the callback function will be executed in the listener.</li> </ul> <p>Note: In the js file we should not put registering a listener below the emitting event because when the code is executed the event is emitted but there are no listeners registered for listenning.</p> <ul> <li>All methods of <code>events</code> module are listed as in the table below:</li> </ul> Method Description <code>addListener(event, listener)</code> Adds a listener for the specified event. <code>on(event, listener)</code> Same as <code>addListener</code>. <code>once(event, listener)</code> Adds a one-time listener for the specified event. The listener will be removed after it is called once. <code>removeListener(event, listener)</code> Removes a listener for the specified event. <code>off(event, listener)</code> Same as <code>removeListener</code>. <code>removeAllListeners([event])</code> Removes all listeners for the specified event. If no event is provided, it removes all listeners for all events. <code>setMaxListeners(n)</code> Sets the maximum number of listeners that can be added to an event. Default is 10. <code>getMaxListeners()</code> Returns the maximum number of listeners that can be added to an event. <code>listeners(event)</code> Returns an array of listeners for the specified event. <code>rawListeners(event)</code> Returns a copy of the array of listeners for the specified event, including any wrappers (e.g., once wrappers). <code>emit(event, [arg1], [arg2], [...])</code> Synchronously calls each of the listeners registered for the specified event. <code>eventNames()</code> Returns an array of event names for which listeners have been registered. <code>listenerCount(event)</code> Returns the number of listeners currently registered for the specified event.","tags":["NodeJs"]},{"location":"NodeJs/Modules/#event_arguments","title":"Event Arguments","text":"<ul> <li>When we raise an event, we also need to send some data about that event and these data called event arguments. We can send multi arguments in an event.</li> </ul> <pre><code>emitter.emit('messageLogged', 'John', 50);\n</code></pre> <ul> <li>However, there is best practice to encapsulate these arguments inside an object</li> </ul> <pre><code>emitter.emit('messageLogged', {name: 'John', age: 50});\n</code></pre> <ul> <li>Example in using <code>event argument</code>.</li> </ul> event-arguments.js<pre><code>const EventEmitter = require('events');\nconst emitter = new EventEmitter();\n\n//Register a listener for receiving argument object\nemitter.on('messageLogged', (arg) =&gt; { \n    console.log('Listener called!', arg);\n});\n\n// Raise an event with an argument object\nemitter.emit('messageLogged', {name: 'John', age: 50});\n\n\n//Result\n// Listener called! { name: 'John', age: 50 }\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#extending_event_emitter","title":"Extending Event Emitter","text":"<ul> <li> <p>Okay, in the real world we will not working directly with the <code>EventEmitter</code>  and in every case we also don't need to import and create new instance of <code>EventEmitter</code> instead we will create a class that has all the capabilities of the <code>EventEmitter</code> but it has additional capabilities.</p> </li> <li> <p>Let's take an example, we will create 2 js files. <code>event-sender.js</code> and <code>event-app</code>. In which, in the <code>sender.js</code> we will create a class <code>Sender</code> which extend the <code>EventEmitter</code> and the <code>event-app</code> will import and use the <code>Sender</code> class for emitting and listening events.</p> </li> </ul> event-sender.js<pre><code>const EventEmitter = require('events')\n\nclass Sender extends EventEmitter {\n    send(eventName, message) {\n\n        // log eventName\n        console.log(`eventName is: ${eventName}`);\n\n        // log meessage\n        console.log(message);\n\n        this.emit(eventName, message);\n    }\n}\n\nmodule.exports = Sender;\n</code></pre> event-app.js<pre><code>const EVENT_NAME = 'messageLogged';\n\nconst Sender = require('./event-sender')\nconst sender = new Sender();\n\nsender.on(EVENT_NAME, (arg) =&gt; {\n    console.log('Listener called', arg);\n});\n\nsender.send(EVENT_NAME, {name: 'John', age: 50});\n</code></pre> <pre><code>//Result\neventName is: messageLogged\n{ name: 'John', age: 50 }\nListener called { name: 'John', age: 50 }\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#http_module","title":"HTTP Module","text":"<ul> <li> <p>The <code>http</code> module in Node.js is one of the core modules that provides an implementation of the HTTP (Hypertext Transfer Protocol) server and client. It allows developers to create web servers, make HTTP requests, and handle HTTP responses. The HTTP module is actually built base on the <code>EventEmitter</code> module.</p> </li> <li> <p>The <code>http</code> module enables Node.js applications to act as web servers, serving HTTP content to clients (web browsers, other applications, etc.) and handling incoming HTTP requests. It also allows applications to make HTTP requests to external servers and consume data from APIs or other web services.</p> </li> <li> <p>To use the <code>http</code> module, you don't need to install anything separately, as it comes built-in with Node.js. To include the module in your code, you can require it like this:</p> </li> </ul> <pre><code>const http = require('http');\n</code></pre> <ul> <li>Example in using <code>http</code> module.</li> </ul> http-module.js<pre><code>const http = require('http');\n\n// Create a http server and handle req, res for 2 apis\nconst server = http.createServer((req, res) =&gt; {\n\n        //check request url\n    if (req.url === '/') {\n            //write response\n        res.write('Hello World');\n        res.end();\n    }\n\n        //check request url\n    if (req.url == '/api/courses') {\n        //write response\n        res.write(JSON.stringify([1, 2, 3]));\n        res.end();\n    }\n});\n\n// start server listening on port 3000\nserver.listen(3000);\n\nconsole.log('Liesting on port 3000...');\n</code></pre> <p></p> <p></p> <p>Node: In the real world, we will not use this way to build a back-end application service because the callback function <code>http.createServer</code> will become more and more complex if we have many routes . We will use another library such as ExpressJS to handle these things.</p> <ul> <li>All methods of <code>http</code> module are listed as in the table below:</li> </ul> Method Description <code>http.createServer([options][, requestListener])</code> Creates an HTTP server that can listen for incoming HTTP requests and handle them. <code>http.get(options[, callback])</code> Sends an HTTP GET request to the specified URL and receives the response. <code>http.request(options[, callback])</code> Sends an HTTP request to the specified URL and receives the response. <code>http.STATUS_CODES</code> An object containing standard HTTP status code strings as properties. <code>http.METHODS</code> An array of valid HTTP methods (e.g., 'GET', 'POST', 'PUT', etc.). <code>http.Agent</code> A class representing an HTTP Agent, allowing connection pooling and reusing sockets. <code>http.globalAgent</code> The default global HTTP Agent used for making HTTP requests. <code>http.createServer()</code> An alias for <code>http.createServer([options][, requestListener])</code>. <code>http.get(url[, options][, callback])</code> An alias for <code>http.get(options[, callback])</code>. <code>http.request(url[, options][, callback])</code> An alias for <code>http.request(options[, callback])</code>. <code>http.createServer([requestListener])</code> An alias for <code>http.createServer([options][, requestListener])</code>. <code>http.get(url[, options][, callback])</code> An alias for <code>http.get(options[, callback])</code>. <code>http.request(url[, options][, callback])</code> An alias for <code>http.request(options[, callback])</code>. <code>http.getAgent(options)</code> Creates a new HTTP Agent based on the provided options.","tags":["NodeJs"]},{"location":"NodeJs/Modules/#see_also","title":"See Also","text":"<ul> <li>NodeJs Introduction</li> <li>Global Object</li> <li>ExpressJS</li> <li>Node Package Manager</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Modules/#references","title":"References","text":"<ul> <li>Node.js: The Complete Guide to Build RESTful APIs</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/","title":"Node Package Manager (NPM)","text":"","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#what_is_the_node_package_manager","title":"What Is The Node Package Manager?","text":"<ul> <li><code>Node Package Manager (NPM)</code> is basically a command line tool as well as a registry of third party libraries that we can add to our Node applications.</li> <li>It allows developers to easily manage and install external libraries, modules, and tools (called packages or modules) that extend the functionality of Node.js applications. NPM is the default package manager for Node.js and is included with the Node.js installation.</li> <li>Key features and functionalities of NPM include:</li> </ul> Feature Description Package Installation NPM allows developers to install packages from the official npm registry or from private registries. The installation process automatically handles the resolution of dependencies, ensuring that all required modules are downloaded and accessible. Version Management NPM provides version management for packages. Developers can specify the desired version of a package in the package.json file or use version ranges to allow updates within specific constraints. Package Publishing Developers can publish their own packages to the npm registry, making them available to others to use and contribute to. This fosters collaboration and code sharing within the Node.js community. Dependency Management NPM tracks dependencies and devDependencies of a project in the package.json file. This enables automated installation and management of all required modules by running a single command (npm install). Script Execution NPM allows developers to define custom scripts in the package.json file, which can be executed using the npm run command. This feature is commonly used for automation, running tests, and other development tasks. Scopes NPM introduced scopes, allowing developers to organize packages under specific namespaces to avoid naming conflicts.","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#packagejson","title":"Package.json","text":"<ul> <li><code>package.json</code> is basically a json file that includes some basic information about our application or our project, such as it's name, it's version, it's authors, the address of its git repository, its dependencies and so on. It's basically a bunch of metadata about our application. And all Node applications by standard have this <code>package.json</code> file.</li> <li>To use NPM in a Node.js project, we need to initialize a <code>package.json</code> file using the <code>npm init</code> command, which will prompt us for some basic information about our project and its dependencies.</li> </ul> <pre><code>npm init\n</code></pre> <ul> <li>After fill some basic information, we would have a <code>package.json</code> file that contains some basic information about our node application as below.</li> </ul> package.json<pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#installing_a_node_package","title":"Installing A Node Package","text":"<ul> <li>After that, we can use <code>npm install &lt;package-name&gt;</code> to install latest packages from npm registry and <code>npm install</code> to install all dependencies specified in the <code>package.json</code> file.</li> <li>For example, in our project <code>npm-demo</code> we will install package <code>underscore</code> to our node application.</li> </ul> <pre><code>npm install undersorce\n</code></pre> <ul> <li>After execute the command above in <code>npm-demo</code> project, then we can see in the <code>package.json</code> the dependency <code>underscore</code> added with the version.</li> </ul> package.json<pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"underscore\": \"^1.13.6\"\n  }\n}\n</code></pre> <ul> <li>Moreover, you can also see there is folder <code>node_modules</code> inside our <code>npm-demo</code> application which contains the package <code>underscore</code> and inside it we will also see the <code>package.json</code></li> </ul> <ul> <li>So it means every npm dependency is a node application like our <code>npm-demo</code> application and it is stored in the a folder called <code>node_modules</code>.</li> <li>Now, we will be confused that where does npm download this dependency from? The answer is that by default after installing the <code>nodejs</code> , the dependencies will be download from the default registry <code>https://registry.npmjs.org/</code> of NPM. We can use the command below to check which registry that we are using.</li> </ul> <pre><code>npm get registry\nhttps://registry.npmjs.org/\n</code></pre> <ul> <li>Finally, if we want to find a public dependency or just view the information about the dependency that we are using. We can go to npmjs.com to search and review.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#using_a_package","title":"Using A Package","text":"<ul> <li>To use a dependency package, we just need to include it like we load a module by using the <code>require</code> keyword.</li> </ul> <pre><code>const _ = require('underscore');\n\n//Core module\n//File or Foler\n//node_modules\n</code></pre> <ul> <li> <p>So with the <code>require</code> require. Firstly, it will assume that the module name that we supply is the core module. However, in Nodejs we don't have this module so the require function thinks that maybe it is a file or a folder in this project. However, to reference a file we have to use the <code>./</code> in the argument and then the require function will assume that there is a <code>underscore.js</code> file in the same folder or there is an <code>index.js</code> file in the folder <code>underscore</code>  (<code>underscore/index.js</code>). Finally, the require function move to the third step and assume that the supply module exists inside the <code>node_modules</code> folder. So this is how the <code>require</code> function worked.</p> </li> <li> <p>Now, let's take an example with <code>underscore</code> dependency. Let's create a file <code>index.js</code> and add the example code as below.</p> </li> </ul> index.js<pre><code>const _ = require('underscore');\n\nvar result = _.contains([1, 2, 3], 2);\nconsole.log(result);\n\n//Result\n//true\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#package_dependencies","title":"Package Dependencies","text":"<ul> <li>Every time we install a package with <code>npm install</code> the <code>dependencies</code> in <code>package.json</code> will be updated.</li> </ul> <pre><code>npm install mongoose\n</code></pre> package.json<pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  }\n}\n</code></pre> <ul> <li>Then if we look at the <code>node_modules</code> folder there are many child folder added although we only installed <code>mongoose</code> package. These are other node packages that the <code>mongoose</code> is dependent on.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo/node_modules$ ll\ntotal 108\ndrwxrwxr-x 24 duc duc 4096 Thg 7  28 08:33  ./\ndrwxrwxr-x  3 duc duc 4096 Thg 7  23 14:45  ../\ndrwxrwxr-x  6 duc duc 4096 Thg 7  28 08:33  bson/\ndrwxrwxr-x  4 duc duc 4096 Thg 7  28 08:33  debug/\ndrwxrwxr-x  3 duc duc 4096 Thg 7  28 08:33  ip/\ndrwxrwxr-x  2 duc duc 4096 Thg 7  28 08:33  kareem/\ndrwxrwxr-x  2 duc duc 4096 Thg 7  28 08:33  memory-pager/\ndrwxrwxr-x  5 duc duc 4096 Thg 7  28 08:33  mongodb/\ndrwxrwxr-x  3 duc duc 4096 Thg 7  28 08:33  mongodb-connection-string-url/\ndrwxrwxr-x  7 duc duc 4096 Thg 7  28 08:33  mongoose/\ndrwxrwxr-x  4 duc duc 4096 Thg 7  28 08:33  mpath/\ndrwxrwxr-x  4 duc duc 4096 Thg 7  28 08:33  mquery/\ndrwxrwxr-x  2 duc duc 4096 Thg 7  28 08:33  ms/\n-rw-rw-r--  1 duc duc 9536 Thg 7  28 08:33  .package-lock.json\ndrwxrwxr-x  2 duc duc 4096 Thg 7  28 08:33  punycode/\ndrwxrwxr-x  4 duc duc 4096 Thg 7  28 08:33  saslprep/\ndrwxrwxr-x  6 duc duc 4096 Thg 7  28 08:33  sift/\ndrwxrwxr-x  5 duc duc 4096 Thg 7  28 08:33  smart-buffer/\ndrwxrwxr-x  5 duc duc 4096 Thg 7  28 08:33  socks/\ndrwxrwxr-x  2 duc duc 4096 Thg 7  28 08:33  sparse-bitfield/\ndrwxrwxr-x  3 duc duc 4096 Thg 7  28 08:33  tr46/\ndrwxrwxr-x  5 duc duc 4096 Thg 7  28 08:33 '@types'/\ndrwxrwxr-x  5 duc duc 4096 Thg 7  23 13:55  underscore/\ndrwxrwxr-x  3 duc duc 4096 Thg 7  28 08:33  webidl-conversions/\ndrwxrwxr-x  3 duc duc 4096 Thg 7  28 08:33  whatwg-url/\n</code></pre> <ul> <li>Okay, at this point maybe we will have some questions, so we knew that a dependency package is like a node application but why do dependency packages inside the <code>node_modules</code> do not contain a folder <code>node_modules</code> like our <code>npm-demo</code> application that we are working on?<ul> <li>The answer is if every dependency package contains a <code>node_modules</code> then there is a case a dependency will create a very deeply nested structure and on Windows Os  specifically there is a limitation on the number of characters that we can have in a path.</li> <li>So the behavior of the dependency package in the <code>node_modules</code> has changed, now all dependencies of our application as well as their dependencies are stored  under <code>node_modules</code></li> </ul> </li> <li>Okay, now we have another question, how can the NPM handle multi versions of an dependency?. For example, in the <code>npm-demo</code> we will use the package <code>bson</code> version <code>5.3.0</code> but in the dependency <code>mongoose</code> it is using the package <code>bson</code> version <code>5.4.0</code>.<ul> <li>In this case, our <code>bson</code> package of <code>npm-demo</code> application will be stored in the folder <code>node_modules</code> with version <code>5.3.0</code>. Then in the <code>mongoose</code> dependency a new <code>node_modules</code> folder will generated and store the <code>bson</code> with version <code>5.4.0</code>. Let's see the example below.</li> </ul> </li> </ul> <pre><code>npm install bson@5.3.0\n</code></pre> <ul> <li>As you can see, the <code>bson</code> version <code>5.3.0</code> that our application <code>npm-demo</code> is stored in the main <code>node_modules</code>.</li> </ul> <ul> <li>Then the <code>bson</code> version <code>5.4.0</code> of <code>mongoose</code> dependency is stored inside the <code>node_modules</code> folder of <code>mongoose</code> package.</li> <li>So This is how the NPM manages the dependencies.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#npm_packages_and_source_control","title":"NPM Packages And Source Control","text":"<ul> <li>There is a problem with the <code>node_modules</code> folder, if our application use a lot of node dependencies then our <code>node_modules</code> folder will be very heavy with hundred megabytes and when some one has to clone our source code from the repository then he have to wait for a long time for downloading. </li> <li>To handle that problem the NPM will keep the information of dependencies that are used in our application in <code>package.json</code> field <code>dependencies</code> and in the case we delete the <code>node_modules</code> folder, we don't have to run <code>npm install &lt;packageName&gt;</code> for every dependency again, we just need to run <code>npm install</code> then all dependencies will be downloaded into the <code>node_modules</code> folder from public registry again. So now, we can exclude the folder <code>node_modules</code> from our source code.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#semantic_versioning","title":"Semantic Versioning","text":"<ul> <li>Okay now, if we look into the dependencies in the <code>package.json</code> we may see the character <code>^</code> before the version, so what is it mean?</li> <li>Before answering this question we need to understand the <code>Semantic Versioning</code>. So what is the <code>Semantic Versioning</code>?<ul> <li>Semantic Versioning (SemVer) is a versioning system for software packages that provides a consistent and reliable way to communicate changes between versions.</li> <li>SemVer versions are made up of three numbers:<ul> <li>Major version:\u00a0This number indicates a significant change and break existing APIs or functionality of the software.</li> <li>Minor version:\u00a0This number indicates a minor change but doesn't break the existing API in the software, such as adding new features.</li> <li>Patch version:\u00a0This number indicates a patch release, such as a bug fix or a security fix.</li> </ul> </li> </ul> </li> <li>So the <code>^</code> tells the NPM that if there is any newer <code>Minor</code> or <code>Patch</code> version so they will be updated in <code>node_modules</code> as long as the <code>Major</code> version is not changed.</li> </ul> package.json<pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bson\": \"^5.3.0\",\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  }\n}\n</code></pre> <ul> <li>For example, if we are using the <code>bson</code> version <code>^5.3.0</code> and using <code>^</code> then we are talking to NPM that if there is any newer <code>Minor</code> or <code>Patch</code> versions (ex: <code>^5.4.0</code>) please use it when restore the package in <code>npm install</code>. It means when some one clone our project from the repository and run <code>npm install</code>. Then the <code>bson</code> will be installed with higher <code>Minor</code> or <code>Patch</code> versions for example <code>^5.4.0</code>.</li> <li> <p>Beside the character <code>^</code> we can also use the exact <code>Major</code> version with <code>x</code>. For example: <code>5.x</code></p> </li> <li> <p>Next, in some case we usually also see the character <code>~</code>, so it means if there is any newer <code>Patch</code> version so they will be updated in <code>node_modules</code> as long as the <code>Major</code> and <code>Minor</code> versions are not changed and we also have an alternative syntax with <code>Major</code>, <code>Minor</code> and <code>x</code> . For example, <code>5.4.x</code>.</p> </li> <li> <p>Finally, if we want to use the exact version for dependencies we just simply put the exact version without using any <code>^</code> or <code>~</code> or version with <code>x</code>.</p> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#listing_the_installed_packages","title":"Listing The Installed Packages","text":"<ul> <li>Now, if we want to know what are actual dependencies versions that we are using in our application we can simply use the command below</li> </ul> <pre><code>npm list\n</code></pre> <pre><code>npm-demo@1.0.0 /home/duc/study/nodejs-backend/udemy/npm-demo\n\u251c\u2500\u2500 bson@5.4.0\n\u251c\u2500\u2500 mongoose@7.4.1\n\u2514\u2500\u2500 underscore@1.13.6\n</code></pre> <ul> <li>Then if we need to check all dependencies versions in the <code>node_modules</code> we can use the command.</li> </ul> <pre><code>npm list --all\n</code></pre> <pre><code>npm-demo@1.0.0 /home/duc/study/nodejs-backend/udemy/npm-demo\n\u251c\u2500\u2500 bson@5.4.0\n\u251c\u2500\u252c mongoose@7.4.1\n\u2502 \u251c\u2500\u2500 bson@5.4.0 deduped\n\u2502 \u251c\u2500\u2500 kareem@2.5.1\n\u2502 \u251c\u2500\u252c mongodb@5.7.0\n\u2502 \u2502 \u251c\u2500\u2500 UNMET OPTIONAL DEPENDENCY @aws-sdk/credential-providers@^3.201.0\n\u2502 \u2502 \u251c\u2500\u2500 UNMET OPTIONAL DEPENDENCY @mongodb-js/zstd@^1.1.0\n\u2502 \u2502 \u251c\u2500\u2500 bson@5.4.0 deduped\n\u2502 \u2502 \u251c\u2500\u2500 UNMET OPTIONAL DEPENDENCY kerberos@^2.0.1\n\u2502 \u2502 \u251c\u2500\u2500 UNMET OPTIONAL DEPENDENCY mongodb-client-encryption@&gt;=2.3.0 &lt;3\n\u2502 \u2502 \u251c\u2500\u252c mongodb-connection-string-url@2.6.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c @types/whatwg-url@8.2.2\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 @types/node@20.4.5\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 @types/webidl-conversions@7.0.0\n\u2502 \u2502 \u2502 \u2514\u2500\u252c whatwg-url@11.0.0\n\u2502 \u2502 \u2502   \u251c\u2500\u252c tr46@3.0.0\n\u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 punycode@2.3.0\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 webidl-conversions@7.0.0\n\u2502 \u2502 \u251c\u2500\u252c saslprep@1.0.3\n\u2502 \u2502 \u2502 \u2514\u2500\u252c sparse-bitfield@3.0.3\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 memory-pager@1.5.0\n\u2502 \u2502 \u251c\u2500\u2500 UNMET OPTIONAL DEPENDENCY snappy@^7.2.2\n\u2502 \u2502 \u2514\u2500\u252c socks@2.7.1\n\u2502 \u2502   \u251c\u2500\u2500 ip@2.0.0\n\u2502 \u2502   \u2514\u2500\u2500 smart-buffer@4.2.0\n\u2502 \u251c\u2500\u2500 mpath@0.9.0\n\u2502 \u251c\u2500\u252c mquery@5.0.0\n\u2502 \u2502 \u2514\u2500\u252c debug@4.3.4\n\u2502 \u2502   \u2514\u2500\u2500 ms@2.1.2\n\u2502 \u251c\u2500\u2500 ms@2.1.3\n\u2502 \u2514\u2500\u2500 sift@16.0.1\n\u2514\u2500\u2500 underscore@1.13.6\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#viewing_registry_info_for_a_package","title":"Viewing Registry Info For A Package","text":"<ul> <li>Okay as we knew before, we can access the link  npmjs.com to view details about the package that we are using. However, there is another way by using the command below.</li> </ul> <pre><code>npm view &lt;packageName&gt;\n</code></pre> <pre><code>npm view mongoose\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm view mongoose\n\nmongoose@7.4.1 | MIT | deps: 7 | versions: 803\nMongoose MongoDB ODM\nhttps://mongoosejs.com\n\nkeywords: mongodb, document, model, schema, database, odm, data, datastore, query, nosql, orm, db\n\ndist\n.tarball: https://registry.npmjs.org/mongoose/-/mongoose-7.4.1.tgz\n.shasum: 658a0d8ffbbc963990405bd2279fcd2b452be089\n.integrity: sha512-o3E5KHHiHdaiwCJG3+9r70sncRKki71Ktf/TfXdW6myu+53rtZ56uLl5ylkQiCf60V3COJuOeekcxXVsjQ7cBA==\n.unpackedSize: 2.6 MB\n\ndependencies:\nbson: ^5.4.0   kareem: 2.5.1  mongodb: 5.7.0 mpath: 0.9.0   mquery: 5.0.0  ms: 2.1.3      sift: 16.0.1   \n\nmaintainers:\n- aaron &lt;aaron.heckmann+github@gmail.com&gt;\n- rauchg &lt;rauchg@gmail.com&gt;\n- tjholowaychuk &lt;tj@vision-media.ca&gt;\n- vkarpov15 &lt;val@karpov.io&gt;\n\ndist-tags:\n5x: 5.13.20      latest: 7.4.1    legacy: 6.11.4   next: 7.0.0-rc0  unstable: 3.9.7  \n\npublished 4 days ago by vkarpov15 &lt;val@karpov.io&gt;\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#installing_a_specific_package_version","title":"Installing a Specific Package Version","text":"<ul> <li>If we only use the command <code>npm install &lt;packageName&gt;</code> then we always install the latest package version. In case, we want to install a specific version of a package. We can use the command below.</li> </ul> <pre><code>npm install &lt;packageName&gt;@&lt;version&gt;\n</code></pre> <pre><code>npm install mongoose@5.3.0\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#updating_local_packages","title":"Updating Local Packages","text":"<ul> <li>Now, There is a case that we want to know newer versions of dependencies that we are using in our application to upgrade them. So firstly, we need to check the what are outdated packages and what are newer versions, we can use the command below.</li> </ul> <pre><code>npm outdated\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm outdated\nPackage  Current  Wanted  Latest  Location           Depended by\nbson       5.3.0   5.4.0   5.4.0  node_modules/bson  npm-demo\n</code></pre> <ul> <li> <p>As you can see the <code>Current</code> is our current dependency version, the <code>Wanted</code> is the version that we can update to, the <code>Latest</code> is the latest version of the dependency.</p> </li> <li> <p>Now we can use the command below to update them.</p> </li> </ul> <pre><code>npm update\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm update\n\nremoved 2 packages, changed 1 package, and audited 26 packages in 7s\n\n1 package is looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm list\nnpm-demo@1.0.0 /home/duc/study/nodejs-backend/udemy/npm-demo\n\u251c\u2500\u2500 bson@5.4.0\n\u251c\u2500\u2500 mongoose@7.4.1\n\u2514\u2500\u2500 underscore@1.13.6\n</code></pre> <p>Note: the command <code>npm update</code> only works for upgrading <code>Minor</code> and <code>patch</code> versions as showed in the column <code>Wanted</code> of <code>npm outdated</code> command. For <code>Major</code> version it doesn't work.</p> <ul> <li>If we want to upgrade the <code>Major</code> version, let's do following steps.</li> <li>Install <code>npm-check-updates</code> to global</li> </ul> <pre><code>npm install -g npm-check-updates\n</code></pre> <ul> <li>Next, run the command below to check outdated packages in our npm application.</li> </ul> <pre><code>npm-check-updates\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm-check-updates \nChecking /home/duc/study/nodejs-backend/udemy/npm-demo/package.json\n[====================] 3/3 100%\n\n bson  ^4.7.2  \u2192  ^5.4.0\n\nRun ncu -u to upgrade package.json\n</code></pre> <ul> <li>Now, to update the version, we can run the command below.</li> </ul> <pre><code>ncu -u \n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ ncu -u\nUpgrading /home/duc/study/nodejs-backend/udemy/npm-demo/package.json\n[====================] 3/3 100%\n\n bson  ^4.7.2  \u2192  ^5.4.0\n\nRun npm install to install new versions.\n</code></pre> <ul> <li>Now, if we look into the <code>package.json</code>, we can see the dependency version is updated.</li> </ul> <pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bson\": \"^5.4.0\",\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  }\n}\n</code></pre> <ul> <li>Finally, we just need to run command <code>npm install</code> to update the dependency.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm install\n\nremoved 5 packages, changed 1 package, and audited 26 packages in 545ms\n\n1 package is looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ ncu\nChecking /home/duc/study/nodejs-backend/udemy/npm-demo/package.json\n[====================] 3/3 100%\n\nAll dependencies match the latest package versions :)\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#dev_dependencies","title":"Dev Dependencies","text":"<ul> <li>As you can see, all dependencies that we are practicing are application dependencies like <code>mongoose</code> and <code>underscore</code> \u00a0So our application needs these dependencies in order to function properly, but sometimes we use dependencies that are only used during development. For example, we have tools for running unit tests, we have tools for doing static analysis on our code, we have tools for bundling our JavaScript code and so on.</li> <li>These dependencies are development dependencies. And they should not go in a production environment where we deploy our application. In this case we can use the command below.</li> </ul> <pre><code>npm install &lt;packageName&gt; --save-dev\n</code></pre> <pre><code>npm install jshint --save-dev\n</code></pre> <ul> <li>The <code>jshint</code> is a static analysis tool for JavaScript code. It basically analyzes our JavaScript code, and looks for potential problems or syntactical errors.</li> <li>After execute the command above, then we can see in our <code>package.json</code>. The <code>jshint</code> dependency is stored in property <code>devDependencies</code> and this mean the <code>jshint</code> is the development dependency and it should not go in the production environment.</li> </ul> <pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bson\": \"^5.4.0\",\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  },\n  \"devDependencies\": {\n    \"jshint\": \"^2.13.6\"\n  }\n}\n</code></pre> <ul> <li>If we look at <code>node_modules</code> we still see the <code>jshint</code> package there. So all dependencies whether they are application dependencies or development dependencies they are stored inside of the <code>node_modules</code> folder. They are only segregated in <code>package.json</code>.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#uninstalling_a_package","title":"Uninstalling A Package","text":"<ul> <li>To uninstall a package, we can use the command below.</li> </ul> <pre><code>npm uninstall &lt;packageName&gt;\n</code></pre> <pre><code>npm uninstall bson\n</code></pre> package.json<pre><code>{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  },\n  \"devDependencies\": {\n    \"jshint\": \"^2.13.6\"\n  }\n}\n</code></pre> <ul> <li>After executing the command then we can see in the <code>package.json</code> the dependency is removed as well as in the <code>node_modules</code> folder.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#working_with_global_packages","title":"Working With Global Packages","text":"<ul> <li> <p>So dependencies that we are using in the <code>package.json</code> are particular packages in the project <code>npm-demo</code> but there are packages on npm registry that are not specific node packages on npm registry that are not specific to an application. These are often command line tools that you want to access from everywhere. They're not tied to a specific folder, or a specific project. <code>npm</code> is an example of one of these global packages. It's a command line tool, you can run it from any folder. It's not specific to a given project. Another popular command line tool is<code>Angular CLI</code>. We use this to create a new Angular project.</p> </li> <li> <p>If we want to install a Node package globally we can use <code>-g</code> flag. </p> </li> <li>For example, to install a package to global we can add <code>-g</code> to <code>npm install</code> as below.</li> </ul> <pre><code>npm install -g &lt;packageName&gt;\n</code></pre> <pre><code>npm install -g npm@9.5.1\n</code></pre> <ul> <li>Or when we want to check outdated of global, we can use to <code>npm -g outdated</code></li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm -g outdated\nPackage   Current  Wanted  Latest  Location               Depended by\ncorepack   0.17.0  0.19.0  0.19.0  node_modules/corepack  global\nnpm         9.5.1   9.8.1   9.8.1  node_modules/npm       global\n</code></pre> <ul> <li>Or if we want to uninstall a global package we can use <code>npm uninstall -g &lt;packageName&gt;</code>.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#publishing_a_package","title":"Publishing A Package","text":"<ul> <li>To publish a node package to publish repository, firstly you should register an account at npmjs.com which is the default publish registry that we have.</li> <li>Then in our project, let's login with created account by using commands below.</li> </ul> <pre><code>npm login\n</code></pre> <ul> <li>Then follow the instruction in the command line to login.</li> <li>Next, let's make sure that the name of your package is unique, so let's check the <code>package.json</code> with the property <code>name</code> and change it to make sure it is unique.</li> </ul> package.json<pre><code>{\n  \"name\": \"duc-npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  },\n  \"devDependencies\": {\n    \"jshint\": \"^2.13.6\"\n  }\n}\n</code></pre> <ul> <li>Finally, use command <code>npm publish</code> to publish our node application.</li> </ul> <pre><code>npm publish\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm publish\nnpm notice \nnpm notice \ud83d\udce6  duc-npm-demo@1.0.0\nnpm notice === Tarball Contents === \nnpm notice 95B  index.js    \nnpm notice 339B package.json\nnpm notice === Tarball Details === \nnpm notice name:          duc-npm-demo                            \nnpm notice version:       1.0.0                                   \nnpm notice filename:      duc-npm-demo-1.0.0.tgz                  \nnpm notice package size:  380 B                                   \nnpm notice unpacked size: 434 B                                   \nnpm notice shasum:        25f412387d49b442e93741f17ba09e770b33607e\nnpm notice integrity:     sha512-XUQGLgbVkTfzu[...]7/gPHcAKdZokA==\nnpm notice total files:   2                                       \nnpm notice \nnpm notice Publishing to https://registry.npmjs.org/ with tag latest and default access\n+ duc-npm-demo@1.0.0\n</code></pre> <ul> <li>Now, let's go back to  npmjs.com and search our published package, we can see it is published successfully and other project can use it as a dependency.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#updating_a_publish_package","title":"Updating A Publish Package","text":"<ul> <li>Okay so in the case we add some new features into our npm application and we want to publish it again. If we continue to use <code>npm publish</code> then you will get the error below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm publish\nnpm notice \nnpm notice \ud83d\udce6  duc-npm-demo@1.0.0\nnpm notice === Tarball Contents === \nnpm notice 95B  index.js    \nnpm notice 339B package.json\nnpm notice === Tarball Details === \nnpm notice name:          duc-npm-demo                            \nnpm notice version:       1.0.0                                   \nnpm notice filename:      duc-npm-demo-1.0.0.tgz                  \nnpm notice package size:  380 B                                   \nnpm notice unpacked size: 434 B                                   \nnpm notice shasum:        25f412387d49b442e93741f17ba09e770b33607e\nnpm notice integrity:     sha512-XUQGLgbVkTfzu[...]7/gPHcAKdZokA==\nnpm notice total files:   2                                       \nnpm notice \nnpm notice Publishing to https://registry.npmjs.org/ with tag latest and default access\nnpm ERR! code E403\nnpm ERR! 403 403 Forbidden - PUT https://registry.npmjs.org/duc-npm-demo - You cannot publish over the previously published versions: 1.0.0.\nnpm ERR! 403 In most cases, you or one of your dependencies are requesting\nnpm ERR! 403 a package version that is forbidden by your security policy, or\nnpm ERR! 403 on a server you do not have access to.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/duc/.npm/_logs/2023-07-29T03_29_40_095Z-debug-0.log\n</code></pre> <ul> <li>It is because the <code>duc-npm-demo</code> already published the version <code>1.0.0</code> so we can't continue to publish this version.</li> <li>To handle this issue we have to update the property <code>version</code> in the <code>package.json</code></li> </ul> <pre><code>{\n  \"name\": \"duc-npm-demo\",\n  \"version\": \"1.1.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mongoose\": \"^7.4.1\",\n    \"underscore\": \"^1.13.6\"\n  },\n  \"devDependencies\": {\n    \"jshint\": \"^2.13.6\"\n  }\n}\n</code></pre> <ul> <li>Or we can use the command below to update it.</li> </ul> <pre><code>npm version &lt;major/minor/patch&gt;\n</code></pre> <pre><code>npm version minor\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm version minor\nv1.1.0\n</code></pre> <ul> <li>Then now, we can use command <code>npm publish</code> to publish our node application again.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/nodejs-backend/udemy/npm-demo$ npm publish\nnpm notice \nnpm notice \ud83d\udce6  duc-npm-demo@1.1.0\nnpm notice === Tarball Contents === \nnpm notice 95B  index.js    \nnpm notice 339B package.json\nnpm notice === Tarball Details === \nnpm notice name:          duc-npm-demo                            \nnpm notice version:       1.1.0                                   \nnpm notice filename:      duc-npm-demo-1.1.0.tgz                  \nnpm notice package size:  379 B                                   \nnpm notice unpacked size: 434 B                                   \nnpm notice shasum:        30c0be7feb9c51a10b0c920375b1288762e9118d\nnpm notice integrity:     sha512-xfQgeQkl44Uvt[...]FJaZAHCp9/v3A==\nnpm notice total files:   2                                       \nnpm notice \nnpm notice Publishing to https://registry.npmjs.org/ with tag latest and default access\n+ duc-npm-demo@1.1.0\n</code></pre>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#see_also","title":"See Also","text":"<ul> <li>ExpressJS</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/Node%20Package%20Manager/#references","title":"References","text":"<ul> <li>Node.js: The Complete Guide to Build RESTful APIs</li> <li>npmjs.com</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/","title":"NodeJs Introduction","text":"","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/#what_is_the_nodejs","title":"What Is The NodeJs?","text":"<ul> <li><code>NodeJs</code> is an open source and cross platform run time environment for executing JavaScript codes outside of a browser. While often we use Node to build backend services, also called API's or Application Programming Interfaces.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/#node_architecture","title":"Node Architecture","text":"<ul> <li> <p>Before the NodeJs, the JavaScript code is only used for building applications that run inside a browser. So every browser out there has what we call a JavaScript engine that takes JavaScript code and coverts into code that computer can understand. In every browser, we may have different JavaScript engines. Ex:</p> <ul> <li>Chakra is used for Edge</li> <li>SpiderMonkey is used for FireFox</li> <li>V8 is used for Chrome.</li> </ul> </li> <li> <p>So sometimes JavaScript codes can have differently in one browser or another.</p> </li> <li>Before the 2009, JavaScript only can be run on Browsers. But in 2009, Ryan Dahl the creator of Node came up with a brilliant idea. He thought it would be great to execute JavaScript outside of a browser, so he took Google's v8 engine, which is the fastest JavaScript engine out there, and embedded it inside a C++ program and called that program Node.</li> </ul> <p></p> <ul> <li>So similar to a browser, Node is a runtime environment for JavaScript code. It contains a JavaScript engine that can execute our JavaScript code. But it also has certain objects that provide an environment for our JavaScript code. But these objects are different from the environment objects we have in browsers. For example, we don't have the <code>document object</code> instead we have other objects that give us more interesting capabilities. For example, we can work with the file system, listen for requests in a given port, and so on.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/#how_does_it_work","title":"How Does It Work?","text":"<ul> <li>Node applications are highly-scalable and this is because of the non-blocking, or asynchronous nature of Node. It means a single thread on Node application can be used for handling multiple requests. So Node applications can serve more clients without the need to throw in more hardware and that's why Node applications.</li> </ul> <ul> <li>In contrast, Node should not be used for CPU-intensive applications like video encoding or an image manipulation service. In these kind of applications, we have a lot of calculations that should be done by CPU, and few operations that touch the file system or the network. Since Node applications are single threaded, when performing the calculations to serve one client, other clients have to wait, and that's why Node should not be used for CPU intensive applications. It should only be used for building data intensive and real time applications.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/#install_nodejs","title":"Install NodeJs","text":"<ul> <li>Please view Linux Setup For Developer</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/#see_also","title":"See Also","text":"<ul> <li>NodeJs RoadMap</li> <li>Global Object</li> <li>Modules</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20Introduction/#references","title":"References","text":"<ul> <li>Node.js: The Complete Guide to Build RESTful APIs</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/","title":"NodeJs RoadMap","text":"","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#nodejs_roadmap_1","title":"NodeJs RoadMap","text":"","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#javascript_fundamentals","title":"JavaScript Fundamentals:","text":"<ul> <li>Start by mastering the fundamentals of JavaScript, as Node.js is built on it. Learn about variables, data types, operators, control flow, functions, and object-oriented programming concepts.</li> <li>Please view:<ul> <li>JavaScript Introduction</li> </ul> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#nodejs_basics","title":"Node.js Basics:","text":"<ul> <li>Familiarize yourself with the basics of Node.js, including installation, running scripts, and understanding the Node.js runtime environment.</li> <li>Please view:<ul> <li>NodeJs Introduction</li> <li>Global Object</li> </ul> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#npm_node_package_manager","title":"NPM (Node Package Manager):","text":"<ul> <li>Learn how to use NPM to manage packages and dependencies in your Node.js projects. Explore popular NPM packages and understand how to install, update, and remove packages.</li> <li>Please view:<ul> <li>Node Package Manager</li> </ul> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#core_nodejs_modules","title":"Core Node.js Modules:","text":"<ul> <li>Dive into the core modules provided by Node.js, such as <code>fs</code> (file system), <code>http</code> (HTTP server/client), <code>path</code> (file paths), and <code>events</code> (event emitter). Understand their functionalities and how to utilize them in your applications.</li> <li>Please view:<ul> <li>Modules</li> </ul> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#asynchronous_programming","title":"Asynchronous Programming:","text":"<ul> <li>Node.js excels at handling asynchronous operations. Learn about asynchronous programming concepts, including callbacks, promises, and async/await syntax. Explore the event-driven nature of Node.js and understand how to write non-blocking code.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#expressjs","title":"Express.js:","text":"<ul> <li>Study Express.js, a popular web application framework for Node.js. Learn how to build RESTful APIs, handle routing, middleware, and request/response handling. Explore concepts like routing parameters, error handling, and template engines.</li> <li>Please view:<ul> <li>ExpressJS</li> <li>ExpressJS Advanced Topics</li> </ul> </li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#database_integration","title":"Database Integration:","text":"<ul> <li>Learn how to integrate Node.js with databases. Explore popular database systems like MongoDB, MySQL, or PostgreSQL. Understand how to connect to databases, perform CRUD operations, and handle data persistence.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#authentication_and_security","title":"Authentication and Security:","text":"<ul> <li>Dive into authentication and security concepts specific to Node.js applications. Learn about user authentication, password hashing, session management, and protecting against common security vulnerabilities.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#testing_and_debugging","title":"Testing and Debugging:","text":"<ul> <li>Gain knowledge of testing frameworks like Mocha or Jest and learn how to write unit tests for your Node.js applications. Understand debugging techniques using tools like the built-in Node.js debugger or external tools like Chrome DevTools.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#application_deployment","title":"Application Deployment:","text":"<ul> <li>Learn about deploying Node.js applications to production environments. Explore hosting options, containerization using Docker, cloud platforms like AWS or Heroku, and continuous integration/continuous deployment (CI/CD) pipelines.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#performance_optimization","title":"Performance Optimization:","text":"<ul> <li>Study techniques for optimizing Node.js applications for performance and scalability. Learn about caching, load balancing, optimizing database queries, and implementing best practices for efficient code execution.</li> </ul>","tags":["NodeJs"]},{"location":"NodeJs/NodeJs%20RoadMap/#advanced_topics","title":"Advanced Topics:","text":"<ul> <li> <p>Once you have a strong foundation, you can explore more advanced topics based on your interests or project requirements. This may include real-time applications with WebSockets, serverless architecture with AWS Lambda, microservices, or using additional frameworks like GraphQL.</p> </li> <li> <p>Remember that this roadmap is just a suggested path, and you can adapt it based on your learning style, goals, and project requirements. It's also beneficial to work on practical projects along the way to apply your knowledge and gain hands-on experience. Happy learning!</p> </li> </ul>","tags":["NodeJs"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/","title":"Canvas Partical Network Animation","text":"","tags":["Others"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/#what_is_the_canvas_partical_network_animation","title":"What Is The Canvas Partical Network Animation?","text":"<ul> <li>One day, when I was working and I looked into the desktop of my wife, she sat next to me, and I saw she is accessing a website with beautiful effect as in the image below.</li> </ul> <ul> <li>So from that time, I took some hours for searching on google about it and I got the key word for this effect, it is <code>Canvas Partical Network Animation</code>.</li> <li>Then I continue to search and found the source code for on this github. Then I started playing with it.</li> </ul>","tags":["Others"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/#the_problem_in_this_source_code","title":"The Problem In This Source Code","text":"<ul> <li>I tried to clone the source and run it, everything is good until I put more sone <code>div</code> above the canvas. The my mouse and the point in the canvas are not synchronized. Let's see the image below.</li> </ul> <ul> <li>If you are not clear, please continue to view the image below.</li> </ul> <ul> <li>So, this issue is not a big deal but it brings me a little bit bad experience. So, I decided reading the source code to find the root cause. </li> </ul>","tags":["Others"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/#the_root_cause","title":"The Root Cause","text":"<ul> <li>After reading the source code and researched on Google, I found the root cause in the source code as below.</li> </ul> particle-network.js<pre><code>...\n\n// Mouse event listeners  \nthis.canvas.addEventListener('mousemove', function (e) {  \n  this.mouseParticle.x = e.clientX - this.canvas.offsetLeft;  \n  this.mouseParticle.y = e.clientY - this.canvas.offsetTop;  \n}.bind(this));\n\n...\n</code></pre> <ul> <li>As you can see, there is a function which is used for calculating the point in the canvas with the mouse position. In which, the <code>x</code> is the vertical coordinate and <code>y</code> is the horizontal coordinate of the point inside the canvas. </li> <li>Then for calculating the <code>x</code> coordinate of the point, it uses <code>e.clientX - this.canvas.offsetLeft;</code>. In which.<ul> <li><code>e.clientX</code> returns the\u00a0horizontal client coordinate\u00a0of the mouse pointer when a mouse event occurs.</li> <li><code>this.canvas.offsetLeft</code> returns the number of pixels that the upper left corner of the current element is offset to the left within the <code>offsetParent</code> node.</li> </ul> </li> <li> <p>Then for calculating the <code>y</code> coordinate of the point, it uses <code>e.clientY - this.canvas.offsetTop;</code>. In which.</p> <ul> <li><code>e.clientY</code> returns the\u00a0vertical client coordinate\u00a0of the mouse pointer when a mouse event occurs.</li> <li><code>this.canvas.offsetTop</code> returns the distance of the outer border of the current element relative to the inner border of the top of the <code>offsetParent</code>, the closest positioned ancestor element.</li> </ul> </li> <li> <p>Okay, so to understand why this formula is not correct in this case, let's continue follow these steps below.</p> </li> <li>Firstly, let's check the HTML file in this source code.</li> </ul> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;style type=\"text/css\"&gt;\n            body {\n                margin:0;\n                padding:0;\n            }\n            #particle-canvas {\n                width:100%;\n                height:100%;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;This is the div 1&lt;/div&gt;\n        &lt;div&gt;This is the div 2&lt;/div&gt;\n        &lt;div&gt;This is the div 3&lt;/div&gt;\n        &lt;div&gt;This is the div 4&lt;/div&gt;\n        &lt;div&gt;This is the div 5&lt;/div&gt;\n        &lt;div&gt;This is the div 6&lt;/div&gt;\n        &lt;div id=\"particle-canvas\"&gt;&lt;/div&gt;\n        &lt;script type=\"text/javascript\" src=\"particle-network.min.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            var canvasDiv = document.getElementById('particle-canvas');\n            var options = {\n                particleColor: '#888',\n                background: 'img/demo-bg.jpg',\n                interactive: true,\n                speed: 'medium',\n                density: 'high'\n            };\n            var particleCanvas = new ParticleNetwork(canvasDiv, options);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>As you can see, the <code>particle-canvas</code> div is used for creating the <code>ParticleNetwork</code> and it is the last div in the body. Then when we open the browser and inspect the element, you can see the <code>canvas</code> tag is created inside this div as in the image below.</li> </ul> <p></p> <ul> <li>So we have the parent of the <code>canvas</code> tag is the <code>particle-canvas</code> div and the distance between <code>particle-canvas</code> div and <code>canvas</code> tag is 0 for both <code>canvas.offsetLeft</code> and <code>canvas.offsetTop</code>.</li> <li>So with 0 values, we can have the formula below.</li> </ul> particle-network.js<pre><code>...\n\n// Mouse event listeners  \nthis.canvas.addEventListener('mousemove', function (e) {  \n  this.mouseParticle.x = e.clientX;  \n  this.mouseParticle.y = e.clientY;  \n}.bind(this));\n\n...\n</code></pre> <ul> <li>Then the point is calculated based on the <code>e.clientX</code> and <code>e.clientY</code>. However, the canvas is not displayed fully in the viewport because we have some divs above it. So applying the <code>e.clientY</code> for the <code>y</code> of the point is not correct and the point will be dropped down from the mouse position with the distance equal to the distance of the <code>canvas</code> to the top of the viewport. Let's see the image below to understand how is the formula wrong in this case.</li> </ul> <p></p> <ul> <li>In general, using <code>this.canvas.offsetLeft</code> and <code>this.canvas.offsetTop</code> in calculating the position of the point in canvas is not correct because they return the distance from the canvas to the parent div of it. So we need to find another way to calculate it.</li> </ul>","tags":["Others"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/#the_solution","title":"The Solution","text":"<ul> <li>After taking some research on the google, I found a way to get the distance of the canvas to the top and to the left of the viewport no matter how many div in between. It is <code>Element.getBoundingClientRect()</code> which return a DOMRect object providing information about the size of an element and its position relative to the viewport. See the image below.</li> </ul> <p>So let's update the formula in the source as below, then the issue will be fixed</p> particle-network.js<pre><code>...\n\n// Mouse event listeners  \nthis.canvas.addEventListener('mousemove', function (e) {  \n  var canvasRect = this.canvas.getBoundingClientRect();  \n  this.mouseParticle.x = e.clientX - canvasRect.left;  \n  this.mouseParticle.y = e.clientY - canvasRect.top;  \n}.bind(this));\n\n...\n</code></pre> <p></p>","tags":["Others"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/#summary","title":"Summary","text":"<ul> <li>Finally, after the fixing this issue for the canvas partical network animation, I applied it into the homepage of this website. It's great right?. From this issue, I learnt a lots although I doesn't know the Javascript before.<ul> <li>Sometimes, putting some comments in the source to explain complicated code or is necessary because without it maybe I would not fix this issue by myself.</li> <li>Don't scare when you have to work on the programming language that you are not good at. Believe me, be confident, just read it and at least I think you can understand what does it say?</li> <li>Google is a good friend, when you need a solution for something, let's try to search and search.</li> <li>Basic concept is very important, like the <code>offsetTop</code> or <code>offsetLeft</code> I took a lot of time to understand why did I always got 0. So I usually write down concepts, core functions when I learn something new.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Canvas%20Partical%20Network%20Animation/#reference","title":"Reference","text":"<ul> <li>FullSourceCode</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/","title":"Coding Standard","text":"","tags":["Others"]},{"location":"Others/Coding%20Standard/#java","title":"Java","text":"","tags":["Others"]},{"location":"Others/Coding%20Standard/#clean_code","title":"Clean code","text":"<ul> <li>Clean code is code that other developers can easily read, understand, and add to.</li> <li>Developers can easily understand what the code is doing without going into low-level implementation details. Good code is self-documented.</li> <li>Clean code is easy to maintain in the long run, easy to update and extend.</li> <li>KISS - Keep it stupid simple.</li> <li>Single responsibility - a class/function should do only one thing.</li> <li>DRY - Don't repeat yourself.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#names","title":"Names","text":"<ul> <li>The <code>name</code> of a variable, function, or class should tell why it exists, what it does, and how it is used.</li> <li><code>classes and objects</code> should have noun or noun phrase names \u2192 Example: Vehicle, Invoice, ConfigurationPage etc...</li> <li><code>methods</code> should have verb or verb phrase names \u2192 Example: deleteInvoice, createVehicle, etc...</li> <li><code>methods names</code> for principal operations should start with: get, create, update, delete.</li> <li><code>choosing names</code> that reveal the intent make it much easier to understand the code and to work on it.</li> <li> <p>Don't mislead by using inappropriate naming</p> <ul> <li> <p>Avoid using words that can lead other developers to confusion, such as the word <code>List</code>.</p> \u2705 Do\u26d4 Don't <pre><code>private List&lt;Student&gt; students;\n</code></pre> <pre><code>private List&lt;Student&gt; studentList;\n</code></pre> </li> <li> <p>Avoid including <code>the type of a variable</code> in the variable name.</p> \u2705 Do\u26d4 Don't <pre><code>private Integer amount;\n</code></pre> <pre><code>private Integer amountInteger;\n</code></pre> </li> <li> <p>Don't use <code>long variable/method or class names</code> that are very similar to one another.</p> \u2705 Do\u26d4 Don't <pre><code>public class JwtHandler {\n\n    public boolean IsValidated(String jwtToken) {\n        ... \n    }\n\n}\n</code></pre> <pre><code>public class PasswordJsonWebTokenValidator {\n\n    public boolean IsJsonWebTokenPasswordValid(String jwtToken) {\n        ... \n    }\n\n}\n</code></pre> </li> <li> <p>Avoid uppercase <code>o (O)</code> and lowercase <code>l (L)</code> in variable names.</p> </li> <li>Use names that can be pronounced.</li> <li>Use names that can be searched.</li> <li><code>Don't use single characters in class, method, and variable names</code> (example: a, e, b, c etc...). Not only they do not reveal their intention, but when searching for the usage of variable e you will get irreverent results.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#modules","title":"Modules","text":"<ul> <li>A new component should be composed of two parts: api and impl.</li> <li>api module contains interfaces, dto classes, and exceptions which will be used on impl module.</li> <li>Impl module will contain the logic of the new component and the Junit tests.</li> <li>Each package should reveal the reason:</li> </ul> <ul> <li>application - service classes</li> <li>domain - api \u2192 dto classes, impl\u2192 dao classes</li> <li>exception - exception classes</li> <li>config - configuration classes</li> <li>infrastructure - lower-level classes that deal with systems directly: service classes, repository, etc.</li> <li>rest - controller classes</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#classes","title":"Classes","text":"<ul> <li>Should be small.</li> <li>Should have one and only one reason.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#function","title":"Function","text":"<ul> <li>Should be small and easy to be understood. Up to 20 lines long, preferably smaller.</li> <li>Do one thing.</li> <li>Blocks inside if, else, while statements should be function calls, keeping the size down and also contributing to code documentation by using descriptive names.</li> <li>Avoid nested if statements. Function block-level indentation should only go up to two levels deep.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#argument","title":"Argument","text":"<ul> <li>The rule for the number of arguments a function should have simple, less as possible</li> <li>Three arguments should be avoided where possible and more than three requires special justification and should be avoided at all costs.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#flag_arguments","title":"Flag Arguments","text":"<ul> <li>Passing a boolean into a function is bad practice.</li> <li>It gives the idea that the function does two things if the boolean is false and another if it is true.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#argument_objects","title":"Argument objects","text":"<ul> <li>When a function requires more than three arguments you should consider grouping them into separate classes.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#argument_lists","title":"Argument lists","text":"<ul> <li>Argument lists of the same type, used for example in String.format are considered a single argument since it can be treated as a List.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#verbs_and_keywords","title":"Verbs and keywords:","text":"<ul> <li>Function naming should not be dealt with superficially. In the case of a monadic function, for example, the name should form a verb -&gt; noun pair.</li> <li>For example: save(user).</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#avoid_side_effects","title":"Avoid side effects","text":"<ul> <li>If your function is called save(user), as in the example above, it should only do this one thing, save the user input data.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#error_handling","title":"Error Handling","text":"<ul> <li>Use exceptions rather than return codes.</li> <li>Don't return null.</li> <li>Define custom exceptions.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#comments","title":"Comments","text":"<ul> <li>We should avoid using comments because that reveals that the code is not written well comments should be used only when our code cannot express in an easy-to-understand manner what it is doing log comments should be used only where is absolutely necessary.</li> <li>A few reasons why comments should be avoided:<ul> <li>Comments clutter code.</li> <li>Comments can encourage bad code.</li> <li>Comments can \"lie\". Code evolves constantly and comments can be outdated and not reflect what the code is actually doing.</li> <li>Time invested in writing comments should be directed in writing better code that is easy to understand.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#warning","title":"Warning","text":"<ul> <li>Some comments can be useful to prevent other developers from making changes that would have unwanted consequences. The below comment, for example, could prevent another programmer from using a static initializer.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#todos","title":"TODOs","text":"<ul> <li>TODO comments can be used as:<ul> <li>Reminders to complete functionality that cannot be completed during the time of writing (for whatever reason).</li> <li>Reminders for other developers to look at potential problems.</li> <li>Reminders to look for better naming.</li> <li>Delete deprecated functionality.</li> </ul> </li> <li>Whatever the reason for leaving TODOs it is important to regularly check them and eliminate them. TODOs should not be used as excuses to write bad code.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#formatting_conventions","title":"Formatting conventions","text":"<ul> <li>The most important aspect of formatting is standardization and consistency. Formatting helps good communication between developers, a reason why it should not be ignored.</li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#vertical_formatting","title":"Vertical formatting","text":"<ul> <li>Here are a few good principles to follow:<ul> <li>File names and modules should accurately describe it's high-level purpose.</li> <li>At the beginning of a file, we should find high-level details, concepts, and algorithms.</li> <li>As we read down into the source file we should go from high-level details to lower-level implementation details.</li> <li>Use blank lines only to separate concepts.</li> <li>Keep lines of code that are tightly related in functionality together.</li> <li>Keep imports and dependency declarations clean and updated.</li> <li>Closely related concepts should be kept together.</li> <li>Because of (7) try to avoid using protected variables too often.</li> <li>Variables should be declared as close as possible to their usage.</li> <li>Local variables should appear at the top of the method.</li> <li>Loop variables should be declared inside the loop.</li> <li>Instance variables should be declared at the top of the class.</li> <li>Dependent functions should be vertically close to each other.</li> <li>Function call dependency should be ordered from top to bottom.</li> <li>Order of declaration should be:<ul> <li>static variables.</li> <li>public variables.</li> <li>protected variables.</li> <li>no access modifier (package) variables.</li> <li>private variables.</li> <li>constructors.</li> <li>methods.</li> </ul> </li> <li>Methods should be grouped by functionality rather than by scope or accessibility. For example, a private class method can be in between two public instance methods. The goal is to make reading and understanding the code easier.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#horizontal_formatting","title":"Horizontal formatting","text":"<ul> <li>Each line should be as short as possible. It is easier to read and to follow across the code.</li> <li>The rule of thumb is to keep the lines in a file to a length that doesn't force horizontal scrolling. On a typical modern display, this can vary from 80 to 120 characters in normal readable font size.</li> <li>Just as in vertical formatting there are a few principles that each developer should follow:<ul> <li>Use horizontal white spaces to associate or disassociate things that are related or not related.</li> <li>Use indentation to accentuate the hierarchy of scopes in a file.</li> <li>Avoid collapsing scopes.</li> <li>Avoid dummy scopes with no body or use visible braces to make them visible.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#checkstyle","title":"Checkstyle","text":"<ul> <li>For the checkstyle we use SonarLint<ul> <li>It can be added from IntelliJ IDEA plugins section.</li> <li>We use the default configuration.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Coding%20Standard/#references","title":"References","text":"<ul> <li>Clean Code</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/","title":"Cookie Introduction","text":"","tags":["Others"]},{"location":"Others/Cookie/#what_is_the_cookie","title":"What Is The Cookie?","text":"<ul> <li><code>Cookies</code> are small files of information that a web server generates and sends to a Web Browser.  Web browsers store the cookies they receive for a predetermined period of time, or for the length of a user's Session on a website. They attach the relevant cookies to any future requests the user makes of the web server.</li> <li><code>Cookies</code> help inform websites about the user, enabling the websites to personalize the user experience. For example, ecommerce websites use <code>cookies</code> to know what merchandise users have placed in their shopping carts. In addition, some <code>cookies</code> are necessary for security purposes, such as <code>authentication cookies</code>.</li> <li>The cookies that are used on the Internet are also called \"HTTP cookies.\" Like much of the web, cookies are sent using the HTTP protocol.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#where_are_cookies_stored","title":"Where Are Cookies Stored?","text":"<ul> <li>Web browsers <code>store cookies in a designated file on users' devices</code>. The Google Chrome web browser, for instance, stores all cookies in a file labeled \"Cookies.\" Chrome users can view the cookies stored by the browser by opening developer tools], clicking the \"Application\" tab, and clicking on \"Cookies\" in the left side menu.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#what_are_cookies_used_for","title":"What Are Cookies Used For?","text":"<ul> <li> <p><code>User sessions</code>: <code>Cookies</code> help associate website activity with a specific user. A <code>session cookie</code> contains a unique string (a combination of letters and numbers) that matches a user session with relevant data and content for that user.</p> <ul> <li>Suppose Alice has an account on a shopping website. She logs into her account from the website's homepage. When she logs in, the website's server generates a session cookie and sends the cookie to Alice's browser. This cookie tells the website to load Alice's account content, so that the homepage now reads, \"Welcome, Alice.\"</li> <li>Alice then clicks to a product page displaying a pair of jeans. When Alice's web browser sends an HTTP request to the website for the jeans product page, it includes Alice's session cookie with the request. Because the website has this cookie, it recognizes the user as Alice, and she does not have to log in again when the new page loads.</li> </ul> </li> <li> <p><code>Personalization</code>: <code>Cookies</code> help a website \"remember\" user actions or user preferences, enabling the website to customize the user's experience.</p> <ul> <li>If Alice logs out of the shopping website, her username can be stored in a cookie and sent to her web browser. Next time she loads that website, the web browser sends this cookie to the web server, which then prompts Alice to log in with the username she used last time.</li> </ul> </li> <li> <p><code>Tracking</code>: Some <code>cookies</code> record what websites users visit. This information is sent to the server that originated the cookie the next time the browser has to load content from that server. With third-party tracking cookies, this process takes place anytime the browser loads a website that uses that tracking service.</p> <ul> <li>If Alice has previously visited a website that sent her browser a tracking cookie, this cookie may record that Alice is now viewing a product page for jeans. The next time Alice loads a website that uses this tracking service, she may see ads for jeans.</li> <li>However, advertising is not the only use for tracking cookies. Many analytics services also use tracking cookies to anonymously record user activity.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#what_are_the_different_types_of_cookies","title":"What Are The Different Types Of Cookies?","text":"<ul> <li>Some of the most important types of cookies to know include:</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#session_cookies","title":"Session Cookies","text":"<ul> <li>A <code>session cookie</code> helps a website track a user's session. Session cookies are deleted after a user's session ends \u2014 once they log out of their account on a website or exit the website. <code>Session cookies have no expiration date</code>, which signifies to the browser that they should be deleted once the session is over.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#persistent_cookies","title":"Persistent Cookies","text":"<ul> <li>Unlike session cookies, <code>persistent cookies</code> remain in a user's browser for a predetermined length of time, which could be a day, a week, several months, or even years. <code>Persistent cookies always contain an expiration date</code>.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#authentication_cookies","title":"Authentication Cookies","text":"<ul> <li><code>Authentication cookies</code> help manage user sessions; <code>they are generated when a user logs into an account</code> via their browser. They ensure that sensitive information is delivered to the correct user sessions by <code>associating user account information with a cookie identifier string</code>.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#tracking_cookies","title":"Tracking Cookies","text":"<ul> <li><code>Tracking cookies</code> are generated by tracking services. They record user activity, and web browsers send this record to the associated tracking service the next time they load a website that uses that tracking service.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#zombie_cookies","title":"Zombie Cookies","text":"<ul> <li>Like the \"zombies\" of popular fiction, <code>zombie cookies</code> regenerate after they are deleted. <code>Zombie cookies create backup versions of themselves outside of a browser's typical cookie storage location</code>. They use these backups to reappear within a browser after they are deleted. Zombie cookies are sometimes used by unscrupulous ad networks, and even by cyber attackers.</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#what_is_a_third-party_cookie","title":"What Is A third-party Cookie?","text":"<ul> <li>A <code>third-party cookie</code> is a cookie that belongs to a domain other than the one displayed in the browser. <code>Third-party cookies</code> are most often used for tracking purposes. They contrast with <code>first-party cookies</code>, which are associated with the same domain that appears in the user's browser.<ul> <li>When Alice does her shopping at jeans.example.com, the jeans.example.com origin server uses a <code>session cookie</code> to remember that she has logged into her account. This is an example of a <code>first-party cookie</code>. However, Alice may not be aware that a cookie from example.ad-network.com is also stored in her browser and is tracking her activity on jeans.example.com, even though she is not currently accessing example.ad-network.com. This is an example of a <code>third-party cookie</code>.</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#see_also","title":"See Also","text":"<ul> <li>Web Browser</li> <li>Session</li> </ul>","tags":["Others"]},{"location":"Others/Cookie/#references","title":"References","text":"<ul> <li>Cloud Flare</li> </ul>","tags":["Others"]},{"location":"Others/Docusaurus/","title":"Docusaurus","text":"","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#what_is_the_docusaurus","title":"What Is The Docusaurus?","text":"<ul> <li>Docusaurus is a\u00a0static-site generator. It builds a\u00a0single-page application\u00a0with fast client-side navigation, leveraging the full power of\u00a0React\u00a0to make your site interactive. It provides out-of-the-box\u00a0documentation features\u00a0but can be used to create\u00a0any kind of site\u00a0(personal website, product, blog, marketing landing pages, etc).</li> <li> <p>More information</p> </li> <li> <p>The interesting thing about <code>Docusaurus</code> is that it will convert markdown files into html pages by using html templates, so with this feature, we just need to focus on writing contents in markdown files, the <code>Docusaurus</code> will do all the rest for us.</p> </li> </ul>","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#installation","title":"Installation","text":"","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#nodejs","title":"NodeJs","text":"<ul> <li>Firstly, you need to install the Node.js on your computer. The version of Node.js should be 16.14 or above (which can be checked by running node -v). You can use nvm for managing multiple Node versions on a single machine installed.</li> <li>If you don't know how to install Node.js on your computer please  view this page</li> </ul>","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#create_sample_docusaurus_project","title":"Create Sample Docusaurus Project","text":"<ul> <li>Now, let's use the command below to create a sample Docusaurus project. This sample Docusaurus project will have name <code>my-blog</code>.</li> </ul> <pre><code>npx create-docusaurus@latest my-blog classic\n</code></pre> <ul> <li> <p>The\u00a0<code>classic</code>\u00a0template contains\u00a0<code>@docusaurus/preset-classic</code>\u00a0which includes standard documentation, a blog, custom pages, and a CSS framework (with dark mode support). You can get up and running extremely quickly with the classic template and customize things later on when you have gained more familiarity with Docusaurus.</p> </li> <li> <p>After execute the command above successfully, you will see the log results with some guides as below.</p> </li> </ul> <pre><code>[SUCCESS] Created my-blog.\n[INFO] Inside that directory, you can run several commands:\n\n  `npm start`\n    Starts the development server.\n\n  `npm run build`\n    Bundles your website into static files for production.\n\n  `npm run serve`\n    Serves the built website locally.\n\n  `npm deploy`\n    Publishes the website to GitHub pages.\n\nWe recommend that you begin by typing:\n\n  `cd my-blog`\n  `npm start`\n\nHappy building awesome websites!\n</code></pre>","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#test_sample_docusaurus_project","title":"Test Sample Docusaurus Project","text":"<ul> <li>After the creating step above you will see the Docusaurus Project with the structure as below.</li> </ul> <pre><code>my-blog\n\u251c\u2500\u2500 blog\n\u2502   \u251c\u2500\u2500 2019-05-28-hola.md\n\u2502   \u251c\u2500\u2500 2019-05-29-hello-world.md\n\u2502   \u2514\u2500\u2500 2020-05-30-welcome.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 doc1.md\n\u2502   \u251c\u2500\u2500 doc2.md\n\u2502   \u251c\u2500\u2500 doc3.md\n\u2502   \u2514\u2500\u2500 mdx.md\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u2514\u2500\u2500 custom.css\n\u2502   \u2514\u2500\u2500 pages\n\u2502       \u251c\u2500\u2500 styles.module.css\n\u2502       \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 img\n\u251c\u2500\u2500 docusaurus.config.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 sidebars.js\n\u2514\u2500\u2500 yarn.lock\n</code></pre> <ul> <li>Now let's use the command <code>npm start</code> to start your Docusaurus Project and you will see your Docusaurus Project will run at port <code>http://localhost:3000/</code> as below.</li> </ul>","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#see_also","title":"See Also","text":"<ul> <li>Linux Setup For Developer</li> </ul>","tags":["Others","StaticWeb"]},{"location":"Others/Docusaurus/#references","title":"References","text":"<ul> <li>Docusaurus.io</li> </ul>","tags":["Others","StaticWeb"]},{"location":"Others/K6/","title":"K6 Load Testing Tool","text":"","tags":["Others"]},{"location":"Others/K6/#what_is_the_k6","title":"What Is The K6?","text":"<ul> <li> <p>Grafana k6 is an open-source load testing tool that makes performance testing easy and productive for engineering teams. k6 is free, developer-centric, and extensible.</p> </li> <li> <p>Using k6, you can test the reliability and performance of your systems and catch performance regressions and problems earlier. k6 will help you to build resilient and performant applications that scale.</p> </li> <li> <p>k6 is developed by Grafana Labs\u00a0and the community.</p> </li> <li> <p>More information</p> </li> </ul>","tags":["Others"]},{"location":"Others/K6/#install_k6","title":"Install K6","text":"<ul> <li>Please view Linux Setup For Developer or official page</li> </ul>","tags":["Others"]},{"location":"Others/K6/#basic_stress_testing","title":"Basic Stress Testing","text":"<ul> <li>Stress testing assesses how the system performs when loads are heavier than usual.</li> <li> <p>The load pattern of a stress test resembles that of an average-load test. The main difference is higher load. To account for higher load, the ramp-up period takes longer in proportion to the load increase. Similarly, after the test reaches the desired load, it might last for slightly longer than it would in the average-load test.</p> </li> <li> <p>Firstly, let's create a js file with any name. Then let's add the sample below below.</p> </li> </ul> k6.js<pre><code>import http from 'k6/http';\nimport { sleep } from 'k6';\n\nexport const options = {\n    // Key configurations for Stress in this section\n    stages: [\n      { duration: '30s', target: 10 }, // traffic ramp-up from 1 to a higher 10 users over 10 minutes.\n      { duration: '1m', target: 10 }, // stay at higher 10 users for 1 minutes\n      { duration: '1m', target: 0 }, // ramp-down to 0 users\n    ],\n  };\n\nexport default function () {\n  http.get('http://192.168.49.2:31000/v1/json/validator/schemas/CustomerJsonSchemaValidatorDev');\n  sleep(1);\n\n}\n</code></pre> <ul> <li>So firstly, we will have some imports from the K6 libraries. The <code>http</code> provides the ability to make HTTP requests, and <code>sleep</code> is used to introduce pauses in the test script.</li> <li> <p>Then we will define the test configuration options in the object <code>options</code>.</p> <ul> <li>The <code>stages</code> is an array of test stages. Each stage specifies a duration and a target number of virtual users.<ul> <li>In the first stage, it ramps up from 1 to 10 virtual users over a duration of 30 seconds.</li> <li>In the second stage, it maintains 10 virtual users for 1 minute.</li> <li>In the third stage, it ramps down to 0 virtual users over 1 minute.</li> </ul> </li> <li>These stages simulate the load on the system, starting with light traffic, increasing to a peak, and then decreasing.</li> </ul> </li> <li> <p>Finally, we have the <code>default function()</code>, this is the default function that represents a VU (Virtual User).</p> <ul> <li>Inside this function, an HTTP GET request is made to a specific URL using <code>http.get()</code>. The URL is <code>http://192.168.49.2:31000/v1/json/validator/schemas/CustomerJsonSchemaValidatorDev</code>.</li> <li><code>sleep(1);</code>: After making the HTTP request, there is a pause of 1 second introduced using the <code>sleep()</code> function. This helps control the request rate and adds a delay between consecutive requests made by a VU.</li> </ul> </li> <li> <p>Now, let's run command below to execute <code>k6.js</code>.</p> </li> </ul> <pre><code>k6 run k6.js\n</code></pre> <pre><code>duc@duc-MS-7E01:~/study/kubernetes/helm/zero-downtime$ k6 run k6.js \n\n          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n     /\\  /  \\     |  |/  /   /  /    \n    /  \\/    \\    |     (   /   \u203e\u203e\\  \n   /          \\   |  |\\  \\ |  (\u203e)  | \n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 10 max VUs, 3m0s max duration (incl. graceful stop):\n           * default: Up to 10 looping VUs for 2m30s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\nrunning (0m34.0s), 10/10 VUs, 183 complete and 0 interrupted iterations\ndefault   [=======&gt;------------------------------] 10/10 VUs  0m34.0s/2m30.0s\n</code></pre> <ul> <li>Then after the stress test finished, then we can see the result as below.</li> </ul> <pre><code>duc@duc-MS-7E01:~/study/kubernetes/helm/zero-downtime$ k6 run k6.js \n          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n     /\\  /  \\     |  |/  /   /  /    \n    /  \\/    \\    |     (   /   \u203e\u203e\\  \n   /          \\   |  |\\  \\ |  (\u203e)  | \n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 10 max VUs, 3m0s max duration (incl. graceful stop):\n           * default: Up to 10 looping VUs for 2m30s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n     data_received..................: 10 MB  67 kB/s\n     data_sent......................: 151 kB 1.0 kB/s\n     http_req_blocked...............: avg=17.98\u00b5s  min=2.7\u00b5s   med=9.67\u00b5s   max=773.22\u00b5s p(90)=11.7\u00b5s   p(95)=13.09\u00b5s \n     http_req_connecting............: avg=6.58\u00b5s   min=0s      med=0s       max=576.03\u00b5s p(90)=0s       p(95)=0s      \n     http_req_duration..............: avg=6.09ms   min=1.39ms  med=5.7ms    max=170.49ms p(90)=8.69ms   p(95)=9.84ms  \n       { expected_response:true }...: avg=6.09ms   min=1.39ms  med=5.7ms    max=170.49ms p(90)=8.69ms   p(95)=9.84ms  \n     http_req_failed................: 0.00%  \u2713 0        \u2717 1077\n     http_req_receiving.............: avg=468.15\u00b5s min=37.69\u00b5s med=457.27\u00b5s max=2.73ms   p(90)=732.35\u00b5s p(95)=861.18\u00b5s\n     http_req_sending...............: avg=40.74\u00b5s  min=9.72\u00b5s  med=40.52\u00b5s  max=190.05\u00b5s p(90)=52.54\u00b5s  p(95)=56.04\u00b5s \n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s       p(95)=0s      \n     http_req_waiting...............: avg=5.58ms   min=1.32ms  med=5.18ms   max=169.33ms p(90)=8ms      p(95)=9.01ms  \n     http_reqs......................: 1077   7.169912/s\n     iteration_duration.............: avg=1s       min=1s      med=1s       max=1.17s    p(90)=1s       p(95)=1.01s   \n     iterations.....................: 1077   7.169912/s\n     vus............................: 1      min=1      max=10\n     vus_max........................: 10     min=10     max=10\n\n\nrunning (2m30.2s), 00/10 VUs, 1077 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 00/10 VUs  2m30s\n</code></pre>","tags":["Others"]},{"location":"Others/K6/#references","title":"References","text":"<ul> <li>K6 Document</li> </ul>","tags":["Others"]},{"location":"Others/Session/","title":"Session Introduction","text":"","tags":["Others"]},{"location":"Others/Session/#what_is_the_session","title":"What Is The Session?","text":"<ul> <li> <p>A <code>session</code> is the total time devoted to an activity. In computer systems, a user session begins when a user logs in to or accesses a particular computer, network, or software service. It ends when the user logs out of the service, or shuts down the computer. A session can temporarily store information related to the activities of the user while connected. A session Cookie is used in web pages for storing information in case the user leaves the web page or closes down their Internet browser. For example, this is one way a website can remember what is in your shopping cart if you leave and come back.</p> </li> <li> <p>In computer programming, <code>session</code> variables store temporary information, sometimes to use for retrieving and viewing data on multiple web pages. Websites requiring a username and password use <code>session</code> variables to help transfer data between web pages, but only while the user is logged in to the computer.</p> </li> </ul>","tags":["Others"]},{"location":"Others/Session/#what_is_the_session_timeout","title":"What Is The Session Timeout?","text":"<ul> <li><code>Session timeout</code> represents the event occuring when a user does not perform any action on a web site during an interval (defined by a web server). The event, on the server side, changes the status of the user <code>session</code> to \u2018invalid\u2019 (ie. \u201cnot used anymore\u201d) and instructs the web server to destroy it (deleting all data contained in it).</li> <li>You can image that if you login on a website then you need to go out and forgot logout. Then when you go back to your website you will be required to login again. It means the your <code>session</code> has been timeout, because when you do nothing on the website the server side will calculate the time interval of the <code>session</code> and destroy it if it's timeout.</li> </ul>","tags":["Others"]},{"location":"Others/Session/#session_timeout_on_security_and_best_practices","title":"Session Timeout On Security and Best practices","text":"<ul> <li>The <code>Session timeout</code> defines an action window time for a user, this window represents the time in which an attacker can try to steal and use a existing user session\u2026</li> <li>For this, it\u2019s best practices to:<ul> <li>Set <code>session timeout</code> to the minimal value possible depending on the context of the application.</li> <li>Avoid \u201cinfinite\u201d session timeout.</li> <li>Prefer declarative definition of the <code>session timeout</code> in order to apply a global timeout for all application sessions.</li> <li>Trace session creation/destruction in order to analyse the creation trend and try to detect a normal number of session creations (application profiling phase in a attack).</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Session/#see_also","title":"See Also","text":"<ul> <li>Cookie</li> </ul>","tags":["Others"]},{"location":"Others/Session/#references","title":"References","text":"<ul> <li>Computer Hope</li> <li>OWASP</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/","title":"Mock Server With SoapUI","text":"","tags":["Others"]},{"location":"Others/SoapUI/#what_is_the_soapui","title":"What Is The SoapUI?","text":"<ul> <li><code>SoapUI</code> is a tool for testing Web Services; these can be the SOAP Web Services as well RESTful Web Services or HTTP based services. SoapUI is an Open Source and completely free tool with a commercial companion -ReadyAPI- that has extra functionality for companies with mission critical Web Services.</li> <li>More information</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/#mock_web_services_by_soapui","title":"Mock Web Services By SoapUI","text":"<ul> <li>As a developer, there are some cases you have to implement a feature for calling Web Services and when you finish your implementation then you would need to test your implementation on local and to do it you also need a mock Web Services on your local. So The SoapUI will help you to create a mock Web Services easily.</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/#prepare_data","title":"Prepare Data","text":"<ul> <li>To create a mock Web Services on SoapUI, you need to have a WDSL file.</li> <li>In this example I will choose country list SOAP service because it is the one that is working well.</li> <li>So you need go to country list SOAP service by your browser. Then <code>Right Click</code> and choose <code>Save As</code>. After that you save the file with type <code>.wsdl</code> at any folder that you want.</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/#soapui_configuration","title":"SoapUI Configuration","text":"<ul> <li>If you don't know to install SoapUI on your computer (especially Linux computer) so you can view  this post for installation.</li> <li>Now, let's open SoapUI then go to <code>File</code> --&gt; <code>New Soap UI Project</code>.</li> <li>Then follow steps as in the image below:<ul> <li>Put a name of the Soap project.</li> <li>Click Browse button to choose the <code>wsdl</code> file.</li> <li>Find and choose <code>wsdl</code> file.</li> <li>Click <code>Open</code> button.</li> </ul> </li> </ul> <ul> <li>Now, let's make sure you check the first box as in the image and click <code>Ok</code>.</li> </ul> <ul> <li>After that you will see there are two generated soap api request suits.</li> </ul> <ul> <li>In which the first generated soap api request suit <code>CountryInfoServiceSoapBinding</code> is used for <code>SOAP version 1.1</code>. The second generated soap api request suilt <code>CountryInfoServiceSoapBinding12</code> is used for <code>SOAP version 1.2</code>.</li> <li>You can try to open an generated soap api request, put a value and try to call it. It will call to the real Web Service and return the response like you use the postman to call.</li> </ul> <ul> <li>Now, to generate SOAP mock server, you can <code>Right Click</code> on the <code>CountryInfoServiceSoapBinding</code> suit and choose <code>Generate Soap Mock Service</code>.</li> </ul> <ul> <li>Then you need to put a path name and the port for your soap mock server and click ok.</li> </ul> <ul> <li>Now, you will see the generated mock service has been created, then you can go to the api that you want to call and edit the mock response value.</li> </ul> <ul> <li>Finally, click the button start to start your mock soap server.</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/#testing","title":"Testing","text":"<ul> <li>Now, you can go to soap api request suit <code>CountryInfoServiceSoapBinding</code> and change the server url as in the image which point to your mock server and execute the request for testing. You should receive the successful result as in the image below.</li> </ul> <ul> <li>Now, it is ready for you to test your implementation in your spring boot application or any other applications. You can view the post Spring Boot With OpenApi or Spring Cloud OpenFeign With Web Services for more information</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/#see_also","title":"See Also","text":"<ul> <li>Spring Boot With Web Services</li> <li>Spring Cloud OpenFeign With Web Services</li> </ul>","tags":["Others"]},{"location":"Others/SoapUI/#references","title":"References","text":"<ul> <li>SoapUI</li> <li>sqa-dev.blogspot.com</li> <li>country list SOAP service</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/","title":"Web Browser","text":"","tags":["Others"]},{"location":"Others/Web%20Browser/#what_is_the_web_browser","title":"What Is The Web Browser?","text":"<ul> <li>A web browser (also referred to as an Internet browser or simply a browser) is application software for accessing the World Wide Web or a local website. When a user requests a web page from a particular website, the web browser retrieves the necessary content from a web server and then displays the page on the user's device. More information</li> <li>A Web browser is a client program that uses HTTP (Hypertext Transfer Protocol) to make requests of Web servers throughout the Internet on behalf of the browser user. Most browsers support e-mail and the File Transfer Protocol (FTP), but a Web browser is not required for those Internet protocols, more specialized client programs are more popular. More information</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#how_does_it_work","title":"How Does It Work?","text":"<ul> <li>So, when you enter an URL in your browser, the browser will find the IP address for the domain using the DNS.</li> <li>Once the browser has identified which server is going to serve, it will initiate a TCP connection with the server and begin the HTTP exchange. An HTTP exchange involves the client (the browser) which sends a request, and the server replies back with a response. Usually, our browser will be supported to received many kind of formats in the server's response such as HTML, JSON, XML, image etc.</li> <li>Assume the browser will receive a HTML file, then the browser will parse the HTML and fetch other additional resources from server such as images, CSS documents or JavaScript documents which are included in the HTML content.</li> <li>The browser renders and displays the HTML content which is the web page.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#web_browser_components","title":"Web Browser Components","text":"<ul> <li>Any web browser has two elements- front-end and back-end. The front-end is the interface we interact with, which looks fairly simple. However, it\u2019s the complex back-end that facilitates the core functioning of a browser. A browser has the following main components.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#user_interface","title":"User Interface","text":"<ul> <li>The interface is the space where users interact with the browser. It includes the address bar, on-screen controls like home, back, forward, and refresh, followed by the part where the web page is displayed, bookmarks button, and all other options on the browser screen.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#browser_engine","title":"Browser Engine","text":"<ul> <li>The Browser Engine provides a link between the user interface and the rendering engine. It manages and manipulates the rendering engine based on inputs from various user interfaces.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#rendering_engine","title":"Rendering Engine","text":"<ul> <li>The Rendering Engine renders the requested web page on the browser screen. A web page is a document commonly written in HTML- rendering engine converts this document and data to an understandable format so that users can see the desired site, image, or video.</li> <li>It deals with HTML and XML documents and other files to generate the layout displayed in the user interface. The rendering engine can also work with other types of data with the help of certain plugins and extensions. Below are the rendering engines used by major web browsers:</li> </ul> <ul> <li>Blink \u2013 Google Chrome, Opera, Microsoft Edge (previously used EdgeHTML).</li> <li>WebKit \u2013 Used in Safari.</li> <li>Gecko \u2013 Mozilla Firefox.</li> <li>Trident \u2013 Internet Explorer.</li> <li>Presto \u2013 Legacy rendering engine for Opera.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#networking","title":"Networking","text":"<ul> <li>The Networking component handles internet communication and security. It retrieves the URLs using common internet protocols like HTML and FTP.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#javascript_interpreter","title":"JavaScript Interpreter","text":"<ul> <li>The JavaScript Interpreter, as the name suggests, interprets and executes the JavaScript code embedded in a website. The results then are sent to the rendering engine for display.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#ui_backend","title":"UI Backend","text":"<ul> <li>UI Backend helps to draw basic widgets like a select box, an input box, a window, a check box, etc. It uses the underlying operating system user interface methods for the same.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#data_storage","title":"Data Storage","text":"<ul> <li>It is a uniform layer that the browser uses to store all its data including Cookie, Local Storage, Session Storage, IndexedDB, WebSQL, and FileSystem.</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#see_also","title":"See Also","text":"<ul> <li>Cookie</li> <li>Session</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Browser/#references","title":"References","text":"<ul> <li>Wikipedia</li> <li>Techtarget</li> <li>Browsertouse</li> </ul>","tags":["Others"]},{"location":"Others/Web%20Services/","title":"Web Services","text":"","tags":["Others"]},{"location":"Others/Web%20Services/#what_is_the_web_services","title":"What Is The Web Services?","text":"<ul> <li> <p>Different books and different organizations provide different definitions to Web Services. Some of them are listed here.</p> <ul> <li> <p>A web service is any piece of software that makes itself available over the internet and uses a standardized XML messaging system. XML is used to encode all communications to a web service. For example, a client invokes a web service by sending an XML message, then waits for a corresponding XML response. As all communication is in XML, web services are not tied to any one operating system or programming language - Java can talk with Perl; Windows applications can talk with Unix applications.</p> </li> <li> <p>Web services are self-contained, modular, distributed, dynamic applications that can be described, published, located, or invoked over the network to create products, processes, and supply chains. These applications can be local, distributed, or web-based. Web services are built on top of open standards such as TCP/IP, HTTP, Java, HTML, and XML.</p> </li> <li> <p>Web services are XML-based information exchange systems that use the Internet for direct application-to-application interaction. These systems can include programs, objects, messages, or documents.</p> </li> <li> <p>A web service is a collection of open protocols and standards used for exchanging data between applications or systems. Software applications written in various programming languages and running on various platforms can use web services to exchange data over computer networks like the Internet in a manner similar to inter-process communication on a single computer. This interoperability (e.g., between Java and Python, or Windows and Linux applications) is due to the use of open standards.</p> </li> </ul> </li> <li> <p>To summarize, a complete web service is, therefore, any service that:</p> <ul> <li>Is available over the Internet or private (intranet) networks</li> <li>Uses a standardized XML messaging system</li> <li>Is not tied to any one operating system or programming language</li> <li>Is self-describing via a common XML grammar</li> <li>Is discoverable via a simple find mechanism</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Web%20Services/#components_of_web_services","title":"Components of Web Services","text":"<ul> <li>The basic web services platform is XML + HTTP. All the standard web services work using the following components<ul> <li>SOAP (Simple Object Access Protocol)</li> <li>UDDI (Universal Description, Discovery and Integration)</li> <li>WSDL (Web Services Description Language)</li> </ul> </li> </ul>","tags":["Others"]},{"location":"Others/Web%20Services/#soap","title":"SOAP","text":"<ul> <li> <p><code>Simple Object Access Protocol (SOAP)</code> is a lightweight XML-based protocol that is used for the exchange of information in decentralized, distributed application environments. You can transmit SOAP messages in any way that the applications require, as long as both the client and the server use the same method. The current specification describes only a single transport protocol binding, which is HTTP.</p> </li> <li> <p><code>SOAP</code> perfectly fits into the world of Internet applications and promises to improve Internet inter-operability for application services in the future. In essence, SOAP packages method calls into XML strings and delivers them to component instances through HTTP.</p> </li> <li> <p><code>SOAP</code> XML documents are structured around root elements, child elements with values, and other specifications. First an XML document containing a request (a method to be invoked and the parameters) is sent out. The server responds with a corresponding XML document that contains the results.</p> </li> <li> <p><code>SOAP</code> is not based on Microsoft technology. It is an open standard drafted by UserLand, Ariba, Commerce One, Compaq, Developmentor, HP, IBM, IONA, Lotus, Microsoft, and SAP. SOAP 1.1 was presented to the W3C in May 2000 as an official Internet standard. Microsoft is one of the greatest advocates of SOAP and has incorporated SOAP as a standard interface in the .NET architecture.</p> </li> <li> <p>A SOAP stack, an implementation of the SOAP standard on the client side, is comprised of libraries and classes that offer helper functions. A significant Web service testing challenge is that there are a number of SOAP stack implementations that are not compatible with one another. So although SOAP is intended to be both platform- and technology-independent, it is not. Web services written in .NET are however always compatible with .NET clients\u2014they use the same SOAP stack, or library. When testing a .NET Web service however, you need to confirm if the service is compatible with other SOAP stack implementations, for example Java SOAP stack, to avoid interoperability issues.</p> </li> <li> <p>SOAP client requests are encapsulated within HTTP POST or M-POST packages. The following example is taken from the Internet draft-specification.</p> </li> </ul> <pre><code>POST /StockQuote HTTP/1.1\nHost: www.stockquoteserver.com\nContent-Type: text/xml;\ncharset=\"utf-8\"\nContent-Length: nnnn\nSOAPAction: \"Some-URI\"\n&lt;?xml version=\"1.0\"?&gt;\n&lt;SOAP-ENV:Envelope\n  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;\n  &lt;SOAP-ENV:Body&gt;\n    &lt;m:GetLastTradePrice xmlns:m=\"Some-URI\"&gt;\n      &lt;symbol&gt;DIS&lt;/symbol&gt;\n    &lt;/m:GetLastTradePrice&gt;\n  &lt;/SOAP-ENV:Body&gt;\n&lt;/SOAP-ENV:Envelope&gt;\n</code></pre> <ul> <li> <p>The first four lines of code are standard HTTP. POST is the HTTP verb which is required for all HTTP messages. The\u00a0Content-Type\u00a0and\u00a0Content-Length\u00a0fields are required for all HTTP messages that contain payloads. The content-type\u00a0text/xml\u00a0indicates that the payload is an XML message to the server or a firewall capable of scanning application headers.</p> </li> <li> <p>The additional HTTP header\u00a0SOAPAction\u00a0is mandatory for HTTP based SOAP messages, and you can use it to indicate the intent of a SOAP HTTP request. The value is a URI that identifies the intent. The content of a\u00a0SOAPAction\u00a0header field can be used by servers, for example firewalls, to appropriately filter SOAP request messages in HTTP. An empty string (\"\") as the header-field value indicates that the intent of the SOAP message is provided by the HTTP Request-URI. No value means that there is no indication on the intent of the message.</p> </li> <li> <p>The XML code is straightforward. The elements\u00a0Envelope\u00a0and\u00a0Body\u00a0offer a generic payload-packaging mechanism. The element\u00a0GetLastTradePrice\u00a0contains an element called\u00a0symbol, which contains a stock-ticker symbol. The purpose of this request is to get the last trading price of a specific stock, in this case Disney (DIS).</p> </li> <li> <p>The program that sends this message only needs to understand how to frame a request in a SOAP-complient XML message and how to send it through HTTP. In the following example, the program knows how to format a request for a stock price. The HTTP server that receives the message knows that it is a SOAP message because it recognizes the HTTP header\u00a0SOAPAction. The server then processes the message.</p> </li> <li> <p><code>SOAP</code> defines two types of messages,\u00a0<code>calls</code>\u00a0and\u00a0<code>responses</code>, to allow clients to request remote procedures and to allow servers to respond to such a request. The previous example is an example of a call. The following example comes as a response in answer to the call.</p> </li> </ul> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/xml;\ncharset=\"utf-8\"\nContent-Length: nnnn\n&lt;?xml version=\"1.0\"?&gt;\n&lt;SOAP-ENV:Envelope\n  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/&gt;\n  &lt;SOAP-ENV:Body&gt;\n    &lt;m:GetLastTradePriceResponse xmlns:m=\"Some-URI\"&gt;\n      &lt;Price&gt;34.5&lt;/Price&gt;\n    &lt;/m:GetLastTradePriceResponse&gt;\n  &lt;/SOAP-ENV:Body&gt;\n&lt;/SOAP-ENV:Envelope&gt;\n</code></pre> <ul> <li> <p>The first three lines of code are standard HTTP. The first line indicates a response code to the previous POST request, the second and third line indicate the content type and the fourth line the lenght of the response.</p> </li> <li> <p>XML headers enclose the actual SOAP payloads. The XML element\u00a0GetLastTradePriceResponse\u00a0contains a response to the request for a trading price. The child element is\u00a0Price, which indicates the value that is returned to the request</p> </li> </ul>","tags":["Others"]},{"location":"Others/Web%20Services/#uddi","title":"UDDI","text":"<ul> <li><code>Universal Description, Discovery, and Integration (UDDI)</code> specification defines a way to publish and discover information about Web services.</li> <li> <p><code>UDDI</code> has two functions:</p> <ul> <li>It is a SOAP-based protocol that defines how clients communicate with UDDI registries.</li> <li>It is a particular set of global replicated registries.</li> </ul> </li> <li> <p><code>UDDI</code> includes an XML schema for SOAP messages that defines a set of documents to describe business and services information, a common set of APIs for querying and publishing information to the directories, and an API for replicating directory entries between peer UDDI nodes.</p> </li> <li> <p><code>UDDI registries</code>: <code>UDDI</code> manages the discovery of Web services by relying on a distributed registry of businesses and their service descriptions implemented in a common XML format. Before you can publish your business entity and Web service to a public registry, you must first register your business entity with a <code>UDDI registry</code>.</p> </li> <li> <p><code>UDDI registries</code> come in two forms: public and private.\u00a0 Both types comply to the same specifications.\u00a0 A private registry enables you to publish and test your internal e-business applications in\u00a0a secure, private environment.</p> </li> <li> <p><code>A public registry</code> is a collection of peer directories that contain information about businesses and services. It locates services that are registered at one of its peer nodes and facilitates the discovery of published Web services. Data is replicated at each of the registries on a regular basis. This ensures consistency in service description formats and makes it easy to track changes as they occur. IBM\u00ae maintains two public registries called the IBM UDDI Business Registry and the IBM UDDI Test Registry. The IBM UDDI Test Registry allows you to develop your Web service and experience the UDDI registration process without placing your Web service in an official registry.  Use the IBM UDDI Test Registry to experiment with UDDI, and to test and validate your Web service.</p> </li> <li> <p><code>A private registry</code> allows you to publish and test your internal applications in a secure, private environment.</p> </li> <li> <p>The UDDI Business Registry acts as a B2B directory linking marketplaces, buyers, and sellers. The information provided in the registry consists of three components: white pages, yellow pages, and green pages. White pages include the business name, contact information, and a text description of the business's services. Yellow pages include industrial categorizations based on standard taxonomies such as NAICS, ISO 3166, and UNSPSC. Green pages include references to specifications for Web services and pointers to various file and URL-based discovery mechanisms. This makes it easy for businesses to integrate across marketplaces. Because it is registered, information is made available across all applications.</p> </li> <li> <p>Businesses populate the registry with descriptions of the services that they support. <code>UDDI</code> assigns a unique identifier to each service description and business registration. These become the service and business keys respectively. Search engines, and applications query the registry to discover services. <code>UDDI</code> servers are a directory of available services and service providers.</p> </li> </ul>","tags":["Others"]},{"location":"Others/Web%20Services/#wsdl","title":"WSDL","text":"<ul> <li><code>WSDL</code> stands for Web Service Description Language, <code>WSDL</code> is an XML notation for describing a web service. A <code>WSDL</code> definition tells a client how to compose a web service request and describes the interface that is provided by the web service provider.</li> <li>A <code>WSDL</code> definition is divided into separate sections that specify the logical interface and the physical details of a web service. The physical details include both endpoint information, such as HTTP port number, and binding information, which specifies how the SOAP payload is represented and which transport is used.</li> <li><code>WSDL</code> is an important component for building web applications. It facilitates various applications that are built on multiple languages to interact with each other. <code>WSDL</code> is used as the combination of SOAP and XML schemas that provide communication between the clients and web services over the internet. To read the <code>WSDL</code> file, the client program must connect to the Web service and specify the operation required to connect to the Web server.</li> <li>WSDL Document Elements</li> </ul> Element Description Definitions It is the basic element of the WSDL document that contains the definition of one or more services. Types The Type element is used to give information about the complicated data types used within the WSDL document. Message It contains abstract data that is being used in communication between client and web server. It also defines the data elements for each operation. portType It contains the collection of abstract operation supported by one or more endpoints. Port It is used to define the single endpoint as an address for the binding. Services It is a collection of endpoint networks that specify the port address for the binding. Binding It specifies how operations are implemented by concrete protocols and data format features for operation and messaging. <ul> <li>Structure of WSDL Document</li> </ul> <pre><code>&lt;definitions&gt;  \n    &lt;types&gt;  \n        Definition of types goes here.  \n     &lt;/types&gt;  \n\n    &lt;message&gt;  \n     Definition of a message goes here.  \n    &lt;/message&gt;  \n\n    &lt;portType&gt;  \n        &lt;operation&gt;  \n             Definition of an operation goes here.  \n        &lt;/operation&gt;  \n    &lt;/portType&gt;  \n\n    &lt;binding&gt;  \n     Definition of a binding goes here.  \n    &lt;/binding&gt;  \n\n    &lt;service&gt;  \n    Definition of service goes here.  \n    &lt;/service&gt;  \n\n&lt;/definition&gt;  \n</code></pre> <ul> <li>We can also add other elements such as extension elements and service elements combined into a single WSDL document with possible definitions of multiple web services.</li> <li> <p>The following are the four major transmissions of the WSDL that support endpoint in the SoapUI tool.</p> <ul> <li>One Way</li> <li>Request and Response</li> <li>Solicit response</li> <li>Notification</li> </ul> </li> <li> <p><code>One way</code>: A one-way service can only receive one-way messages. It means that the client can send a request to the server by executing an operation with a single input element.</p> </li> </ul> <pre><code>&lt;wsdl:definitions .... &gt;    \n   &lt;wsdl:portType name=\"getListCountriesSoap\"&gt;  \n      &lt;wsdl:operation name = \"getCountries \"&gt;   \n&lt;wsdl:input message=\"tns:getCountriesSoapIn\"/&gt;  \n      &lt;/wsdl:operation&gt;   \n   &lt;/wsdl:portType &gt;   \n&lt;/wsdl:definitions&gt;  \n</code></pre> <ul> <li><code>Request and Response</code>: The Request and Response service is used to send a request to the server and receive a response from the web server. It has two operation elements. The first input element is followed by another element to send and receive the request and response in the web service.</li> </ul> <pre><code>&lt;wsdl:definitions ?.&gt;  \n&lt;wsdl:portType name=\"getListCountriesSoap\"&gt;  \n&lt;wsdl:operation name=\"getCountries\"&gt;  \n&lt;wsdl:input message=\"tns:getCountriesSoapIn\"/&gt;  \n&lt;wsdl:output message=\"tns:getCountriesSoapOut\"/&gt;  \n&lt;/wsdl:operation&gt;  \n&lt;/wsdl:portType&gt;  \n&lt;/wsdl:definitions&gt;  \n</code></pre> <ul> <li><code>Solicit Response</code>: A solicit response consists of an operation involving two input elements. The first input element contains a server request for the client, followed by one input element of the client's response back to the server.</li> </ul> <pre><code>&lt;wsdl:definitions ?.&gt;  \n&lt;wsdl:portType name=\"getListCountriesSoap\"&gt;   \n&lt;wsdl:operation name=\"getCountries\" parameterOrder =\"getListCountries\"&gt;  \n&lt;wsdl:output name=\"getCountries\"? message=\"tns:getCountriesSoapOut\"/&gt;  \n&lt;wsdl:input name=\"getCountries\"? message=\"tns:getCountriesSoapIn\"/&gt;  \n&lt;wsdl:fault name = \" getCountries \" message = \"tns:getCountries\"/&gt;  \n&lt;/wsdl:operation&gt;  \n&lt;/wsdl:portType&gt;  \n&lt;/wsdl:definitions&gt;\n</code></pre> <ul> <li><code>Notification</code>: A server sends information or message to a client machine. Therefore, a notification consists of an operation that includes an input element to send a notification to the client.</li> </ul> <pre><code>&lt;wsdl:definitions .... &gt;   \n   &lt;wsdl:portType name=\"getListCountriesSoap\" &gt;   \n      &lt;wsdl:operation name = \" getCountries \"&gt;   \n         &lt;wsdl:output name = \" getCountries \"? message = \" tns:getCountriesSoapOut \"/&gt;   \n      &lt;/wsdl:operation&gt;   \n   &lt;/wsdl:portType &gt;   \n&lt;/wsdl:definitions&gt;   \n</code></pre> <ul> <li>Example of  an <code>WSDL</code> file is showed as below.</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n&lt;wsdl:definitions xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n                  xmlns:tns=\"http://www.cleverbuilder.com/BookService/\"\n                  xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\n                  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n                  name=\"BookService\"\n                  targetNamespace=\"http://www.cleverbuilder.com/BookService/\"&gt;\n  &lt;wsdl:documentation&gt;Definition for a web service called BookService,\n    which can be used to add or retrieve books from a collection.\n  &lt;/wsdl:documentation&gt;\n\n  &lt;!--\n      The `types` element defines the data types (XML elements)\n      that are used by the web service.\n   --&gt;\n  &lt;wsdl:types&gt;\n    &lt;xsd:schema targetNamespace=\"http://www.cleverbuilder.com/BookService/\"&gt;\n      &lt;xsd:element name=\"Book\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element name=\"ID\" type=\"xsd:string\" minOccurs=\"0\"/&gt;\n            &lt;xsd:element name=\"Title\" type=\"xsd:string\"/&gt;\n            &lt;xsd:element name=\"Author\" type=\"xsd:string\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n      &lt;xsd:element name=\"Books\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element ref=\"tns:Book\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n\n      &lt;xsd:element name=\"GetBook\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element name=\"ID\" type=\"xsd:string\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n      &lt;xsd:element name=\"GetBookResponse\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element ref=\"tns:Book\" minOccurs=\"0\" maxOccurs=\"1\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n\n      &lt;xsd:element name=\"AddBook\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element ref=\"tns:Book\" minOccurs=\"1\" maxOccurs=\"1\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n      &lt;xsd:element name=\"AddBookResponse\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element ref=\"tns:Book\" minOccurs=\"0\" maxOccurs=\"1\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n      &lt;xsd:element name=\"GetAllBooks\"&gt;\n        &lt;xsd:complexType/&gt;\n      &lt;/xsd:element&gt;\n      &lt;xsd:element name=\"GetAllBooksResponse\"&gt;\n        &lt;xsd:complexType&gt;\n          &lt;xsd:sequence&gt;\n            &lt;xsd:element ref=\"tns:Book\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;/xsd:sequence&gt;\n        &lt;/xsd:complexType&gt;\n      &lt;/xsd:element&gt;\n    &lt;/xsd:schema&gt;\n  &lt;/wsdl:types&gt;\n\n\n  &lt;!--\n      A wsdl `message` element is used to define a message\n      exchanged between a web service, consisting of zero\n      or more `part`s.\n   --&gt;\n\n  &lt;wsdl:message name=\"GetBookRequest\"&gt;\n    &lt;wsdl:part element=\"tns:GetBook\" name=\"parameters\"/&gt;\n  &lt;/wsdl:message&gt;\n  &lt;wsdl:message name=\"GetBookResponse\"&gt;\n    &lt;wsdl:part element=\"tns:GetBookResponse\" name=\"parameters\"/&gt;\n  &lt;/wsdl:message&gt;\n  &lt;wsdl:message name=\"AddBookRequest\"&gt;\n    &lt;wsdl:part name=\"parameters\" element=\"tns:AddBook\"&gt;&lt;/wsdl:part&gt;\n  &lt;/wsdl:message&gt;\n  &lt;wsdl:message name=\"AddBookResponse\"&gt;\n    &lt;wsdl:part name=\"parameters\" element=\"tns:AddBookResponse\"&gt;&lt;/wsdl:part&gt;\n  &lt;/wsdl:message&gt;\n  &lt;wsdl:message name=\"GetAllBooksRequest\"&gt;\n    &lt;wsdl:part name=\"parameters\" element=\"tns:GetAllBooks\"&gt;&lt;/wsdl:part&gt;\n  &lt;/wsdl:message&gt;\n  &lt;wsdl:message name=\"GetAllBooksResponse\"&gt;\n    &lt;wsdl:part name=\"parameters\" element=\"tns:GetAllBooksResponse\"&gt;&lt;/wsdl:part&gt;\n  &lt;/wsdl:message&gt;\n\n  &lt;!--\n      A WSDL `portType` is used to combine multiple `message`s\n      (e.g. input, output) into a single operation.\n\n      Here we define three synchronous (input/output) operations\n      and the `message`s that must be used for each.\n   --&gt;\n  &lt;wsdl:portType name=\"BookService\"&gt;\n    &lt;wsdl:operation name=\"GetBook\"&gt;\n      &lt;wsdl:input message=\"tns:GetBookRequest\"/&gt;\n      &lt;wsdl:output message=\"tns:GetBookResponse\"/&gt;\n    &lt;/wsdl:operation&gt;\n    &lt;wsdl:operation name=\"AddBook\"&gt;\n      &lt;wsdl:input message=\"tns:AddBookRequest\"&gt;&lt;/wsdl:input&gt;\n      &lt;wsdl:output message=\"tns:AddBookResponse\"&gt;&lt;/wsdl:output&gt;\n    &lt;/wsdl:operation&gt;\n    &lt;wsdl:operation name=\"GetAllBooks\"&gt;\n      &lt;wsdl:input message=\"tns:GetAllBooksRequest\"&gt;&lt;/wsdl:input&gt;\n      &lt;wsdl:output message=\"tns:GetAllBooksResponse\"&gt;&lt;/wsdl:output&gt;\n    &lt;/wsdl:operation&gt;\n  &lt;/wsdl:portType&gt;\n\n  &lt;!--\n      The `binding` element defines exactly how each\n      `operation` will take place over the network.\n      In this case, we are using SOAP.\n   --&gt;\n  &lt;wsdl:binding name=\"BookServiceSOAP\" type=\"tns:BookService\"&gt;\n    &lt;soap:binding style=\"document\"\n                  transport=\"http://schemas.xmlsoap.org/soap/http\"/&gt;\n    &lt;wsdl:operation name=\"GetBook\"&gt;\n      &lt;soap:operation\n              soapAction=\"http://www.cleverbuilder.com/BookService/GetBook\"/&gt;\n      &lt;wsdl:input&gt;\n        &lt;soap:body use=\"literal\"/&gt;\n      &lt;/wsdl:input&gt;\n      &lt;wsdl:output&gt;\n        &lt;soap:body use=\"literal\"/&gt;\n      &lt;/wsdl:output&gt;\n    &lt;/wsdl:operation&gt;\n    &lt;wsdl:operation name=\"AddBook\"&gt;\n      &lt;soap:operation\n              soapAction=\"http://www.cleverbuilder.com/BookService/AddBook\"/&gt;\n      &lt;wsdl:input&gt;\n        &lt;soap:body use=\"literal\"/&gt;\n      &lt;/wsdl:input&gt;\n      &lt;wsdl:output&gt;\n        &lt;soap:body use=\"literal\"/&gt;\n      &lt;/wsdl:output&gt;\n    &lt;/wsdl:operation&gt;\n    &lt;wsdl:operation name=\"GetAllBooks\"&gt;\n      &lt;soap:operation\n              soapAction=\"http://www.cleverbuilder.com/BookService/GetAllBooks\"/&gt;\n      &lt;wsdl:input&gt;\n        &lt;soap:body use=\"literal\"/&gt;\n      &lt;/wsdl:input&gt;\n      &lt;wsdl:output&gt;\n        &lt;soap:body use=\"literal\"/&gt;\n      &lt;/wsdl:output&gt;\n    &lt;/wsdl:operation&gt;\n  &lt;/wsdl:binding&gt;\n\n  &lt;!--\n      The `service` element finally says where the service\n      can be accessed from - in other words, its endpoint.\n   --&gt;\n  &lt;wsdl:service name=\"BookService\"&gt;\n    &lt;wsdl:port binding=\"tns:BookServiceSOAP\" name=\"BookServiceSOAP\"&gt;\n      &lt;soap:address location=\"http://www.example.org/BookService\"/&gt;\n    &lt;/wsdl:port&gt;\n  &lt;/wsdl:service&gt;\n&lt;/wsdl:definitions&gt;\n</code></pre>","tags":["Others"]},{"location":"Others/Web%20Services/#references","title":"References","text":"<ul> <li>tutorialspoint</li> <li>microfocus</li> <li>IBM</li> <li>JavaTPoint</li> <li>tutorialworks</li> </ul>","tags":["Others"]},{"location":"React/React%20Introduction/","title":"React Introduction","text":"","tags":["React"]},{"location":"React/React%20Introduction/#what_is_the_react","title":"What Is The React?","text":"","tags":["React"]},{"location":"React/React%20RoadMap/","title":"React RoadMap","text":"","tags":["React"]},{"location":"React/React%20RoadMap/#react_roadmap_1","title":"React RoadMap","text":"","tags":["React"]},{"location":"React/React%20RoadMap/#html_css_and_javascript","title":"HTML, CSS, and JavaScript","text":"<ul> <li>Start by gaining a solid understanding of HTML, CSS, and JavaScript. These are the building blocks of web development and will provide a strong foundation for learning React.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#es6_and_modern_javascript","title":"ES6+ and Modern JavaScript","text":"<ul> <li>Familiarize yourself with modern JavaScript concepts and features, such as arrow functions, classes, modules, and Promises. This will help you write more efficient and concise code when working with React.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#react_fundamentals","title":"React Fundamentals","text":"<ul> <li>Begin by learning the core concepts of React, including components, JSX (a syntax extension for JavaScript), state, and props. Understand how to set up a React project and create basic components.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#react_hooks","title":"React Hooks","text":"<ul> <li>Dive into React Hooks, which are functions that allow you to use state and other React features in functional components. Learn about useState, useEffect, useContext, and other commonly used hooks.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#react_router","title":"React Router","text":"<ul> <li>Explore React Router, a library that enables navigation and routing in a React application. Understand how to set up routes, create nested routes, and handle dynamic routing.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#state_management","title":"State Management","text":"<p>Learn about state management libraries like Redux or MobX. Understand how to centralize and manage application state, and how to connect your React components to the state management system.</p>","tags":["React"]},{"location":"React/React%20RoadMap/#react_context","title":"React Context","text":"<ul> <li>Explore React Context, which provides a way to share data across the component tree without passing props manually at every level. Understand how to create context providers and consumers.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#forms_and_validation","title":"Forms and Validation","text":"<ul> <li>Gain knowledge about handling form inputs and form validation in React. Learn how to manage form state, perform validation, and handle form submission.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#component_lifecycle_and_hooks","title":"Component Lifecycle and Hooks","text":"<ul> <li>Understand the React component lifecycle and how to work with lifecycle methods. Familiarize yourself with the concept of useEffect and how it replaces lifecycle methods in functional components.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#styling_in_react","title":"Styling in React","text":"<ul> <li>Explore different approaches to styling React components, such as CSS modules, inline styles, and CSS-in-JS libraries like styled-components or Emotion.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#react_performance_optimization","title":"React Performance Optimization","text":"<ul> <li>Learn techniques to optimize the performance of React applications, such as memoization, code splitting, lazy loading, and using React's built-in performance tools.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#testing_react_applications","title":"Testing React Applications","text":"<ul> <li>Understand the importance of testing and learn how to write tests for React components using testing libraries like Jest and React Testing Library.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#server-side_rendering_ssr_and_nextjs","title":"Server-side Rendering (SSR) and Next.js","text":"<ul> <li>Gain knowledge about server-side rendering and explore frameworks like Next.js. Understand how to build server-rendered React applications for improved performance and SEO.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#react_native_optional","title":"React Native (optional)","text":"<ul> <li>If you're interested in mobile app development, you can explore React Native, a framework for building cross-platform mobile applications using React. Understand the basics of React Native and how it differs from React for web development.</li> </ul>","tags":["React"]},{"location":"React/React%20RoadMap/#real-world_projects_and_practice","title":"Real-world Projects and Practice","text":"<ul> <li> <p>Apply your knowledge by building real-world projects using React. Practice building various types of applications, such as e-commerce sites, social media platforms, or productivity tools. This will help solidify your skills and showcase your work to potential employers.</p> </li> <li> <p>Remember, learning React is an ongoing process, and the best way to improve is through practice and building projects. Stay up to date with the latest React updates and community resources to continue expanding your knowledge. Good luck on your learning journey!</p> </li> </ul>","tags":["React"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/","title":"Database Configuration In SpringBoot","text":"<p>Below are all  JPA configurations for databases in SpringBoot application.</p>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#configuration_for_mysql_database","title":"Configuration For MySQL Database","text":"","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#dependencies","title":"Dependencies","text":"<ul> <li>To connect mysql database from spring boot service we need to add dependencies as below into our pom.xml.</li> </ul> pom.xml<pre><code>  &lt;!-- we will use jpa in our project\n  so we need to add jpa dependency --&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationproperties","title":"Application.properties","text":"<pre><code>  # ===============================\n  # DB\n  # ===============================\n\n  #datasource url\n  spring.datasource.url=jdbc:mysql://localhost:3306/todo?useUnicode=true&amp;characterEncoding=UTF-8\n\n  #username of database\n  spring.datasource.username=root\n\n  #password of database\n  spring.datasource.password=password\n\n  #Database platform\n  spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect\n\n  #configure for auto generate and update table by entities\n  spring.jpa.hibernate.ddl-auto=update\n  spring.jpa.generate-ddl=true\n  spring.jpa.show-sql=true\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationyml","title":"Application.yml","text":"application.yml<pre><code>  spring:\n    datasource:\n      driverClassName: com.mysql.jdbc.Driver\n      url: jdbc:mysql://localhost:3306/todo?useUnicode=true&amp;characterEncoding=UTF-8\n      username: root\n      password: password\n    jpa:\n      database-platform: org.hibernate.dialect.MySQL5InnoDBDialect\n      hibernate.ddl-auto: update\n      generate-ddl: true\n      show-sql: true\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#configuration_for_oracle_database","title":"Configuration For Oracle Database","text":"","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#dependencies_1","title":"Dependencies","text":"<ul> <li>To connect oracle database from spring boot service we need to add dependencies as below into our pom.xml.</li> </ul> pom.yml<pre><code>  &lt;!-- we will use jpa in our project\n  so we need to add jpa dependency --&gt;\n  &lt;dependency&gt;\n  \u00a0\u00a0\u00a0\u00a0&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  \u00a0\u00a0\u00a0\u00a0&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- Oracle JDBC driver --&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;\n      &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationproperties_1","title":"Application.properties","text":"<pre><code>  #datasource connection configuration\n  spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE\n  spring.datasource.username=xe\n  spring.datasource.password=password\n  spring.datasource.driver-class-name=oracle.jdbc.OracleDriver\n\n  #jpa database platform\n  spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect\n\n  #configure for auto generate and update table by entities\n  spring.jpa.hibernate.ddl-auto=update\n  spring.jpa.generate-ddl=true\n  spring.jpa.show-sql=true\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationyml_1","title":"Application.yml","text":"application.yml<pre><code>  spring:\n    datasource:\n      url: jdbc:oracle:thin:@localhost:1521:XE\n      username: xe\n      password: password\n      driver-class-name: oracle.jdbc.OracleDriver\n    jpa:\n      database-platform: org.hibernate.dialect.Oracle10gDialect\n      hibernate.ddl-auto: update\n      generate-ddl: true\n      show-sql: true\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#configuration_for_posgresql_database","title":"Configuration For Posgresql Database","text":"","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#dependencies_2","title":"Dependencies","text":"<ul> <li>To connect progessql database from spring boot service we need to add dependencies as below into our pom.xml.</li> </ul> pom.yml<pre><code>  &lt;!-- we will use jpa in our project\n  so we need to add jpa dependency --&gt;\n  &lt;dependency&gt;\n  \u00a0\u00a0\u00a0\u00a0&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  \u00a0\u00a0\u00a0\u00a0&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n      &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n      &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationproperties_2","title":"Application.properties","text":"application.properties<pre><code>  #datasource connection configuration\n  spring.datasource.url=jdbc:postgresql://localhost:5432/book_db\n  spring.datasource.username=postgres\n  spring.datasource.password=postgres\n  spring.datasource.driver-class-name=org.postgresql.Driver\n\n  #jpa database platform\n  spring.jpa.database=postgresql\n  spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\n\n  #configure for auto generate and update table by entities\n  spring.jpa.hibernate.ddl-auto=update\n  spring.jpa.generate-ddl=true\n  spring.jpa.show-sql=true\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationyml_2","title":"Application.yml","text":"application.yml<pre><code>  spring:\n    datasource:\n      driver-class-name: org.postgresql.Driver\n      url: jdbc:postgresql://localhost:5432/book_db\n      username: postgres\n      password: postgres\n    jpa:\n      database: postgresql\n      database-platform: org.hibernate.dialect.PostgreSQLDialect\n      hibernate.ddl-auto: update\n      generate-ddl: true\n      show-sql: true\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#configuration_for_h2_database","title":"Configuration For H2 Database","text":"","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#dependencies_3","title":"Dependencies","text":"<ul> <li>To connect h2 database from spring boot service we need to add dependencies as below into our pom.xml.</li> </ul> pom.xml<pre><code>  &lt;!-- we will use jpa in our project\n  so we need to add jpa dependency --&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n      &lt;artifactId&gt;h2&lt;/artifactId&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationproperties_3","title":"Application.properties","text":"<ul> <li>For saving data in memory we use the configuration below. Note that all data will be lost when you turn off your service.</li> </ul> application.properties<pre><code>  #datasource configuration\n\n  #using in memory database\n  spring.datasource.url=jdbc:h2:mem:testdb\n\n  #using h2 file\n  #spring.datasource.url=jdbc:h2:file:/data/demo\n\n  spring.datasource.driverClassName=org.h2.Driver\n  spring.datasource.username=sa\n  spring.datasource.password=password\n\n  #jpa configuration\n  spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n  spring.jpa.hibernate.ddl-auto=update\n  spring.jpa.generate-ddl=true\n  spring.jpa.show-sql=true\n\n  #enable h2 console ui\n  spring.h2.console.enabled=true\n\n  #set h2 ui path\n  spring.h2.console.path=/h2-console\n\n  #prevent trace output\n  spring.h2.console.settings.trace=false\n\n  #disable remote access\n  spring.h2.console.settings.web-allow-others=false\n</code></pre> <ul> <li>To save your data in h2 file, let's use <code>jdbc:h2:file:./testdb</code> for <code>spring.datasource.url</code>. In which, a file named <code>testdb</code> will be created in your project and all your data will be saved in this file. So if you turn off service, your data will not be lost unless you delete the this file.</li> </ul> application.properties<pre><code>  #datasource configuration\n\n  #using in memory database\n  spring.datasource.url=jdbc:h2:file:./testdb\n\n  #using h2 file\n  #spring.datasource.url=jdbc:h2:file:/data/demo\n\n  spring.datasource.driverClassName=org.h2.Driver\n  spring.datasource.username=sa\n  spring.datasource.password=password\n\n  #jpa configuration\n  spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n  spring.jpa.hibernate.ddl-auto=update\n  spring.jpa.generate-ddl=true\n  spring.jpa.show-sql=true\n\n  #enable h2 console ui\n  spring.h2.console.enabled=true\n\n  #set h2 ui path\n  spring.h2.console.path=/h2-console\n\n  #prevent trace output\n  spring.h2.console.settings.trace=false\n\n  #disable remote access\n  spring.h2.console.settings.web-allow-others=false\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#applicationyml_3","title":"Application.yml","text":"<ul> <li>For saving data in memory</li> </ul> application.yml<pre><code>  spring:\n    datasource:\n      url: jdbc:h2:mem:testdb\n      username: sa\n      password: password\n      driver-class-name: org.h2.Driver\n      platform: h2\n    jpa:\n      database-platform: org.hibernate.dialect.H2Dialect\n      hibernate.ddl-auto: update\n      generate-ddl: true\n      show-sql: true\n    h2:\n      console:\n        enabled: true\n        path: /h2-console\n        settings:\n          trace: false\n          web-allow-others: false\n</code></pre> <ul> <li>For saving data in h2 file</li> </ul> application.yml<pre><code>spring:\n  datasource:\n    url: jdbc:h2:file:./testdb\n    username: sa\n    password: password\n    driver-class-name: org.h2.Driver\n    platform: h2\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n    hibernate.ddl-auto: update\n    generate-ddl: true\n    show-sql: true\n  h2:\n    console:\n      enabled: true\n      path: /h2-console\n      settings:\n        trace: false\n        web-allow-others: false\n</code></pre>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#see_also","title":"See Also","text":"<ul> <li>Spring Data JPA</li> </ul>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Database%20Configuration%20In%20SpringBoot/#references","title":"References","text":"<ul> <li>Docs Spring IO</li> </ul>","tags":["Spring","SpringBoot","SpringData"]},{"location":"Spring%20Boot/Some%20Notes/","title":"Spring Boot Notes","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Some%20Notes/#finished","title":"Finished","text":"<ul> <li>EnableWebMvc And OpenApi Issue</li> <li>Fix Jpa OneToMany N+1 Issue</li> <li>Fix Jpa OneToOne N+1 Issue</li> <li>List.of - Arrays.asList</li> <li>SpringBoot 3 Global Cors Congiration</li> <li>Spring Boot 3 CSRF Configuration</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Some%20Notes/#notes","title":"Notes","text":"<ul> <li>Flyway 10.x.x does not work with spring boot 3.1.4</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/","title":"Spring AOP Introduction","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#what_is_the_aspect_oriented_programming_aop","title":"What Is The Aspect Oriented Programming (AOP)?","text":"<ul> <li> <p>Aspect-oriented Programming (AOP) complements Object-oriented Programming (OOP) by providing another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Aspects enable the modularization of concerns (such as transaction management) that cut across multiple types and objects. (Such concerns are often termed \"crosscutting\" concerns in AOP literature.)</p> </li> <li> <p>One of the key components of Spring is the AOP framework. While the Spring IoC container does not depend on AOP (meaning you do not need to use AOP if you don\u2019t want to), AOP complements Spring IoC to provide a very capable middleware solution.</p> </li> <li> <p>More information</p> </li> <li> <p>So let's take an example about a business problem then we can understand it easier. Let's image that we need to add logging to our Spring Boot project before starting of every methods. So Let's image that we have a lot of methods in our Spring Boot project in many layers. So the developer may have to do it manually and will take many efforts and time. </p> </li> <li> <p>Then let's think about updating the logging message. If we applied for 100 classed then when we want to update the logging message then we have to update all classes. It is painful for developers. So at this point Aspect-Oriented Programming (AOP) will handle issues above.</p> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#aop_concepts","title":"AOP Concepts","text":"<ul> <li>There are some central AOP concepts and terminology defined in the table as below.</li> </ul> Term Description Aspect A modularization of a concern that cuts across multiple classes. Transaction management is a good example of a crosscutting concern in enterprise Java applications. In Spring AOP, aspects are implemented by using regular classes (the schema-based approach) or regular classes annotated with the @Aspect annotation (the @AspectJ style). Join point A point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution. Advice Action taken by an aspect at a particular join point. Different types of advice include \"around\", \"before\", and \"after\" advice. (Advice types are discussed later.) Many AOP frameworks, including Spring, model an advice as an interceptor and maintain a chain of interceptors around the join point. Pointcut A predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut (for example, the execution of a method with a certain name). The concept of join points as matched by pointcut expressions is central to AOP, and Spring uses the AspectJ pointcut expression language by default. Introduction Declaring additional methods or fields on behalf of a type. Spring AOP lets you introduce new interfaces (and a corresponding implementation) to any advised object. For example, you could use an introduction to make a bean implement an IsModified interface, to simplify caching. (An introduction is known as an inter-type declaration in the AspectJ community.) Target object An object being advised by one or more aspects. Also referred to as the \"advised object\". Since Spring AOP is implemented by using runtime proxies, this object is always a proxied object. AOP proxy An object created by the AOP framework in order to implement the aspect contracts (advice method executions and so on). In the Spring Framework, an AOP proxy is a JDK dynamic proxy or a CGLIB proxy. Weaving Linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime. <ul> <li>Spring AOP includes the following types of advice.</li> </ul> Advice Type Description Before advice Advice that runs before a join point but that does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception). After returning advice Advice to be run after a join point completes normally (for example, if a method returns without throwing an exception). After throwing advice Advice to be run if a method exits by throwing an exception. After (finally) advice Advice to be run regardless of the means by which a join point exits (normal or exceptional return). Around advice Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#benefit_of_aop","title":"Benefit Of AOP","text":"<ul> <li>Reusable Aspects: AOP allows the encapsulation of cross-cutting concerns into reusable modules or classes (aspects).</li> <li>Configuration-Based Application: Aspects can be applied selectively to different parts of the project based on configuration.</li> <li>Cross-Cutting Logic Encapsulation: AOP helps in encapsulating common logic, making it easier to manage and maintain.</li> <li>Cleaner Business Code: Business-specific code remains focused on core functionalities, reducing complexity.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#aop_use_cases","title":"AOP Use Cases","text":"<ul> <li>Exception handling: log exception and notify DevOps team via SMS/email</li> <li>Api Management: how many times has a method been called user, analytics: what are peak times? what is average load? who is top user?<ul> <li>Common Use Cases: Logging, security, and transactions are common AOP use cases.</li> <li>Additional Use Cases: AOP can be used for audit logging, exception handling, API management, and other cross-cutting concerns.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#aop_advantages","title":"AOP Advantages","text":"<ul> <li>Reusable Modules: Aspects serve as reusable modules to encapsulate cross-cutting concerns.</li> <li>Code Tangling and Scattering Resolution: Addresses issues of code tangling and scattering.</li> <li>Selective Application: Aspects can be applied selectively based on configuration.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#aop_disavantages","title":"AOP Disavantages","text":"<ul> <li>Complexity with Too Many Aspects: If there are too many aspects, the application flow can become hard to follow. Governance and moderation in aspect development are essential.</li> <li>Minor Performance Impact: Runtime weaving, used by Spring AOP, may have a minor performance impact. Overusing aspects with expensive operations can magnify this impact.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#aop_frameworks","title":"AOP Frameworks","text":"<ul> <li> <p>Spring AOP:</p> <ul> <li>Support: Provides AOP support out of the box.</li> <li>Usage in Spring: Used in the background for security, transactions, and caching in the Spring framework.</li> <li>Weaving Approach: Utilizes run-time weaving of aspects using the proxy pattern.</li> </ul> </li> <li> <p>AspectJ:</p> <ul> <li>Original Framework: Released in 2001.</li> <li>Support for Full AOP Spec: Offers complete support for the full AOP stack.</li> <li>Rich Support: Provides rich support for join points, including method, constructor, and field-level join points.</li> <li>Code Weaving: Supports compile-time, post compile-time, and load-time weaving.</li> </ul> </li> <li> <p>Performance Considerations::</p> <ul> <li>Spring AOP: Uses run-time weaving, which may have a minor performance impact.</li> <li>AspectJ: Provides various weaving options, allowing developers to choose based on their performance requirements.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#spring_aop_and_aspectj_comparing","title":"Spring AOP And AspectJ Comparing","text":"<ul> <li>Spring AOP:</li> </ul> Advantages: Disadvantages: Simpler to use than AspectJ. Supports only method-level join points. Makes use of the Proxy pattern. Aspects can be applied only to beans created by the Spring app context. Easy migration to AspectJ using the <code>@Aspect</code> annotations. Minor performance cost for aspect execution due to run-time weaving. <ul> <li>AspectJ:</li> </ul> Advantages: Disadvantages: Supports all join points, including method-level, constructor, and field. Requires an extra compilation step for compile-time weaving. Works with any POJO, not limited to Spring beans. AspectJ pointcut syntax can become complex quickly. Faster performance compared to Spring AOP. Complete AOP support with a full stack and API. <ul> <li>Terms comparison.</li> </ul> Term Spring AOP AspectJ Join Points Method-level All (method, constructor, field) Weaving Run-time Compile-time, post compile-time, and load-time Complexity Lightweight, addresses common enterprise application problems Fast but can be complex, suitable for advanced requirements","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#recommendation","title":"Recommendation","text":"<ul> <li>Start with Spring AOP for its simplicity and ease of understanding.</li> <li>Move to AspectJ if you have complex requirements beyond the capabilities of Spring AOP.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20AOP%20Introduction/#references","title":"References","text":"<ul> <li>Spring Boot 3, Spring 6 &amp; Hibernate for Beginners</li> <li>Spring Doc</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/","title":"Actuator &amp; Graceful Shutdown","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#what_is_the_graceful_shutdown","title":"What Is The Graceful Shutdown?","text":"<ul> <li><code>Graceful shutdown</code> refers to the process of terminating an application in a controlled manner, allowing it to complete any ongoing tasks, release resources, and ensure data integrity. Instead of abruptly terminating the application, graceful shutdown ensures that all processes are gracefully stopped, preventing any potential data corruption or loss.</li> </ul> <ul> <li>For example: Usually when we see that when we develop a spring boot project on our local machine and we did some api tests by postman then we can easily see that when the spring boot application is processing our request from postman then we stop the application from our IDE then the request will be shutdown immediately. Then if we configure the graceful shutdown on our Spring Boot application then when we shutdown our project, our project will stop receiving incoming requests and the processing requests will be not shutdown immediately, our application will wait those requests finished then if there are no processing requests our application will be shutdown.</li> <li>More information</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#what_is_the_spring_boot_actuator","title":"What Is The Spring Boot Actuator?","text":"<ul> <li><code>Spring Boot Actuator</code> is a set of production-ready features and tools provided by the Spring Boot framework for monitoring and managing your application in a production environment. It allows you to gather operational information about your application, such as health, metrics, environment properties, and more. These features are useful for monitoring, diagnosing issues, and gaining insights into the runtime behavior of your Spring Boot application.</li> <li>Moreover, the Spring Boot Actuator is also exporting <code>Liveness and Readiness Probes</code> which will help Spring Boot integrates better with Kubernetes deployment environment.</li> <li> <p>In Kubernetes, the Liveness and Readiness Kubernetes concepts represent facets of the application state.</p> <ul> <li>The Liveness state of an application tells whether the internal state is valid. If Liveness is broken, this means that the application itself is in a failed state and cannot recover from it. In this case, the best course of action is to restart the application instance. For example, an application relying on a local cache should fail its Liveness state if the local cache is corrupted and cannot be repaired.</li> <li>The Readiness state tells whether the application is ready to accept client requests. If the Readiness state is unready, Kubernetes should not route traffic to this instance. If an application is too busy processing a task queue, then it could declare itself as busy until its load is manageable again.</li> </ul> </li> <li> <p>More information</p> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#example","title":"Example","text":"<ul> <li>So let's start an example for integrating Spring Boot application with Actuator and Graceful Shutdown.</li> <li>Firstly, let's crate a simple Spring boot project with spring boot actuator dependency as below.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;!-- spring boot 3 web --&gt;\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Then let's create a simple controller as below.</li> </ul> SampleController.java<pre><code>package com.springboot.project.controller;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@RestController\npublic class SampleController {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/messages\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;List&lt;String&gt;&gt; getMessages() throws InterruptedException {\n        Thread.sleep(25000);\n        return ResponseEntity.ok(Arrays.asList(\"Message 1\", \"Message 2\"));\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will assume that this api will take 25 seconds to handle an request.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#configure_graceful_shutdown","title":"Configure Graceful Shutdown","text":"<ul> <li>Now, to configure the Graceful shutdown for our Spring Boot application, we just simply add the configuration below into our <code>application.yaml</code> file.</li> </ul> application.yaml<pre><code>server:\n  shutdown: graceful\n\nspring:\n  lifecycle:\n    timeout-per-shutdown-phase: 35s\n</code></pre> Configuration Key Default Value Value Description <code>server.shutdown</code> <code>immediate</code> <code>graceful</code> Specifies the shutdown type for the Spring Boot application. In this case, it's set to \"graceful,\" indicating that the application should perform a graceful shutdown. A graceful shutdown allows the application to complete any ongoing tasks before shutting down, ensuring a smoother termination process. <code>spring.lifecycle.timeout-per-shutdown-phase</code> <code>30s</code> <code>35s</code> Sets the timeout duration for each phase of the shutdown process in the Spring application. In this case, it's configured to 35 seconds. During application shutdown, this property defines the maximum time allowed for each phase to complete. If any phase exceeds this timeout, the application may forcefully terminate the remaining tasks. A longer timeout value allows more time for cleanup tasks during shutdown.","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#configure_spring_boot_actuator","title":"Configure Spring Boot Actuator","text":"<ul> <li>Then for configuring the Spring Boot Actuator, we also just add configurations below into our <code>application.yaml</code> file.</li> </ul> application.yaml<pre><code>management:\n  endpoints:\n    jackson:\n      isolated-object-mapper: false\n  health:\n    probes:\n      enabled: true\n    livenessstate:\n      enabled: true\n    readinessState:\n      enabled: true\n</code></pre> Configuration Key Default Value Value Description <code>management.endpoints.jackson.isolated-object-mapper</code> <code>true</code> <code>false</code> This configuration is used to determine whether to use a separate, isolated\u00a0<code>ObjectMapper</code>\u00a0for endpoints. When set to\u00a0<code>false</code>, the same\u00a0<code>ObjectMapper</code>\u00a0used for HTTP message conversion is also used for endpoints. <code>management.health.probes.enabled</code> <code>false</code> <code>true</code> This configuration enables Kubernetes readiness and liveness probes. When set to\u00a0<code>true</code>, the application will expose readiness and liveness state information that can be used by Kubernetes probes. <code>management.health.livenessstate.enabled</code> <code>false</code> <code>true</code> This configuration enables liveness state information. When set to\u00a0<code>true</code>, the application will expose liveness state information that can be used by Kubernetes liveness probes. <code>management.health.readinessState.enabled</code> <code>false</code> <code>true</code> This configuration enables readiness state information. When set to\u00a0<code>true</code>, the application will expose readiness state information that can be used by Kubernetes readiness probes.","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#testing","title":"Testing","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#graceful_shutdown","title":"Graceful Shutdown","text":"<ul> <li>Now, let's start our Spring Boot application, then use postman to make a request and also shutdown our Spring Boot application by IDE. Then we can see that the Spring Boot application will wait for the processing request handled successfully and the postman will receive the response.</li> </ul> <ul> <li>Then now, let's start our application again, then make an api call first and stop the application. During the graceful shutdown is waiting for handling requests then from postman, let's try to make some other calls, we can see that new incoming requests will be denied by our Spring Boot server with error code <code>ERR_CONNECTION_REFUSED</code>.</li> </ul> <ul> <li>Now, let's configure <code>timeout-per-shutdown-phase</code> to 10 seconds, then test again, as we can see the Graceful shutdown will wait for 10 seconds if the processing request taking more time than that then the processing request will be shutdown immediately together with the application.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#spring_boot_actuator","title":"Spring Boot Actuator","text":"<ul> <li>For testing Spring Boot Actuator, we just simply start our application then we can open browser to access supported endpoints.</li> <li>Firstly, to check the Spring Boot Actuator worked correctly, we can access <code>/actuator</code> endpoint. Then we can see the result is a json with some information for the health endpoints.</li> </ul> <ul> <li>Now, if we continue to access the health endpoint <code>/actuator/health</code> then we can see the info about health which included <code>readiness</code> and <code>liveness</code> also.</li> </ul> <ul> <li>Then if we continue to access the <code>readiness</code> at <code>/actuator/health/readiness</code> and <code>liveness</code> endpoints then we can see those status there.</li> </ul> <ul> <li>These endpoints are very useful when we deploy Spring Boot application on <code>Kubernetes</code> which can help us achieve the Zero Downtime Deployment.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#see_also","title":"See Also","text":"<ul> <li>Zero Downtime Deployment</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Actuator%20%26%20Graceful%20Shutdown/#references","title":"References","text":"<ul> <li>Bootcamptoprod</li> <li>Spring IO</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Custom%20Annotation%20Time%20Execution/","title":"Custom Annotation Time Execution","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Custom%20Annotation%20Time%20Execution/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20JunitTest%205/","title":"JunitTest 5","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20JunitTest%205/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Property%20Based%20Testing/","title":"Property Based Testing","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Property%20Based%20Testing/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/","title":"Upload Download Files","text":"","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#introduction","title":"Introduction","text":"<ul> <li>In this topic we will learn about \u00a0upload and download files to/from database with a Spring Boot Rest APIs. We also use Spring Web\u00a0<code>MultipartFile</code>\u00a0interface to handle HTTP\u00a0multi-part\u00a0requests.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#basic_example_with_jpa_and_postgres","title":"Basic Example With Jpa And Postgres","text":"<ul> <li> <p>Our Spring Boot Application will provide APIs for:</p> <ul> <li>uploading File to PostgreSQL/MySQL database</li> <li>downloading File database with the link</li> <li>getting list of Files\u2019 information (file name, url, type, size)</li> </ul> </li> <li> <p>These are APIs to be exported:</p> </li> </ul> Methods Urls Actions POST /v1/files upload a File GET /v1/files get List of Files (name, url, type, size) GET /v1/files/{id} download a File by fileId <ul> <li>The uploaded files will be stored in PostgreSQL Database\u00a0files\u00a0table with these fields as in the entity below.</li> </ul> FileDB<pre><code>package com.springboot.project.upload.download.files.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"files\")\npublic class FileDB {\n\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    private UUID id;\n\n    private String fileName;\n    private String fileType;\n    private String fileExtension;\n    private byte[] fileData;\n    private Date createdDate;\n    private Date updatedDate;\n\n    @PrePersist\n    private void onCreate() {\n        Date now = new Date();\n        this.createdDate = now;\n        this.updatedDate = now;\n    }\n\n    @PreUpdate\n    private void onUpdate() {\n        this.updatedDate = new Date();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#dependency","title":"Dependency","text":"<ul> <li>Firstly, let's add some dependencies as below for Spring Boot, Spring Data Jpa, Postgresql and Tika. Apache Tika is a toolkit for detecting and extracting metadata and structured text content from various documents using existing parser libraries.</li> </ul> pom.xml<pre><code> &lt;dependencies&gt;\n\n    &lt;!-- spring boot 3 web --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;3.1.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- spring boot 3 test --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;version&gt;3.1.3&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- spring boot 3 data jpa --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;version&gt;3.1.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- postgresql driver --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n        &lt;version&gt;42.6.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.tika&lt;/groupId&gt;\n        &lt;artifactId&gt;tika-core&lt;/artifactId&gt;\n        &lt;version&gt;2.9.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    .....\n&lt;/dependencies&gt;\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#entity","title":"Entity","text":"<ul> <li>Then let's define a entity which is\u00a0<code>FileDB</code> which contains fields as below.</li> </ul> FileDB<pre><code>package com.springboot.project.upload.download.files.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"files\")\npublic class FileDB {\n\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    private UUID id;\n\n    private String fileName;\n    private String fileType;\n    private String fileExtension;\n    private byte[] fileData;\n    private Date createdDate;\n    private Date updatedDate;\n\n    @PrePersist\n    private void onCreate() {\n        Date now = new Date();\n        this.createdDate = now;\n        this.updatedDate = now;\n    }\n\n    @PreUpdate\n    private void onUpdate() {\n        this.updatedDate = new Date();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#repository","title":"Repository","text":"<ul> <li>Next,  lets create a repository for the entity above.</li> </ul> <pre><code>package com.springboot.project.upload.download.files.repository;\n\nimport com.springboot.project.upload.download.files.entity.FileDB;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface FileDBRepository extends JpaRepository&lt;FileDB, UUID&gt; {\n}\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#model","title":"Model","text":"<ul> <li>Then let's create some DTOs for using in Controller and Service as below.</li> </ul> FileDto.java<pre><code>package com.springboot.project.upload.download.files.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\npublic class FileDto {\n\n    private UUID id;\n    private String fileName;\n    private String fileType;\n    private String fileExtension;\n    private Date createdDate;\n    private Date updatedDate;\n    private String location;\n\n}\n</code></pre> FileContentDto.java<pre><code>package com.springboot.project.upload.download.files.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FileContentDto {\n\n    private String fileName;\n    private byte[] content;\n\n}\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#config","title":"Config","text":"<ul> <li>Let's create an <code>ApplicationProperty.java</code> config as below which will load the configuration for Spring Boot server url and api path for downloading file. We will use these information for generating download file url.</li> </ul> ApplicationProperty.java<pre><code>package com.springboot.project.upload.download.files.config;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\n@ConfigurationProperties(prefix = \"application\")\npublic class ApplicationProperty {\n\n    private String serverBaseUrl;\n    private String getFileApi;\n\n}\n</code></pre> <ul> <li>Now, let's add configuration for our <code>application.yaml</code> as below.</li> </ul> application.yaml<pre><code># config datasource for Jpa and Jdbc\n\napplication:\n  server-base-url: \"http://localhost:8080\"\n  get-file-api: \"/v1/files/\"\n\nspring:\n  servlet:\n    multipart:\n      max-file-size: 500KB\n      max-request-size: 500KB\n  datasource:\n    driverClassName: org.postgresql.Driver\n    url: jdbc:postgresql://localhost:5432/storage?useUnicode=true&amp;characterEncoding=UTF-8\n    username: root\n    password: password\n  jpa:\n    database-platform: org.hibernate.dialect.PostgreSQLDialect\n    hibernate.ddl-auto: update\n    generate-ddl: true\n    show-sql: true\n    open-in-view: true\n    properties:\n      hibernate:\n        generate_statistics: true\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#service","title":"Service","text":"<ul> <li>Now let's create a Service and export 3 methods for <code>saveFile</code>, <code>getFileDate</code> and <code>getFilesInformation</code> as below.</li> </ul> <pre><code>package com.springboot.project.upload.download.files.service;\n\nimport com.springboot.project.upload.download.files.config.ApplicationProperty;\nimport com.springboot.project.upload.download.files.entity.FileDB;\nimport com.springboot.project.upload.download.files.model.FileContentDto;\nimport com.springboot.project.upload.download.files.model.FileDto;\nimport com.springboot.project.upload.download.files.repository.FileDBRepository;\nimport lombok.AllArgsConstructor;\nimport org.apache.commons.io.FilenameUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class FileStorageService {\n\n    private final FileDBRepository fileDBRepository;\n    private final ApplicationProperty applicationProperty;\n\n    public FileDto saveFile(MultipartFile uploadFile) {\n        if (Objects.isNull(uploadFile.getOriginalFilename())) {\n            throw new IllegalArgumentException(\"FileName can not be null\");\n        }\n        String fileName = StringUtils.cleanPath(uploadFile.getOriginalFilename());\n        FileDB fileDB = new FileDB();\n        fileDB.setFileName(fileName);\n        fileDB.setFileExtension(FilenameUtils.getExtension(fileName));\n        fileDB.setFileType(uploadFile.getContentType());\n        try {\n            fileDB.setFileData(uploadFile.getBytes());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Can not map File Content\");\n        }\n        return this.mapToFileDto(this.fileDBRepository.save(fileDB));\n    }\n\n    public FileContentDto getFileData(UUID id) {\n        Optional&lt;FileDB&gt; fileDB = this.fileDBRepository.findById(id);\n        if (fileDB.isPresent()) {\n            return this.mapToFileContentDto(fileDB.get());\n        }\n        throw new RuntimeException(\"File Not Found\");\n    }\n\n    public List&lt;FileDto&gt; getFilesInformation() {\n        List&lt;FileDB&gt; fileDBs = this.fileDBRepository.findAll();\n        return fileDBs.stream().map(this::mapToFileDto).collect(Collectors.toList());\n    }\n\n    private FileDto mapToFileDto(FileDB fileDB) {\n        FileDto fileDto = new FileDto();\n        fileDto.setId(fileDB.getId());\n        fileDto.setFileName(fileDB.getFileName());\n        fileDto.setFileType(fileDB.getFileType());\n        fileDto.setCreatedDate(fileDB.getCreatedDate());\n        fileDto.setUpdatedDate(fileDB.getUpdatedDate());\n        fileDto.setFileExtension(fileDB.getFileExtension());\n        fileDto.setLocation(this.buildLocationUrl(fileDB.getId()));\n        return fileDto;\n    }\n\n    private FileContentDto mapToFileContentDto(FileDB fileDB) {\n        FileContentDto fileContentDto = new FileContentDto();\n        fileContentDto.setFileName(fileDB.getFileName());\n        fileContentDto.setContent(fileDB.getFileData());\n        return fileContentDto;\n    }\n\n    private String buildLocationUrl(UUID fileId) {\n        return this.applicationProperty.getServerBaseUrl()\n                + this.applicationProperty.getGetFileApi()\n                + fileId;\n    }\n\n}\n</code></pre> <ul> <li><code>saveFile</code> method saves a file to the database. It checks for a non-null original filename, cleans the filename using <code>StringUtils.cleanPath</code>, and creates a <code>FileDB</code> entity to store information such as filename, file extension, content type, and file data.</li> <li><code>getFileData</code> method retrieves the content of a file by its unique identifier (<code>UUID</code>). It returns a <code>FileContentDto</code> containing the filename and file content.</li> <li><code>getFilesInformation</code> method retrieves information about all stored files in the database. It returns a list of <code>FileDto</code> objects containing details such as file ID, filename, file type, creation date, update date, file extension, and file location.</li> <li>Helper Methods:<ul> <li><code>mapToFileDto</code>: Maps a <code>FileDB</code> entity to a <code>FileDto</code>.</li> <li><code>mapToFileContentDto</code>: Maps a <code>FileDB</code> entity to a <code>FileContentDto</code>.</li> <li><code>buildLocationUrl</code>: Builds the URL for accessing a file based on its ID.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#controller","title":"Controller","text":"<ul> <li>Finally, let's create a controller for exporting apis as we mentioned in the beginning.</li> </ul> UploadDownloadFileController.java<pre><code>package com.springboot.project.upload.download.files.controller;\n\nimport com.springboot.project.upload.download.files.model.FileContentDto;\nimport com.springboot.project.upload.download.files.model.FileDto;\nimport com.springboot.project.upload.download.files.service.FileStorageService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@CrossOrigin(\"*\")\n@AllArgsConstructor(onConstructor = @__(@Autowired))\n@RestController\npublic class UploadDownloadFileController {\n\n    private final FileStorageService fileStorageService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/files\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;FileDto&gt; uploadFile(@RequestParam(\"file\") MultipartFile uploadFile) {\n        return ResponseEntity.status(HttpStatus.CREATED).body(this.fileStorageService.saveFile(uploadFile));\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/files/{id}\", produces = {MediaType.APPLICATION_OCTET_STREAM_VALUE})\n    public ResponseEntity&lt;byte[]&gt; downloadFile(@PathVariable(\"id\") UUID id) {\n        FileContentDto fileContentDto = this.fileStorageService.getFileData(id);\n        return ResponseEntity.status(HttpStatus.OK)\n                .header(HttpHeaders.CONTENT_DISPOSITION,\"attachment; filename=\\\"\" + fileContentDto.getFileName() + \"\\\"\")\n                .body(fileContentDto.getContent());\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/files\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;List&lt;FileDto&gt;&gt; getFilesInformation() {\n        return ResponseEntity.status(HttpStatus.OK).body(this.fileStorageService.getFilesInformation());\n    }\n\n}\n</code></pre> <ul> <li> <p><code>uploadFile</code> endpoint handles the file upload operation. It takes a <code>MultipartFile</code> as a request parameter and returns a <code>FileDto</code> in the response body. The file is saved using the <code>fileStorageService.saveFile</code> method.</p> </li> <li> <p><code>downloadFile</code> endpoint handles the file download operation. It takes the file ID as a path variable and returns a <code>ResponseEntity</code> containing the file content as bytes. The <code>Content-Disposition</code> header is set to indicate that the response should be treated as an attachment.</p> </li> <li> <p><code>getFilesInformation</code> endpoint retrieves information about all stored files and returns a list of <code>FileDto</code> objects in the response body.</p> </li> <li> <p>Helper Methods:</p> <ul> <li>There are no explicit helper methods in the controller. The logic for file storage operations is delegated to the <code>FileStorageService</code> class.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#testing","title":"Testing","text":"<ul> <li> <p>Now, let's start our Spring Boot service and use Postman to test exported apis as below.</p> </li> <li> <p>For calling upload file api with postman let's choose <code>body</code> with <code>form-data</code>. Then put the key and select the type is <code>File</code> then we can click on the value column and choose <code>New file from local machine</code> and you can select a file from your local machine.</p> </li> </ul> <p></p> <ul> <li>After the call is successful we can see the response contains some information and the link for getting our file.</li> <li>Next, let's copy this link and put it on any browser then you can download it immediately.</li> </ul> <p></p> <p></p> <ul> <li>Finally, for getFilesInformation api, we will have the result as below.</li> </ul> <p></p>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%203.x%20Upload%20Download%20Files/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3"]},{"location":"Spring%20Boot/Spring%20Boot%20Actuator/","title":"SpringBoot Actuator Introduction","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Actuator/#what_is_the_springboot_actuator","title":"What Is The SpringBoot Actuator?","text":"<ul> <li><code>Spring Boot Actuator</code> gives many features, but two major features are:</li> <li>Providing management end points to Spring Boot Application.</li> <li>Spring Boot Application Metrics.</li> <li>When we run our Spring Boot Web Application using CLI, Spring Boot Actuator automatically provides hostname as <code>localhost</code> and default port number as <code>8080</code>. We can access this application using <code>http://localhost:8080</code> endpoint. We actually use HTTP request methods like GET and POST to represent management endpoints using <code>Spring Boot Actuator</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Actuator/#references","title":"References","text":"<ul> <li>Journal Dev</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20AutoConfigurator/","title":"SpringBoot AutoConfigurator Introduction","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20AutoConfigurator/#what_is_the_springboot_autoconfigurator","title":"What Is The SpringBoot AutoConfigurator?","text":"<ul> <li>To develop a Spring-based application requires a lot of configuration (Either XM configuration of Annotation Configuration). The solution to this problem is Spring Boot AutoConfigurator. The main responsibility of Spring Boot Autoconfigurator is to reduce the Spring Configuration. If we develop spring applications in Spring Boot, then we don't need to define single XML configuration and almost no or minimal annotation configuration. Spring Boot Autoconfigurator component will take care of providing these information.</li> <li>If we use <code>@SpringBootApplication</code> annotation at class level, then Spring Boot Autoconfigurator will add automatically all required annotations to Java Class ByteCode.</li> </ul> <p>@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiguration.</p> <ul> <li>In simple words, <code>Spring Boot Starter</code> reduces build's dependencies and <code>Spring Boot AutoConfigurator</code> reduces the Spring Configuration.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20AutoConfigurator/#references","title":"References","text":"<ul> <li>Journal Dev</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20CLI/","title":"SpringBoot CLI Introduction","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20CLI/#what_is_the_springboot_cli","title":"What Is The SpringBoot CLI?","text":"<ul> <li><code>Spring Boot CLI</code> (command line interface) is a Spring Boot software to run and test Spring Boot applications from command prompt. When we run Spring Boot application using CLI, then it internally uses Spring Boot Starter and Spring Boot AutoConfigurator components to resolve all dependencies and execute the application.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20CLI/#references","title":"References","text":"<ul> <li>Journal Dev</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Content-Type%20Response%20Header/","title":"Spring Boot Content-Type Response Header","text":"<p>In web application development, it is imperative to possess the capability to manage and define the Content-Type response header. The Content-Type header informs the client about the format of the data being sent in the response body. In this post, we'll explore various approaches to manage the Content-Type response header in a Spring Boot application. We'll cover examples of using <code>@RequestMapping</code>, <code>ResponseEntity</code> and <code>ContentNegotiationConfigurer</code> to control the Content-Type header effectively.</p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Content-Type%20Response%20Header/#using_requestmapping","title":"Using RequestMapping","text":"<ul> <li>The <code>@RequestMapping</code> annotation is commonly used to map HTTP requests to controller methods in Spring Boot applications. By specifying the <code>produces</code> attribute, you can control the Content-Type response headers for a specific endpoint. Let's take an example as below.</li> </ul> CustomerController.java<pre><code>package com.springboot.project.config.content.type.response.app.controller;\n\nimport com.springboot.project.config.content.type.response.app.model.CustomerRequest;\nimport com.springboot.project.config.content.type.response.app.model.CustomerResponse;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\npublic class CustomerController {\n\n    private List&lt;CustomerResponse&gt; customers = new ArrayList&lt;&gt;();\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/customers\", consumes = MediaType.APPLICATION_JSON_VALUE\n            , produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n    )\n    public ResponseEntity&lt;CustomerResponse&gt; createCustomer(@RequestBody CustomerRequest customerRequest) {\n        CustomerResponse customerResponse = this.toCustomerResponse(customerRequest);\n        customerResponse.setId(UUID.randomUUID());\n        this.customers.add(customerResponse);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers\"\n            ,produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}\n    )\n    public ResponseEntity&lt;List&lt;CustomerResponse&gt;&gt; getCustomers() {\n        return new ResponseEntity&lt;&gt;(this.customers, HttpStatus.OK);\n    }\n\n    private CustomerResponse toCustomerResponse(CustomerRequest customerRequest) {\n        CustomerResponse customerResponse = new CustomerResponse();\n        customerResponse.setAddress(customerRequest.getAddress());\n        customerResponse.setDob(customerRequest.getDob());\n        customerResponse.setFullName(customerRequest.getFullName());\n        customerResponse.setPhone(customerRequest.getPhone());\n        customerResponse.setGender(customerRequest.getGender());\n        customerResponse.setEmail(customerRequest.getEmail());\n        return customerResponse;\n    }\n\n}\n</code></pre> <ul> <li> <p>As you can see, in apis above, we are supporting produces a response with a <code>application/json</code> Content-Type or <code>application/xml</code> Content-Type base on the <code>Accept</code> header of the request, if there is no <code>Accept</code> header in the request then the first value Content-Type will be choose to response as default, in this case it is <code>application/json</code>.</p> </li> <li> <p>Now, let's start the Spring Boot application and use postman to call 2 apis without <code>Accept</code> header. You will receive results as below.</p> </li> </ul> <p></p> <ul> <li>For the first api, we configure <code>MediaType.APPLICATION_JSON_VALUE</code> as the first value, so we will receive the response with <code>application/json</code> as default.</li> </ul> <p></p> <ul> <li>Then for the second api, we configure <code>MediaType.APPLICATION_XML_VALUE</code> as the first value, so we will receive the response with <code>application/xml</code> as default.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Content-Type%20Response%20Header/#using_responseentity","title":"Using ResponseEntity","text":"<ul> <li>The <code>ResponseEntity</code> class gives us fine-grained control over the response, including the Content-Type header. This is particularly useful when you need to customize not only the Content-Type but also other response aspects. Let's take an example as below.</li> </ul> CustomerController.java<pre><code>package com.springboot.project.config.content.type.response.app.controller;\n\nimport com.springboot.project.config.content.type.response.app.model.CustomerRequest;\nimport com.springboot.project.config.content.type.response.app.model.CustomerResponse;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.constraints.NotNull;\nimport javax.websocket.server.PathParam;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@RestController\npublic class CustomerController {\n\n    private List&lt;CustomerResponse&gt; customers = new ArrayList&lt;&gt;();\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/customers\", consumes = MediaType.APPLICATION_JSON_VALUE\n            , produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n    )\n    public ResponseEntity&lt;CustomerResponse&gt; createCustomer(@RequestBody CustomerRequest customerRequest) {\n        CustomerResponse customerResponse = this.toCustomerResponse(customerRequest);\n        customerResponse.setId(UUID.randomUUID());\n        this.customers.add(customerResponse);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers\"\n            ,produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}\n    )\n    public ResponseEntity&lt;List&lt;CustomerResponse&gt;&gt; getCustomers() {\n        return new ResponseEntity&lt;&gt;(this.customers, HttpStatus.OK);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers/{id}\")\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerById(@NotNull @PathVariable(value = \"id\") UUID customerId) {\n        Optional&lt;CustomerResponse&gt; customerResponse = this.customers.stream()\n                .filter(customer -&gt; customer.getId().equals(customerId))\n                .findFirst();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_XML);\n        return customerResponse.map(response -&gt; new ResponseEntity&lt;&gt;(response, headers, HttpStatus.OK))\n                .orElseGet(() -&gt; new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));\n    }\n\n    private CustomerResponse toCustomerResponse(CustomerRequest customerRequest) {\n        CustomerResponse customerResponse = new CustomerResponse();\n        customerResponse.setAddress(customerRequest.getAddress());\n        customerResponse.setDob(customerRequest.getDob());\n        customerResponse.setFullName(customerRequest.getFullName());\n        customerResponse.setPhone(customerRequest.getPhone());\n        customerResponse.setGender(customerRequest.getGender());\n        customerResponse.setEmail(customerRequest.getEmail());\n        return customerResponse;\n    }\n\n}\n</code></pre> <ul> <li>So if you into the api <code>/v1/customers/{id}</code> then you can see we will create an <code>HttpHeaders</code> and then we can set any <code>Content-Type</code> that we want. In this example we will set <code>application/xml</code>.</li> </ul> <ul> <li>Now, although you set the <code>Accept</code> is <code>application/json</code> in the request header, but we will always receive the <code>Content-Type</code> as <code>application/xml</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Content-Type%20Response%20Header/#using_contentnegotiationconfigurer","title":"Using ContentNegotiationConfigurer","text":"<ul> <li>The <code>ContentNegotiationConfigurer</code> provides a more centralized approach to configure content negotiation for our Spring Boot application. This allows us to define global rules for handling Content-Type headers. So this usually used for setting the default response <code>Content-Type</code> header if we don't use RequestMapping or ResponseEntity for setting <code>Content-Type</code>. So let's create <code>WebMvcConfig.java</code> as below.</li> </ul> WebMvcConfig.java<pre><code>package com.springboot.project.config.content.type.response.app.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n        configurer.defaultContentType(MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON);\n    }\n\n}\n</code></pre> <ul> <li> <p>With this configuration, the default Content-Type for responses in the application will be <code>application/xml</code>. We can further customize this behavior based on request parameters or headers.</p> </li> <li> <p>Now, let's remove all setting <code>Content-Type</code> with RequestMapping or ResponseEntity in the <code>CustomerController.java</code> as below.</p> </li> </ul> CustomerController.java<pre><code>package com.springboot.project.config.content.type.response.app.controller;\n\nimport com.springboot.project.config.content.type.response.app.model.CustomerRequest;\nimport com.springboot.project.config.content.type.response.app.model.CustomerResponse;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.constraints.NotNull;\nimport javax.websocket.server.PathParam;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@RestController\npublic class CustomerController {\n\n    private List&lt;CustomerResponse&gt; customers = new ArrayList&lt;&gt;();\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/customers\")\n    public ResponseEntity&lt;CustomerResponse&gt; createCustomer(@RequestBody CustomerRequest customerRequest) {\n        CustomerResponse customerResponse = this.toCustomerResponse(customerRequest);\n        customerResponse.setId(UUID.randomUUID());\n        this.customers.add(customerResponse);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers\")\n    public ResponseEntity&lt;List&lt;CustomerResponse&gt;&gt; getCustomers() {\n        return new ResponseEntity&lt;&gt;(this.customers, HttpStatus.OK);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers/{id}\")\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerById(@NotNull @PathVariable(value = \"id\") UUID customerId) {\n        Optional&lt;CustomerResponse&gt; customerResponse = this.customers.stream()\n                .filter(customer -&gt; customer.getId().equals(customerId))\n                .findFirst();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_XML);\n        return customerResponse.map(response -&gt; new ResponseEntity&lt;&gt;(response, headers, HttpStatus.OK))\n                .orElseGet(() -&gt; new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));\n    }\n\n    private CustomerResponse toCustomerResponse(CustomerRequest customerRequest) {\n        CustomerResponse customerResponse = new CustomerResponse();\n        customerResponse.setAddress(customerRequest.getAddress());\n        customerResponse.setDob(customerRequest.getDob());\n        customerResponse.setFullName(customerRequest.getFullName());\n        customerResponse.setPhone(customerRequest.getPhone());\n        customerResponse.setGender(customerRequest.getGender());\n        customerResponse.setEmail(customerRequest.getEmail());\n        return customerResponse;\n    }\n\n\n}\n</code></pre> <ul> <li>Now, let's use Postman to test, you will see all response <code>Content-Type</code> is <code>application/xml</code>.</li> </ul> <p></p> <p></p> <p></p> <ul> <li>Then now, if we set the <code>Accept</code> header in the request or set <code>Content-Type</code> with RequestMapping or ResponseEntity in the <code>CustomerController.java</code> then we can see all these setting will have higher priority than using <code>ContentNegotiationConfigurer</code>.</li> </ul> <p></p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Content-Type%20Response%20Header/#content-type_setting_priority_order","title":"Content-Type Setting Priority Order","text":"<ul> <li>Controller Method Annotations: The <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@RequestMapping</code> and other mapping annotations with produces attribute have the highest priority.</li> <li>Explicitly Set Content-Type in ResponseEntity: This method has higher precedence over global settings but lower than the produces attribute in controller annotations.</li> <li>ContentNegotiationConfigurer: The global content negotiation settings provide default values and fallbacks when no specific Content-Type is specified at the controller level.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Content-Type%20Response%20Header/#references","title":"References","text":"<ul> <li>stackoverflow</li> <li>Source Code Example</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/","title":"Spring Boot Introduction","text":"<p><code>Spring Boot</code> is a framework from \"The Spring Team\" to ease the bootstrapping and development of new Spring applications. It provides default for code and annotation configuration to quick start new Spring projects within no time. It follows \"Opinionated Defaults Configuration\" approach to avoid lots of boilerplate code and configuration to improve development, UnitTest and intergration test process.</p> <pre><code>Springboot = SpringFramework + EmbeddedHttp servers (Tomcat, Jetty) - xml&lt;bean&gt;Configuration or @Configuration. \n</code></pre> <ul> <li>More information.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#the_problems","title":"The Problems","text":"<ul> <li>As we know about Spring Framework in Spring Overview, building a traditional Spring application is really hard because we have to think many about controlling dependencies, setting up configurations (xml or Java) and deploying on WebServer like Tomcat, Jetty, ...etc.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#spring_boot_solution","title":"Spring Boot Solution","text":"<ul> <li><code>Java Spring Boot (Spring Boot)</code> is a tool that makes developing web application and microservices with Spring Framework faster and easier through some core capabilities:<ul> <li>Minimize the amount of maunal configuration.<ul> <li>Perform auto-configuration based on property files and JAR classpath</li> </ul> </li> <li>Help to resolve dependency conflicts (Maven and Gradle)</li> <li>Provide an embedded HTTP server so developers can start quickly.<ul> <li>Tomcat, Jetty, Undertow, ...</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#spring_boot_and_spring","title":"Spring Boot And Spring","text":"<ul> <li>Spring Boot uses Spring behind the scenes.</li> <li>Spring Boot simply makes it easier to use Spring.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#spring_initializr","title":"Spring Initializr","text":"<ul> <li> <p>To create a Spring Boot project, we can use this website start.spring.io. In which we can:</p> <ul> <li>Select our dependencies that we want to use.</li> <li>Create a Maven or Gradle project.</li> <li>Choose Java version</li> <li>Choose Spring Boot version</li> </ul> </li> <li> <p>Then after we generate the Spring Boot project, then we can import it into IDE like Eclipse, IntelliJ, NetBean etc... for using.</p> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#spring_boot_embedded_server","title":"Spring Boot Embedded Server","text":"<ul> <li>Spring Boot provide an embedded HTTP server so we can get start quickly. The embedded server can be Tomcat, Jetty, Undertow, ...etc.</li> <li>So with the embedded server, we don't need to install a server separately. Our jar file will contain our application codes and embedded server.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#running_spring_boot_app","title":"Running Spring Boot App","text":"<ul> <li>Spring Boot apps can be run standalone (includes embedded server).</li> <li>We can start running the Spring Boot apps from IDE or command-line.</li> <li>For example with the example Spring Boot jar file as below.</li> </ul> <ul> <li>So we can use the command line below to start running the Spring Boot app.</li> </ul> <pre><code>java -jar sample-app.jar\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#deploying_spring_boot_app","title":"Deploying Spring Boot App","text":"<ul> <li>Spring Boot apps can also be deployed in the traditional way with war file.</li> <li>We can deploy war file to an external server: Tomcat, JBoss, WebSphere etc...</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#key_components_of_springboot_framework","title":"Key Components Of SpringBoot Framework","text":"<ul> <li>There are 4 major components</li> </ul> <ul> <li>Spring Boot Starter</li> <li>Spring Boot AutoConfigurator</li> <li>Spring Boot CLI</li> <li>Spring Boot Actuator</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#summary","title":"Summary","text":"<ul> <li>Create stand-alone Spring applications.</li> <li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files).</li> <li>Provide opinionated 'starter' dependencies to simplify your build configuration.</li> <li>Automatically configure Spring and 3rd party libraries whenever possible.</li> <li>Provide production-ready features such as metrics, health checks, and externalized configuration.</li> <li>Absolutely no code generation and no requirement for XML configuration.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#see_also","title":"See Also","text":"<ul> <li>Spring Boot With Swagger</li> <li>Spring Boot With OpenApi</li> <li>Spring Boot With OpenApi Advances</li> <li>Spring Boot With @ConfigurationProperties</li> <li>Database Configuration In SpringBoot</li> <li>Spring Boot With Exception Handler And Message Source</li> <li>Spring Boot With Mustache</li> <li>Spring Boot With Chronicle Queue</li> <li>Spring Boot With SonarQube</li> <li>Spring Boot With Web Services</li> <li>Spring Boot With Apache CXF</li> <li>Spring Boot With Json Schema Validator</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Introduction/#references","title":"References","text":"<ul> <li>Spring IO</li> <li>Journal Dev</li> <li>Spring Boot 3, Spring 6 &amp; Hibernate for Beginners</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Starter/","title":"SpringBoot Starter Introduction","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Starter/#what_is_the_springboot_starter","title":"What Is The SpringBoot Starter?","text":"<ul> <li><code>Spring boot starters</code> is one of the major key features or components of Spring Boot Framework. The main responsibility of Spring boot stater is to combine a group of common or related dependencies into single dependencies.</li> <li>Major advantanges of <code>Spring boot Stater</code>:</li> <li><code>Spring boot stater</code> reduces defining many dependencies simplify project build dependencies.</li> <li><code>Spring boot stater</code> simplifies project build dependencies.</li> <li>Ex: To develop a spring WebApplication with Tomcat webserver, we need to add some dependencies and below into Maven's <code>pom.xml</code> file.<ul> <li>Spring core jar file.</li> <li>Spring web jar file.</li> <li>Spring web MVC jar file.</li> <li>Servlet jar file.</li> </ul> </li> <li>So, if we add \"spring-boot-stater-web\" jar file dependency to our build file, then spring boot framework will automatically download all required jars and add to our project classpath.</li> <li>As you can see in the image below, <code>Spring Boot Stater</code> has a dependency on <code>Spring Boot AutoConfigurator</code>, so the <code>Spring Boot Stater</code> will triggers <code>Spring Boot AutiConfigurator</code> automatically.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Starter/#springbootapplication_and_springapplication_class","title":"@SpringBootApplication And SpringApplication Class","text":"<ul> <li>In Spring Boot project, we usually see a main class which uses <code>@SpringBootApplication</code> and <code>SpringApplication class</code> as below</li> </ul> Application.java<pre><code>package com.exception.handler.demo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre> <ul> <li>So as we learned above <code>@SpringBootApplication</code> annotation is used to mark a configuration class that declares one or more @Bean methods and also triggers auto-configuration and component scanning. It's same as declaring a class with <code>@Configuration</code>, <code>@EnableAutoConfiguration</code> and <code>@ComponentScan</code> annotations.</li> <li><code>SpringApplication</code> class is used to bootstrap and launch a spring application from a Java main method. This class automatically create the <code>ApplicationContext</code> from the classpath, scan the configuration classes and launch the application. This class is very helpful in launching Spring MVC or Spring REST application using Spring Boot.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20Starter/#references","title":"References","text":"<ul> <li>Journal Dev</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20%40ConfigurationProperties/","title":"@ConfigurationProperties In SpringBoot","text":"<p>Sometimes we need to load a lot of environment variables from application.properties or application.yml to our spring boot project for using and it is not good way if we use traditional way with @Value.</p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20%40ConfigurationProperties/#using_configurationproperties_with_component","title":"Using @ConfigurationProperties with @Component","text":"<ul> <li> <p><code>@ConfigurationProperties</code> and <code>Component</code> will help us to convert environment variables to become a spring bean and we can use it everywhere in our project with <code>@Autowired</code>. This is the esiest way to config. Now, let's see the example below</p> </li> <li> <p>For example we have an application.yml with some environment as below. As you can see the data has 3 attributes are name, amount and price, so we can imagine that there is an object data has 3 attributes.</p> </li> </ul> application.yml<pre><code>data:\n    name: notebook\n    amount: 500\n    price: 10.5\n</code></pre> <ul> <li>So the first thing we should do is create an object class with getter and setter as default. Then we add the annotation <code>@ConfigurationProperties(prefix = \"data\")</code>, The prefix of the properties that are valid to bind to object. Synonym for prefix, a valid prefix is defined by one or more words separated with dots (e.g. \"company.customer.data\").</li> </ul> Data.java<pre><code>package com.springboot.project.configuration.properties.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n\n/**\n prefix = \"data\" it is mean this object is \"data\" in application.yaml\n And name, amount and price are 3 attributes in this object.\n @Component will make this object become an spring bean and we can use it everywhere with annotation @Autowired\n */\n\n@Component\n@ConfigurationProperties(prefix = \"data\")\npublic class Data {\n\n    private String name;\n    private Integer amount;\n    private double price;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAmount() {\n        return amount;\n    }\n\n    public void setAmount(Integer amount) {\n        this.amount = amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n}\n</code></pre> <ul> <li>Then we can use it everywhere by using annotation <code>@Autowired</code></li> </ul> GeneralController.java<pre><code>package com.springboot.project.configuration.properties.controller;\n\nimport com.springboot.project.configuration.properties.model.Data;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GeneralController {\n\n    @Autowired\n    private Data data;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data&gt; getSampleData() {\n        return ResponseEntity.ok(data);\n    }\n\n}\n</code></pre> <ul> <li>Now, we will start our spring boot service and call api to check the result.</li> </ul> <p></p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20%40ConfigurationProperties/#using_configurationproperties_with_other_configuration_ways","title":"Using @ConfigurationProperties With Other configuration ways","text":"<ul> <li> <p>So there 2 more ways to make environment varialbes becomce spring bean with <code>@ConfigurationProperties</code>.</p> </li> <li> <p>The first way is using annotation <code>@EnableConfigurationProperties(value = {Data2.class})</code>. We just put this annotation in our <code>main</code> class and put the array of classes that are using <code>ConfigurationProperties</code>. Let's see the Example below</p> </li> <li> <p>We don't use <code>@Component</code> anymore so our data class will look like this</p> </li> </ul> <p>Data2.java<pre><code>package com.springboot.project.configuration.properties.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"data\")\npublic class Data2 {\n\n    private String name;\n    private Integer amount;\n    private double price;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAmount() {\n        return amount;\n    }\n\n    public void setAmount(Integer amount) {\n        this.amount = amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n}\n</code></pre> - Then is the our main class</p> ConfigurationPropertiesApplication.java<pre><code>package com.springboot.project.configuration.properties;\n\nimport com.springboot.project.configuration.properties.model.Data2;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\n\n\n\n/**\n     @EnableConfigurationProperties(value = {Data2.class})\n     value is the Data.class that we define above\n*/\n\n@SpringBootApplication\n@EnableConfigurationProperties(value = {Data2.class})\npublic class ConfigurationPropertiesApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigurationPropertiesApplication.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Then we can use it everywhere by using annotation <code>@Autowired</code></li> </ul> GeneralController.java<pre><code>package com.springboot.project.configuration.properties.controller;\n\nimport com.springboot.project.configuration.properties.model.Data;\nimport com.springboot.project.configuration.properties.model.Data2;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GeneralController {\n\n    @Autowired\n    private Data data;\n\n    @Autowired\n    private Data2 data2;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data&gt; getSampleData() {\n        return ResponseEntity.ok(data);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data2\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data2&gt; getSampleData2() {\n        return ResponseEntity.ok(data2);\n    }\n\n}\n</code></pre> <ul> <li>Then you will see the result as below.</li> </ul> <p></p> <ul> <li> <p>The second way is like the way above with no annotation @Component in our Data2.class but we will use the annotation <code>@ConfigurationPropertiesScan(value = {\"com.springboot.project.configuration.properties.model\"})</code> the value of this annotation is an array of path to the <code>package</code> that contains our <code>Data.class</code>. So if we have many classes using <code>ConfigurationProperties</code> we can use this way</p> </li> <li> <p>So our main class we look like as below</p> </li> </ul> ConfigurationPropertiesApplication.java<pre><code>package com.springboot.project.configuration.properties;\n\nimport com.springboot.project.configuration.properties.model.Data2;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesScan;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\n\n/**\n        \"com.example.workflow.model\" is the path to the package that\n        contain Data2.class which is using @ConfigurationProperties\n*/\n\n@SpringBootApplication\n//@EnableConfigurationProperties(value = {Data2.class})\n@ConfigurationPropertiesScan(value = {\"com.springboot.project.configuration.properties.model\"})\npublic class ConfigurationPropertiesApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigurationPropertiesApplication.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Now, let's call api to check the result, you can see it's the same with the first way.</li> </ul> <p></p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20%40ConfigurationProperties/#nested_objects_with_configurationproperties","title":"Nested Objects With @ConfigurationProperties","text":"<ul> <li> <p>We can make the <code>Data3.class</code> contains another Object class by <code>@ConfigurationProperties</code></p> </li> <li> <p>Let's see the example below: As you can see the object <code>shipper</code> will be used in <code>data</code>. So how we can load them to become spring bean.</p> </li> </ul> application.yml<pre><code>data:\n  name: notebook\n  amount: 500\n  price: 10.5\n  shipper:\n    name: Duc\n    age: 26\n    phone: \"0123456789\"\n</code></pre> <ul> <li>First we need to create a java class named <code>Shipper.java</code> as below</li> </ul> Shipper.java<pre><code>package com.springboot.project.configuration.properties.model;\n\npublic class Shipper {\n\n    private String name;\n    private Integer age;\n    private String phone;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n}\n</code></pre> <ul> <li>Then in <code>Data3.class</code> we just need add it as an attribute with getter and setter as default.</li> </ul> Data3.java<pre><code>package com.springboot.project.configuration.properties.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"data\")\npublic class Data3 {\n\n    private String name;\n    private Integer amount;\n    private double price;\n    private Shipper shipper;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAmount() {\n        return amount;\n    }\n\n    public void setAmount(Integer amount) {\n        this.amount = amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public Shipper getShipper() {\n        return shipper;\n    }\n\n    public void setShipper(Shipper shipper) {\n        this.shipper = shipper;\n    }\n}\n</code></pre> <ul> <li>Then we can use it everywhere by using annotation <code>@Autowired</code></li> </ul> GeneralController.java<pre><code>package com.springboot.project.configuration.properties.controller;\n\nimport com.springboot.project.configuration.properties.model.Data;\nimport com.springboot.project.configuration.properties.model.Data2;\nimport com.springboot.project.configuration.properties.model.Data3;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GeneralController {\n\n    @Autowired\n    private Data data;\n\n    @Autowired\n    private Data2 data2;\n\n    @Autowired\n    private Data3 data3;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data&gt; getSampleData() {\n        return ResponseEntity.ok(data);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data2\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data2&gt; getSampleData2() {\n        return ResponseEntity.ok(data2);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data3\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data3&gt; getSampleData3() {\n        return ResponseEntity.ok(data3);\n    }\n\n}\n</code></pre> <ul> <li>So our main class we look like as below</li> </ul> ConfigurationPropertiesApplication.java<pre><code>package com.springboot.project.configuration.properties;\n\nimport com.springboot.project.configuration.properties.model.Data2;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesScan;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\n\n/**\n        \"com.example.workflow.model\" is the path to the package that\n        contain Data2.class which is using @ConfigurationProperties\n*/\n\n@SpringBootApplication\n//@EnableConfigurationProperties(value = {Data2.class})\n@ConfigurationPropertiesScan(value = {\"com.springboot.project.configuration.properties.model\"})\npublic class ConfigurationPropertiesApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigurationPropertiesApplication.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Finally we can use the <code>Data3.class</code> everywhere with <code>@Autowired</code> and It contains the data of <code>Shipper.class</code> also.</li> </ul> <p></p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20%40ConfigurationProperties/#using_configurationproperties_with_configuration","title":"Using @ConfigurationProperties with @Configuration","text":"<ul> <li>We can use <code>@ConfigurationProperties</code> and <code>@Bean</code> to initiate a bean which is loaded from <code>application.yml</code> in configuration classes.</li> <li>To do it, let's create a <code>Data4.class</code> as below, that does not require us to add any annotation more, just a default java model class.</li> </ul> Data4.java<pre><code>package com.springboot.project.configuration.properties.model;\n\npublic class Data4 {\n\n    private String name;\n    private Integer amount;\n    private double price;\n    private Shipper shipper;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAmount() {\n        return amount;\n    }\n\n    public void setAmount(Integer amount) {\n        this.amount = amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public Shipper getShipper() {\n        return shipper;\n    }\n\n    public void setShipper(Shipper shipper) {\n        this.shipper = shipper;\n    }\n}\n</code></pre> <ul> <li>Then let's create a configuration class name as below:</li> </ul> PropertiesConfiguration.java<pre><code>package com.springboot.project.configuration.properties.config;\n\nimport com.springboot.project.configuration.properties.model.Data4;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class PropertiesConfiguration {\n\n    @Bean\n    @ConfigurationProperties(prefix = \"data\")\n    public Data4 data4() {\n        return new Data4();\n    }\n\n}\n</code></pre> <ul> <li>So, now you can use it everywhere by <code>@Autowired</code></li> </ul> GeneralController.java<pre><code>package com.springboot.project.configuration.properties.controller;\n\nimport com.springboot.project.configuration.properties.model.Data;\nimport com.springboot.project.configuration.properties.model.Data2;\nimport com.springboot.project.configuration.properties.model.Data3;\nimport com.springboot.project.configuration.properties.model.Data4;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GeneralController {\n\n    @Autowired\n    private Data data;\n\n    @Autowired\n    private Data2 data2;\n\n    @Autowired\n    private Data3 data3;\n\n    @Autowired\n    private Data4 data4;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data&gt; getSampleData() {\n        return ResponseEntity.ok(data);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data2\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data2&gt; getSampleData2() {\n        return ResponseEntity.ok(data2);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data3\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data3&gt; getSampleData3() {\n        return ResponseEntity.ok(data3);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/general/data4\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Data4&gt; getSampleData4() {\n        return ResponseEntity.ok(data4);\n    }\n\n}\n</code></pre> <ul> <li>Let's start your application and call api, you will the result as below</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20%40ConfigurationProperties/#references","title":"References","text":"<ul> <li>You can view full source code here</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/","title":"Spring Boot With Apache CXF","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#introduction","title":"Introduction","text":"<ul> <li>For integrating Web Services with Spring Boot project we learnt 2 ways before:  Spring Boot With Web Services and Spring Cloud OpenFeign With Web Services. In this topic we will learn another way to work with Web Services in our Spring Boot project by using Apache CXF.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#what_is_the_apache_cxf","title":"What Is The Apache CXF?","text":"<ul> <li><code>Apache CXF</code> is an open source services framework. CXF helps us to build and develop services using frontend programming APIs, like JAX-WS and JAX-RS. These services can speak a variety of protocols such as SOAP, XML/HTTP, RESTful HTTP, or CORBA and work over a variety of transports such as HTTP, JMS or JBI.</li> <li>Some of the key features of CXF include support for the latest web service standards, data transformation, interceptors, security, and RESTful services. CXF also integrates well with other popular Java technologies like  Spring and Camel.</li> <li>You can view more here</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#why_apache_cxf","title":"Why Apache CXF?","text":"<ul> <li>CXF implements the JAX-WS APIs which make building web services easy. JAX-WS encompasses many different areas:<ul> <li>Generating WSDL from Java classes and generating Java classes from WSDL</li> <li>Provider API which allows you to create simple messaging receiving server endpoints</li> <li>Dispatch API which allows you to send raw XML messages to server endpoints</li> <li>Much more...</li> </ul> </li> <li><code>Spring</code> is a first class citizen with Apache CXF. CXF supports the Spring 2.0 XML syntax, making it trivial to declare endpoints which are backed by <code>Spring</code> and inject clients into your application.</li> <li>View more here</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#integrating_spring_boot_and_apache_cxf","title":"Integrating Spring Boot And Apache CXF","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#prepare_the_environment","title":"Prepare The Environment","text":"<ul> <li>To make an example we need an online Web Service, so we can go to free SOAP service urls and choose one to make an example.</li> <li>In this example I will choose country list SOAP service because it is the one that is working well.</li> <li>So you need go to country list SOAP service by your browser. Then <code>Right Click</code> and choose <code>Save As</code>. After that you save the file with type <code>.wsdl</code> into any package in <code>src/main/resources</code> of your spring boot project as the images below:</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#dependencies","title":"Dependencies","text":"<ul> <li>We need to add some dependencies for using <code>apache cxf</code> in our Spring Boot project as below.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n    &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;  \n    &lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;  \n    &lt;version&gt;3.5.5&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;  \n    &lt;artifactId&gt;cxf-rt-wsdl&lt;/artifactId&gt;  \n    &lt;version&gt;3.5.5&lt;/version&gt;  \n&lt;/dependency&gt;\n</code></pre> <ul> <li>We also need to add the plugin for generate Java Classes from the <code>WSDL</code> file as below.</li> </ul> pom.xml<pre><code>&lt;build&gt;\n        &lt;plugins&gt;\n                &lt;plugin&gt;\n                        &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n                        &lt;artifactId&gt;cxf-codegen-plugin&lt;/artifactId&gt;\n                        &lt;version&gt;${cxf.version}&lt;/version&gt;\n                        &lt;executions&gt;\n                                &lt;execution&gt;\n                                        &lt;id&gt;generate-sources&lt;/id&gt;\n                                        &lt;phase&gt;generate-sources&lt;/phase&gt;\n                                        &lt;configuration&gt;\n                                                &lt;!-- the source root that will contain our generated java classes --&gt;\n                                                &lt;sourceRoot&gt;${project.build.directory}/generated-sources/java&lt;/sourceRoot&gt;\n                                                &lt;wsdlOptions&gt;\n                                                        &lt;wsdlOption&gt;\n                                                                &lt;!-- the path where we put the wsdl file --&gt;\n                                                                &lt;wsdl&gt;${basedir}/src/main/resources/countries.wsdl&lt;/wsdl&gt;\n                                                                &lt;!-- the package that contains our generated java classes --&gt;\n                                                                &lt;packagenames&gt;com.springboot.apache.cxf.generated&lt;/packagenames&gt;\n                                                        &lt;/wsdlOption&gt;\n                                                &lt;/wsdlOptions&gt;\n                                        &lt;/configuration&gt;\n                                        &lt;goals&gt;\n                                                &lt;!-- convert wsdl file to java classes --&gt;\n                                                &lt;goal&gt;wsdl2java&lt;/goal&gt;\n                                        &lt;/goals&gt;\n                                &lt;/execution&gt;\n                        &lt;/executions&gt;\n                &lt;/plugin&gt;\n        &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#generate_java_classes_from_wsdl_file","title":"Generate Java Classes From WSDL File","text":"<ul> <li>So let's open the <code>terminal/command line</code> then run <code>mvn compile</code>, then Maven will read the file <code>countries.wsdl</code> to generate java classes and put them into the <code>package</code> that we have already defined in the <code>pom.xml</code>.</li> <li>If you note that, java classes have been configured with many annotation of XML, So these class will be formatted as xml type when we transfer them to SOAP service.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#configuration_properties","title":"Configuration Properties","text":"<ul> <li>Firstly, we will need to create a configuration properties class to load some needed properties that we will configure in the <code>application.yml</code> file by using <code>@ConfigurationProperties</code>, if you have not used it before then you can view Spring Boot With @ConfigurationProperties.</li> <li>So let's create <code>CountryInfoProperties.java</code> which will load some properties: <code>hostname</code>, <code>protocol</code>, <code>port</code> and <code>api</code> as below.</li> </ul> CountryInfoProperties.java<pre><code>package com.springboot.apache.cxf.config;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\n@ConfigurationProperties(prefix = \"country.client.soap\")\npublic class CountryInfoProperties {\n\n    private String hostname;\n    private String protocol;\n    private String port;\n    private String api;\n\n}\n</code></pre> <ul> <li>In the <code>application.yml</code>, we will put some configuration properties like below.</li> </ul> application.yml<pre><code>country:\n  client:\n    soap:\n      hostname: webservices.oorsprong.org\n      protocol: http\n      port: 80\n      api: websamples.countryinfo/CountryInfoService.wso\n</code></pre> <ul> <li>So if you look into the URL that we used to download the <code>wsdl</code> file we can know the <code>protocol</code> (No SSL so http), <code>host</code> , <code>port</code> (No SSL so the port is 80) and the <code>api</code> and we will put them into the configuration above.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#url_factory","title":"URL Factory","text":"<ul> <li>Next, with the <code>CountryInfoProperties</code> above we will use it in the <code>UrlFactory</code> to build the <code>URI</code> for calling WebServices as below.</li> </ul> UrlFactory.java<pre><code>package com.springboot.apache.cxf.factory;\n\nimport com.springboot.apache.cxf.config.CountryInfoProperties;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.UriComponents;\nimport org.springframework.web.util.UriComponentsBuilder;\n\n@Component\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class UrlFactory {\n\n    private final CountryInfoProperties countryInfoProperties;\n\n    public String buildWebServiceUrl() {\n        UriComponents uriComponents = UriComponentsBuilder\n                .newInstance()\n                .scheme(this.countryInfoProperties.getProtocol())\n                .host(this.countryInfoProperties.getHostname())\n                .port(this.countryInfoProperties.getPort())\n                .path(this.countryInfoProperties.getApi())\n                .build();\n        return uriComponents.toString();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will all configuration properties that we put in the <code>application.yml</code> to build the URI.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#client_configuration","title":"Client Configuration","text":"<ul> <li>Next, we will configure the client for calling Soap WebServices. If you look into the generated code by <code>Apache CXF</code> you can see there is an interface like this.</li> </ul> <ul> <li> <p>So this interface represents a SOAP WebService client that communicates with a WebService provider. If you look into every method you can see each method has annotations such as @WebMethod, @WebParam, @WebResult, @RequestWrapper, and @ResponseWrapper. These annotations are used to specify the SOAP message format and details.</p> </li> <li> <p>Then we also see there is a generated java class that is annotation with annotation <code>@WebServiceClient</code>  as below.</p> </li> </ul> <p></p> <ul> <li> <p>So this class <code>CountryInfoService</code> is a generated WebService client that allows Java applications to interact with a SOAP-based WebService. The purpose of this class is to provide a Java interface for a client to access the web service's functions to retrieve information. If you look into this class, you can see the method  <code>getPort</code> will return the SOAP WebService client interface above.</p> </li> <li> <p>Now, We will configure it for calling SOAP WebService. Let's create a configuration class for SOAP WebService client as below.</p> </li> </ul> <pre><code>package com.springboot.apache.cxf.config;\n\nimport com.springboot.apache.cxf.factory.UrlFactory;\nimport com.springboot.apache.cxf.generated.CountryInfoService;\nimport com.springboot.apache.cxf.generated.CountryInfoServiceSoapType;\nimport com.springboot.apache.cxf.generated.ObjectFactory;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.xml.ws.BindingProvider;\nimport java.util.Map;\n\n@Configuration\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class CountryInfoClientConfig {\n\n    private final UrlFactory urlFactory;\n\n    @Bean\n    public CountryInfoServiceSoapType countryInfoServiceSoapType() {\n        CountryInfoService countryInfoService = new CountryInfoService();\n        CountryInfoServiceSoapType countryInfoServiceSoapType =  countryInfoService.getCountryInfoServiceSoap();\n        Map&lt;String, Object&gt; requestContext = ((BindingProvider) countryInfoServiceSoapType).getRequestContext();\n        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, this.urlFactory.buildCountryInfoWebServiceUrl());\n        return countryInfoServiceSoapType;\n    }\n\n    @Bean\n    public ObjectFactory countryInfoServiceSoapTypeFactory() {\n        return new ObjectFactory();\n    }\n\n}\n</code></pre> <ul> <li>Firstly, we will create an instance of <code>CountryInfoService</code>. Then from this instance we will get the instance <code>CountryInfoServiceSoapType</code>. Then we will set the request URL for it by using the <code>UrlFactory</code> that we created in the step above and return it as a bean <code>countryInfoServiceSoapType</code>.</li> <li>Secondly, we will create a bean <code>countryInfoServiceSoapTypeFactory</code> with new instance <code>ObjectFactory</code>. In <code>Apache CXF</code>, the <code>ObjectFactory</code> is a class that is generated from the XML schema file and is used to create instances of the JAXB-generated classes that represent the schema elements.<ul> <li>In other words, the <code>ObjectFactory</code> is responsible for creating instances of the classes that correspond to the XML elements defined in the schema. This is necessary because JAXB classes are typically generated as plain Java classes without any constructors. Instead, JAXB provides the <code>ObjectFactory</code> class to create instances of these classes.</li> <li>By creating a bean for the <code>ObjectFactory</code>, we can inject it into other beans or components that require it to create instances of the JAXB-generated classes. This can be useful when working with SOAP web services or other XML-based technologies that rely on JAXB to serialize and deserialize XML data.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#utility_class","title":"Utility Class","text":"<ul> <li>An utility class is helpful for us to use for mapping request objects for calling Soap WebService or response objects from Soap WebService. So let's create the Utility java class as below.</li> </ul> CountryInfoFactory.java<pre><code>package com.springboot.apache.cxf.factory;\n\nimport com.springboot.apache.cxf.generated.ArrayOftCountryCodeAndNameGroupedByContinent;\nimport com.springboot.apache.cxf.generated.CountryNameResponse;\nimport com.springboot.apache.cxf.generated.ListOfCountryNamesGroupedByContinentResponse;\nimport lombok.experimental.UtilityClass;\n\n@UtilityClass\npublic class CountryInfoFactory {\n\n    public CountryNameResponse mapCountryNameResponse(String countryName) {\n        CountryNameResponse countryNameResponse = new CountryNameResponse();\n        countryNameResponse.setCountryNameResult(countryName);\n        return countryNameResponse;\n    }\n\n    public ListOfCountryNamesGroupedByContinentResponse mapListOfCountryNamesGroupedByContinentResponse(ArrayOftCountryCodeAndNameGroupedByContinent response) {\n        ListOfCountryNamesGroupedByContinentResponse listOfCountryNamesGroupedByContinentResponse = new ListOfCountryNamesGroupedByContinentResponse();\n        listOfCountryNamesGroupedByContinentResponse.setListOfCountryNamesGroupedByContinentResult(response);\n        return listOfCountryNamesGroupedByContinentResponse;\n    }\n\n}\n</code></pre> <ul> <li>In this <code>CountryInfoFactory</code> utility class we will have two methods which are used for mapping result objects from Soap WebService to our response DTO classes.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#service","title":"Service","text":"<ul> <li>Now, let's create a service class for calling Soap WebService by using the configured Soap WebService client that we configured before. Now, we will inject the <code>CountryInfoServiceSoapType</code> client into our service and use it as below.</li> </ul> CountryCodeHandler.java<pre><code>package com.springboot.apache.cxf.service;\n\nimport com.springboot.apache.cxf.factory.CountryInfoFactory;\nimport com.springboot.apache.cxf.generated.*;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.xml.ws.BindingProvider;\nimport javax.xml.ws.handler.MessageContext;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class CountryCodeHandler {\n\n    private final CountryInfoServiceSoapType countryClient;\n\n    public CountryNameResponse getCountryName(String countryISO) {\n        try {\n            String countryName = this.countryClient.countryName(countryISO);\n            return CountryInfoFactory.mapCountryNameResponse(countryName);\n        } catch (Exception e) {\n            BindingProvider bindingProvider = (BindingProvider) this.countryClient;\n            log.info(\"Error Code: {}\", bindingProvider.getResponseContext().get(MessageContext.HTTP_RESPONSE_CODE));\n            throw new RuntimeException(e);\n        }\n    }\n\n    public ListOfCountryNamesGroupedByContinentResponse getListOfCountryNamesGroupedByContinent() {\n        try {\n            ArrayOftCountryCodeAndNameGroupedByContinent response = this.countryClient.listOfCountryNamesGroupedByContinent();\n            return CountryInfoFactory.mapListOfCountryNamesGroupedByContinentResponse(response);\n        } catch (Exception e) {\n            BindingProvider bindingProvider = (BindingProvider) this.countryClient;\n            log.info(\"Error Code: {}\", bindingProvider.getResponseContext().get(MessageContext.HTTP_RESPONSE_CODE));\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n</code></pre> <ul> <li>There are many api that we can use in <code>CountryInfoServiceSoapType</code> but in this example we just use 2 of them, they are <code>countryName</code> and <code>listOfCountryNamesGroupedByContinent</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#controller","title":"Controller","text":"<ul> <li>Finally, we just need to create a controller class and inject the <code>CountryCodeHandler</code> service that we created in the step above for using.</li> </ul> WebServicesController.java<pre><code>package com.springboot.apache.cxf.controller;\n\nimport com.springboot.apache.cxf.generated.CountryNameResponse;\nimport com.springboot.apache.cxf.generated.ListOfCountryNamesGroupedByContinentResponse;\nimport com.springboot.apache.cxf.service.CountryCodeHandler;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class WebServicesController {\n\n    private final CountryCodeHandler countryCodeHandler;\n\n    @GetMapping(path = \"/v1/soap/country/{countryISO}\", produces = MediaType.APPLICATION_XML_VALUE)\n    public ResponseEntity&lt;CountryNameResponse&gt; getCountryNameByISO(@PathVariable(\"countryISO\") String countryISO) {\n        return ResponseEntity.ok(this.countryCodeHandler.getCountryName(countryISO));\n    }\n\n    @GetMapping(path = \"/v1/soap/country/listOfCountryNamesGroupedByContinent\", produces = MediaType.APPLICATION_XML_VALUE)\n    public ResponseEntity&lt;ListOfCountryNamesGroupedByContinentResponse&gt; getCountryNameByISO() {\n        return ResponseEntity.ok(this.countryCodeHandler.getListOfCountryNamesGroupedByContinent());\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#testing","title":"Testing","text":"<ul> <li>Now, let's start our Spring Boot application and call two apis for testing. You should see the successful results as below.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#handle_exception_with_apache_cxf","title":"Handle Exception With Apache CXF","text":"<ul> <li>Okay, we have finished implementing the happy case, but for the case that we getting errors from the Soap WebService like Service is unavailable or not found, how we can handle it?</li> <li>Let's take an example, if we change api or the hostname in the <code>application.yml</code> and call the Soap WebService again, you will always receive the 500 error as below.</li> </ul> <ul> <li>So, this is not true and it is hard for developers to detect the issues when working with Soap WebService. Then handling the exception with Apache CXF is important and we should practice with it.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#add_custom_exception","title":"Add Custom Exception","text":"<ul> <li>Firstly, let's create a custom exception which contains some information about the error as below.</li> </ul> <pre><code>package com.springboot.apache.cxf.exception;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class TechnicalException extends RuntimeException {\n\n    private final Integer responseCode;\n    private final String url;\n    private final String responseHeaders;\n    private final String rootCause;\n\n    public TechnicalException(String message, Integer responseCode, String url, String responseHeaders, String rootCause) {\n        super(message);\n        this.responseCode = responseCode;\n        this.url = url;\n        this.responseHeaders = responseHeaders;\n        this.rootCause = rootCause;\n    }\n}\n</code></pre> <ul> <li>With this custom exception we can use it to store information that we want to extract when got issues with calling SOAP WebService.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#error_response_body","title":"Error Response Body","text":"<ul> <li>Next, we will create an simple error DTO which will be the error response body for clients who is using apis from our Spring Boot application.</li> </ul> <pre><code>package com.springboot.apache.cxf.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ErrorDetail {\n\n    private Integer status;\n    private String calledUrl;\n    private String responseHeaders;\n    private String rootCause;\n    private String errorMessage;\n    private String timestamp;\n    private String api;\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#exception_handler","title":"Exception Handler","text":"<ul> <li>Now, We will create an exception handler class named <code>GlobalExceptionHandler</code> which will extends from <code>ResponseEntityExceptionHandler</code> class, by default the <code>ResponseEntityExceptionHandler</code> will provide an <code>@ExceptionHandler</code> method for handling internal Spring MVC exceptions.</li> </ul> GlobalExceptionHandler.class<pre><code>package com.springboot.apache.cxf.handler;\n\nimport com.springboot.apache.cxf.exception.TechnicalException;\nimport com.springboot.apache.cxf.model.ErrorDetail;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n\nimport java.time.OffsetDateTime;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @ExceptionHandler(value = {TechnicalException.class})\n    public ResponseEntity&lt;ErrorDetail&gt; technicalExceptionHandler(TechnicalException ex, WebRequest request) {\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setTimestamp(OffsetDateTime.now().toString());\n        errorDetail.setErrorMessage(ex.getMessage());\n        errorDetail.setStatus(ex.getResponseCode());\n        errorDetail.setRootCause(ex.getRootCause());\n        errorDetail.setResponseHeaders(ex.getResponseHeaders());\n        errorDetail.setCalledUrl(ex.getUrl());\n        errorDetail.setApi(request.getDescription(false));\n        if (errorDetail.getStatus() &gt;= 400) {\n            return new ResponseEntity&lt;&gt;(errorDetail, HttpStatus.valueOf(ex.getResponseCode()));\n        }\n        errorDetail.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());\n        return new ResponseEntity&lt;&gt;(errorDetail, HttpStatus.SERVICE_UNAVAILABLE);\n    }\n\n    @ExceptionHandler(value = {Exception.class})\n    public ResponseEntity&lt;ErrorDetail&gt; exceptionHandler(Exception ex, WebRequest request) {\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setTimestamp(OffsetDateTime.now().toString());\n        errorDetail.setErrorMessage(ex.getMessage());\n        errorDetail.setApi(request.getDescription(false));\n        return new ResponseEntity&lt;&gt;(errorDetail, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n\n}\n</code></pre> <ul> <li> <p>As you can see, we will create 2 methods. The first method <code>technicalExceptionHandler</code> is used for catching all exceptions with type <code>TechnicalException</code> and then  we will extracted information from it for building response body which is the <code>ErrorDetail</code> DTO class. Like wise, the second method <code>exceptionHandler</code> is used for catching all other exception types which are not <code>TechnicalException</code>.</p> </li> <li> <p>If you have not know about how to handle exceptions in Spring Boot application. You can view this Spring Boot With Exception Handler And Message Source.</p> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#utility_class_1","title":"Utility Class","text":"<ul> <li>Next, we will need to update the utility class for extracting information and building the <code>TechnicalException</code>.  So let's add some more methods <code>buildTechnicalException</code>, <code>getResponseCode</code>, <code>getEndpoint</code> and <code>getResponseHeaders</code> as below.</li> </ul> <pre><code>package com.springboot.apache.cxf.factory;\n\nimport com.springboot.apache.cxf.exception.TechnicalException;\nimport com.springboot.apache.cxf.generated.ArrayOftCountryCodeAndNameGroupedByContinent;\nimport com.springboot.apache.cxf.generated.CountryInfoServiceSoapType;\nimport com.springboot.apache.cxf.generated.CountryNameResponse;\nimport com.springboot.apache.cxf.generated.ListOfCountryNamesGroupedByContinentResponse;\nimport lombok.experimental.UtilityClass;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\n\nimport javax.xml.ws.BindingProvider;\nimport javax.xml.ws.handler.MessageContext;\n\n@Slf4j\n@UtilityClass\npublic class CountryInfoFactory {\n\n    public CountryNameResponse mapCountryNameResponse(String countryName) {\n        CountryNameResponse countryNameResponse = new CountryNameResponse();\n        countryNameResponse.setCountryNameResult(countryName);\n        return countryNameResponse;\n    }\n\n    public ListOfCountryNamesGroupedByContinentResponse mapListOfCountryNamesGroupedByContinentResponse(ArrayOftCountryCodeAndNameGroupedByContinent response) {\n        ListOfCountryNamesGroupedByContinentResponse listOfCountryNamesGroupedByContinentResponse = new ListOfCountryNamesGroupedByContinentResponse();\n        listOfCountryNamesGroupedByContinentResponse.setListOfCountryNamesGroupedByContinentResult(response);\n        return listOfCountryNamesGroupedByContinentResponse;\n    }\n\n\n    public TechnicalException buildTechnicalException(CountryInfoServiceSoapType client, Exception ex) {\n        return new TechnicalException(\n                ex.getMessage(),\n                getResponseCode(client),\n                getEndpoint(client),\n                getResponseHeaders(client),\n                ExceptionUtils.getRootCauseMessage(ex));\n    }\n\n\n    private Integer getResponseCode(CountryInfoServiceSoapType countryClient) {\n        BindingProvider bindingProvider = (BindingProvider) countryClient;\n        Integer responseCode = (Integer) bindingProvider.getResponseContext().get(MessageContext.HTTP_RESPONSE_CODE);\n        log.info(\"Error Code: {}\", responseCode);\n        return responseCode;\n    }\n\n\n    private String getEndpoint(CountryInfoServiceSoapType countryClient) {\n        BindingProvider bindingProvider = (BindingProvider) countryClient;\n        String endpoint = (String) bindingProvider.getRequestContext().get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);;\n        log.info(\"Error Endpoint: {}\", endpoint);\n        return endpoint;\n    }\n\n    private String getResponseHeaders(CountryInfoServiceSoapType countryClient) {\n        BindingProvider bindingProvider = (BindingProvider) countryClient;\n        Object objectHeaders = bindingProvider.getResponseContext().get(MessageContext.HTTP_RESPONSE_HEADERS);\n        return String.valueOf(objectHeaders);\n    }\n\n\n}\n</code></pre> <ul> <li>So, to build the <code>TechnicalException</code>, we will need to extract some information from failed response when we call to the SOAP WebService. To to that we can cast the <code>CountryInfoServiceSoapType</code> SOAP WebService client interface from the input param to the <code>BindingProvider</code>. Then from the <code>BindingProvider</code> we can easily use  <code>getRequestContext</code> or <code>getResponseContext</code> for extracting information from the request or response of the SOAP WebService call respectively.</li> <li>We also need the <code>Exception</code> as an input param to extract the  error <code>message</code> and <code>rootCause</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#throwing_custom_exception","title":"Throwing Custom Exception","text":"<ul> <li>Now, Let's update throwing exception in the Service class as below.</li> </ul> <pre><code>package com.springboot.apache.cxf.service;  \n\nimport com.springboot.apache.cxf.factory.CountryInfoFactory;  \nimport com.springboot.apache.cxf.generated.*;  \nimport lombok.RequiredArgsConstructor;  \nimport lombok.extern.slf4j.Slf4j;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.stereotype.Service;  \n\n@Slf4j  \n@Service  \n@RequiredArgsConstructor(onConstructor = @__(@Autowired))  \npublic class CountryCodeHandler {  \n\n    private final CountryInfoServiceSoapType countryClient;  \n\n    public CountryNameResponse getCountryName(String countryISO) {  \n        try {  \n            String countryName = this.countryClient.countryName(countryISO);  \n            return CountryInfoFactory.mapCountryNameResponse(countryName);  \n        } catch (Exception e) {  \n            throw CountryInfoFactory.buildTechnicalException(countryClient, e);  \n        }  \n    }  \n\n    public ListOfCountryNamesGroupedByContinentResponse getListOfCountryNamesGroupedByContinent() {  \n        try {  \n            ArrayOftCountryCodeAndNameGroupedByContinent response = this.countryClient.listOfCountryNamesGroupedByContinent();  \n            return CountryInfoFactory.mapListOfCountryNamesGroupedByContinentResponse(response);  \n        } catch (Exception e) {  \n            throw CountryInfoFactory.buildTechnicalException(countryClient, e);  \n        }  \n    }  \n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#testing_1","title":"Testing","text":"<ul> <li>Finally, Let's change api or the hostname in the <code>application.yml</code> and call the Soap WebService again, you will always receive the 500 error as below.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#see_also","title":"See Also","text":"<ul> <li>Web Services </li> <li>Spring Boot With Web Services</li> <li>Spring Cloud OpenFeign With Web Services</li> <li>Spring Boot With Exception Handler And Message Source</li> <li>Spring Boot With @ConfigurationProperties</li> <li>Spring Overview</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Apache%20CXF/#references","title":"References","text":"<ul> <li>Apache CXF</li> <li>Free SOAP Service URLs</li> <li>FullSourceCode</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/","title":"Spring Boot With Chronicle Queue","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#what_is_the_chronicle_queue","title":"What Is The Chronicle Queue?","text":"<ul> <li>In the section Java Collection Framework, we might know about the <code>Queue</code> in Java which maintains the first-in-first-out order. It can be defined as an ordered list that is used to hold the elements which are about to be processed. </li> <li>Let's take an example like this: Assume that you haven an application which provide a functionality for sending emails. However, calling this api for sending an email and it will take some time (Ex: about 6 seconds) and if there are many users call this api for sending email, then afterward users have to wait for a long time and maybe they will receive the timeout error. The Queue will help us keep these messages and will handle it one by one later with first-in-first-out order. So after the use send the request message then the application add this message into the Queue and will handle it later, then the user don't have to wait anymore.</li> <li>However, with the default Queue that Java provided, all the messages in that Queue will be stored on memory and if the application is stopped or restarted, then all these messages will be lost. Moreover, if there are too many messages in the Queue then the application may need a lot of RAM. Because Java can only hold so much information before the heap becomes a limiting factor with high-impacting garbage collector as a result.</li> <li>So, <code>Chronicle Queue</code> will help us to solve these problems, the <code>Chronicle Queue</code> persists every single message using a memory-mapped file. This allows us to share messages between processes. It stores data directly to off-heap memory, therefore, making it free of GC overhead.\u00a0It is designed for providing low-latency message framework for high-performance applications.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#example_with_chronicle_queue","title":"Example With Chronicle Queue","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#prepare","title":"Prepare","text":"<ul> <li> <p>So before going to the example let's take a look about the example that we are going to do.  Assume that have a service for sending emails when our micro service system got errors and sending an email is taking time, about 6 seconds. Because there are many services into our system so there are many errors can happen at the same time. So we have to build a service which have to</p> <ul> <li>Avoid overloading and request timeout when there are many requests at the same time.</li> <li>Avoid lost messages when the service is stopped or restarted.</li> <li>Have the ability to continue handing on the last handled message when the service is stopped or restarted.</li> </ul> </li> <li> <p>So below is the diagram that we can achieve those things by using the support of Chronicle Queue which will help us to store queue messages on disk.</p> </li> </ul> <p></p> <ul> <li>So, as you can see in the diagram, we assume that the user use postman to send messages to our Spring Boot service, then these message will be put into the Chronicle Queue which is stored in a file on disk.</li> <li>Then there is a method that will be executed every second (base on our configuration) to check the message queue. However, before checking the message in the queue it will get the last index in an other Chronicle queue which is used for storing handled index message. So with this index, the method will continue to get the upcoming message in the queue and handle it although the service is stop and restarted.</li> <li>Then after handled the message in the queue, the method will put the previous index to the handled index queue to keep the progress can be continue if the service is restarted. </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#dependency","title":"Dependency","text":"<ul> <li>To use <code>Chronicle Queue</code> in our Spring Boot project, we need to add some dependencies as below.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n    &lt;groupId&gt;net.openhft&lt;/groupId&gt;  \n    &lt;artifactId&gt;chronicle&lt;/artifactId&gt;  \n    &lt;version&gt;3.6.4&lt;/version&gt;  \n&lt;/dependency&gt;\n\n&lt;dependency&gt;  \n   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  \n   &lt;artifactId&gt;lombok&lt;/artifactId&gt;  \n   &lt;version&gt;1.18.22&lt;/version&gt;  \n   &lt;scope&gt;provided&lt;/scope&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  \n   &lt;version&gt;2.6.1&lt;/version&gt;  \n&lt;/dependency&gt;  \n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#model","title":"Model","text":"<ul> <li>Let's define a simple model for the message in the queue with some information as below.</li> </ul> ErrorDetail.java<pre><code>package com.springboot.project.chronicle.queue.app.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\n@Getter\n@Setter\npublic class ErrorDetail {\n\n    private UUID id;\n    private Integer errorCode;\n    private String errorMessage;\n    private OffsetDateTime timestamp;\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#chroniclequeue_config","title":"ChronicleQueue Config","text":"<ul> <li>Next, we will continue to create a <code>ChronicleQueueConfig</code> class with 2 configuration for 2 queues as in the image below.</li> </ul> <ul> <li>The configuration will look like this.</li> </ul> ErrorDetail.java<pre><code>package com.springboot.project.chronicle.queue.app.config;\n\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ChronicleQueueBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.io.IOException;\n\n@Configuration\npublic class ChronicleQueueConfig {\n\n    @Bean\n    public Chronicle errorDetailQueue() throws IOException {\n        final String basePath = System.getProperty(\"user.dir\") + \"/chronicle-queue-app\" + \"/error-detail-queue\";\n        return ChronicleQueueBuilder.indexed(basePath).build();\n    }\n\n    @Bean\n    public Chronicle errorDetailQueueIndex() throws IOException {\n        final String basePath = System.getProperty(\"user.dir\") + \"/chronicle-queue-app\" + \"/error-detail-queue-index\";\n        return ChronicleQueueBuilder.indexed(basePath).build();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will configure 2 beans for 2 queue, the first one is the <code>errorDetailQueue</code> and the second one is the <code>errorDetailQueueIndex</code>. <ul> <li>Firstly, we will config the <code>basePath</code> which is the location that the file which contain queue messages is stored. In this example, we will chose the location for storing the Chronicle Queue file in our current project.</li> <li>Secondly, we will use <code>ChronicleQueueBuilder</code> to build the <code>Chronicle</code> instance. Then now, for using the <code>Chronicle Queue</code>, we just need to <code>@Autowired</code> it.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#schedule_config","title":"Schedule Config","text":"<ul> <li>Because we are going to create a method which will be executed every second to check and handle message in queue, so we need to enable <code>EnableScheduling</code> in our Spring Boot Service. So let's create an configuration class as below.</li> </ul> ScheduleConfig.java<pre><code>package com.springboot.project.chronicle.queue.app.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n@Configuration\n@EnableScheduling\npublic class ScheduleConfig {\n\n}\n</code></pre> <ul> <li>In which we will use the annotations <code>@Configuration</code> and <code>@EnableScheduling</code> to enable this feature.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#service","title":"Service","text":"<ul> <li> <p>Then let's create a service class <code>ChronicleQueueService</code> which will provide some method for using <code>Chronicle Queue</code>.</p> <ul> <li><code>addToQueue</code>: This method is used for pushing a message into the queue.</li> <li><code>readAllFromQueue</code>: This method is used for getting all the message from the queue.</li> <li><code>handleNextItemFromQueue</code>: This method is used for read a message in queue and update the index of this message into the index queue which mean we don't have to read message from the beginning when the service is restarted because we saved the last index of read message.</li> <li><code>sendNotifiedEmail</code>: This method is used for simulating reading messages in queue and handle them one by one until all messages are handled, it will use the method <code>getNextItemFromQueue</code> inside.</li> </ul> </li> <li> <p>Let's create the <code>ChronicleQueueService.java</code> as below.</p> </li> </ul> ChronicleQueueService.java<pre><code>package com.springboot.project.chronicle.queue.app.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.springboot.project.chronicle.queue.app.model.ErrorDetail;\nimport lombok.extern.slf4j.Slf4j;\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ExcerptAppender;\nimport net.openhft.chronicle.ExcerptTailer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.UUID;\n\n@Slf4j\n@Service\npublic class ChronicleQueueService {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    @Qualifier(\"errorDetailQueue\")\n    private Chronicle errorDetailQueue;\n\n    public void addToQueue() {\n        try {\n            ExcerptAppender appender = this.errorDetailQueue.createAppender();\n            appender.startExcerpt();\n\n            ErrorDetail errorDetail = this.createErrorDetail();\n\n            String errorDetailJson = this.objectMapper.writeValueAsString(errorDetail);\n            appender.writeUTF\u0394(errorDetailJson);\n\n            appender.finish();\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    private ErrorDetail createErrorDetail() {\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setId(UUID.randomUUID());\n        errorDetail.setErrorCode(403);\n        errorDetail.setErrorMessage(\"Error Message\");\n        errorDetail.setTimestamp(OffsetDateTime.now());\n        return errorDetail;\n    }\n\n}\n</code></pre> <ul> <li>So for the <code>addToQueue</code> method, we will need to <code>@Autowired</code> the <code>errorDetailQueue</code> then we will use it to create the <code>ExcerptAppender</code> in which </li> </ul> <p><code>ExcerptAppender</code> is the main data container in a Chronicle Queue. In other words, each Chronicle Queue is composed of excerpts. Writing message to a Chronicle Queue means starting a new excerpt, writing message into it, and finishing the excerpt at the end.</p> <ul> <li>So the method <code>appender.startExcerpt();</code> is used to start an excerpt with the default message capacity of 128K (can be configured) .</li> <li> <p>Then for the method <code>appender.writeUTF\u0394(errorDetailJson);</code>, it receive a <code>String</code> message and it will encoding this message with modified UTF-8 and push it into the queue and the length of this message is no limit.</p> </li> <li> <p>Next, for the <code>readAllFromQueue</code> method we will do it as below.</p> </li> </ul> ChronicleQueueService.java<pre><code>package com.springboot.project.chronicle.queue.app.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.springboot.project.chronicle.queue.app.model.ErrorDetail;\nimport lombok.extern.slf4j.Slf4j;\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ExcerptAppender;\nimport net.openhft.chronicle.ExcerptTailer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.UUID;\n\n@Slf4j\n@Service\npublic class ChronicleQueueService {\n\n    private long currentIndex;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    @Qualifier(\"errorDetailQueue\")\n    private Chronicle errorDetailQueue;\n\n    @PostConstruct\n    public void getCurrentIndex() {\n        this.currentIndex = this.errorDetailQueueIndex.lastWrittenIndex();\n    }\n\n    public void addToQueue() {\n        try {\n            ExcerptAppender appender = this.errorDetailQueue.createAppender();\n            appender.startExcerpt();\n\n            ErrorDetail errorDetail = this.createErrorDetail();\n\n            String errorDetailJson = this.objectMapper.writeValueAsString(errorDetail);\n            appender.writeUTF\u0394(errorDetailJson);\n\n            appender.finish();\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    public List&lt;ErrorDetail&gt; readAllFromQueue() {\n        try {\n            List&lt;ErrorDetail&gt; errorDetails = new ArrayList&lt;&gt;();\n            ExcerptTailer tailer = this.errorDetailQueue.createTailer();\n            while (tailer.nextIndex()) {\n                ErrorDetail errorDetail = this.objectMapper.readValue(tailer.readUTF\u0394(), ErrorDetail.class);\n                errorDetails.add(errorDetail);\n            }\n            tailer.finish();\n            return errorDetails;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private ErrorDetail createErrorDetail() {\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setId(UUID.randomUUID());\n        errorDetail.setErrorCode(403);\n        errorDetail.setErrorMessage(\"Error Message\");\n        errorDetail.setTimestamp(OffsetDateTime.now());\n        return errorDetail;\n    }\n\n}\n</code></pre> <ul> <li>For the <code>readAllFromQueue</code> method, we will use the<code>errorDetailQueue</code> to create the <code>ExcerptTailer</code> in which.</li> </ul> <p><code>ExcerptTailer</code> is an excerpt reader optimized for sequential reads. It can perform sequential and random reads, both forwards and backwards. Tailers read the next available message each time they are called. The followings are guaranteed in <code>Chronicle Queue</code>.</p> <ul> <li>So the method <code>errorDetailQueue.createTailer()</code> is used to create an  <code>ExcerptTailer</code> .</li> <li>Then we can use <code>tailer.nextIndex()</code> to check the next available message in the queue.</li> <li>Then we use <code>tailer.readUTF\u0394()</code> to read the message that we put into the queue using <code>appender.writeUTF\u0394(&lt;StringData&gt;)</code>.</li> <li> <p>Finally, we use <code>tailer.finish();</code> to finish reading message in queue.</p> </li> <li> <p>Next for the method <code>handleNextItemFromQueue</code> we would like to add the codes as below.</p> </li> </ul> readAllFromQueue.java<pre><code>package com.springboot.project.chronicle.queue.app.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.springboot.project.chronicle.queue.app.model.ErrorDetail;\nimport lombok.extern.slf4j.Slf4j;\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ExcerptAppender;\nimport net.openhft.chronicle.ExcerptTailer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.UUID;\n\n@Slf4j\n@Service\npublic class ChronicleQueueService {\n\n    private long currentIndex;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    @Qualifier(\"errorDetailQueue\")\n    private Chronicle errorDetailQueue;\n\n    @Autowired\n    @Qualifier(\"errorDetailQueueIndex\")\n    private Chronicle errorDetailQueueIndex;\n\n    @PostConstruct\n    public void getCurrentIndex() {\n        this.currentIndex = this.errorDetailQueueIndex.lastWrittenIndex();\n    }\n\n    public void addToQueue() {\n        try {\n            ExcerptAppender appender = this.errorDetailQueue.createAppender();\n            appender.startExcerpt();\n\n            ErrorDetail errorDetail = this.createErrorDetail();\n\n            String errorDetailJson = this.objectMapper.writeValueAsString(errorDetail);\n            appender.writeUTF\u0394(errorDetailJson);\n\n            appender.finish();\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    public List&lt;ErrorDetail&gt; readAllFromQueue() {\n        try {\n            List&lt;ErrorDetail&gt; errorDetails = new ArrayList&lt;&gt;();\n            ExcerptTailer tailer = this.errorDetailQueue.createTailer();\n            while (tailer.nextIndex()) {\n                ErrorDetail errorDetail = this.objectMapper.readValue(tailer.readUTF\u0394(), ErrorDetail.class);\n                errorDetails.add(errorDetail);\n            }\n            tailer.finish();\n            return errorDetails;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public ErrorDetail handleNextItemFromQueue() {\n        try {\n            ExcerptTailer tailer = this.errorDetailQueue.createTailer();\n            if (tailer.index(1 + this.currentIndex)) {\n                ErrorDetail errorDetail = this.objectMapper.readValue(tailer.readUTF\u0394(), ErrorDetail.class);\n                ExcerptAppender indexAppender = this.errorDetailQueueIndex.createAppender();\n                indexAppender.startExcerpt();\n                indexAppender.writeUTF(String.valueOf(tailer.index()));\n                this.currentIndex = tailer.index();\n                indexAppender.finish();\n                tailer.finish();\n                return errorDetail;\n            }\n            return new ErrorDetail();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private ErrorDetail createErrorDetail() {\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setId(UUID.randomUUID());\n        errorDetail.setErrorCode(403);\n        errorDetail.setErrorMessage(\"Error Message\");\n        errorDetail.setTimestamp(OffsetDateTime.now());\n        return errorDetail;\n    }\n\n}\n</code></pre> <ul> <li>So now, as you can see, we will add one more property for the <code>ChronicleQueueService</code>, it is the <code>currentIndex</code>. So to Initialize the current index we use the <code>getCurrentIndex</code> method to retrieve the last written index of the <code>errorDetailQueueIndex</code> Chronicle Queue and assigns it to the <code>currentIndex</code> field. This method is called during bean initialization using the <code>@PostConstruct</code> annotation.</li> <li> <p>The <code>handleNextItemFromQueue</code> method creates an <code>ExcerptTailer</code> for the <code>errorDetailQueue</code> Chronicle Queue and seeks to the next item based on the <code>currentIndex</code>. If an item is found, it will be deserialized to an <code>ErrorDetail</code> instance and the new index is written to the <code>errorDetailQueueIndex</code> Chronicle Queue using an <code>ExcerptAppender</code>.</p> </li> <li> <p>Next for the method <code>sendNotifiedEmail</code> we would like to add the codes as below.</p> </li> </ul> readAllFromQueue.java<pre><code>package com.springboot.project.chronicle.queue.app.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.springboot.project.chronicle.queue.app.model.ErrorDetail;\nimport lombok.extern.slf4j.Slf4j;\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ExcerptAppender;\nimport net.openhft.chronicle.ExcerptTailer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.UUID;\n\n@Slf4j\n@Service\npublic class ChronicleQueueService {\n\n    private long currentIndex;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    @Qualifier(\"errorDetailQueue\")\n    private Chronicle errorDetailQueue;\n\n    @Autowired\n    @Qualifier(\"errorDetailQueueIndex\")\n    private Chronicle errorDetailQueueIndex;\n\n    @PostConstruct\n    public void getCurrentIndex() {\n        this.currentIndex = this.errorDetailQueueIndex.lastWrittenIndex();\n    }\n\n    public void addToQueue() {\n        try {\n            ExcerptAppender appender = this.errorDetailQueue.createAppender();\n            appender.startExcerpt();\n\n            ErrorDetail errorDetail = this.createErrorDetail();\n\n            String errorDetailJson = this.objectMapper.writeValueAsString(errorDetail);\n            appender.writeUTF\u0394(errorDetailJson);\n\n            appender.finish();\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    public List&lt;ErrorDetail&gt; readAllFromQueue() {\n        try {\n            List&lt;ErrorDetail&gt; errorDetails = new ArrayList&lt;&gt;();\n            ExcerptTailer tailer = this.errorDetailQueue.createTailer();\n            while (tailer.nextIndex()) {\n                ErrorDetail errorDetail = this.objectMapper.readValue(tailer.readUTF\u0394(), ErrorDetail.class);\n                errorDetails.add(errorDetail);\n            }\n            tailer.finish();\n            return errorDetails;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public ErrorDetail handleNextItemFromQueue() {\n        try {\n            ExcerptTailer tailer = this.errorDetailQueue.createTailer();\n            if (tailer.index(1 + this.currentIndex)) {\n                ErrorDetail errorDetail = this.objectMapper.readValue(tailer.readUTF\u0394(), ErrorDetail.class);\n                ExcerptAppender indexAppender = this.errorDetailQueueIndex.createAppender();\n                indexAppender.startExcerpt();\n                indexAppender.writeUTF(String.valueOf(tailer.index()));\n                this.currentIndex = tailer.index();\n                indexAppender.finish();\n                tailer.finish();\n                return errorDetail;\n            }\n            return new ErrorDetail();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Scheduled(fixedDelay = 1000)\n    public void sendNotifiedEmail() {\n        try {\n            Thread.sleep(6000);\n            ErrorDetail errorDetail = this.handleNextItemFromQueue();\n            if (Objects.isNull(errorDetail.getId())) {\n                log.info(\"No Error Item In Queue: Queue is empty!\");\n                return;\n            }\n            log.info(\"Sent Notified Email id: \" + errorDetail.getId() + \" With Timestamp: \" + errorDetail.getTimestamp());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private ErrorDetail createErrorDetail() {\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setId(UUID.randomUUID());\n        errorDetail.setErrorCode(403);\n        errorDetail.setErrorMessage(\"Error Message\");\n        errorDetail.setTimestamp(OffsetDateTime.now());\n        return errorDetail;\n    }\n\n}\n</code></pre> <ul> <li>So in the <code>sendNotifiedEmail</code> method, which is annotated with <code>@Scheduled</code> to retrieve the next <code>ErrorDetail</code> object from the queue that we handled in the <code>handleNextItemFromQueue()</code> every second and logs a message indicating that an email has been sent.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#controller","title":"Controller","text":"<ul> <li>Now, let's create a controller <code>ChronicleQueueController</code> with some apis as below.</li> </ul> ChronicleQueueController.java<pre><code>package com.springboot.project.chronicle.queue.app.controller;\n\nimport com.springboot.project.chronicle.queue.app.model.ErrorDetail;\nimport com.springboot.project.chronicle.queue.app.service.ChronicleQueueService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class ChronicleQueueController {\n\n    @Autowired\n    private ChronicleQueueService chronicleQueueService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/chronicle-queue/error-details\")\n    public ResponseEntity&lt;Void&gt; addToQueue() {\n        this.chronicleQueueService.addToQueue();\n        return new ResponseEntity&lt;&gt;(HttpStatus.OK);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/chronicle-queue/error-details\")\n    public ResponseEntity&lt;List&lt;ErrorDetail&gt;&gt; getAllItemsFromQueue() {\n        return ResponseEntity.ok(this.chronicleQueueService.readAllFromQueue());\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/chronicle-queue/error-details/polls\")\n    public ResponseEntity&lt;ErrorDetail&gt; handleNextItemFromQueue() {\n        return ResponseEntity.ok(this.chronicleQueueService.handleNextItemFromQueue());\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will create 3 apis in which:<ul> <li>The api POST <code>/v1/chronicle-queue/error-details</code> will call the <code>addToQueue</code> method from the <code>ChronicleQueueService</code> class to add an error detail to the Chronicle Queue.</li> <li>The api GET <code>/v1/chronicle-queue/error-details</code> will call the <code>readAllFromQueue</code> method from the <code>ChronicleQueueService</code> class to get a list of all error details stored in the Chronicle Queue. </li> <li>The api GET <code>/v1/chronicle-queue/error-details/polls</code> will call the <code>handleNextItemFromQueue</code> method from the <code>ChronicleQueueService</code> class to get and handle the next error detail from the Chronicle Queue.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#testing","title":"Testing","text":"<ul> <li>Now, let's start our application and use postman to call the api POST <code>/v1/chronicle-queue/error-details</code> 6 times to add 6 messages into the Chronicle Queue as in the image below.</li> </ul> <ul> <li>Then let's wait the method <code>sendNotifiedEmail()</code> handle about 3 messages in the Queue then we will stop our application.</li> </ul> <ul> <li>Now, let's start our application again, then you can see our application will continue to handle the next messages in the queue.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#summary","title":"Summary","text":"<ul> <li> <p>In this section we learned how to implement a Chronicle Queue in a Spring Boot application and we also resolved issues that we put in the beginning of the example. We built an Spring Application Service which </p> <ul> <li>Avoided overloading and request timeout when there are many requests at the same time.</li> <li>Avoided lost messages when the service is stopped or restarted.</li> <li>had the ability to continue handing on the last handled message when the service is stopped or restarted.</li> </ul> </li> <li> <p>Using Chronicle Queue also has some disadvantages that are when we deploy our Spring Boot application in multi instances environment which can make we have separated queues in every instance and we when we deploy our Spring Boot application but we don't provide a persistence volume for it then the all the data will be lost after every application deployment.</p> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Chronicle%20Queue/#references","title":"References","text":"<ul> <li>Baeldung</li> <li>Chronicle-Queue</li> <li>FullSourceCode</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/","title":"Spring Boot With Exception Handler And Message Source","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#why_do_we_need_exception_handling","title":"Why Do We Need Exception Handling?","text":"<ul> <li>Exception handling is very important in software projects because it will decide what are next steps that software should handle when an exception happens in run time. For example, if an exception happens in loading data in database so we can notify to FE a message with is friendly and familiar with user/business so they can know what is happening to take action. For developers they will know where this exception happened and find root causes easier by reading or searching logs. Moreover, in special software regarding to finance and banking, developers have to handle all exceptions that can occur closely with business cases.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#what_is_the_message_source","title":"What Is The Message Source?","text":"<ul> <li><code>MessageSource</code> is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values. One more scenario could be modifying the default validation messages to more user-friendly/custom messages.</li> <li>More information.</li> <li>In spring boot <code>MessageSource</code> has been added as default, so you don't need to add any dependency for this feature. However, you have to create a configuration for using. So, let's create a configuration class <code>AppConfig</code> and put configuration codes as below</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#code_example","title":"Code Example","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#configure_message_source","title":"Configure Message Source","text":"AppConfig.java<pre><code>package com.exception.handler.demo.config;\n\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\n\n@Configuration\npublic class AppConfig {\n\n    @Bean(name = \"messageSource\")\n    public MessageSource messageSourceConfig() {\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n        messageSource.setBasenames(\"messages/error\");\n        messageSource.setDefaultEncoding(\"UTF-8\");\n        messageSource.setUseCodeAsDefaultMessage(true);\n        return messageSource;\n    }\n}\n</code></pre> <ul> <li>Note: by default the name of the bean is the method name, so you have to add <code>@Bean(name = \"messageSource\")</code> if you are using a custom method name. Then you need to set <code>Basenames</code> for messageSource which include the path and the suffix of your properties files. Let's see the image below.</li> </ul> <ul> <li> <p>Then you need to create <code>properties</code> files to contain messages, I will create 3 properties file with 3 different languages.</p> </li> <li> <p>Note: By default when you use Intellij to create <code>properties</code> files, your files will be encoded as <code>ISO-88591</code>. So when you put other languages, for example: Japanese or Vietnamese languages, the messages can not be encoded to <code>UTF-8</code> then you can not read your messages in these languages. To solve this issue you need to create <code>properties</code> files with <code>UTF-8</code> encoding.</p> </li> <li> <p>So you need to open <code>File</code> -&gt; <code>Settting</code> of Intellij, then you choose the path to your <code>properties</code> files with Encoding is <code>UTF-8</code> and choose default encoding for <code>properties</code> files as <code>UTF-8</code> too. let's see the image below.</p> </li> </ul> <p></p> <ul> <li> <p>Next, create<code>error.properties</code> file as in the image, it will contain default language as English, so we will define an example message as below.</p> </li> <li> <p>Next, create<code>error.properties</code> file as in the image, it will contain default language as English, so we will define an example message as below.</p> </li> </ul> <pre><code>service.customer.email.1=can not find any customer following email {0}\n</code></pre> <ul> <li>In the <code>error_ja.properties</code> file we will add Japanese message as below:</li> </ul> <pre><code>service.customer.email.1=\u30e1\u30fc\u30eb\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u9867\u5ba2\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093 {0} - JP\n</code></pre> <ul> <li>Finally, in the <code>error_vi.properties</code> file, we will add Vietnamese message as below:</li> </ul> <pre><code>service.customer.email.1=Kh\u00f4ng t\u00ecm th\u1ea5y b\u1ea5t k\u1ef3 kh\u00e1c h\u00e0ng n\u00e0o v\u1edbi email {0} - VN\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#create_a_custom_exception","title":"Create A Custom Exception","text":"<ul> <li> <p>We will create a custom exception from <code>RuntimeException</code> class, because it is the top and represent for <code>unchecked exception</code> in Java. If you don't know what is the checked exception or unchecked exception you can view Java Core Introduction for more details.</p> </li> <li> <p>So, we will create an exception name <code>ResourceNotFoundException</code> and it is extended from <code>RuntimeException</code>. Then we will create 3 constructors and 2 attributes as below.</p> </li> </ul> ResourceNotFoundException.java<pre><code>package com.exception.handler.demo.exception;\n\npublic class ResourceNotFoundException extends RuntimeException {\n\n    private final String messageKey;\n    private final String[] param;\n\n\n    public ResourceNotFoundException(String message) {\n        super(message);\n        this.messageKey = message;\n        param = null;\n    }\n\n    public ResourceNotFoundException(String message, String... param) {\n        super(message);\n        this.messageKey = message;\n        this.param = param;\n    }\n\n    public ResourceNotFoundException(String message, Throwable cause, String... param) {\n        super(message, cause);\n        this.messageKey = message;\n        this.param = param;\n    }\n\n    public String getMessageKey() {\n        return messageKey;\n    }\n\n    public String[] getParam() {\n        return param;\n    }\n}\n</code></pre> <ul> <li>So with these constructors, we will have 3 ways to create <code>ResourceNotFoundException</code>. For example.</li> </ul> <pre><code>ResourceNotFoundException exception1 = new ResourceNotFoundException(\"message\")\n\nResourceNotFoundException exception2 = new ResourceNotFoundException(\"message\", \"sample param\")\n\nResourceNotFoundException exception3 = new ResourceNotFoundException(\"message\", cause, \"sample param\")\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#create_an_exception_handler","title":"Create An Exception Handler","text":"<ul> <li>To create an exception handler, the first thing we need to do is creating a response model (response body). Create a model <code>ErrorDetail</code> as below</li> </ul> ErrorResponse.java<pre><code>package com.exception.handler.demo.model.exception;\n\nimport java.time.LocalDateTime;\n\npublic class ErrorResponse {\n\n    private LocalDateTime timestamp;\n    private String message;\n    private int errorCode;\n    private String status;\n    private String api;\n    private String key;\n    private ErrorDetail detail;\n\n    public LocalDateTime getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(LocalDateTime timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public int getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(int errorCode) {\n        this.errorCode = errorCode;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getApi() {\n        return api;\n    }\n\n    public void setApi(String api) {\n        this.api = api;\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public ErrorDetail getDetail() {\n        return detail;\n    }\n\n    public void setDetail(ErrorDetail detail) {\n        this.detail = detail;\n    }\n}\n</code></pre> <ul> <li>The <code>ErrorResponse</code> contains <code>ErrorDetail</code> so we will create <code>ErrorDetail</code> as below.</li> </ul> ErrorDetail.java<pre><code>package com.exception.handler.demo.model.exception;\n\npublic class ErrorDetail {\n\n    private String stacktrace;\n\n    public String getStacktrace() {\n        return stacktrace;\n    }\n\n    public void setStacktrace(String stacktrace) {\n        this.stacktrace = stacktrace;\n    }\n}\n</code></pre> <ul> <li>Next, We will create an exception handler class named <code>GlobalExceptionHandler</code> which will extends from <code>ResponseEntityExceptionHandler</code> class, by default the <code>ResponseEntityExceptionHandler</code> will provide an <code>@ExceptionHandler</code> method for handling internal Spring MVC exceptions which include exceptions below.</li> </ul> <ul> <li>HttpRequestMethodNotSupportedException.class</li> <li>HttpMediaTypeNotSupportedException.class</li> <li>HttpMediaTypeNotAcceptableException.class</li> <li>MissingPathVariableException.class</li> <li>MissingServletRequestParameterException.class</li> <li>ServletRequestBindingException.class</li> <li>ConversionNotSupportedException.class</li> <li>TypeMismatchException.class</li> <li>HttpMessageNotReadableException.class</li> <li>HttpMessageNotWritableException.class</li> <li>MethodArgumentNotValidException.class</li> <li>MissingServletRequestPartException.class</li> <li>BindException.class</li> <li>NoHandlerFoundException.class</li> <li>AsyncRequestTimeoutException.class</li> </ul> <ul> <li>In our case, we want to handle our custom exception and return custom response body so that is the reason why we extends from <code>ResponseEntityExceptionHandler</code>.</li> </ul> GlobalExceptionHandler.java<pre><code>package com.exception.handler.demo.handler;\n\nimport com.exception.handler.demo.exception.ResourceNotFoundException;\nimport com.exception.handler.demo.model.exception.ErrorDetail;\nimport com.exception.handler.demo.model.exception.ErrorResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.MessageSource;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\nimport java.util.Locale;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @Autowired\n    private MessageSource messageSource;\n\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    @ResponseBody\n    @ExceptionHandler(value = {ResourceNotFoundException.class})\n    public ErrorResponse handleResourceNotFoundException(ResourceNotFoundException ex, WebRequest request, Locale locale) {\n        String errorMessage = messageSource.getMessage(ex.getMessageKey(), ex.getParam(), locale);\n        ErrorResponse errorResponse = new ErrorResponse();\n        errorResponse.setErrorCode(HttpStatus.NOT_FOUND.value());\n        errorResponse.setMessage(errorMessage);\n        errorResponse.setTimestamp(LocalDateTime.now());\n        errorResponse.setApi(request.getDescription(false));\n        errorResponse.setStatus(HttpStatus.NOT_FOUND.getReasonPhrase());\n        errorResponse.setKey(ex.getMessageKey());\n        ErrorDetail errorDetail = new ErrorDetail();\n        errorDetail.setStacktrace(Arrays.toString(ex.getStackTrace()));\n        errorResponse.setDetail(errorDetail);\n        return errorResponse;\n    }\n\n}\n</code></pre> <ul> <li>We will define the exception that we want to resolve in <code>@ExceptionHandler(value = {&lt;your custome exception class&gt;})</code>. Then We also use the <code>MessageSource</code> to get the message that we defined in <code>properties</code> file following the default <code>Locale</code>. Form the custom exception <code>ResourceNotFoundException</code> we can get some information and put it into the reponse body <code>ErrorResponse</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#testing","title":"Testing","text":"<ul> <li>Now, we will create a sample service and controller to test our custom exception. A sample service will look like below</li> </ul> CustomerService.java<pre><code>@Service\npublic class CustomerService {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    public CustomerResponse getCustomerByEmail(String email) {\n        CustomerEntity customerEntity = this.customerRepository.findCustomerByEmail(email);\n        if (Objects.isNull(customerEntity)) {\n            throw new ResourceNotFoundException(\"service.customer.email.1\", email);\n        }\n        return this.toCustomerResponse(customerEntity);\n    }\n</code></pre> <ul> <li>We create <code>ResourceNotFoundException</code> with message <code>service.customer.email.1</code> which is the key of message that we defined in <code>properties</code> files.</li> <li>Then we create a controller as below</li> </ul> Controller.java<pre><code>package com.exception.handler.demo.controller;\n\nimport com.exception.handler.demo.model.CustomerRequest;\nimport com.exception.handler.demo.model.CustomerResponse;\nimport com.exception.handler.demo.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.UUID;\n\n@RestController\npublic class Controller {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerByEmail(@RequestParam(name = \"email\") String email ) {\n        return new ResponseEntity&lt;&gt;(customerService.getCustomerByEmail(email), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>For the Entity and Repository, please view full source code in <code>SUMMARY</code> path of this post or you can create them by yourself.</li> <li>Finally, we will add some configuration in to <code>application.yml</code>, I would like to set the default <code>Locale</code> as Japan. So I should got the error message with Japanese languages.</li> </ul> application.yml<pre><code>spring:\n  datasource:\n#    url: jdbc:h2:mem:testdb\n    url: jdbc:h2:file:./testdb\n    username: sa\n    password: password\n    driver-class-name: org.h2.Driver\n    platform: h2\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n    hibernate.ddl-auto: update\n    generate-ddl: true\n    show-sql: true\n  h2:\n    console:\n      enabled: true\n      path: /h2-console\n      settings:\n        trace: false\n        web-allow-others: false\n  web:\n    locale: ja_JP\n    locale-resolver: fixed\n</code></pre> <ul> <li>Now, start the service and use postman to call api, then you will see the result as below.</li> </ul> <p> - Then when we configure locale as VietNam so, we will received a Vietnamese message.</p> application.yml<pre><code>spring:\n  web:\n    locale: vi_VN\n    locale-resolver: fixed\n</code></pre> <p> - If we do not configure default Locale or we configure a locale that does not existed in our messages resource, so the service will automatically return the default message in <code>error.properties</code> file.</p> application.yml<pre><code>spring:\n  web:\n    locale: it_IT\n    locale-resolver: fixed\n\n# or comment out as below.\n\n# spring:\n#   web:\n#     locale: it_IT\n#     locale-resolver: fixed    \n</code></pre> <p></p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#summary","title":"Summary","text":"<ul> <li>In conclusion, Exception handling is very important in software development, it is not only help users know what happened in system but also help developer can determine quickly and exactly the root causes.</li> <li>We create a custom exception by extend <code>RuntimeException</code> class because it is the top of unchecked exceptions. It means every exception happened at runtime will be navigated to <code>RuntimeException</code>.</li> <li>We can create an exception handler with a class using <code>@ControllerAdvice</code> and extended from <code>ResponseEntityExceptionHandler</code>. In this class methods can handle one or more Exceptions with support of <code>@ExceptionHandler</code>. From information of custom exceptions we can build the response body following what we want.</li> <li>With the supports from Spring Framework, <code>MessageSource</code> is very helpful when we want to change error message language or simply use it as a place to contain all error messages which will help us maintain error messages and use them easier.</li> <li>To view full source code you can go to this github link</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Exception%20Handler%20And%20Message%20Source/#references","title":"References","text":"<ul> <li>Baeldung</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Executable%20Jar/","title":"Spring Boot With Executable Jar","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Executable%20Jar/#build_spring_boot_executable_jar_by_maven","title":"Build Spring Boot Executable Jar By Maven","text":"<ul> <li>During developing spring boot application, we usually use IDE to run our Spring Boot application. However, when we need to release or deploy on servers we need to build and wrap it into executable jar file or war file.</li> <li>So to build a Spring Boot application into an executable jar, we need to add the plugin below into the <code>pom.xml</code> file.</li> </ul> pom.xml<pre><code>  &lt;build&gt;\n            &lt;plugins&gt;\n                    &lt;plugin&gt;\n                            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                            &lt;version&gt;2.6.3&lt;/version&gt;\n                            &lt;executions&gt;\n                                    &lt;execution&gt;\n                                            &lt;id&gt;build-info&lt;/id&gt;\n                                            &lt;goals&gt;\n                                                    &lt;goal&gt;build-info&lt;/goal&gt;\n                                            &lt;/goals&gt;\n                                    &lt;/execution&gt;\n                                    &lt;execution&gt;\n                                            &lt;id&gt;repackage&lt;/id&gt;\n                                            &lt;goals&gt;\n                                                    &lt;goal&gt;repackage&lt;/goal&gt;\n                                            &lt;/goals&gt;\n                                    &lt;/execution&gt;\n                            &lt;/executions&gt;\n                    &lt;/plugin&gt;\n            &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <ul> <li>The <code>spring-boot-maven-plugin</code> dependency is a Maven plugin that can be used to build, package, and run Spring Boot applications. </li> <li><code>spring-boot-maven-plugin</code> contains 3 goals which are:<ul> <li><code>build-info</code>: This goal generates build information, such as the version number and the build timestamp.</li> <li><code>repackage</code>: This goal repackages the application into a single executable JAR file.</li> <li><code>run</code>: This goal runs the application in an embedded Jetty container.</li> </ul> </li> <li>After adding the plugin above, then you can use the maven command below to build your Spring Boot project.</li> </ul> <pre><code>mvn clean package\n</code></pre> <ul> <li>After building your project, you can see a jar file generated in the <code>target</code> folder as below.</li> </ul> <ul> <li>Then you can test by using command below to run this jar file.</li> </ul> <pre><code>java -jar json-schema-validator-0.0.1-SNAPSHOT.jar\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Executable%20Jar/#see_also","title":"See Also","text":"<ul> <li>Docker With SpringBoot</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Executable%20Jar/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/","title":"Spring Boot With Json Schema Validator","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#what_is_the_json_schema","title":"What Is The Json Schema?","text":"<ul> <li><code>JSON Schema</code> is a declarative language that allows you to annotate and validate JSON documents.</li> <li><code>JSON Schema</code> enables the confident and reliable use of the JSON data format.</li> <li> <p><code>JSON Schema</code> can help us to:</p> <ul> <li>Describes your existing data format(s).</li> <li>Provides clear human- and machine- readable documentation.</li> <li>Validates data which is useful for:<ul> <li>Automated testing.</li> <li>Ensuring quality of client submitted data.</li> </ul> </li> </ul> </li> <li> <p>More Information</p> </li> <li> <p>A <code>JSON Schema</code> document is itself a JSON document that <code>specifies the rules for validating</code> another JSON document. It includes properties that define the schema's structure and validation rules, such as the data types allowed for each property, the minimum and maximum values allowed, and the pattern of characters allowed for string values.</p> </li> <li> <p><code>JSON Schema</code> can be used to validate JSON data against a specific schema, ensuring that the data conforms to the expected structure and constraints. It can be used to validate data in a variety of contexts, including APIs, databases, and data exchange formats.</p> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#json_schema_versions","title":"Json Schema Versions","text":"<ul> <li> <p><code>JSON Schema</code> is a specification that defines a way to describe the structure and validation constraints for JSON (JavaScript Object Notation) documents. It is versioned like any other software specification, with each version introducing new features and changes.</p> </li> <li> <p><code>Previous versions</code> of JSON Schema include <code>draft-07</code>, <code>draft-06</code>, <code>draft-04</code>, and <code>draft-03</code>, each with its own set of features and changes. While these older versions are still in use in some contexts, they are gradually being replaced by the newer <code>draft-2020-12</code> version.</p> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#json_schema_syntax","title":"Json Schema Syntax","text":"<ul> <li>Base on the Json Schema Version that we are using, then we will have more or less syntax. Let's start with <code>draft-04</code> and <code>draft-07</code> because the <code>draft-04</code> is quite old but it is still using in many legacy system. <code>draft-07</code> is a relatively minor update from <code>draft-06</code> and it is fully backwards-compatible with <code>draft-06</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#json_schema_draft-04","title":"Json Schema Draft-04","text":"<ul> <li>Below is the table of syntax that are supported in Json Schema Version <code>draft-04</code>.</li> </ul> Syntax Description $schema Specifies the version of the JSON Schema specification being used. id Defines a unique identifier for a schema. $id Defines a URI-based identifier for a schema. type Specifies the data type of a property. properties Defines the set of properties that an object can have, along with their expected types. items Defines the expected type of items in an array. required Specifies the list of required properties for an object. minimum Defines the minimum value allowed for a numeric property. maximum Defines the maximum value allowed for a numeric property. exclusiveMinimum Specifies whether the minimum value is included in the range of allowed values. exclusiveMaximum Specifies whether the maximum value is included in the range of allowed values. minLength Defines the minimum length of a string property. maxLength Defines the maximum length of a string property. pattern Defines a regular expression pattern that a string property must match. enum Specifies a list of allowed values for a property. format Specifies the expected format for a property, such as a date or time. additionalProperties Specifies whether additional properties are allowed for an object. dependencies Defines the dependencies between properties in an object. allOf, anyOf, oneOf, not Define logical operators that can be used to combine multiple schemas. <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"$id\": \"https://example.com/schema.json\",\n  \"title\": \"Example\",\n  \"description\": \"This is an example schema.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stringProp\": {\n      \"type\": \"string\",\n      \"default\": \"default value\",\n      \"minLength\": 1,\n      \"maxLength\": 100,\n      \"pattern\": \"^[a-zA-Z0-9]*$\"\n    },\n    \"numberProp\": {\n      \"type\": \"number\",\n      \"minimum\": 0,\n      \"maximum\": 100,\n      \"exclusiveMinimum\": true,\n      \"exclusiveMaximum\": true\n    },\n    \"integerProp\": {\n      \"type\": \"integer\",\n      \"minimum\": -100,\n      \"maximum\": 100,\n      \"multipleOf\": 2\n    },\n    \"booleanProp\": {\n      \"type\": \"boolean\"\n    },\n    \"objectProp\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"innerStringProp\": {\n          \"type\": \"string\",\n          \"minLength\": 1\n        },\n        \"innerNumberProp\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\"innerStringProp\"]\n    },\n    \"arrayProp\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"maxItems\": 5,\n      \"uniqueItems\": true\n    },\n    \"nullProp\": {\n      \"type\": \"null\"\n    }\n  },\n  \"required\": [\"stringProp\", \"numberProp\", \"integerProp\", \"booleanProp\", \"objectProp\", \"arrayProp\", \"nullProp\"]\n}\n</code></pre> <ul> <li>With the example Json Schema above, we will have the valid json as below.</li> </ul> <pre><code>{\n  \"stringProp\": \"test\",\n  \"numberProp\": 50,\n  \"integerProp\": 4,\n  \"booleanProp\": true,\n  \"objectProp\": {\n    \"innerStringProp\": \"inner test\",\n    \"innerNumberProp\": 10\n  },\n  \"arrayProp\": [\"one\", \"two\", \"three\"],\n  \"nullProp\": null\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#json_schema_draft-07","title":"Json Schema Draft-07","text":"<ul> <li>Below is the table of syntaxes that are supported in Json Schema Version <code>draft-07</code>.</li> </ul> Syntax Description $schema Specifies the version of the JSON Schema specification being used. $id Defines a URI-based identifier for a schema. title Defines a human-readable title for a schema. description Provides a detailed description of a schema. default Specifies a default value for a property. type Specifies the data type of a property. enum Specifies a list of allowed values for a property. const Specifies a single allowed value for a property. multipleOf Defines a number that a numeric property must be a multiple of. maximum Defines the maximum value allowed for a numeric property. exclusiveMaximum Specifies whether the maximum value is included in the range of allowed values. minimum Defines the minimum value allowed for a numeric property. exclusiveMinimum Specifies whether the minimum value is included in the range of allowed values. maxLength Defines the maximum length of a string property. minLength Defines the minimum length of a string property. pattern Defines a regular expression pattern that a string property must match. items Defines the expected type of items in an array. additionalItems Specifies whether additional items are allowed in an array. maxItems Defines the maximum number of items allowed in an array. minItems Defines the minimum number of items allowed in an array. uniqueItems Specifies whether all items in an array must be unique. contains Specifies that an array must contain at least one element that matches a given schema. maxProperties Defines the maximum number of properties allowed in an object. minProperties Defines the minimum number of properties allowed in an object. required Specifies the list of required properties for an object. properties Defines the set of properties that an object can have, along with their expected types. patternProperties Defines a set of properties that an object can have, where the property names match a regular expression pattern. additionalProperties Specifies whether additional properties are allowed for an object. dependencies Defines the dependencies between properties in an object. propertyNames Defines a schema for the names of properties in an object. if, then, else Define conditional schema keywords that allow different validation rules to be applied depending on whether a condition is true or false. allOf, anyOf, oneOf, not Define logical operators that can be used to combine multiple schemas. $ref Specifies a reference to another schema, allowing it to be reused within a schema. <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://example.com/schema.json\",\n  \"title\": \"Example\",\n  \"description\": \"This is an example schema.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stringProp\": {\n      \"type\": \"string\",\n      \"default\": \"default value\",\n      \"minLength\": 1,\n      \"maxLength\": 100,\n      \"pattern\": \"^[a-zA-Z0-9]*$\",\n      \"format\": \"email\"\n    },\n    \"numberProp\": {\n      \"type\": \"number\",\n      \"minimum\": 0,\n      \"maximum\": 100,\n      \"exclusiveMinimum\": true,\n      \"exclusiveMaximum\": true,\n      \"multipleOf\": 0.5\n    },\n    \"integerProp\": {\n      \"type\": \"integer\",\n      \"minimum\": -100,\n      \"maximum\": 100,\n      \"exclusiveMinimum\": true,\n      \"exclusiveMaximum\": true,\n      \"multipleOf\": 2\n    },\n    \"booleanProp\": {\n      \"type\": \"boolean\"\n    },\n    \"objectProp\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"innerStringProp\": {\n          \"type\": \"string\",\n          \"minLength\": 1\n        },\n        \"innerNumberProp\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"innerStringProp\"\n      ],\n      \"additionalProperties\": false,\n      \"minProperties\": 1,\n      \"maxProperties\": 2,\n      \"propertyNames\": {\n        \"pattern\": \"^[a-zA-Z0-9]*$\"\n      },\n      \"dependencies\": {\n        \"innerStringProp\": [\n          \"innerNumberProp\"\n        ]\n      }\n    },\n    \"arrayProp\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"minLength\": 1\n      },\n      \"minItems\": 1,\n      \"maxItems\": 5,\n      \"uniqueItems\": true,\n      \"contains\": {\n        \"pattern\": \"^[a-zA-Z0-9]*$\"\n      }\n    },\n    \"nullProp\": {\n      \"type\": \"null\"\n    }\n  },\n  \"required\": [\n    \"stringProp\",\n    \"numberProp\",\n    \"integerProp\",\n    \"booleanProp\",\n    \"objectProp\",\n    \"arrayProp\",\n    \"nullProp\"\n  ],\n  \"definitions\": {\n    \"stringArray\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"dependencies\": {\n    \"stringProp\": {\n      \"properties\": {\n        \"stringDependentProp\": {\n          \"$ref\": \"#/definitions/stringArray\"\n        }\n      },\n      \"required\": [\n        \"stringDependentProp\"\n      ]\n    }\n  },\n  \"if\": {\n    \"properties\": {\n      \"stringProp\": {\n        \"const\": \"foo\"\n      }\n    }\n  },\n  \"then\": {\n    \"required\": [\n      \"numberProp\"\n    ]\n  },\n  \"else\": {\n    \"required\": [\n      \"booleanProp\"\n    ]\n  },\n  \"allOf\": [\n    {\n      \"properties\": {\n        \"stringProp\": {\n          \"minLength\": 2\n        }\n      }\n    },\n    {\n      \"properties\": {\n        \"stringProp\": {\n          \"maxLength\": 50\n        }\n      }\n    }\n  ],\n  \"anyOf\": [\n    {\n      \"properties\": {\n        \"stringProp\": {\n          \"enum\": [\n            \"foo\",\n            \"bar\"\n          ]\n        }\n      }\n    },\n    {\n      \"properties\": {\n        \"numberProp\": {\n          \"type\": \"number\",\n          \"minimum\": 50\n        }\n      }\n    }\n  ],\n  \"oneOf\": [\n    {\n      \"properties\": {\n        \"stringProp\": {\n          \"type\": \"string\",\n          \"pattern\": \"^hello$\"\n        }\n      }\n    },\n    {\n      \"properties\": {\n        \"numberProp\": {\n          \"type\": \"number\",\n          \"maximum\": 10\n        }\n      }\n    },\n    {\n      \"properties\": {\n        \"booleanProp\": {\n          \"type\": \"boolean\",\n          \"enum\": [\n            true\n          ]\n        }\n      }\n    }\n  ]\n}\n</code></pre> <ul> <li>Then below is the valid json for the example json schema above.</li> </ul> <pre><code>{\n  \"stringProp\": \"foo\",\n  \"numberProp\": 75.5,\n  \"integerProp\": -98,\n  \"booleanProp\": true,\n  \"objectProp\": {\n    \"innerStringProp\": \"hello\",\n    \"innerNumberProp\": 42\n  },\n  \"arrayProp\": [\"foo\", \"bar\"],\n  \"nullProp\": null\n}\n</code></pre> <ul> <li>Below is the table that contains incompatible syntax between the <code>draft-04</code> and <code>draft-07</code> versions.</li> </ul> Syntax Description Compatibility exclusiveMaximum and exclusiveMinimum In draft-04, these keywords were optional and defaulted to false. In draft-07, they are required and default to false and true, respectively. Incompatible $ref In draft-04, $ref can reference any JSON Schema definition, including definitions defined inline. In draft-07, $ref can only reference definitions that are defined outside the current schema. Incompatible additionalProperties and patternProperties In draft-04, these keywords were not mutually exclusive, meaning that both could be used to define properties in an object. In draft-07, they are mutually exclusive, and if patternProperties is used, additionalProperties can only be used to define boolean values. Incompatible type In draft-04, type can be a string or an array of strings. In draft-07, type must be a string, and if multiple types are allowed, they must be listed in an array under the anyOf keyword. Incompatible dependencies In draft-04, dependencies can only define the dependencies between properties in an object. In draft-07, dependencies can also define schema dependencies, where the presence or absence of a property is dependent on whether another property validates against a given schema. Incompatible maximum and minimum In draft-04, maximum and minimum can be any numeric value. In draft-07, they must be finite numbers, and the use of NaN, Infinity, and -Infinity is prohibited. Incompatible oneOf, anyOf, and allOf In draft-04, these keywords do not support if/then/else clauses, and their behavior is not well-defined when used with other schema keywords like additionalProperties. In draft-07, they have well-defined behavior and can be used with if/then/else clauses. Incompatible","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#json_schema_validation_with_spring_boot","title":"Json Schema Validation With Spring Boot","text":"<ul> <li>Implementations of Json Schema are very popular and supports many programming languages, you can view this page for more details.</li> <li>In Java, there are also many Json Schema Implementations and in this example we will use the library <code>everit-json-schema</code> because this library is the most common with highest users and rating  and it also supported 3 versions: draft-04, draft-06 and draft-07.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#prepare","title":"Prepare","text":"<ul> <li>Firstly, let's take a look about the example that we are going to do. So let's images that we have a spring boot application service that is used for storing customer information.</li> <li>The customer information is actually a json with contains some information like <code>identity</code>, <code>orders</code> and <code>items</code> and there some constraints such as the <code>identity</code> field is only mandatory for the <code>ageRange</code> which is <code>ADULT</code>, in case the <code>ageRange</code> is <code>CHILDREN</code> or there is no field <code>ageRange</code> it is the optional etc.... Let's see the example customer json as below.</li> </ul> <pre><code>{\n    \"customer\": {\n        \"fullName\": \"Duc Nguyen\",\n        \"email\": \"example@gmail.com\",\n        \"data\": {\n            \"fullName\": \"Duc Nguyen\",\n            \"email\": \"example@gmail.com\",\n            \"ageRange\": \"ADULT\",\n            \"identity\": {\n                \"identityNumber\": \"ABCE-123-421-942\",\n                \"address\": \"123 XYZ Street\",\n                \"dob\": \"20/02/1995\"\n            },\n            \"orders\": [\n                {\n                    \"orderName\": \"Duc Order\",\n                    \"createdDate\": \"2023-03-28T14:11:44.849+0700\",\n                    \"lastUpdatedDate\": \"2023-03-28T14:11:44.849+0700\",\n                    \"items\": [\n                        {\n                            \"itemName\": \"PS5\",\n                            \"quantity\": 1,\n                            \"price\": 599.99\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n</code></pre> <ul> <li>The Json Schema and Customer Data will be stored in a collection in the MongoDB in which when we are going to create a customer then the json schema will be loaded from the MongoDB to check the input customer json is valid or not. Let's see the diagram below.</li> </ul> <ul> <li>Before deep dive into the example, we need to prepare the MongoDB. We can use the docker to create it quickly, you can view Docker With Databases for more details.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#dependencies","title":"Dependencies","text":"<ul> <li>Now, let's add some dependencies as below into our <code>pom.xml</code> for <code>Spring MongoDB</code> and <code>everit-json-schema</code>.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;\n        &lt;version&gt;2.6.3&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n        &lt;groupId&gt;com.github.erosb&lt;/groupId&gt;\n        &lt;artifactId&gt;everit-json-schema&lt;/artifactId&gt;\n        &lt;version&gt;1.14.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#config","title":"Config","text":"<ul> <li>Let's create a package <code>config</code> and add the configuration class <code>ValidationConfig</code> as below to set up validation for MongoDB operations.</li> </ul> ValidationConfig.java<pre><code>package com.springboot.project.json.schema.validator.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.mongodb.core.mapping.event.ValidatingMongoEventListener;\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n\n@Configuration\npublic class ValidationConfig {\n\n    @Bean\n    public ValidatingMongoEventListener validatingMongoEventListener() {\n        return new ValidatingMongoEventListener(validator());\n    }\n\n    @Bean\n    public LocalValidatorFactoryBean validator() {\n        return new LocalValidatorFactoryBean();\n    }\n\n}\n</code></pre> <ul> <li>In this configuration class, we will create a bean <code>validator</code> by the new instance of <code>LocalValidatorFactoryBean</code> in which the <code>LocalValidatorFactoryBean</code> provides an implementation of <code>javax.validation.Validator</code>.</li> <li> <p>Then the bean <code>validator</code> will be used as a parameter to create a bean <code>validatingMongoEventListener</code> by a new instance of <code>ValidatingMongoEventListener</code>, this instance will listen MongoDB events and validates entities before they are saved to the database by using <code>javax.validation.Validator</code> in the input parameter.</p> </li> <li> <p>Next, in the main class <code>@EnableMongoRepositories</code> we will use the annotation <code>@EnableMongoRepositories</code> to enable MongoDB repositories in the application. When used, Spring will look for interfaces that extend the <code>MongoRepository</code> interface and create instances of them automatically.</p> </li> </ul> JsonSchemaValidatorApplication.java<pre><code>package com.springboot.project.json.schema.validator;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\n\n@SpringBootApplication\n@EnableMongoRepositories\npublic class JsonSchemaValidatorApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JsonSchemaValidatorApplication.class, args);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#model","title":"Model","text":"<ul> <li> <p>Next, let's create a package model and create model classes as below:</p> <ul> <li><code>Customer</code>: This model will be mapped with the collection <code>customers</code> in MongoDB.</li> <li><code>DatabaseSequence</code>: This model will be mapped with the collection <code>database_sequence</code> in MongoDB.</li> <li><code>JsonSchemaValidator</code>: This model will be mapped with the collection <code># json_schemas</code> in MongoDB</li> <li><code>JsonValidationResponse</code>: This is just a simple DTO which is used for the response of Get Json Schema Validation api.</li> </ul> </li> <li> <p>Firstly, let's create <code>Customer</code> model as below.</p> </li> </ul> Customer.java<pre><code>package com.springboot.project.json.schema.validator.model;  \n\nimport lombok.Getter;  \nimport lombok.Setter;  \nimport org.springframework.data.mongodb.core.mapping.Document;  \n\nimport java.util.UUID;  \n\nimport javax.persistence.Id;  \nimport javax.validation.constraints.NotNull;  \n\n@Getter  \n@Setter  \n@Document(\"customers\")  \npublic class Customer {  \n\n    @Id  \n    private UUID id;  \n    @NotNull  \n    private String fullName;  \n    @NotNull  \n    private String email;  \n    private org.bson.Document data;  \n\n}\n</code></pre> <ul> <li>As you can see, in this class we will use the annotation <code>@Document</code> to map this class to the <code>customers</code> MongoDB collection.</li> <li> <p>In this class, the field data will contain all the customer details.</p> </li> <li> <p>Next, we will continue to create the <code>DatabaseSequence</code> class. This class will be mapped with  <code>database_sequence</code> collection, this collection is used for generating sequence number which is used for field <code>version</code> in <code>JsonSchemaValidator</code> class.</p> </li> </ul> DatabaseSequence.java<pre><code>package com.springboot.project.json.schema.validator.model;\n\nimport javax.persistence.Id;\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.NotNull;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@org.springframework.data.mongodb.core.mapping.Document(\"database_sequence\")\npublic class DatabaseSequence {\n\n    @Id\n    @NotNull\n    private String id;\n    @Min(value = 1, message = \"version must be started from 1\")\n    private Long version;\n\n}\n</code></pre> <ul> <li>Next, We will create the <code>JsonSchemaValidator</code> class. This class will be mapped with <code>json_schemas</code> collection, this collection is used for storing json schemas which will be used for validating the customer json before saving into the MongoDB.</li> </ul> JsonSchemaValidator.java<pre><code>package com.springboot.project.json.schema.validator.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.bson.Document;\n\n\nimport java.util.UUID;\n\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotNull;\n\n@Getter\n@Setter\n@org.springframework.data.mongodb.core.mapping.Document(\"json_schemas\")\npublic class JsonSchemaValidator {\n\n    @Id\n    @NotNull\n    private UUID id;\n    @NotNull(message = \"name of schema can't be null\")\n    private String name;\n    private Long version;\n    private String status;\n    @NotNull(message = \"value of schema can't be null\")\n    private Document value;\n\n}\n</code></pre> <ul> <li>Finally, we just need to create a simple <code>JsonValidationResponse</code> as below.</li> </ul> JsonValidationResponse.java<pre><code>package com.springboot.project.json.schema.validator.model;\n\nimport org.bson.Document;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class JsonValidationResponse {\n\n    private boolean validJson;\n    private Long schemaVersion;\n    private Document jsonInput;\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#repository","title":"Repository","text":"<ul> <li>Now, we will continue to create the package <code>repository</code> and add 2 repositories classes <code>CustomerRepository</code> and <code>JsonSchemaRepository</code> as below.</li> </ul> CustomerRepository.java<pre><code>package com.springboot.project.json.schema.validator.repository;  \n\nimport com.springboot.project.json.schema.validator.model.Customer;  \nimport org.springframework.data.mongodb.repository.MongoRepository;  \nimport org.springframework.stereotype.Repository;  \n\n@Repository  \npublic interface CustomerRepository extends MongoRepository&lt;Customer, Long&gt; {  \n\n}\n</code></pre> <ul> <li>The <code>CustomerRepository</code> interface extends <code>MongoRepository</code>, which provides basic CRUD operations for the <code>Customer</code> class, such as <code>save</code>, <code>findAll</code>, <code>findById</code>, and <code>deleteById</code>.</li> </ul> JsonSchemaRepository<pre><code>package com.springboot.project.json.schema.validator.repository;  \n\nimport com.springboot.project.json.schema.validator.model.JsonSchemaValidator;  \nimport org.springframework.data.mongodb.repository.MongoRepository;  \nimport org.springframework.stereotype.Repository;  \n\nimport java.util.List;  \n\n@Repository  \npublic interface JsonSchemaRepository extends MongoRepository&lt;JsonSchemaValidator, Long&gt; {  \n\n    List&lt;JsonSchemaValidator&gt; findJsonSchemaValidatorByName(String name);  \n\n    List&lt;JsonSchemaValidator&gt; findByOrderByVersionDesc(String name);  \n\n}\n</code></pre> <ul> <li>Likewise  <code>JsonSchemaRepository</code> interface extends <code>MongoRepository</code>, which provides basic CRUD operations for the <code>JsonSchemaValidator</code> class and in repository we also need to add some custom queries for  finding Json SchemaValidator by name and by name with order by version.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#service","title":"Service","text":"<ul> <li> <p>So let's create 3 services and 1 component class as below:</p> <ul> <li>SequenceGeneratorService: used for generate sequence version number.</li> <li>CustomerService: used for creating and getting customer data.</li> <li>JsonSchemaValidatorService: userd for validating json data, creating and getting json schemas.</li> <li>CustomDateTimeValidator: This component is used for overriding the default DateTimeFormatValidator when building <code>SchemaLoader</code> in <code>JsonSchemaValidatorService</code>.</li> </ul> </li> <li> <p>Firstly, let's create the <code>SequenceGeneratorService</code> class as below.</p> </li> </ul> SequenceGeneratorService.java<pre><code>package com.springboot.project.json.schema.validator.service;  \n\nimport java.util.Objects;  \n\nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.data.mongodb.core.FindAndModifyOptions;  \nimport org.springframework.data.mongodb.core.MongoOperations;  \nimport org.springframework.data.mongodb.core.query.Criteria;  \nimport org.springframework.data.mongodb.core.query.Query;  \nimport org.springframework.data.mongodb.core.query.Update;  \nimport org.springframework.stereotype.Service;  \n\nimport com.springboot.project.json.schema.validator.model.DatabaseSequence;  \n\nimport lombok.RequiredArgsConstructor;  \n\n@Service  \n@RequiredArgsConstructor(onConstructor = @__(@Autowired))  \npublic class SequenceGeneratorService {  \n\n    private final MongoOperations mongoOperations;  \n\n    public long generateVersionSequence(String seqName) {  \n        if (Objects.isNull(seqName))   \n            throw new IllegalArgumentException(\"seqName must not be null!\");  \n        DatabaseSequence counter = mongoOperations.findAndModify(  \n            Query.query(Criteria.where(\"_id\").is(seqName)),  \n                new Update().inc(\"version\",1),   \nFindAndModifyOptions.options().returnNew(true).upsert(true),  \n                DatabaseSequence.class);  \n        return !Objects.isNull(counter) ? counter.getVersion() : 1;  \n    }  \n\n}\n</code></pre> <ul> <li> <p>In this service we will use the <code>mongoOperations</code> to query the <code>DatabaseSequence</code> record inside the <code>database_sequence</code> collection with <code>id</code> is the input seqName. If the record is existed then we will update the value by increasing current value with 1 else we will create a new record with value is 1.</p> </li> <li> <p>Secondly, let's create the <code>CustomDateTimeValidator</code> component class as below.</p> </li> </ul> CustomDateTimeValidator.java<pre><code>package com.springboot.project.json.schema.validator.service;  \n\nimport java.util.Arrays;  \nimport java.util.Collections;  \nimport java.util.List;  \nimport java.util.Optional;  \n\nimport org.everit.json.schema.FormatValidator;  \nimport org.joda.time.DateTimeFieldType;  \nimport org.joda.time.format.DateTimeFormatter;  \nimport org.joda.time.format.DateTimeFormatterBuilder;  \nimport org.joda.time.format.DateTimeParser;  \nimport org.springframework.stereotype.Component;  \n\n@Component  \npublic class CustomDateTimeValidator implements FormatValidator {  \n\n    private static final String DATE_TIME_FORMAT = \"date-time\";  \n    private static final List&lt;String&gt; FORMATS = Collections.unmodifiableList(  \n        Arrays.asList(\"yyyy-MM-dd'T'HH:mm:ssZ\", \"yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z\")  \n    );  \n    private static final DateTimeFormatter FORMATTER;  \n\n    static {  \n        final DateTimeParser secFracsParser = new DateTimeFormatterBuilder()  \n            .appendLiteral('.').appendFractionOfSecond(1,12)  \n            .toParser();  \n\n        final DateTimeParser timeZoneOffset = new DateTimeFormatterBuilder()  \n            .appendTimeZoneOffset(\"Z\", false, 2, 2)  \n            .toParser();      \n        DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();  \n\n        builder = builder.appendFixedDecimal(DateTimeFieldType.year(), 4)  \n            .appendLiteral('-')  \n            .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)  \n            .appendLiteral('-')  \n            .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)  \n            .appendLiteral('T')  \n            .appendFixedDecimal(DateTimeFieldType. hourOfDay(), 2)  \n            .appendLiteral(':')  \n            .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)  \n            .appendLiteral(':')  \n            .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)  \n            .appendOptional(secFracsParser)  \n            .appendOptional(timeZoneOffset);  \n\n        FORMATTER = builder.toFormatter();  \n    }  \n\n    @Override  \n    public Optional&lt;String&gt; validate(String dateTime) {  \n        try {  \n            FORMATTER.parseDateTime(dateTime);  \n            return Optional.empty();  \n        } catch(IllegalArgumentException ex) {  \n            return Optional.of(String.format(\"[%s] is not a valid %s. Expected %s\", dateTime, formatName(), FORMATS));  \n        }  \n    }  \n\n    @Override  \n    public String formatName() {  \n        return DATE_TIME_FORMAT;  \n    }  \n\n}\n</code></pre> <ul> <li> <p>Actually, we are going to create a custom <code>DateTimeFormatValidator</code> which will be used to replace the default <code>DateTimeFormatValidator</code> of this <code>everit-json-schema</code>. So we have to implement the interface <code>FormatValidator</code> to create a new custom <code>DateTimeFormatValidator</code>. In this component, we will override 2 methods <code>formatName</code>  and <code>validate</code>. </p> <ul> <li>In which, the <code>formatName</code> is used for the name of the <code>FormatValidator</code> that we want to set, if the name is already existed then later when we configure the <code>SchemaLoader</code> we will override it, if the name is new and has not existed as in the library then it will be the new custom format when we add it to the <code>SchemaLoader</code> and we can use it in the json schema.</li> <li>In the method <code>validate</code> we will receive the string value which we are expecting as the datetime and then we will use the custom <code>DateTimeFormatterBuilder</code> to verify this string value. The datetime value should have the formats as in the example below:<ul> <li>2023-03-28T14:11:44.849+0700</li> <li>2023-03-28T14:11:44.849Z</li> <li>2023-03-28T14:11:44</li> </ul> </li> </ul> </li> <li> <p>Next, let's create the <code>JsonSchemaValidatorService</code> as below.</p> </li> </ul> JsonSchemaValidatorService.java<pre><code>package com.springboot.project.json.schema.validator.service;\n\nimport com.springboot.project.json.schema.validator.model.JsonSchemaValidator;\nimport com.springboot.project.json.schema.validator.model.JsonValidationResponse;\nimport com.springboot.project.json.schema.validator.repository.JsonSchemaRepository;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.bson.Document;\nimport org.everit.json.schema.Schema;\nimport org.everit.json.schema.ValidationException;\nimport org.everit.json.schema.loader.SchemaLoader;\nimport org.json.JSONObject;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StreamUtils;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Service\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class JsonSchemaValidatorService {\n\n    private static final ConcurrentHashMap&lt;String, String&gt; JSON_SCHEMA_STRUCTURE_CACHE = new ConcurrentHashMap&lt;&gt;();\n\n    private final JsonSchemaRepository jsonSchemaRepository;\n    private final CustomDateTimeValidator customDateTimeValidator;\n    private final SequenceGeneratorService sequenceGeneratorService;\n\n    public JsonSchemaValidator createJsonSchemaValidator(String json) {\n        if (!this.validateInputJsonSchemaStructure(json))\n            throw new IllegalArgumentException(\"Validation failed for input json schema!\");\n        JsonSchemaValidator jsonSchemaValidator = new JsonSchemaValidator();\n        Document data = Document.parse(json);\n        String schemaName = data.getString(\"name\");\n        Document value = data.get(\"value\", Document.class);\n        Optional&lt;JsonSchemaValidator&gt; latestJsonSchemaOpt = this.getlatestActiveJsonSchemaVersion(schemaName);\n        if (!latestJsonSchemaOpt.isPresent()) {\n            return this.saveNewJsonSchemaValidator(jsonSchemaValidator, schemaName, value);\n        }\n        JsonSchemaValidator latestJsonSchema = latestJsonSchemaOpt.get();\n        latestJsonSchema.setStatus(\"inactive\");\n        this.jsonSchemaRepository.save(latestJsonSchema);\n        this.saveNewJsonSchemaValidator(jsonSchemaValidator, schemaName, value);\n        return this.jsonSchemaRepository.save(jsonSchemaValidator);\n    }\n\n    public List&lt;JsonSchemaValidator&gt; getJsonSchemaValidatorByName(String name) {\n        return this.jsonSchemaRepository.findJsonSchemaValidatorByName(name);\n    }\n\n    public JsonValidationResponse validateJsonData(String schemaName, String jsonData) {\n        Optional&lt;JsonSchemaValidator&gt; latestJsonSchemaOpt = this.getlatestActiveJsonSchemaVersion(schemaName);\n        if (!latestJsonSchemaOpt.isPresent()) {\n            return this.createJsonValidationResponse(false, jsonData, 0L);\n        }\n        JsonSchemaValidator latestJsonSchema = latestJsonSchemaOpt.get();\n        Document jsonSchema = latestJsonSchema.getValue();\n        boolean isValidJson = this.validateJson(jsonSchema.toJson(), jsonData);\n        return this.createJsonValidationResponse(isValidJson, jsonData, latestJsonSchema.getVersion());\n    }\n\n    private JsonValidationResponse createJsonValidationResponse(boolean isValidJson, String jsonData, Long version) {\n        JsonValidationResponse jsonValidationResponse = new JsonValidationResponse();\n        jsonValidationResponse.setValidJson(isValidJson);\n        jsonValidationResponse.setJsonInput(Document.parse(jsonData));\n        jsonValidationResponse.setSchemaVersion(version);\n        return jsonValidationResponse;\n    }\n\n    private JsonSchemaValidator saveNewJsonSchemaValidator(JsonSchemaValidator jsonSchemaValidator, String schemaName, Document data) {\n        jsonSchemaValidator.setId(UUID.randomUUID());\n        jsonSchemaValidator.setName(schemaName);\n        jsonSchemaValidator.setStatus(\"active\");\n        jsonSchemaValidator.setVersion(sequenceGeneratorService.generateVersionSequence(schemaName));\n        jsonSchemaValidator.setValue(data);\n        return this.jsonSchemaRepository.save(jsonSchemaValidator);\n    }\n\n    private Optional&lt;JsonSchemaValidator&gt; getlatestActiveJsonSchemaVersion(String schemaName) {\n        List&lt;JsonSchemaValidator&gt; jsonSchemaValidators = this.jsonSchemaRepository.findByOrderByVersionDesc(schemaName);\n        for (JsonSchemaValidator jsonSchemaValidator: jsonSchemaValidators) {\n            if (jsonSchemaValidator.getStatus().equalsIgnoreCase(\"active\")) {\n                return Optional.of(jsonSchemaValidator);\n            }\n        }\n        return Optional.empty();\n\n    }\n\n    private boolean validateInputJsonSchemaStructure(String target) {\n        String jsonSchemaStructure = JSON_SCHEMA_STRUCTURE_CACHE.computeIfAbsent(\"jsonSchemaStructureValidator\", (s) -&gt; {\n            ClassPathResource resource = new ClassPathResource(\"validation/JsonSchemaStructureValidator.json\");\n            try {\n                return StreamUtils.copyToString(resource.getInputStream(), StandardCharsets.UTF_8);\n            } catch (IOException e) {\n                throw new RuntimeException(\"There is no JsonSchemaStructureValidator in the source code!\", e);\n            }\n        });\n        return this.validateJson(jsonSchemaStructure, target);\n    }\n\n    private boolean validateJson(String validationSchema, String target) {\n        try {\n            SchemaLoader loader = SchemaLoader.builder()\n                .addFormatValidator(customDateTimeValidator)\n                .schemaJson(new JSONObject(validationSchema))\n                .enableOverrideOfBuiltInFormatValidators()\n                .build();\n            Schema schema = loader.load().build();\n            schema.validate(new JSONObject(target));\n            return true;\n        } catch (ValidationException e) {\n            return false;\n        }\n    }\n\n}\n</code></pre> <ul> <li>In this service class we will have 3 main methods, <code>createJsonSchemaValidator</code>, <code>getJsonSchemaValidatorByName</code> and <code>validateJsonData</code>.</li> <li>In the method <code>createJsonSchemaValidator</code> firstly we will validate the input body  by using another json schem which is put in the resources as below.</li> </ul> JsonSchemaStructureValidator.json<pre><code>{\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"required\": [\n    \"name\",\n    \"value\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"$id\": \"#/properties/name\",\n      \"type\": \"string\",\n      \"minLength\": 1\n    },\n    \"value\": {\n      \"$id\": \"#/properties/value\",\n      \"type\": \"object\",\n      \"required\": [\n        \"properties\",\n        \"$id\",\n        \"$schema\",\n        \"type\",\n        \"required\"\n      ],\n      \"properties\": {\n        \"$id\": {\n          \"$id\": \"#/properties/$id\",\n          \"type\": \"string\",\n          \"minLength\": 1\n        },\n        \"type\": {\n          \"$id\": \"#/properties/type\",\n          \"type\": \"string\",\n          \"minLength\": 1\n        },\n        \"$schema\": {\n          \"$id\": \"#/properties/$schema\",\n          \"type\": \"string\",\n          \"minLength\": 1\n        },\n        \"required\": {\n          \"$id\": \"#/properties/required\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"properties\": {\n          \"$id\": \"#/properties/properties\",\n          \"type\": \"object\",\n          \"additionalProperties\": true\n        }\n      }\n    },\n    \"additionalProperties\": true\n  }\n}\n</code></pre> <ul> <li> <p>This json schema will validate the input json scheme in the request body to make sure the request body and the structure of in json schema validation is correct.</p> </li> <li> <p>Then we will get the latest json schema version base on the schema name. If the schema existed in the MongoDB, then we will set the status <code>inactive</code> for it and we will create a new record with newer active version. If the schema isn't existed before then we will create a new one.</p> </li> <li>In the method <code>getJsonSchemaValidatorByName</code>, we just simply query all the json schemas by schema name.</li> <li> <p>Finally in the method <code>validateJsonData</code>, we will get the latest json schema version, if the json schema doesn't exist, then we will return validation failed. If it exists, then we will create an instance of <code>SchemaLoader</code> by using <code>SchemaLoader.builder()</code></p> <ul> <li>Then we will set the <code>customDateTimeValidator</code> to the <code>SchemaLoader</code> that we created  before.</li> <li>Then The <code>schemaJson(new JSONObject(validationSchema))</code> method loads the JSON schema from the MongoDB that we get in the step before.</li> <li>The we use the <code>enableOverrideOfBuiltInFormatValidators()</code> method enables the override of the built-in format validators that come with the library. </li> <li>Finally, the <code>build()</code> method builds the <code>SchemaLoader</code> instance.</li> </ul> </li> <li> <p>Next we will use <code>load().build();</code> to load the schema and builds it.</p> </li> <li> <p>Finally we use <code>validate(new JSONObject(target));</code> to validate the JSON object <code>target</code> against the JSON schema. If the validation fails, a <code>ValidationException</code> is thrown.</p> </li> <li> <p>Next, we will continue to create the <code>CustomerService</code> class as below.</p> </li> </ul> <pre><code>package com.springboot.project.json.schema.validator.service;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.springboot.project.json.schema.validator.model.Customer;\nimport com.springboot.project.json.schema.validator.model.JsonValidationResponse;\nimport com.springboot.project.json.schema.validator.repository.CustomerRepository;\n\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\nimport java.util.UUID;\n\nimport org.bson.Document;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerService {\n\n    private final CustomerRepository customerRepository;\n    private final JsonSchemaValidatorService jsonSchemaValidatorService;\n    private final ObjectMapper objectMapper;\n\n    public Customer createCustomer(String customerJson) {\n        JsonValidationResponse jsonValidationResponse = this.jsonSchemaValidatorService.validateJsonData(\"CustomerJsonSchemaValidator\", customerJson);\n        if (jsonValidationResponse.isValidJson()) {\n            Customer customer = new Customer();\n            JsonNode customerNode;\n            try {\n                customerNode = this.objectMapper.readTree(customerJson);\n            } catch (JsonProcessingException e) {\n                e.printStackTrace();\n                throw new IllegalArgumentException(\"Customer Json is not Valid: \" + customerJson);\n            }\n            Document customerData = Document.parse(customerJson);\n            customer.setId(UUID.randomUUID());\n            customer.setFullName(customerNode.get(\"customer\").get(\"fullName\").asText());\n            customer.setEmail(customerNode.get(\"customer\").get(\"email\").asText());\n            customer.setData(customerData);\n            return this.customerRepository.save(customer);\n        }\n        throw new IllegalArgumentException(\"Customer Json is not Valid: \" + customerJson);\n    }\n\n    public List&lt;Customer&gt; getCustomers() {\n       return this.customerRepository.findAll();\n    }\n\n}\n</code></pre> <ul> <li>In this service class we will have 2 methods, <code>createCustomer</code> and <code>getCustomers</code>. In which:<ul> <li>In the method <code>createCustomer</code>, we will use the <code>JsonSchemaValidatorService</code> to validate the input json, if the json is valid then we will create the customer else we will thrown an exception.</li> <li>Next, in the method <code>getCustomers</code>, we just simply get all the created customers in the MongoDB.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#controller","title":"Controller","text":"<ul> <li>Next we create 2 controllers <code>CustomerController</code> and <code>JsonSchemaValidatorController</code> respectively as below.</li> </ul> CustomerController.java<pre><code>package com.springboot.project.json.schema.validator.controller;\n\nimport com.springboot.project.json.schema.validator.model.Customer;\nimport com.springboot.project.json.schema.validator.service.CustomerService;\n\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerController {\n\n    private final CustomerService customerService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/customers\")\n    public ResponseEntity&lt;Customer&gt; createCustomer(@RequestBody String customerJson) {\n        return new ResponseEntity&lt;&gt;(this.customerService.createCustomer(customerJson), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/customers\")\n    public ResponseEntity&lt;List&lt;Customer&gt;&gt; getCustomers() {\n        return new ResponseEntity&lt;&gt;(this.customerService.getCustomers(), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>In this controller, we simply create 2 apis for creating customer and getting all the customers in the MongoDB.</li> </ul> JsonSchemaValidatorController.java<pre><code>package com.springboot.project.json.schema.validator.controller;\n\nimport com.springboot.project.json.schema.validator.model.JsonSchemaValidator;\nimport com.springboot.project.json.schema.validator.model.JsonValidationResponse;\nimport com.springboot.project.json.schema.validator.service.JsonSchemaValidatorService;\n\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequiredArgsConstructor(onConstructor = @__(@Autowired))\npublic class JsonSchemaValidatorController {\n\n    private final JsonSchemaValidatorService jsonSchemaValidatorService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/json/validator/schemas\")\n    public ResponseEntity&lt;JsonSchemaValidator&gt; createJsonSchemaValidator(@RequestBody String jsonSchema) {\n        return new ResponseEntity&lt;&gt;(this.jsonSchemaValidatorService.createJsonSchemaValidator(jsonSchema), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/json/validator/schemas/{schemaName}\")\n    public ResponseEntity&lt;List&lt;JsonSchemaValidator&gt;&gt; getJsonSchemaValidatorByName(@PathVariable(\"schemaName\") String schemaName) {\n        return new ResponseEntity&lt;&gt;(this.jsonSchemaValidatorService.getJsonSchemaValidatorByName(schemaName), HttpStatus.OK);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/json/validator/schemas/{schemaName}\")\n    public ResponseEntity&lt;JsonValidationResponse&gt; validateCustomerJson(@PathVariable(\"schemaName\") String schemaName, @RequestBody String customerJson) {\n        return new ResponseEntity&lt;&gt;(this.jsonSchemaValidatorService.validateJsonData(schemaName, customerJson), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>In this controller, we will create 3 apis for creating json schema, getting json schema by name and validate json with json schema. They are 3 apis for 3 main methods in the <code>JsonSchemaValidatorService</code>.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#testing","title":"Testing","text":"<ul> <li>Okay let's take an example json schema as below:</li> </ul> <pre><code>{\n    \"name\": \"CustomerJsonSchemaValidator\",\n    \"value\": {\n        \"$id\": \"http://example.com/example.json\",\n        \"type\": \"object\",\n        \"$schema\": \"http://json-schema.org/draft-07/schema\",\n        \"required\": [\n            \"customer\"\n        ],\n        \"properties\": {\n            \"customer\": {\n                \"$id\": \"#/properties/customer\",\n                \"type\": \"object\",\n                \"description\": \"customer object\",\n                \"additionalProperties\": true,\n                \"required\": [\n                    \"fullName\",\n                    \"email\",\n                    \"data\"\n                ],\n                \"properties\": {\n                    \"fullName\": {\n                        \"$id\": \"#/properties/customer/properties/fullName\",\n                        \"type\": \"string\",\n                        \"description\": \"fullName of user\"\n                    },\n                    \"email\": {\n                        \"$id\": \"#/properties/customer/properties/email\",\n                        \"type\": \"string\",\n                        \"description\": \"email of user\"\n                    },\n                    \"data\": {\n                        \"$id\": \"#/properties/customer/properties/data\",\n                        \"type\": \"object\",\n                        \"description\": \"all user data\",\n                        \"additionalProperties\": true,\n                        \"properties\": {\n                            \"fullName\": {\n                                \"$id\": \"#/properties/customer/properties/data/properties/fullName\",\n                                \"type\": \"string\",\n                                \"description\": \"fullName of user\"\n                            },\n                            \"email\": {\n                                \"$id\": \"#/properties/customer/properties/data/properties/email\",\n                                \"type\": \"string\",\n                                \"description\": \"email of user\"\n                            },\n                            \"orders\": {\n                                \"$id\": \"#/properties/customer/properties/data/properties/order\",\n                                \"type\": [\n                                    \"array\"\n                                ],\n                                \"minItems\": 0,\n                                \"description\": \"orders array\",\n                                \"additionalProperties\": true,\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                        \"orderName\",\n                                        \"createdDate\",\n                                        \"lastUpdatedDate\",\n                                        \"items\"\n                                    ],\n                                    \"properties\": {\n                                        \"orderName\": {\n                                            \"$id\": \"#/properties/customer/properties/data/properties/order/properties/orderName\",\n                                            \"type\": \"string\",\n                                            \"description\": \"orderName\"\n                                        },\n                                        \"createdDate\": {\n                                            \"$id\": \"#/properties/customer/properties/data/properties/order/properties/createdDate\",\n                                            \"type\": \"string\",\n                                            \"format\": \"date-time\",\n                                            \"description\": \"createdDate with formats: 2020-05-23T18:25:43.511Z, 2021-05-17T13:56:32, 2023-03-28T14:11:44.849+0700\"\n                                        },\n                                        \"lastUpdatedDate\": {\n                                            \"$id\": \"#/properties/customer/properties/data/properties/order/properties/lastUpdatedDate\",\n                                            \"type\": \"string\",\n                                            \"format\": \"date-time\",\n                                            \"description\": \"lastUpdatedDate with formats: 2020-05-23T18:25:43.511Z, 2021-05-17T13:56:32, 2023-03-28T14:11:44.849+0700\"\n                                        },\n                                        \"items\": {\n                                            \"$id\": \"#/properties/customer/properties/data/properties/order/properties/items\",\n                                            \"type\": \"array\",\n                                            \"minItems\": 1,\n                                            \"description\": \"list of items\",\n                                            \"items\": {\n                                                \"type\": \"object\",\n                                                \"required\": [\n                                                    \"itemName\",\n                                                    \"quantity\",\n                                                    \"price\"\n                                                ],\n                                                \"properties\": {\n                                                    \"itemName\": {\n                                                        \"$id\": \"#/properties/customer/properties/data/properties/order/properties/items/properties/itemName\",\n                                                        \"type\": \"string\",\n                                                        \"description\": \"itemName\"\n                                                    },\n                                                    \"quantity\": {\n                                                        \"$id\": \"#/properties/customer/properties/data/properties/order/properties/items/properties/quantity\",\n                                                        \"type\": \"integer\",\n                                                        \"format\": \"int64\",\n                                                        \"description\": \"quantity - Ex: 10 or 20 or 45...\"\n                                                    },\n                                                    \"price\": {\n                                                        \"$id\": \"#/properties/customer/properties/data/properties/order/properties/items/properties/price\",\n                                                        \"type\": \"number\",\n                                                        \"description\": \"price - Ex: 30.5 or 105.9\"\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"if\": {\n                            \"properties\": {\n                                \"ageRange\": {\n                                    \"enum\": [\n                                        \"ADULT\"\n                                    ]\n                                }\n                            },\n                            \"required\": [\n                                \"ageRange\"\n                            ]\n                        },\n                        \"then\": {\n                            \"required\": [\n                                \"fullName\",\n                                \"email\",\n                                \"identity\"\n                            ],\n                            \"properties\": {\n                                \"additionalProperties\": true,\n                                \"identity\": {\n                                    \"$id\": \"#/properties/customer/properties/identity\",\n                                    \"type\": \"object\",\n                                    \"description\": \"identity information\",\n                                    \"required\": [\n                                        \"identityNumber\",\n                                        \"address\",\n                                        \"dob\"\n                                    ],\n                                    \"properties\": {\n                                        \"identityNumber\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/identityNumber\",\n                                            \"type\": \"string\",\n                                            \"description\": \"identityNumber\"\n                                        },\n                                        \"address\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/address\",\n                                            \"type\": \"string\",\n                                            \"description\": \"address\"\n                                        },\n                                        \"phone\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/phone\",\n                                            \"type\": \"string\",\n                                            \"description\": \"phone\"\n                                        },\n                                        \"dob\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/dob\",\n                                            \"type\": \"string\",\n                                            \"description\": \"dob\"\n                                        },\n                                        \"sex\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/sex\",\n                                            \"type\": \"string\",\n                                            \"description\": \"sex\"\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"else\": {\n                            \"required\": [\n                                \"fullName\",\n                                \"email\"\n                            ],\n                            \"properties\": {\n                                \"additionalProperties\": true,\n                                \"identity\": {\n                                    \"$id\": \"#/properties/customer/properties/identity\",\n                                    \"type\": \"object\",\n                                    \"description\": \"identity information\",\n                                    \"required\": [\n                                        \"identityNumber\",\n                                        \"address\",\n                                        \"dob\"\n                                    ],\n                                    \"properties\": {\n                                        \"identityNumber\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/identityNumber\",\n                                            \"type\": \"string\",\n                                            \"description\": \"identityNumber\"\n                                        },\n                                        \"address\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/address\",\n                                            \"type\": \"string\",\n                                            \"description\": \"address\"\n                                        },\n                                        \"phone\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/phone\",\n                                            \"type\": \"string\",\n                                            \"description\": \"phone\"\n                                        },\n                                        \"dob\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/dob\",\n                                            \"type\": \"string\",\n                                            \"description\": \"dob\"\n                                        },\n                                        \"sex\": {\n                                            \"$id\": \"#/properties/customer/properties/identity/properties/sex\",\n                                            \"type\": \"string\",\n                                            \"description\": \"sex\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"description\": \"The root schema comprises the entire JSON document.\",\n        \"additionalProperties\": true\n    }\n}\n</code></pre> <ul> <li>In this json schema we will validate the customer json to check it is valid or not. The valid customer json is showed as below.</li> </ul> <pre><code>{\n    \"customer\": {\n        \"fullName\": \"Duc Nguyen\",\n        \"email\": \"example@gmail.com\",\n        \"data\": {\n            \"fullName\": \"Duc Nguyen\",\n            \"email\": \"example@gmail.com\",\n            \"ageRange\": \"ADULT\",\n            \"identity\": {\n                \"identityNumber\": \"ABCE-123-421-942\",\n                \"address\": \"123 XYZ Street\",\n                \"dob\": \"20/02/1995\"\n            },\n            \"orders\": [\n                {\n                    \"orderName\": \"Duc Order\",\n                    \"createdDate\": \"2023-03-28T14:11:44.849+0700\",\n                    \"lastUpdatedDate\": \"2023-03-28T14:11:44.849+0700\",\n                    \"items\": [\n                        {\n                            \"itemName\": \"PS5\",\n                            \"quantity\": 1,\n                            \"price\": 599.99\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n</code></pre> <ul> <li> <p>In the customer json, it contains some information like <code>identity</code>, <code>orders</code> and <code>items</code> and there some constraints such as the <code>identity</code> field is only mandatory for the <code>ageRange</code> which is <code>ADULT</code>, in case the <code>ageRange</code> is <code>CHILDREN</code> or there is no field <code>ageRange</code> it is the optional. Then for the list <code>orders</code>, it can be empty because the customer haven't had any order yet. Then if the customer has an order, then all the information in the order must be required, included the list <code>items</code>.</p> </li> <li> <p>Now, Firstly we will use the postman to add the json schema validator as below. Then we will receive the newest version with active status.</p> </li> </ul> <p></p> <ul> <li>Then we can use the api get json schema by name to get all the json schema version to make sure the json schema is saved successfully into the MongoDB.</li> </ul> <p></p> <ul> <li>Finally, now, we can try to validate the customer json by using api <code>validateCustomerJson</code>. So if we put the valid json we will see the response with field <code>validJson</code> as <code>true</code>.</li> </ul> <p></p> <ul> <li>We try to set the field <code>identity</code> as <code>null</code> then you will see the <code>validJson</code> as <code>false</code> because the <code>ageRange</code> is <code>ADULT</code> and it requires the field <code>identity</code>.</li> </ul> <p></p> <ul> <li>But if we change the <code>ageRange</code> to <code>CHILDREN</code>, then you will see the customer json is valid again.</li> </ul> <p></p> <ul> <li>Next, we will try to create the customer with valid json, then you will see the successful result as below.</li> </ul> <p></p> <ul> <li>If we make the customer json invalid then we will got the internal error.</li> </ul> <p></p> <ul> <li>Then to make sure the customer data is created successfully we can use the api get customers to check.</li> </ul> <p></p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#see_also","title":"See Also","text":"<ul> <li>SB 3x Spring Data MongoDB</li> <li>Docker With Databases</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Json%20Schema%20Validator/#references","title":"References","text":"<ul> <li>Json Schema Org</li> <li>Everit Json Schema Github</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/","title":"Spring Boot With Mustache","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#what_is_the_mustache","title":"What Is The Mustache?","text":"<ul> <li><code>Mustache</code>\u00a0is a\u00a0logic-less templates. <code>Mustache</code> can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.</li> <li>We call it \"logic-less\" because there are no if statements, else clauses, or for loops. Instead there are only tags. Some tags are replaced with a value, some nothing, and others a series of values.</li> <li>More information</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#mustache_syntax","title":"Mustache Syntax","text":"<ul> <li>Let's check more detail in this page</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#variables","title":"Variables","text":"<ul> <li>The most basic tag type is the variable. A\u00a0<code>{{name}}</code>\u00a0tag in a basic template will try to find the\u00a0<code>name</code>\u00a0key in the current context. If there is no\u00a0<code>name</code>\u00a0key, the parent contexts will be checked recursively. If the top context is reached and the\u00a0<code>name</code>\u00a0key is still not found, nothing will be rendered.</li> <li>All variables are HTML escaped by default. If you want to return unescaped HTML, use the triple mustache:\u00a0<code>{{{name}}}</code>.</li> <li>You can also use\u00a0<code>&amp;</code>\u00a0to unescape a variable:\u00a0<code>{{&amp; name}}</code>. This may be useful when changing delimiters (see \"Set Delimiter\" below).</li> <li>By default a variable \"miss\" returns an empty string. This can usually be configured in your Mustache library. The Ruby version of Mustache supports raising an exception in this situation, for instance.</li> <li>Template: sample.mustache</li> </ul> sample.mustache<pre><code>{\n    \"id\": \"{{{id}}}\"\n}\n</code></pre> <ul> <li>Result</li> </ul> <pre><code>{\n\n    \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e5\"\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#section","title":"Section","text":"<ul> <li>Sections render blocks of text one or more times, depending on the value of the key in the current context.</li> <li>A section begins with a pound and ends with a slash. That is,\u00a0<code>{{#persons}}</code>\u00a0begins a \"person\" section while\u00a0<code>{{/persons}}</code>\u00a0ends it.</li> <li>The behavior of the section is determined by the value of the key.</li> <li>False Values or Empty Lists</li> <li>If the\u00a0<code>persons</code>\u00a0key exists and has a value of false or an empty list, the HTML between the pound and slash will not be displayed.</li> </ul> person.mustache<pre><code>{\n    \"persons\": [\n        {{#persons}}\n        {\n            \"id\": {{{id}}},\n            \"name\": {{{name}}},\n            \"sex\": {{{sex}}},\n            \"age\": {{{age}}},\n        }\n        {{^-last}},{{/-last}}\n        {{/persons}}\n    ]\n}\n</code></pre> <ul> <li>Result:</li> </ul> <pre><code>{\n    \"persons\": [\n        {\n            \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e5\",\n            \"name\": \"Duc\",\n            \"sex\": \"male\",\n            \"age\": \"27\"\n        }\n    ]\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#inverted_sections","title":"Inverted Sections","text":"<ul> <li>An inverted section begins with a caret (hat) and ends with a slash. That is\u00a0<code>{{^person}}</code>\u00a0begins a \"person\" inverted section while\u00a0<code>{{/person}}</code>\u00a0ends it.</li> <li>While sections can be used to render text one or more times based on the value of the key, inverted sections may render text once based on the inverse value of the key. That is, they will be rendered if the key doesn't exist, is false, or is an empty list.</li> </ul> <pre><code>{\n\n    {{#car}}  \n     \"vehicleId\": {{{id}}},  \n     \"vehicleName\": {{{carName}}}  \n    {{/car}}  \n    {{^car}}  \n             \"noCar\": true  \n    {{/car}}\n\n}\n</code></pre> <ul> <li>Results: that car has values</li> </ul> <pre><code>{\n\n    \"vehicleId\": \"9c107c20-d989-4628-83e1-e728b3d4a5e0\",\n    \"vehicleName\": \"minicoper\"\n\n}\n</code></pre> <ul> <li>Results: that car has no values</li> </ul> <pre><code>{\n\n    \"noCar\": true\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#comments","title":"Comments","text":"<ul> <li>Comments begin with a bang and are ignored. The following template:</li> </ul> <pre><code>{\n\n    \"comment\": \"{{! ignore me}}\"\n\n}\n</code></pre> <ul> <li>Will render as follows:</li> </ul> <pre><code>{\n\n    \"comment\": \"\"\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#partials","title":"Partials","text":"<ul> <li>Partials begin with a greater than sign, like\u00a0<code>{{&gt; laptop}}</code>.</li> <li>Partials are rendered at runtime (as opposed to compile time), so recursive partials are possible. Just avoid infinite loops.</li> <li>Mustache requires only this:</li> </ul> <pre><code>{{&gt; laptop}}\n</code></pre> <ul> <li>Why? Because the\u00a0<code>person.mustache</code>\u00a0file will inherit the\u00a0<code>size</code>\u00a0and\u00a0<code>start</code>\u00a0methods from the calling context.</li> <li>In this way you may want to think of partials as includes, imports, template expansion, nested templates, or sub-templates, even though those aren't literally the case here.</li> <li>For example, this template and partial:</li> </ul> person.mustache<pre><code>{\n    \"persons\": [\n        {{#persons}}\n        {\n            \"id\": {{{id}}},\n            \"name\": {{{name}}},\n            \"sex\": {{{sex}}},\n            \"age\": {{{age}}},\n            \"additionalInfo\": {\n                \"comment\": \"{{! ignore me}}\",\n                {{#info}}\n                    \"job\": {{{mainJob}}},\n                    \"companyAddress\": {{{workplace}}},\n                    \"employeeId\": {{{staffId}}},\n                {{/info}}\n                {{#car}}\n                        \"vehicleId\": {{{id}}},\n                        \"vehicleName\": {{{carName}}},\n                {{/car}}\n                {{^car}}\n                        \"noCar\": true,\n                {{/car}}\n                {{&gt; laptop}}\n            }\n        }\n        {{^-last}},{{/-last}}\n        {{/persons}}\n    ]\n}\n</code></pre> <ul> <li>Can be thought of as a single, expanded template:</li> </ul> laptop.mustache<pre><code>{{#laptop}}\n    \"laptopName\": {{{name}}},\n    \"branch\": {{{branch}}},\n    \"price\": {{{price}}}\n{{/laptop}}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#mustache_example_with_spring_boot","title":"Mustache Example With Spring Boot","text":"<ul> <li>Now, let's take an example with using mustache in spring boot service for mapping json.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#dependencies","title":"Dependencies","text":"<ul> <li>Let's add the dependency below for using mustache in spring boot.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.samskivert&lt;/groupId&gt;\n    &lt;artifactId&gt;jmustache&lt;/artifactId&gt;\n    &lt;version&gt;1.15&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#create_mustache_templates","title":"Create Mustache Templates","text":"<ul> <li>Now, in the <code>resources</code> in your spring boot project, we will create a directory with named <code>templates</code>. This directory will be a place to contain all your mustache templates.</li> <li>Then let's create 2 templates, <code>person.mustache</code> and <code>laptop.mustache</code> as below</li> </ul> person.mustache<pre><code>{\n    \"persons\": [\n        {{#persons}}\n        {\n            \"id\": {{{id}}},\n            \"name\": {{{name}}},\n            \"sex\": {{{sex}}},\n            \"age\": {{{age}}},\n            \"additionalInfo\": {\n                \"comment\": \"{{! ignore me}}\",\n                {{#info}}\n                    \"job\": {{{mainJob}}},\n                    \"companyAddress\": {{{workplace}}},\n                    \"employeeId\": {{{staffId}}},\n                {{/info}}\n                {{#car}}\n                    \"vehicleId\": {{{id}}},\n                    \"vehicleName\": {{{carName}}},\n                {{/car}}\n                {{^car}}\n                    \"noCar\": true,\n                {{/car}}\n                {{&gt; laptop}}\n            }\n        }\n        {{^-last}},{{/-last}}\n        {{/persons}}\n    ]\n}\n</code></pre> laptop.mustache<pre><code>{{#laptop}}\n    \"laptopName\": {{{name}}},\n    \"branch\": {{{branch}}},\n    \"price\": {{{price}}}\n{{/laptop}}\n</code></pre> <ul> <li>As you can see, we will bind data to the template <code>person</code> and <code>laptop</code> in which the template <code>laptop</code> will be a sub-template of template <code>person</code>. In this example we will use the json data as below to map key-value with templates above.</li> </ul> <pre><code>{\n    \"persons\": [\n        {\n            \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e5\",\n            \"name\": \"Duc\",\n            \"sex\": \"male\",\n            \"age\": \"27\",\n            \"car\": {\n                \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e0\",\n                \"carName\": \"minicoper\"\n            },\n            \"info\": {\n                \"mainJob\": \"director\",\n                \"workplace\": \"mr duc\",\n                \"staffId\": \"4628\"\n            },\n            \"laptop\": {\n                \"name\": \"BF103TU\",\n                \"branch\": \"HP\",\n                \"price\": \"1000$\"\n            }\n        }\n    ]\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#controller","title":"Controller","text":"<ul> <li>Let's create a simple controller with api as below, then we can use postman to test.</li> </ul> MustacheController.java<pre><code>package com.springboot.project.mustache.app.controller;\n\nimport com.springboot.project.mustache.app.service.MustacheTemplateService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class MustacheController {\n\n    @Autowired\n    private MustacheTemplateService mustacheTemplateService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/mustache/transform\", produces = {MediaType.APPLICATION_JSON_VALUE})\n    public ResponseEntity&lt;String&gt; tranformJson(@RequestBody String body) {\n        return new ResponseEntity&lt;&gt;(this.mustacheTemplateService.transform(body), HttpStatus.CREATED);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#service","title":"Service","text":"<ul> <li>Let's create a service class <code>MustacheTemplateService</code> and put the code as below, to map the input json to the template and get the mapped json back.</li> </ul> MustacheTemplateService.java<pre><code>package com.springboot.project.mustache.app.service;\n\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.samskivert.mustache.Mustache;\nimport com.samskivert.mustache.Template;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Service\npublic class MustacheTemplateService {\n\n    @Autowired\n    private Mustache.TemplateLoader templateLoader;\n    @Autowired\n    private Mustache.Compiler compiler;\n    private static final String CLASS_PATH_TEMPALTE = \"person\";\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    private static final ConcurrentHashMap&lt;String, Template&gt; TEMPLATE_CACHE = new ConcurrentHashMap&lt;&gt;();\n\n\n    public String transform(String inputData) {\n        try {\n            System.out.println(inputData);\n            ObjectMapper mapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            Object obj = mapper.readValue(inputData, Object.class);\n            Template template = TEMPLATE_CACHE.computeIfAbsent(CLASS_PATH_TEMPALTE, s -&gt; {\n                try {\n                    return compiler.defaultValue(\"null\").withFormatter(new Mustache.Formatter() {\n                        @Override\n                        public String format(Object value) {\n                            if(!\"null\".equalsIgnoreCase(value.toString())){\n                                if(value instanceof  String){\n                                    return '\\\"'+value.toString()+'\\\"';\n                                }\n                            }\n                            return value.toString();\n                        }\n                    }).compile(templateLoader.getTemplate(CLASS_PATH_TEMPALTE));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n            });\n            String result = template.execute(obj);\n            System.out.println(result);\n            return result;\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n}\n</code></pre> <ul> <li>We will need to @Autowired two service from the Mustache library, they are <code>TemplateLoader</code> and <code>Compiler</code>. <ul> <li>In which the <code>TemplateLoader</code> with method <code>getTemplate()</code> is use to get the root mustache template that you created in <code>sources/templates/</code>.</li> <li>The <code>Compiler</code> is used to configure binding data into the template, in this example, we will configure the mustache <code>compiler</code> ignore null values, so with non null and string values, they will be wrapped into the double quotes <code>\" \"</code> for other values as null, number and boolean value, they will be keep as default.</li> </ul> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#testing","title":"Testing","text":"<ul> <li>Now, let's start your spring boot service and use postman to execute the api with body as below:</li> </ul> <pre><code>curl --location --request POST 'http://localhost:8080/v1/mustache/transform' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"persons\": [\n        {\n            \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e5\",\n            \"name\": \"Duc\",\n            \"sex\": \"male\",\n            \"age\": \"27\",\n            \"car\": {\n                \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e0\",\n                \"carName\": \"minicoper\"\n            },\n            \"info\": {\n                \"mainJob\": \"director\",\n                \"workplace\": \"mr duc\",\n                \"staffId\": \"4628\"\n            },\n            \"laptop\": {\n                \"name\": \"BF103TU\",\n                \"branch\": \"HP\",\n                \"price\": \"1000$\"\n            }\n        }\n    ]\n}'\n</code></pre> <ul> <li>Then you will received with response json as below:</li> </ul> <pre><code>{\n    \"persons\": [\n        {\n            \"id\": \"9c107c20-d989-4628-83e1-e728b3d4a5e5\",\n            \"name\": \"Duc\",\n            \"sex\": \"male\",\n            \"age\": \"27\",\n            \"additionalInfo\": {\n                \"comment\": \"\",\n                \"job\": \"director\",\n                \"companyAddress\": \"mr duc\",\n                \"employeeId\": \"4628\",\n                \"vehicleId\": \"9c107c20-d989-4628-83e1-e728b3d4a5e0\",\n                \"vehicleName\": \"minicoper\",\n                \"laptopName\": \"BF103TU\",\n                \"branch\": \"HP\",\n                \"price\": \"1000$\"\n            }\n        }\n    ]\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Mustache/#references","title":"References","text":"<ul> <li>Mustache Github Io.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/","title":"Spring Boot With OpenApi Advances","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/#add_custom_annotations_into_models","title":"Add Custom Annotations Into Models","text":"<ul> <li>From last section Spring Boot With OpenApi, we know how to set up and use basic features of OpenApi Generator for our Spring Boot project.</li> <li>However, in some special cases, we will need do more than that like adding some custom annotations into specific generated classes or only on just some fields in them.</li> <li> <p>OpenApi supports us many way to achieve this one like using configuration in <code>pom.xml</code>, <code>SUPPORTED VENDOR EXTENSIONS</code> and \u00a0<code>specification extensions</code>\u00a0or\u00a0 <code>vendor extensions</code>. Base on the business requirement then we can choose the most suitable one. </p> </li> <li> <p>Below are <code>SUPPORTED VENDOR EXTENSIONS</code> that the OpenApi had supported.</p> </li> </ul> Extension name Description Applicable for Default value x-discriminator-value Used with model inheritance to specify value for discriminator that identifies current model MODEL x-implements Ability to specify interfaces that model must implements MODEL empty array x-setter-extra-annotation Custom annotation that can be specified over java setter for specific field FIELD When field is array &amp; uniqueItems, then this extension is used to add <code>@JsonDeserialize(as = LinkedHashSet.class)</code> over setter, otherwise no value x-tags Specify multiple swagger tags for operation OPERATION null x-accepts Specify custom value for 'Accept' header for operation OPERATION null x-content-type Specify custom value for 'Content-Type' header for operation OPERATION null x-class-extra-annotation List of custom annotations to be added to model MODEL null x-field-extra-annotation List of custom annotations to be added to property FIELD null x-spring-paginated Add org.springframework.data.domain.Pageable to controller method. Can be used to handle page &amp; size query parameters OPERATION false <ul> <li> <p>So While the OpenAPI specification tries to accommodate most use cases, additional data can be used to extend the specification and augment its functionality. These additional properties are known as <code>specification extensions</code> (previously called \"vendor extensions\"). The extension properties are implemented as patterned fields that start with the prefix\u00a0<code>x-</code>\u00a0naming convention such as <code>x-custom-annotation</code>. They can be used to describe extra functionality that is not covered by the standard OpenAPI Specification.</p> </li> <li> <p>The specification extensions are grouped according to the element(s) of the OpenAPI specification that they extend. Specification extensions can only be used in the sections of your OpenAPI definition that support them - for example, you can't use an extension that modifies the\u00a0<code>info</code>\u00a0object inside the\u00a0<code>tag</code>\u00a0object.</p> </li> <li>Now, let's go through examples below then we can understand easier.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/#using_configoptions_in_pomxml","title":"Using ConfigOptions In Pom.xml","text":"<ul> <li>Usually, to protect our customer data from incoming requests which can contain invalid data or injection script, we usually create model classes for which contains validation like the format of field, the min length, the max length...etc.</li> <li>So the OpenApi had supported this validation feature by enable <code>useBeanValidation</code>as <code>true</code> in the <code>configOptions</code> in <code>pom.xml</code>. See example below.</li> </ul> <p>Note: By default the <code>useBeanValidation</code> is set as true by OpenApi. So we can skip setting it again in the <code>configOptions</code>.</p> pom.xml<pre><code>&lt;build&gt;\n        &lt;plugins&gt;\n                &lt;plugin&gt;\n                        &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                        &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                        &lt;version&gt;6.0.0&lt;/version&gt;\n                        &lt;executions&gt;\n                                &lt;execution&gt;\n                                        &lt;goals&gt;\n                                                &lt;goal&gt;generate&lt;/goal&gt;\n                                        &lt;/goals&gt;\n                                        &lt;configuration&gt;\n                                                &lt;!-- path to the openapi file spec `.yml` --&gt;\n                                                &lt;inputSpec&gt;\n                                                        ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                                                &lt;/inputSpec&gt;\n                                                &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                                                &lt;!-- generated package for api interface --&gt;\n                                                &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                                                &lt;!-- generated package for models --&gt;\n                                                &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                                                &lt;!-- using supportingFilesToGenerate --&gt;\n                                                &lt;supportingFilesToGenerate&gt;\n                                                        ApiUtil.java\n                                                &lt;/supportingFilesToGenerate&gt;\n                                                &lt;configOptions&gt;\n                                                        &lt;delegatePattern&gt;false&lt;/delegatePattern&gt;\n                                                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                                        &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                                        &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                                                        &lt;openApiNullable&gt;true&lt;/openApiNullable&gt;\n                                                &lt;/configOptions&gt;\n                                        &lt;/configuration&gt;\n                                &lt;/execution&gt;\n                        &lt;/executions&gt;\n                &lt;/plugin&gt;\n        &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> <ul> <li>Now, let create the <code>openapi-server.yml</code> and add some validation as Min length, Max length as below.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Openapi Server\n  description: 'This is the Openapi Specification For Feign Server'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\ntags:\n  - name: server\n    description: all server apis\n\npaths:\n  /v1/server/customers:\n    post:\n      tags:\n        - server\n      summary: Create a customer\n      description: create a customer\n      operationId: createCustomer\n      requestBody:\n        description: request body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n    get:\n      tags:\n        - server\n      summary: get customers\n      description: get customers\n      operationId: getCustomers\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Customer'\ncomponents:\n  schemas:\n    CustomerRequest:\n      type: object\n      required:\n        - email\n      properties:\n        fullName:\n          type: string\n          example: Nguyen Minh Duc\n          minLength: 1\n          maxLength: 100\n        email:\n          type: string\n          format: email\n          example: ducnguyen@gmail.com\n        address:\n          type: string\n          example: 3/115 Binh Duong\n        phone:\n          type: string\n          example: 0999123445\n        gender:\n          type: string\n          enum: [M, F]\n        dob:\n          type: string\n          format: date\n    Customer:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        fullName:\n          type: string\n        email:\n          type: string\n          format: email\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum: [ M, F ]\n        dob:\n          type: string\n          format: date\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n</code></pre> <ul> <li>Then let's build our source code and go to generated source, then you can see our fields have been added validation as below.</li> </ul> CustomerRequest.java<pre><code>....\n\n/**  \n * Get fullName * @return fullName  \n*/  \n@Size(min = 1, max = 100)   \n@Schema(name = \"fullName\", example = \"Nguyen Minh Duc\", required = false)  \npublic String getFullName() {  \n  return fullName;  \n}  \n\npublic void setFullName(String fullName) {  \n  this.fullName = fullName;  \n}\n\n....\n</code></pre> <ul> <li>Now, in case you want to add some custom annotations of <code>lombok</code> into your model classes, you can use the <code>configOptions</code> with properties <code>additionalModelTypeAnnotations</code>. In which   In which you should define full path of your annotations. Ex: <code>@lombok.Builder</code>. See example below.</li> </ul> pom.xml<pre><code>&lt;build&gt;\n            &lt;plugins&gt;\n                    &lt;plugin&gt;\n                            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                            &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                            &lt;version&gt;6.0.0&lt;/version&gt;\n                            &lt;executions&gt;\n                                    &lt;execution&gt;\n                                            &lt;goals&gt;\n                                                    &lt;goal&gt;generate&lt;/goal&gt;\n                                            &lt;/goals&gt;\n                                            &lt;configuration&gt;\n                                                    &lt;!-- path to the openapi file spec `.yml` --&gt;\n                                                    &lt;inputSpec&gt;\n                                                            ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                                                    &lt;/inputSpec&gt;\n                                                    &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                                                    &lt;!-- generated package for api interface --&gt;\n                                                    &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                                                    &lt;!-- generated package for models --&gt;\n                                                    &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                                                    &lt;!-- using supportingFilesToGenerate --&gt;\n                                                    &lt;supportingFilesToGenerate&gt;\n                                                            ApiUtil.java\n                                                    &lt;/supportingFilesToGenerate&gt;\n                                                    &lt;configOptions&gt;\n                                                            &lt;delegatePattern&gt;false&lt;/delegatePattern&gt;\n                                                            &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                                            &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                                            &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                                                            &lt;openApiNullable&gt;true&lt;/openApiNullable&gt;\n                                                            &lt;additionalModelTypeAnnotations&gt;\n                                                                    @lombok.Builder\n                                                                    @lombok.NoArgsConstructor\n                                                                    @lombok.AllArgsConstructor\n                                                            &lt;/additionalModelTypeAnnotations&gt;\n                                                    &lt;/configOptions&gt;\n                                            &lt;/configuration&gt;\n                                    &lt;/execution&gt;\n                            &lt;/executions&gt;\n                    &lt;/plugin&gt;\n            &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> CustomerRequest.java<pre><code>....\n\n/**\n * CustomerRequest\n */\n@lombok.Builder\n@lombok.NoArgsConstructor\n@lombok.AllArgsConstructor\n\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-10-14T19:29:25.091+07:00[Asia/Ho_Chi_Minh]\")\npublic class CustomerRequest {\n\n  @JsonProperty(\"fullName\")\n  private String fullName;\n\n  @JsonProperty(\"email\")\n  private String email;\n\n  @JsonProperty(\"address\")\n  private String address;\n\n....\n\n}\n</code></pre> Customer.java<pre><code>....\n\n/**\n * Customer\n */\n@lombok.Builder\n@lombok.NoArgsConstructor\n@lombok.AllArgsConstructor\n\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-10-14T19:29:25.091+07:00[Asia/Ho_Chi_Minh]\")\npublic class Customer {\n\n  @JsonProperty(\"id\")\n  private UUID id;\n\n  @JsonProperty(\"fullName\")\n  private String fullName;\n\n  @JsonProperty(\"email\")\n  private String email;\n\n....\n\n}\n</code></pre> <p>Note: when you use <code>additionalModelTypeAnnotations</code> in configOption so it will be applied to all your generated models.</p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/#using_supported_vendor_extensions","title":"Using Supported Vendor Extensions","text":"<ul> <li>Now, let's assume that you have some special annotations and you just want to apply them on some special models not on all models. In this case, you may want to use the <code>supported vendor extesions</code> of OpenApi.</li> <li>For example we will add the annotation <code>@lombok.Setter</code> for only <code>CustomerRequest</code> model class and annotation <code>@javax.validation.constraints.PastOrPresent</code> for only field <code>dob</code> in <code>Customer</code> model class. </li> <li>Let's use <code>x-class-extra-annotation</code> to add annotation  for model <code>CustomerRequest</code> and  the <code>x-field-extra-annotation</code> to add annotation for special field of <code>Customer</code> model in openapi-server.yml`  as below.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Openapi Server\n  description: 'This is the Openapi Specification For Feign Server'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\ntags:\n  - name: server\n    description: all server apis\n\npaths:\n  /v1/server/customers:\n    post:\n      tags:\n        - server\n      summary: Create a customer\n      description: create a customer\n      operationId: createCustomer\n      requestBody:\n        description: request body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n    get:\n      tags:\n        - server\n      summary: get customers\n      description: get customers\n      operationId: getCustomers\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Customer'\ncomponents:\n  schemas:\n    CustomerRequest:\n      type: object\n      x-class-extra-annotation: \"@lombok.Setter\"\n      required:\n        - email\n      properties:\n        fullName:\n          type: string\n          example: Nguyen Minh Duc\n          minLength: 1\n          maxLength: 100\n        email:\n          type: string\n          format: email\n          example: ducnguyen@gmail.com\n        address:\n          type: string\n          example: 3/115 Binh Duong\n        phone:\n          type: string\n          example: 0999123445\n        gender:\n          type: string\n          enum: [M, F]\n        dob:\n          type: string\n          format: date\n    Customer:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        fullName:\n          type: string\n        email:\n          type: string\n          format: email\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum: [ M, F ]\n        dob:\n          type: string\n          format: date\n          x-field-extra-annotation: \"@javax.validation.constraints.PastOrPresent\"\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n</code></pre> <ul> <li>Now, let's build our source code and go to generated source.</li> <li>Then you can see in the <code>CustomerRequest</code> model you will see there is annotation <code>@lombok.Setter</code> above the class. But you will not see it on <code>Customer</code> model class.</li> </ul> CustomerRequest.java<pre><code>....\n\n/**\n * CustomerRequest\n */\n@lombok.Builder\n@lombok.NoArgsConstructor\n@lombok.AllArgsConstructor\n\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-10-15T09:46:47.456+07:00[Asia/Ho_Chi_Minh]\")\n@lombok.Setter\npublic class CustomerRequest {\n\n  @JsonProperty(\"fullName\")\n  private String fullName;\n\n  @JsonProperty(\"email\")\n  private String email;\n\n  @JsonProperty(\"address\")\n  private String address;\n\n....\n\n}\n</code></pre> Customer.java<pre><code>....\n\n/**\n * Customer\n */\n@lombok.Builder\n@lombok.NoArgsConstructor\n@lombok.AllArgsConstructor\n\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-10-15T09:46:47.456+07:00[Asia/Ho_Chi_Minh]\")\npublic class Customer {\n\n  @JsonProperty(\"id\")\n  private UUID id;\n\n  @JsonProperty(\"fullName\")\n  private String fullName;\n\n  @JsonProperty(\"email\")\n  private String email;\n\n....\n\n}\n</code></pre> <ul> <li>Then let's continue to check the <code>Customer</code> model class, you will see the special annotation <code>PastOrPresent</code> for field <code>dob</code> as below. But you will not see it in the <code>CustomerRequest</code> model class.</li> </ul> Customer.java<pre><code>....\n\n@JsonProperty(\"gender\")\nprivate GenderEnum gender;\n\n@JsonProperty(\"dob\")\n@javax.validation.constraints.PastOrPresent\n@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\nprivate LocalDate dob;\n\n@JsonProperty(\"createdAt\")\n@DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)\nprivate OffsetDateTime createdAt;\n\n....\n</code></pre> CustomerRequest.java<pre><code>....\n\n@JsonProperty(\"gender\")\nprivate GenderEnum gender;\n\n@JsonProperty(\"dob\")\n@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\nprivate LocalDate dob;\n\npublic CustomerRequest fullName(String fullName) {\n    this.fullName = fullName;\n    return this;\n}\n\n....\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/#using_vendor_extensions","title":"Using Vendor Extensions","text":"<ul> <li>As you can see in the example above, we can add specific annotations for classes and fields that we want. However, every time we add an annotation we have to put full path of it and what happens if we have to add multiple annotations on a specific field or a specific class?</li> <li>If we use the <code>Supported Vendor Extension</code> above, we can do it in the <code>openapi-server.yml</code> like below.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Openapi Server\n  description: 'This is the Openapi Specification For Feign Server'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\ntags:\n  - name: server\n    description: all server apis\n\npaths:\n  /v1/server/customers:\n    post:\n      tags:\n        - server\n      summary: Create a customer\n      description: create a customer\n      operationId: createCustomer\n      requestBody:\n        description: request body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n    get:\n      tags:\n        - server\n      summary: get customers\n      description: get customers\n      operationId: getCustomers\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Customer'\ncomponents:\n  schemas:\n    CustomerRequest:\n      type: object\n      x-class-extra-annotation: \"@lombok.Setter/n@lombok.Getter\"\n      required:\n        - email\n      properties:\n        fullName:\n          type: string\n          example: Nguyen Minh Duc\n          minLength: 1\n          maxLength: 100\n        email:\n          type: string\n          format: email\n          example: ducnguyen@gmail.com\n        address:\n          type: string\n          example: 3/115 Binh Duong\n        phone:\n          type: string\n          example: 0999123445\n        gender:\n          type: string\n          enum: [M, F]\n        dob:\n          type: string\n          format: date\n    Customer:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        fullName:\n          type: string\n        email:\n          type: string\n          format: email\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum: [ M, F ]\n        dob:\n          type: string\n          format: date\n          x-field-extra-annotation: \"@javax.validation.constraints.PastOrPresent/n@javax.validation.constraints.Size(min = 3, max=20)\"\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n</code></pre> <ul> <li>As you can see, we have to put full path of annotation and for multiple annotation we have to put   space or \"/n\". It is bad for developer to write and for people who read this OpenApi specification. Moreover, when the models are generated, so also see annotation with full path, so it is not nice,  we would like to see the <code>imports</code> on the top of the generated class and only annotations on classes or fields.</li> <li>So, using <code>Vendor Extension</code> will help us to solve this issue. </li> <li>Because in this example, we use annotations of javax validator so to make sure this library is not imported by default and we are controlling imports for annotations so we will disable <code>useBeanValidation</code> and we also need to add <code>templateDirectory</code> for using custom OpenApi templates.</li> </ul> pom.xml<pre><code>  &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;6.0.0&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;!-- path to the openapi file spec `.yml` --&gt;\n                            &lt;inputSpec&gt;\n                                ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                            &lt;/inputSpec&gt;\n                            &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                            &lt;!-- generated package for api interface --&gt;\n                            &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                            &lt;!-- generated package for models --&gt;\n                            &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                            &lt;!-- using supportingFilesToGenerate --&gt;\n                            &lt;supportingFilesToGenerate&gt;\n                                ApiUtil.java\n                            &lt;/supportingFilesToGenerate&gt;\n                            &lt;!-- using templateDirectory custom templates for openapi generator --&gt;                            &lt;templateDirectory&gt;${project.basedir}/src/main/resources/templates/java-spring&lt;/templateDirectory&gt;\n                            &lt;configOptions&gt;\n                                &lt;delegatePattern&gt;false&lt;/delegatePattern&gt;\n                                &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                &lt;useBeanValidation&gt;false&lt;/useBeanValidation&gt;\n                                &lt;additionalModelTypeAnnotations&gt;\n                                    @lombok.Builder\n                                    @lombok.NoArgsConstructor\n                                    @lombok.AllArgsConstructor\n                                &lt;/additionalModelTypeAnnotations&gt;\n                                &lt;openApiNullable&gt;false&lt;/openApiNullable&gt;\n                            &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <ul> <li>Then, we can go to this github repo to download full templates of OpenApi generator of <code>JavaSpring</code> and put it into our resources folder.</li> </ul> <ul> <li>Then we can create a custom vendor extension <code>x-internal-imports</code> for <code>list of imports library</code> by adding the mustache script below into the <code>model.mustache</code>.</li> </ul> <pre><code>{{#vendorExtensions.x-internal-imports}}\n{{{.}}}\n{{/vendorExtensions.x-internal-imports}}\n</code></pre> <p>model.mustache<pre><code>package {{package}};\n\nimport java.net.URI;\nimport java.util.Objects;\n{{#imports}}import {{import}};\n{{/imports}}\n{{#openApiNullable}}\nimport org.openapitools.jackson.nullable.JsonNullable;\n{{/openApiNullable}}\n{{#serializableModel}}\nimport java.io.Serializable;\n{{/serializableModel}}\nimport java.time.OffsetDateTime;\n{{#useBeanValidation}}\n{{#useJakartaEe}}\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.*;\n{{/useJakartaEe}}\n{{^useJakartaEe}}\nimport javax.validation.Valid;\nimport javax.validation.constraints.*;\n{{/useJakartaEe}}\n{{/useBeanValidation}}\n{{#performBeanValidation}}\nimport org.hibernate.validator.constraints.*;\n{{/performBeanValidation}}\n{{#jackson}}\n{{#withXml}}\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n{{/withXml}}\n{{/jackson}}\n{{#swagger2AnnotationLibrary}}\nimport io.swagger.v3.oas.annotations.media.Schema;\n{{/swagger2AnnotationLibrary}}\n\n{{#withXml}}\nimport javax.xml.bind.annotation.*;\n{{/withXml}}\n{{^parent}}\n{{#hateoas}}\nimport org.springframework.hateoas.RepresentationModel;\n{{/hateoas}}\n{{/parent}}\n\nimport java.util.*;\n{{#useJakartaEe}}\nimport jakarta.annotation.Generated;\n{{/useJakartaEe}}\n{{^useJakartaEe}}\nimport javax.annotation.Generated;\n{{/useJakartaEe}}\n\n{{#models}}\n{{#model}}\n\n{{#vendorExtensions.x-internal-imports}}\n{{{.}}}\n{{/vendorExtensions.x-internal-imports}}\n\n{{#isEnum}}\n{{&gt;enumOuterClass}}\n{{/isEnum}}\n{{^isEnum}}\n{{#vendorExtensions.x-is-one-of-interface}}{{&gt;oneof_interface}}{{/vendorExtensions.x-is-one-of-interface}}\n{{^vendorExtensions.x-is-one-of-interface}}{{&gt;pojo}}{{/vendorExtensions.x-is-one-of-interface}}\n{{/isEnum}}\n{{/model}}\n{{/models}}\n</code></pre> - Then for using list of annotations on specific classes and fields, we can go to <code>pojo.mustache</code> file and edit the <code>{{{vendorExtensions.x-class-extra-annotation}}}</code> and <code>{{{vendorExtensions.x-field-extra-annotation}}}</code>to <code>{{{.}}}</code> as below.</p> pojo.mustache<pre><code>/**\n * {{description}}{{^description}}{{classname}}{{/description}}\n */\n{{&gt;additionalModelTypeAnnotations}}\n{{#description}}\n{{#swagger1AnnotationLibrary}}\n@ApiModel(description = \"{{{description}}}\")\n{{/swagger1AnnotationLibrary}}\n{{#swagger2AnnotationLibrary}}\n@Schema({{#name}}name = \"{{name}}\", {{/name}}description = \"{{{description}}}\")\n{{/swagger2AnnotationLibrary}}\n{{/description}}\n{{#discriminator}}\n{{&gt;typeInfoAnnotation}}\n{{/discriminator}}\n{{#jackson}}\n{{#isClassnameSanitized}}\n@JsonTypeName(\"{{name}}\")\n{{/isClassnameSanitized}}\n{{/jackson}}\n{{#withXml}}\n{{&gt;xmlAnnotation}}\n{{/withXml}}\n{{&gt;generatedAnnotation}}\n{{#vendorExtensions.x-class-extra-annotation}}\n{{{.}}}\n{{/vendorExtensions.x-class-extra-annotation}}\npublic class {{classname}}{{#parent}} extends {{{parent}}}{{/parent}}{{^parent}}{{#hateoas}} extends RepresentationModel&lt;{{classname}}&gt; {{/hateoas}}{{/parent}}{{#vendorExtensions.x-implements}}{{#-first}} implements {{{.}}}{{/-first}}{{^-first}}, {{{.}}}{{/-first}}{{/vendorExtensions.x-implements}} {\n{{#serializableModel}}\n\n  private static final long serialVersionUID = 1L;\n{{/serializableModel}}\n  {{#vars}}\n\n    {{#isEnum}}\n    {{^isContainer}}\n{{&gt;enumClass}}\n    {{/isContainer}}\n    {{#isContainer}}\n    {{#mostInnerItems}}\n{{&gt;enumClass}}\n    {{/mostInnerItems}}\n    {{/isContainer}}\n    {{/isEnum}}\n  {{#jackson}}\n  @JsonProperty(\"{{baseName}}\")\n  {{#withXml}}\n  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace=\"{{.}}\", {{/xmlNamespace}}localName = \"{{xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}\")\n  {{/withXml}}\n  {{/jackson}}\n  {{#gson}}\n  @SerializedName(\"{{baseName}}\")\n  {{/gson}}\n  {{#vendorExtensions.x-field-extra-annotation}}\n  {{{.}}}\n  {{/vendorExtensions.x-field-extra-annotation}}\n  {{#isContainer}}\n  {{#useBeanValidation}}@Valid{{/useBeanValidation}}\n  {{#openApiNullable}}\n  private {{&gt;nullableDataType}} {{name}} = {{#isNullable}}JsonNullable.undefined(){{/isNullable}}{{^isNullable}}{{#required}}{{{defaultValue}}}{{/required}}{{^required}}null{{/required}}{{/isNullable}};\n  {{/openApiNullable}}\n  {{^openApiNullable}}\n  private {{&gt;nullableDataType}} {{name}} = {{#required}}{{{defaultValue}}}{{/required}}{{^required}}null{{/required}};\n  {{/openApiNullable}}\n  {{/isContainer}}\n  {{^isContainer}}\n  {{#isDate}}\n  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\n  {{/isDate}}\n  {{#isDateTime}}\n  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)\n  {{/isDateTime}}\n  {{#openApiNullable}}\n  private {{&gt;nullableDataType}} {{name}}{{#isNullable}} = JsonNullable.undefined(){{/isNullable}}{{^isNullable}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isNullable}};\n  {{/openApiNullable}}\n  {{^openApiNullable}}\n  private {{&gt;nullableDataType}} {{name}}{{#isNullable}} = null{{/isNullable}}{{^isNullable}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isNullable}};\n  {{/openApiNullable}}\n  {{/isContainer}}\n  {{/vars}}\n  {{#vars}}\n\n  {{! begin feature: fluent setter methods }}\n  public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {\n    {{#openApiNullable}}\n    this.{{name}} = {{#isNullable}}JsonNullable.of({{name}}){{/isNullable}}{{^isNullable}}{{name}}{{/isNullable}};\n    {{/openApiNullable}}\n    {{^openApiNullable}}\n    this.{{name}} = {{name}};\n    {{/openApiNullable}}\n    return this;\n  }\n  {{#isArray}}\n\n  public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {\n    {{#openApiNullable}}\n    {{^required}}\n    if (this.{{name}} == null{{#isNullable}} || !this.{{name}}.isPresent(){{/isNullable}}) {\n      this.{{name}} = {{#isNullable}}JsonNullable.of({{{defaultValue}}}){{/isNullable}}{{^isNullable}}{{{defaultValue}}}{{/isNullable}};\n    }\n    {{/required}}\n    this.{{name}}{{#isNullable}}.get(){{/isNullable}}.add({{name}}Item);\n    {{/openApiNullable}}\n    {{^openApiNullable}}\n    if (this.{{name}} == null) {\n      this.{{name}} = {{{defaultValue}}};\n    }\n    this.{{name}}.add({{name}}Item);\n    {{/openApiNullable}}\n    return this;\n  }\n  {{/isArray}}\n  {{#isMap}}\n\n  public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {\n    {{^required}}\n    if (this.{{name}} == null) {\n      this.{{name}} = {{{defaultValue}}};\n    }\n    {{/required}}\n    this.{{name}}.put(key, {{name}}Item);\n    return this;\n  }\n  {{/isMap}}\n  {{! end feature: fluent setter methods }}\n  {{! begin feature: getter and setter }}\n\n  /**\n  {{#description}}\n   * {{{.}}}\n  {{/description}}\n  {{^description}}\n   * Get {{name}}\n  {{/description}}\n  {{#minimum}}\n   * minimum: {{.}}\n  {{/minimum}}\n  {{#maximum}}\n   * maximum: {{.}}\n  {{/maximum}}\n   * @return {{name}}\n  */\n  {{#vendorExtensions.x-extra-annotation}}\n  {{{vendorExtensions.x-extra-annotation}}}\n  {{/vendorExtensions.x-extra-annotation}}\n  {{#useBeanValidation}}\n  {{&gt;beanValidation}}\n  {{/useBeanValidation}}\n  {{^useBeanValidation}}\n  {{#required}}@NotNull{{/required}}\n  {{/useBeanValidation}}\n  {{#swagger2AnnotationLibrary}}\n  @Schema(name = \"{{{baseName}}}\", {{#isReadOnly}}accessMode = Schema.AccessMode.READ_ONLY, {{/isReadOnly}}{{#example}}example = \"{{{.}}}\", {{/example}}{{#description}}description = \"{{{.}}}\", {{/description}}required = {{{required}}})\n  {{/swagger2AnnotationLibrary}}\n  {{#swagger1AnnotationLibrary}}\n  @ApiModelProperty({{#example}}example = \"{{{.}}}\", {{/example}}{{#required}}required = {{required}}, {{/required}}{{#isReadOnly}}readOnly = {{{isReadOnly}}}, {{/isReadOnly}}value = \"{{{description}}}\")\n  {{/swagger1AnnotationLibrary}}\n  public {{&gt;nullableDataType}} {{getter}}() {\n    return {{name}};\n  }\n\n  {{#vendorExtensions.x-setter-extra-annotation}}\n  {{{vendorExtensions.x-setter-extra-annotation}}}\n  {{/vendorExtensions.x-setter-extra-annotation}}\n  public void {{setter}}({{&gt;nullableDataType}} {{name}}) {\n    this.{{name}} = {{name}};\n  }\n  {{! end feature: getter and setter }}\n  {{/vars}}\n  {{#parentVars}}\n\n  {{! begin feature: fluent setter methods for inherited properties }}\n  public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {\n    super.{{setter}}({{name}});\n    return this;\n  }\n  {{#isArray}}\n\n  public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {\n    super.add{{nameInCamelCase}}Item({{name}}Item);\n    return this;\n  }\n  {{/isArray}}\n  {{#isMap}}\n\n  public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {\n    super.put{{nameInCamelCase}}Item(key, {{name}}Item);\n    return this;\n  }\n  {{/isMap}}\n  {{! end feature: fluent setter methods for inherited properties }}\n  {{/parentVars}}\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }{{#hasVars}}\n    {{classname}} {{classVarName}} = ({{classname}}) o;\n    return {{#vars}}{{#vendorExtensions.x-is-jackson-optional-nullable}}equalsNullable(this.{{name}}, {{classVarName}}.{{name}}){{/vendorExtensions.x-is-jackson-optional-nullable}}{{^vendorExtensions.x-is-jackson-optional-nullable}}{{#isByteArray}}Arrays{{/isByteArray}}{{^isByteArray}}Objects{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{name}}){{/vendorExtensions.x-is-jackson-optional-nullable}}{{^-last}} &amp;&amp;\n        {{/-last}}{{/vars}}{{#parent}} &amp;&amp;\n        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}\n    return true;{{/hasVars}}\n  }\n  {{#vendorExtensions.x-jackson-optional-nullable-helpers}}\n\n  private static &lt;T&gt; boolean equalsNullable(JsonNullable&lt;T&gt; a, JsonNullable&lt;T&gt; b) {\n    return a == b || (a != null &amp;&amp; b != null &amp;&amp; a.isPresent() &amp;&amp; b.isPresent() &amp;&amp; Objects.deepEquals(a.get(), b.get()));\n  }\n  {{/vendorExtensions.x-jackson-optional-nullable-helpers}}\n\n  @Override\n  public int hashCode() {\n    return Objects.hash({{#vars}}{{#vendorExtensions.x-is-jackson-optional-nullable}}hashCodeNullable({{name}}){{/vendorExtensions.x-is-jackson-optional-nullable}}{{^vendorExtensions.x-is-jackson-optional-nullable}}{{^isByteArray}}{{name}}{{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{name}}){{/isByteArray}}{{/vendorExtensions.x-is-jackson-optional-nullable}}{{^-last}}, {{/-last}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});\n  }\n  {{#vendorExtensions.x-jackson-optional-nullable-helpers}}\n\n  private static &lt;T&gt; int hashCodeNullable(JsonNullable&lt;T&gt; a) {\n    if (a == null) {\n      return 1;\n    }\n    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;\n  }\n  {{/vendorExtensions.x-jackson-optional-nullable-helpers}}\n\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"class {{classname}} {\\n\");\n    {{#parent}}\n    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n    {{/parent}}\n    {{#vars}}sb.append(\"    {{name}}: \").append(toIndentedString({{name}})).append(\"\\n\");\n    {{/vars}}sb.append(\"}\");\n    return sb.toString();\n  }\n\n  /**\n   * Convert the given object to string with each line indented by 4 spaces\n   * (except the first line).\n   */\n  private String toIndentedString(Object o) {\n    if (o == null) {\n      return \"null\";\n    }\n    return o.toString().replace(\"\\n\", \"\\n    \");\n  }\n}\n</code></pre> <ul> <li>Finally, let's go to OpenApi specification <code>openapi-server.yml</code> and you can use custom vendor extension <code>x-internal-imports</code> to create a list of import library for your specific model. For <code>x-class-extra-annotation</code> and <code>x-field-extra-annotation</code> you can use single or list of annotations.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Openapi Server\n  description: 'This is the Openapi Specification For Feign Server'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\ntags:\n- name: server\n  description: all server apis\n\npaths:\n  /v1/server/customers:\n    post:\n      tags:\n      - server\n      summary: Create a customer\n      description: create a customer\n      operationId: createCustomer\n      requestBody:\n        description: request body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n    get:\n      tags:\n      - server\n      summary: get customers\n      description: get customers\n      operationId: getCustomers\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Customer'\ncomponents:\n  schemas:\n    CustomerRequest:\n      type: object\n      x-class-extra-annotation:\n        - \"@Setter\"\n        - \"@Getter\"\n      x-internal-imports:\n        - \"import lombok.Setter;\"\n        - \"import lombok.Getter;\"\n        - \"import javax.validation.constraints.Max;\"\n        - \"import javax.validation.constraints.Min;\"\n        - \"import javax.validation.constraints.Size;\"\n      properties:\n        fullName:\n          type: string\n          example: Nguyen Minh Duc\n        age:\n          type: integer\n          format: int32\n          x-field-extra-annotation:\n            - \"@Min(value = 18)\"\n            - \"@Max(value = 200)\"\n        email:\n          type: string\n          format: email\n          example: ducnguyen@gmail.com\n        address:\n          type: string\n          x-field-extra-annotation: \"@Size(min = 4, max = 200)\"\n          example: 3/115 Binh Duong\n        phone:\n          type: string\n          example: 0999123445\n        gender:\n          type: string\n          enum: [M, F]\n        dob:\n          type: string\n          format: date\n    Customer:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          minLength: 16\n        fullName:\n          type: string\n          minLength: 1\n        email:\n          type: string\n          format: email\n          minLength: 3\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum: [ M, F ]\n        dob:\n          type: string\n          format: date\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n</code></pre> <ul> <li>Finally, after build our project, we can see the generated <code>CustomerRequest</code> model as below.</li> </ul> CustomerRequest.java<pre><code>package com.springboot.cloud.openfeign.openapi.server.app.model;\n\nimport java.net.URI;\nimport java.util.Objects;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport java.time.LocalDate;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport java.time.OffsetDateTime;\nimport io.swagger.v3.oas.annotations.media.Schema;\n\n\nimport java.util.*;\nimport javax.annotation.Generated;\n\n\nimport lombok.Setter;\nimport lombok.Getter;\nimport javax.validation.constraints.Max;\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.Size;\n\n\n/**\n * CustomerRequest\n */\n@lombok.Builder\n@lombok.NoArgsConstructor\n@lombok.AllArgsConstructor\n\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-10-15T11:20:37.988+07:00[Asia/Ho_Chi_Minh]\")\n@Setter\n@Getter\npublic class CustomerRequest {\n\n  @JsonProperty(\"fullName\")\n  private String fullName;\n\n  @JsonProperty(\"age\")\n  @Min(value = 18)\n  @Max(value = 200)\n  private Integer age;\n\n  @JsonProperty(\"email\")\n  private String email;\n\n  @JsonProperty(\"address\")\n  @Size(min = 4, max = 200)\n  private String address;\n\n....\n\n}\n</code></pre> <ul> <li>So, we had the list of imports, annotations for classes and fields as we defined for the <code>CustomerRequest</code> in the <code>openapi-server.yml</code> and you will not see them in the <code>Customer</code> model.</li> </ul> Customer.java<pre><code>package com.springboot.cloud.openfeign.openapi.server.app.model;\n\nimport java.net.URI;\nimport java.util.Objects;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport java.time.LocalDate;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport java.time.OffsetDateTime;\nimport io.swagger.v3.oas.annotations.media.Schema;\n\n\nimport java.util.*;\nimport javax.annotation.Generated;\n\n/**\n * Customer\n */\n@lombok.Builder\n@lombok.NoArgsConstructor\n@lombok.AllArgsConstructor\n\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-10-15T11:20:37.988+07:00[Asia/Ho_Chi_Minh]\")\npublic class Customer {\n\n  @JsonProperty(\"id\")\n  private UUID id;\n\n  @JsonProperty(\"fullName\")\n  private String fullName;\n\n  @JsonProperty(\"email\")\n  private String email;\n\n  @JsonProperty(\"address\")\n  private String address;\n\n  @JsonProperty(\"phone\")\n  private String phone;\n\n\n....\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/#see_also","title":"See Also","text":"<ul> <li>Spring Boot With OpenApi</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi%20Advances/#references","title":"References","text":"<ul> <li>OpenApi</li> <li>swagger editor</li> <li>OpenApi Git Config.</li> <li>OpenApi Specification</li> <li>OpenApi Git Templates.</li> <li>ConfigOptioons Example</li> <li>Supported Vendor Extensions Example</li> <li>Vendor Extensions Example</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/","title":"Spring Boot With OpenApi","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/#what_is_the_openapi","title":"What Is The OpenApi?","text":"<ul> <li> <p>The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.</p> </li> <li> <p>An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.</p> </li> <li>More Information.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/#dependencies_and_plugins","title":"Dependencies And Plugins","text":"<ul> <li>You need to import some dependencies below into <code>pom.xml</code> of your spring boot project for needed imports, validation annotations and OpenApi UI for your generated classes.  </li> </ul> pom.xml<pre><code>...\n\n&lt;!--Openapi UI with validation--&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;  \n    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;  \n    &lt;version&gt;2.13.1&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;  \n    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;  \n    &lt;version&gt;2.13.1&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.openapitools&lt;/groupId&gt;  \n    &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;  \n    &lt;version&gt;0.2.2&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;  \n    &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;  \n    &lt;version&gt;1.6.5&lt;/version&gt;  \n&lt;/dependency&gt;\n\n...\n</code></pre> <ul> <li>Then for the OpenApi Generator, let's put the plugin below into your <code>pom.xml</code> with some configurations.</li> </ul> pom.xml<pre><code>   &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;5.4.0&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;!-- path to the openapi file spec `.yml` --&gt;\n                            &lt;inputSpec&gt;\n                                ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                            &lt;/inputSpec&gt;\n                            &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                            &lt;!-- generated package for api interface --&gt;\n                            &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                            &lt;!-- generated package for models --&gt;\n                            &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                            &lt;!-- using supportingFilesToGenerate --&gt;\n                            &lt;supportingFilesToGenerate&gt;\n                                ApiUtil.java\n                            &lt;/supportingFilesToGenerate&gt;\n                            &lt;configOptions&gt;\n                                &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                                &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                            &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/#openapi_implementation_and_configuration","title":"OpenApi Implementation And Configuration","text":"<ul> <li>Now let create swagger package in the <code>resources</code> folder and create <code>swagger-input.yml</code> with your api definitions. You can use swagger editor to write your api definitions easily. The example swagger yml will look like below.</li> </ul> swagger-input.yml<pre><code>openapi: 3.0.1\ninfo:\n  title: Swagger Openapi Server\n  description: 'This is the Openapi Specification For Feign Server'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\ntags:\n- name: server\n  description: all server apis\npaths:\n  /v1/server/customers:\n    post:\n      tags:\n      - server\n      summary: Create a customer\n      description: create a customer\n      operationId: createCustomer\n      requestBody:\n        description: request body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n    get:\n      tags:\n      - server\n      summary: get customers\n      description: get customers\n      operationId: getCustomers\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Customer'\ncomponents:\n  schemas:\n    CustomerRequest:\n      type: object\n      properties:\n        fullName:\n          type: string\n          example: Nguyen Minh Duc\n        email:\n          type: string\n          format: email\n          example: ducnguyen@gmail.com\n        address:\n          type: string\n          example: 3/115 Binh Duong\n        phone:\n          type: string\n          example: 0999123445\n        gender:\n          type: string\n          enum: [M, F]\n        dob:\n          type: string\n          format: date\n    Customer:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        fullName:\n          type: string\n        email:\n          type: string\n          format: email\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum: [ M, F ]\n        dob:\n          type: string\n          format: date\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/#testing","title":"Testing","text":"<ul> <li>Now, you will use command <code>mvn clean package</code> to build your project with swagger then you will see the generated source as in the image below</li> </ul> <ul> <li>Now, let create a <code>ServerController</code> component and implement <code>V1Api</code> from generated source, all your apis was generated with validations following your openapi specification, so you just need implement the generated api for using.</li> </ul> ServerController.java<pre><code>package com.springboot.project.openapi.app.controller;\n\nimport com.springboot.cloud.openfeign.openapi.server.app.api.V1Api;\nimport com.springboot.cloud.openfeign.openapi.server.app.model.Customer;\nimport com.springboot.cloud.openfeign.openapi.server.app.model.CustomerRequest;\nimport com.springboot.project.openapi.app.service.CustomerService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class ServerController implements V1Api {\n\n\n    private final CustomerService customerService;\n\n\n    @Override\n    public ResponseEntity&lt;UUID&gt; createCustomer(CustomerRequest customerRequest) {\n        return new ResponseEntity&lt;&gt;(this.customerService.createCustomer(customerRequest), HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;Customer&gt;&gt; getCustomers() {\n        return new ResponseEntity&lt;&gt;(this.customerService.getCustomers(), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>You can see full source code here which includes samples for, <code>Repository</code> <code>Entity</code> and  <code>Service</code>. Because we just focus on OpenApi so we will not put these implementation details here.</li> <li>Now let's start your Spring Boot service and go to <code>http://localhost:8080/swagger-ui/index.html</code> to check the openapi UI.</li> </ul> <ul> <li>You can also execute api on the openapi ui directly instead of using postman to execute apis.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/#advances","title":"Advances","text":"<ul> <li>By default, OpenApi will automatically scan all your controllers in project and generate all UIs for them. However, in some case you want to hide your sensitive apis from OpenApi UI, you can create a configuration class with content as below.</li> </ul> OpenApiConfig.java<pre><code>package com.springboot.project.openapi.app.config;\n\nimport org.springdoc.core.GroupedOpenApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class OpenApiConfig {\n\n    @Bean\n    public GroupedOpenApi groupedOpenApiConfiguration() {\n        return GroupedOpenApi.builder()\n                .group(\"server\")\n                .pathsToMatch(\"/v1/**\")\n                .build();\n    }\n}\n</code></pre> <ul> <li>In which, only api paths that matched in the <code>pathsToMatch</code>  configuration will be generated on the UI. Other api paths will not generated. The UI now will look like below with selected <code>group</code> that you configured.</li> </ul> <ul> <li>Sometimes, you want to take more controls on openapi generator like using Java Instant for generated models then you can add more configuration option as below.</li> </ul> <p>pom.xml<pre><code>&lt;configOptions&gt;\n\n    ...\n\n    &lt;typeMappings&gt;\n             &lt;typeMapping&gt;OffsetDateTime=Instant&lt;/typeMapping&gt;\n    &lt;/typeMappings&gt;\n    &lt;importMappings&gt;                                \n             &lt;importMapping&gt;java.time.OffsetDateTime=java.time.Instant&lt;/importMapping&gt;\n    &lt;/importMappings&gt;\n\n    ...\n\n&lt;/configOptions&gt;\n</code></pre> - You can check more configuration options in this git source. - Moreover, you can control generated models  classes by creating a <code>templates</code> package in your <code>resources</code> directory. Then in your <code>pom.xml</code> add <code>templateDirectory</code> tag with the path to your custom templates. Your plugin will look like below.</p> pom.xml<pre><code>    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;5.4.0&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;!-- path to the openapi file spec `.yml` --&gt;\n                            &lt;inputSpec&gt;\n                                ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                            &lt;/inputSpec&gt;\n                            &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                            &lt;!-- generated package for api interface --&gt;\n                            &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                            &lt;!-- generated package for models --&gt;\n                            &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                            &lt;!-- using supportingFilesToGenerate --&gt;\n                            &lt;supportingFilesToGenerate&gt;\n                                ApiUtil.java\n                            &lt;/supportingFilesToGenerate&gt;\n                            &lt;!-- using templateDirectory custom templates for openapi generator --&gt;\n                            &lt;templateDirectory&gt;${project.basedir}/src/main/resources/templates&lt;/templateDirectory&gt;\n                            &lt;configOptions&gt;\n                                &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                                &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                            &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <ul> <li>Then add your custom template <code>mustaches</code> file there. Note the name of mustaches files have to be the same as in this repository.</li> <li>You can copy the content of the mustaches files as in the repo above and edit the content as the way you want.</li> <li>For example, I want to add <code>@JsonIgnoreProperties</code> into every generated models. So I can do it as the image below. </li> <li>Then build your project again and check your generated models, you can see the annotation as below </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20OpenApi/#references","title":"References","text":"<ul> <li>OpenApi</li> <li>swagger editor</li> <li>OpenApi Git Config.</li> <li>OpenApi Git Templates.</li> <li>Full Sample SourceCode</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20SonarQube/","title":"Spring Boot With SonarQube","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20SonarQube/#sonarqube_server","title":"SonarQube Server","text":"<ul> <li>You need to create a sonarqube server, if you don\u2019t know how to create one so you can view\u00a0Docker With SonarQube.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20SonarQube/#junit_4_configuration","title":"Junit 4 Configuration","text":"<ul> <li>If you are using <code>Junit 4</code> in your Spring Boot project. So let add this plugin into\u00a0<code>pom.xml</code>\u00a0file of your Spring Boot project as below.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  \n    &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;sonar.coverage.jacoco.xmlReportPaths&gt;target/site/jacoco/jacoco.xml&lt;/sonar.coverage.jacoco.xmlReportPaths&gt;\n    &lt;sonar.exclusions&gt;\n        **/models/*.class,\n        **/repositories/*.class,\n        **/constants/*.class\n    &lt;/sonar.exclusions&gt;\n    &lt;jacoco.version&gt;0.8.3&lt;/jacoco.version&gt;\n&lt;/properties&gt;\n\n&lt;dependencies&gt;\n....\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n        &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n        &lt;version&gt;5.4.0&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n....\n\n&lt;/dependencies&gt;\n\n\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n        &lt;/plugin&gt;\n\n            &lt;!-- Jacoco report: code coverage report --&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;\n            &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;${jacoco.version}&lt;/version&gt;\n            &lt;!-- packages are excluded --&gt;\n            &lt;configuration&gt;\n                &lt;excludes&gt;\n                    &lt;exclude&gt;**/models/*.class&lt;/exclude&gt;\n                    &lt;exclude&gt;**/repositories/*.class&lt;/exclude&gt;\n                    &lt;exclude&gt;**/constants/*.class&lt;/exclude&gt;\n                &lt;/excludes&gt;\n            &lt;/configuration&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;prepare-agent&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n                &lt;!-- attached to Maven test phase --&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;report&lt;/id&gt;\n                    &lt;phase&gt;prepare-package&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;report&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n\n&lt;profiles&gt;\n    &lt;profile&gt;\n        &lt;id&gt;dev&lt;/id&gt;\n        &lt;properties&gt;\n            &lt;activeatedProperties&gt;dev&lt;/activeatedProperties&gt;\n            &lt;!-- sonarqube url and port --&gt;\n            &lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;\n            &lt;!-- sonarqube username --&gt;\n            &lt;sonar.login&gt;admin&lt;/sonar.login&gt;\n            &lt;!-- sonarqube password --&gt;\n            &lt;sonar.password&gt;password&lt;/sonar.password&gt;\n        &lt;/properties&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n        &lt;/activation&gt;\n    &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20SonarQube/#junit_5_configuration","title":"Junit 5 Configuration","text":"<ul> <li>If you are using <code>Junit 5</code> in your Spring Boot project. So let add this plugin into\u00a0<code>pom.xml</code>\u00a0file of your Spring Boot project as below.</li> </ul> pom.xml<pre><code>&lt;properties&gt;  \n    &lt;java.version&gt;1.8&lt;/java.version&gt;  \n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  &lt;sonar.coverage.jacoco.xmlReportPaths&gt;target/site/jacoco/jacoco.xml&lt;/sonar.coverage.jacoco.xmlReportPaths&gt;  \n    &lt;sonar.exclusions&gt;        \n            **/models/*.class,  \n            **/repositories/*.class,  \n            **/constants/*.class  \n    &lt;/sonar.exclusions&gt;  \n    &lt;jacoco.version&gt;0.8.8&lt;/jacoco.version&gt;  \n    &lt;eureka.client.version&gt;3.1.0&lt;/eureka.client.version&gt;  \n&lt;/properties&gt;\n\n\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/plugin&gt;\n\n        &lt;!-- add test engine for junit 5 --&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.0.0-M7&lt;/version&gt;\n            &lt;dependencies&gt;\n                &lt;dependency&gt;\n                    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n                    &lt;version&gt;5.4.0&lt;/version&gt;\n                &lt;/dependency&gt;\n            &lt;/dependencies&gt;\n        &lt;/plugin&gt;\n\n        &lt;!-- Jacoco report: code coverage report --&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;\n            &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;${jacoco.version}&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;excludes&gt;\n                    &lt;exclude&gt;**/models/*.class&lt;/exclude&gt;\n                    &lt;exclude&gt;**/repositories/*.class&lt;/exclude&gt;\n                    &lt;exclude&gt;**/constants/*.class&lt;/exclude&gt;\n                &lt;/excludes&gt;\n            &lt;/configuration&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;prepare-agent&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n                &lt;!-- attached to Maven test phase --&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;report&lt;/id&gt;\n                    &lt;phase&gt;prepare-package&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;report&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n\n&lt;profiles&gt;\n    &lt;profile&gt;\n        &lt;id&gt;dev&lt;/id&gt;\n        &lt;properties&gt;\n            &lt;activeatedProperties&gt;dev&lt;/activeatedProperties&gt;\n            &lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;\n            &lt;sonar.login&gt;admin&lt;/sonar.login&gt;\n            &lt;sonar.password&gt;password&lt;/sonar.password&gt;\n        &lt;/properties&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n        &lt;/activation&gt;\n    &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20SonarQube/#testing","title":"Testing","text":"<ul> <li>Now, you can command\u00a0<code>mvn clean package sonar:sonar</code>\u00a0to scan your SpringBoot project. Then you will see an Url that contain a SonarScan report. Just click it and you can view SonarQube reports.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20SonarQube/#see_also","title":"See Also","text":"<ul> <li>Docker With SonarQube</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/","title":"SpringBoot With Swagger","text":"<p>In this post, we will learn about swagger generator to generate Apis and swagger UI in springboot service.</p>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/#what_is_the_swagger","title":"What Is The Swagger?","text":"<ul> <li><code>Swagger</code> allows you to <code>describe the structure of your APIs so that machines can read them</code>. The ability of APIs to describe their own structure is the root of all awesomeness in Swagger. Why is it so great? Well, by reading your API\u2019s structure, we can automatically build beautiful and interactive API documentation. We can also automatically generate client libraries for your API in many languages and explore other possibilities like automated testing. Swagger does this by asking your API to return a YAML or JSON that contains a detailed description of your entire API. This file is essentially a resource listing of your API which adheres to OpenAPI Specification.</li> <li>More Information</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/#depdencies_and_plugins","title":"Depdencies And Plugins","text":"<ul> <li>You need to import some dependencies and plugins below into <code>pom.xml</code> of your spring boot project</li> </ul> pom.xml<pre><code>...\n\n&lt;!--springfox-swagger2 --&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;  \n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;  \n    &lt;version&gt;2.9.2&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;!--springfox-swagger-ui --&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;  \n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;  \n    &lt;version&gt;2.9.2&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;io.swagger.core.v3&lt;/groupId&gt;  \n    &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;  \n    &lt;version&gt;2.1.13&lt;/version&gt;  \n&lt;/dependency&gt;\n\n...\n</code></pre> pom.xml<pre><code>&lt;plugin&gt;\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n        &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.3.0&lt;/version&gt;\n        &lt;executions&gt;\n                &lt;execution&gt;\n                        &lt;id&gt;add-source&lt;/id&gt;\n                        &lt;phase&gt;generate-sources&lt;/phase&gt;\n                        &lt;goals&gt;\n                                &lt;goal&gt;add-source&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                                &lt;sources&gt;\n                                        &lt;source&gt;${basedir}/target/generated-sources/src/main/java&lt;/source&gt;\n                                &lt;/sources&gt;\n                        &lt;/configuration&gt;\n                &lt;/execution&gt;\n        &lt;/executions&gt;\n&lt;/plugin&gt;\n&lt;plugin&gt;\n        &lt;groupId&gt;io.swagger&lt;/groupId&gt;\n        &lt;artifactId&gt;swagger-codegen-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.4.27&lt;/version&gt;\n        &lt;executions&gt;\n                &lt;execution&gt;\n                        &lt;id&gt;swagger-code-generate&lt;/id&gt;\n                        &lt;goals&gt;\n                                &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                                &lt;inputSpec&gt;${project.basedir}/src/main/resources/swagger/swagger-input.yml\n                                &lt;/inputSpec&gt;\n                                &lt;language&gt;spring&lt;/language&gt;\n                                &lt;configurationFile&gt;\n                                        ${project.basedir}/src/main/resources/swagger/service-config.json\n                                &lt;/configurationFile&gt;\n                                &lt;output&gt;${project.build.directory}&lt;/output&gt;\n&lt;!--                            &lt;templateDirectory&gt;src/main/resources/swagger/templates&lt;/templateDirectory&gt;--&gt;\n                                &lt;configOptions&gt;\n                                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                        &lt;java8&gt;true&lt;/java8&gt;\n                                &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                &lt;/execution&gt;\n        &lt;/executions&gt;\n\n&lt;/plugin&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/#swagger_implementation_and_configuration","title":"Swagger Implementation And Configuration","text":"<ul> <li>Now let create swagger package in the <code>resources</code> folder and create <code>swagger-input.yml</code> with your api definitions. You can use swagger editor to write your api definitions easily. The example swagger yml will look like below.</li> </ul> swagger-input.yml<pre><code>\"swagger\": \"2.0\"\ninfo:\n  title: \"Swagger Openapi Server\"\n  description: \"This is the Openapi Specification For Feign Server\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n  version: \"1.0.0\"\ntags:\n  - name: \"server\"\n    description: \"all server apis\"\npaths:\n  /v1/server/customers:\n    post:\n      tags:\n        - \"server\"\n      summary: \"Create a customer\"\n      description: \"create a customer\"\n      operationId: \"createCustomer\"\n      parameters:\n        - in: body\n          name: \"customerRequest\"\n          description: \"request body\"\n          required: true\n          schema:\n            $ref: \"#/definitions/CustomerRequest\"\n      responses:\n        \"201\":\n          description: \"successful operation\"\n          schema:\n            type: \"string\"\n            format: \"uuid\"\n    get:\n      tags:\n        - \"server\"\n      summary: \"get customers\"\n      description: \"get customers\"\n      operationId: \"getCustomers\"\n      responses:\n        200:\n          description: \"successful operation\"\n          schema:\n            type: \"array\"\n            items:\n              $ref: \"#/definitions/Customer\"\n\ndefinitions:\n  CustomerRequest:\n    type: \"object\"\n    properties:\n      fullName:\n        type: \"string\"\n        example: \"Nguyen Minh Duc\"\n      email:\n        type: \"string\"\n        format: \"email\"\n        example: \"ducnguyen@gmail.com\"\n      address:\n        type: \"string\"\n        example: \"3/115 Binh Duong\"\n      phone:\n        type: \"string\"\n        example: \"0999123445\"\n      gender:\n        type: \"string\"\n        enum:\n          - \"M\"\n          - \"F\"\n      dob:\n        type: \"string\"\n        format: \"date\"\n  Customer:\n    type: \"object\"\n    properties:\n      id:\n        type: \"string\"\n        format: \"uuid\"\n      fullName:\n        type: \"string\"\n      email:\n        type: \"string\"\n        format: \"email\"\n      address:\n        type: \"string\"\n      phone:\n        type: \"string\"\n      gender:\n        type: \"string\"\n        enum:\n          - \"M\"\n          - \"F\"\n      dob:\n        type: \"string\"\n        format: \"date\"\n      createdAt:\n        type: \"string\"\n        format: \"date-time\"\n      updatedAt:\n        type: \"string\"\n        format: \"date-time\"\n</code></pre> <ul> <li>Next, you need to create a file <code>service-config.json</code> with some configuration as below</li> </ul> service-config.json<pre><code>#service-config.json\n\n{  \n  \"artifactId\": \"swagger\",  \n  \"basePackage\": \"com.springboot.project.swagger.app\",  \n  \"apiPackage\": \"com.springboot.project.swagger.app.api\",  \n  \"configPackage\": \"com.springboot.project.swagger.app.config\",  \n  \"modelPackage\": \"com.springboot.project.swagger.app.model\",  \n  \"delegatePattern\": \"true\",  \n  \"hideGenerationTimestamp\": \"true\",  \n  \"useBeanValidation\": \"true\",  \n  \"dateLibrary\": \"java8\",  \n  \"sourceFolder\": \"generated-sources/src/main/java\",  \n  \"interfaceOnly\": true  \n}\n</code></pre> <ul> <li>Then to enable Swagger UI, let's create a <code>SwaggerConfig</code> class as below:</li> </ul> SwaggerConfig.java<pre><code>package com.springboot.project.swagger.app.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket docketConfiguration() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.any())\n                .paths(PathSelectors.any())\n                .build();\n    }\n}\n</code></pre> <ul> <li>In which, with the <code>PathSelectors.any()</code> configuration, all the controllers will be scanned by Swagger and they will be generated on the UI. Let's go to the testing section to see the result.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/#testing","title":"Testing","text":"<ul> <li>Now, you will use command <code>mvn clean package</code> to build your project with swagger then you will see the generated source as in the image below.</li> </ul> <ul> <li>Now, let create a <code>ServerController</code> component and implement <code>V1Api</code> from generated source, all your apis was generated with validations following your swagger specification, so you just need implement the generated api for using.</li> </ul> ServerController.java<pre><code>package com.springboot.project.swagger.app.controller;\n\nimport com.springboot.project.swagger.app.api.V1Api;\nimport com.springboot.project.swagger.app.model.Customer;\nimport com.springboot.project.swagger.app.model.CustomerRequest;\nimport com.springboot.project.swagger.app.service.CustomerService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class ServerController implements V1Api {\n\n\n    private final CustomerService customerService;\n\n\n    @Override\n    public ResponseEntity&lt;UUID&gt; createCustomer(CustomerRequest customerRequest) {\n        return new ResponseEntity&lt;&gt;(this.customerService.createCustomer(customerRequest), HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;Customer&gt;&gt; getCustomers() {\n        return new ResponseEntity&lt;&gt;(this.customerService.getCustomers(), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>You can see full source code here which includes samples for, <code>Repository</code> <code>Entity</code> and  <code>Service</code>. Because we just focus on Swagger Generator so we will not put these implementation details here.</li> <li> <p>Now let's start your Spring Boot service and go to <code>http://localhost:8080/swagger-ui.html</code> to check the Swagger UI. </p> </li> <li> <p>You can also execute api on the swagger ui directly instead of using postman to execute apis. </p> </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/#advances","title":"Advances","text":"<ul> <li>Sometimes you can not control the generated classes as main class <code>Swagger2SpringBoot</code> or models <code>pojo</code> classes. So, there is a way which will help you to do that. Let's create a <code>templates</code> package in your <code>resources</code> directory. Then add your configuration <code>mustaches</code> file there. Note the name of mustaches files have to be the same as in this repository.</li> <li>Your plugin will look like below.</li> </ul> pom.xml<pre><code>&lt;plugin&gt;\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n        &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.3.0&lt;/version&gt;\n        &lt;executions&gt;\n                &lt;execution&gt;\n                        &lt;id&gt;add-source&lt;/id&gt;\n                        &lt;phase&gt;generate-sources&lt;/phase&gt;\n                        &lt;goals&gt;\n                                &lt;goal&gt;add-source&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                                &lt;sources&gt;\n                                        &lt;source&gt;${basedir}/target/generated-sources/src/main/java&lt;/source&gt;\n                                &lt;/sources&gt;\n                        &lt;/configuration&gt;\n                &lt;/execution&gt;\n        &lt;/executions&gt;\n&lt;/plugin&gt;\n&lt;plugin&gt;\n        &lt;groupId&gt;io.swagger&lt;/groupId&gt;\n        &lt;artifactId&gt;swagger-codegen-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.4.27&lt;/version&gt;\n        &lt;executions&gt;\n                &lt;execution&gt;\n                        &lt;id&gt;swagger-code-generate&lt;/id&gt;\n                        &lt;goals&gt;\n                                &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                                &lt;inputSpec&gt;${project.basedir}/src/main/resources/swagger/swagger-input.yml\n                                &lt;/inputSpec&gt;\n                                &lt;language&gt;spring&lt;/language&gt;\n                                &lt;configurationFile&gt;\n                                        ${project.basedir}/src/main/resources/swagger/service-config.json\n                                &lt;/configurationFile&gt;\n                                &lt;output&gt;${project.build.directory}&lt;/output&gt;\n                                &lt;templateDirectory&gt;src/main/resources/swagger/templates&lt;/templateDirectory&gt;\n                                &lt;configOptions&gt;\n                                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                        &lt;java8&gt;true&lt;/java8&gt;\n                                &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                &lt;/execution&gt;\n        &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <ul> <li>You can copy the content of the mustaches files as in the repo above and edit the content as the way you want.</li> <li>For example, I want to add <code>@JsonIgnoreProperties</code> into every generated models. So I can do it as the image below. </li> <li>Then build your project again and check your generated models, you can see the annotation as below </li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Swagger/#references","title":"References","text":"<ul> <li>Swagger IO</li> <li>Full source code here</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/","title":"Spring Boot With Web Services","text":"","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#integrate_with_web_services","title":"Integrate With Web Services","text":"<ul> <li>In some projects, sometime we will meet some user stories that need us to make a connection to the Web Services from our spring boot service by giving a file <code>.wsdl</code>. So This post will guild you step by step to archive it easily.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#prepare_the_environment","title":"Prepare The Environment","text":"<ul> <li>To make an example we need an online Web Service, so we can go to free SOAP service urls and choose one to make an example.</li> <li>In this example I will choose country list SOAP service because it is the one that is working well.</li> <li>So you need go to country list SOAP service by your browser. Then <code>Right Click</code> and choose <code>Save As</code>. After that you save the file with type <code>.wsdl</code> into any package in <code>src/main/resources</code> of your spring boot project as the images below:</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#dependencies","title":"Dependencies","text":"<ul> <li>We need to add some dependencies for SOAP in\u00a0<code>pom.xml</code>\u00a0file. In which, we need to note about the declaration of\u00a0<code>generatePackage</code>\u00a0which is the package that contains all generated java classes when we run command\u00a0<code>mvn compile</code>\u00a0and the\u00a0<code>schemaDirectory</code>\u00a0which is the path to our\u00a0<code>countries.wsdl</code>\u00a0file of us.</li> </ul> pom.xml<pre><code>    ...\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.ws&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-ws-core&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;\n            &lt;version&gt;5.3.23&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    ...\n</code></pre> pom.xml<pre><code>...\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- pom.xml plugin --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.jvnet.jaxb2.maven2&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-jaxb2-plugin&lt;/artifactId&gt;\n                &lt;version&gt;0.14.0&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n                &lt;configuration&gt;\n                    &lt;schemaLanguage&gt;WSDL&lt;/schemaLanguage&gt;\n                    &lt;generateDirectory&gt;${project.basedir}/src/main/java&lt;/generateDirectory&gt;\n                    &lt;!-- the package that will contain our generated java classes --&gt;\n                    &lt;generatePackage&gt;com.springboot.project.web.services.model.gen&lt;/generatePackage&gt;\n                    &lt;!-- the path where we put the wsdl file --&gt;\n                    &lt;schemaDirectory&gt;${project.basedir}/src/main/resources&lt;/schemaDirectory&gt;\n                    &lt;schemaIncludes&gt;\n                            &lt;include&gt;countries.wsdl&lt;/include&gt;\n                    &lt;/schemaIncludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#generate_java_classes_from_wsdl_file","title":"Generate Java Classes From WSDL File","text":"<ul> <li>So let's open the <code>terminal/command line</code> then run <code>mvn compile</code>, then Maven will read the file <code>countries.wsdl</code> to generate java classes and put them into the <code>package</code> that we have already defined in the pom.xml of Step 2.</li> <li>If you note that, java classes have been configured with many annotation of XML, So these class will be formatted as xml type when we transfer them to SOAP service.</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#creating_adapter","title":"Creating Adapter","text":"<ul> <li>So in this step we will define a soap service adapter named\u00a0<code>CountryClient</code>\u00a0which are extended from\u00a0<code>WebServiceGatewaySupport</code>.</li> <li>You need to note that generated java classes as\u00a0<code>CountryName.java</code>\u00a0and\u00a0<code>CountryNameResponse.java</code>\u00a0are formatted with xml.</li> </ul> CountryClient.java<pre><code>package com.springboot.project.web.services.api;  \n\nimport com.springboot.project.web.services.model.gen.CountryName;  \nimport com.springboot.project.web.services.model.gen.CountryNameResponse;  \nimport org.springframework.ws.client.core.support.WebServiceGatewaySupport;  \n\npublic class CountryClient extends WebServiceGatewaySupport {  \n\n    public CountryNameResponse getCountry(String countryISO) {  \n        CountryName request = new CountryName();  \n        request.setSCountryISOCode(countryISO);  \n        return (CountryNameResponse) getWebServiceTemplate()  \n                .marshalSendAndReceive(request);  \n    }  \n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#configuration","title":"Configuration","text":"<ul> <li>create a\u00a0<code>CountryClientConfig</code>\u00a0that we will config the soap request with\u00a0<code>soapURl</code>\u00a0and\u00a0<code>contextPath</code>. In which,\u00a0<code>contextPath</code>\u00a0is the\u00a0package\u00a0that contains all our\u00a0generated java classes\u00a0and\u00a0<code>soapURl</code>\u00a0is the\u00a0WebServiceUrl that we call to.</li> </ul> CountryClientConfig.java<pre><code>package com.springboot.project.web.services.config;\n\nimport com.springboot.project.web.services.api.CountryClient;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\n\n@Configuration\npublic class CountryClientConfig {\n    /**\n     `contextPath` is the `package` that contains all our `generated java classes`\n     */\n    @Value(\"${country.client.soap.package}\")\n    private String contextPath;\n\n    /**\n     `soapURl` is the `WebServiceUrl` that we call to\n     */\n    @Value(\"${country.client.soap.url}\")\n    private String soapURl ;\n\n\n    @Bean\n    public Jaxb2Marshaller marshaller() {\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n        marshaller.setContextPath(contextPath);\n        return marshaller;\n    }\n\n    @Bean\n    public CountryClient countryClient(Jaxb2Marshaller marshaller) {\n        CountryClient client = new CountryClient();\n        client.setDefaultUri(soapURl);\n        client.setMarshaller(marshaller);\n        client.setUnmarshaller(marshaller);\n        return client;\n    }\n}\n</code></pre> application.yml<pre><code>country:  \n  client:  \n    soap:  \n      package: com.springboot.project.web.services.model.gen  \n      url: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#create_service","title":"Create Service","text":"<ul> <li>Let's create a simple Service which use <code>CountryClientAdapter.java</code> as below.</li> </ul> CountryCodeHandler.java<pre><code>package com.springboot.project.web.services.service;\n\nimport com.springboot.project.web.services.api.CountryClient;\nimport com.springboot.project.web.services.model.gen.CountryNameResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CountryCodeHandler {\n\n    @Autowired\n    private CountryClient countryClient;\n\n    public CountryNameResponse getCountryName(String countryISO) {\n        return countryClient.getCountry(countryISO);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#create_controller","title":"Create Controller","text":"<ul> <li>Let's create a simple Service which use <code>CountryCodeHandler.java</code> as below.</li> </ul> WebServicesController.java<pre><code>package com.springboot.project.web.services.controller;\n\nimport com.springboot.project.web.services.model.gen.CountryNameResponse;\nimport com.springboot.project.web.services.service.CountryCodeHandler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class WebServicesController {\n\n    @Autowired\n    private CountryCodeHandler countryCodeHandler;\n\n    @GetMapping(path = \"/v1/soap/country/{countryISO}\", produces = MediaType.APPLICATION_XML_VALUE)\n    public ResponseEntity&lt;CountryNameResponse&gt; getCountryNameByISO(@PathVariable(\"countryISO\") String countryISO) {\n        return ResponseEntity.ok(this.countryCodeHandler.getCountryName(countryISO));\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#testing","title":"Testing","text":"<ul> <li>Finally, let's start our spring boot application project and call the exported api by postman to test.</li> <li>The result we be showed as below, please not that the we use 3 ISO country code for test Ex: VNM, IDN</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud OpenFeign With Web Services</li> <li>Web Services</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Spring%20Boot%20With%20Web%20Services/#references","title":"References","text":"<ul> <li>sqa-dev.blogspot.com</li> <li>country list SOAP service</li> </ul>","tags":["Spring","SpringBoot"]},{"location":"Spring%20Boot/Some%20Notes/EnableWebMvc%20And%20OpenApi%20Issue/","title":"@EnableWebMvc And OpenApi Issue","text":"","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/EnableWebMvc%20And%20OpenApi%20Issue/#notes","title":"Notes","text":"<ul> <li>Don't use annotation <code>@EnableWebMvc</code> if you are not using advance features of   <code>WebMvcConfigurer</code>, in stead let extend directly from  <code>WebMvcConfigurationSupport</code>. Because when you use <code>@EnableWebMvc</code> some default bean of <code>Spring Boot</code> will be overridden and it will cause of some issue that you won't expect.</li> <li>For example, if you are using OpenApi generator and in some configuration file you use annotation <code>@EnableWebMvc</code> then you can see format datetime of openapi will response numbers as <code>Epoch</code> (Ex: 1702629738) not the type that human can read as <code>2011-12-03T10:15:30</code>. It is because the default <code>ObjectMapper</code> of Spring Boot has been overridden and it is hard for you to reconfigure it again.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Fix%20Jpa%20OneToMany%20N%2B1%20Issue/","title":"Jpa OneToMany N+1 Issue","text":"","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Fix%20Jpa%20OneToMany%20N%2B1%20Issue/#fix_n1_issue_with_onetomany_relationship_in_jpa","title":"Fix N+1 Issue With OneToMany Relationship in Jpa.","text":"<ul> <li>In Jpa if we define <code>OneToMany</code> relationship as below. </li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    @Column(unique = true)\n    private String email;\n    private String address;\n    @Column(unique = true)\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @JoinColumn(name = \"loyalty_card\")\n    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private LoyaltyCardEntity loyaltyCard;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders;\n\n}\n</code></pre> <pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.PreUpdate;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"orders\")\npublic class OrderEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n\n    private String orderName;\n\n    private LocalDateTime createdDate;\n\n    private LocalDateTime lastUpdatedDate;\n\n    @Enumerated(value = EnumType.STRING)\n    private OrderStatus orderStatus;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List&lt;ItemEntity&gt; items = new ArrayList&lt;&gt;();\n\n    @PrePersist\n    private void setCreatedDate() {\n        LocalDateTime localDateTime = LocalDateTime.now();\n        this.createdDate = localDateTime;\n        this.lastUpdatedDate = localDateTime;\n    }\n\n    @PreUpdate\n    private void setLastUpdatedDate() {\n        this.lastUpdatedDate = LocalDateTime.now();\n    }\n\n\n}\n</code></pre> <ul> <li>Then when we query to get a <code>CustomerEntitty</code>, we will see in the log that every time we get an <code>OrderEntity</code>, a hibernate query will be generated base on how many <code>Order</code> in the list.</li> </ul> <pre><code>Hibernate: select c1_0.id,c1_0.address,c1_0.dob,c1_0.email,c1_0.full_name,c1_0.gender,l1_0.id,l1_0.issue_date,l1_0.points,c1_0.phone from customers c1_0 left join loyalty_cards l1_0 on l1_0.id=c1_0.loyalty_card where 1=1 and 1=1 and 1=1 offset ? rows fetch first ? rows only\nHibernate: select count(c1_0.id) from customers c1_0 where 1=1 and 1=1 and 1=1\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id=?\n\n...\n</code></pre> <ul> <li> <p>So how do you think if there are 10000 orders or more in a customer.  This will make the database execute thousands queries and it will lead to bad performance.</p> </li> <li> <p>To avoid it, we just simply use the annotation <code>@Fetch(FetchMode.SUBSELECT)</code> in the parent as below.</p> </li> </ul> <pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    @Column(unique = true)\n    private String email;\n    private String address;\n    @Column(unique = true)\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @JoinColumn(name = \"loyalty_card\")\n    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private LoyaltyCardEntity loyaltyCard;\n\n    @Fetch(FetchMode.SUBSELECT)\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders;\n\n}\n</code></pre> <ul> <li> <p>In Jpa , <code>@Fetch(FetchMode.SUBSELECT)</code> is a Hibernate annotation that controls how related entities are fetched from the database. The <code>FetchMode.SUBSELECT</code> mode is used to load all instances of the related entity or collection at once, at some points after the initial query is executed. This fetching strategy is currently only available for collections and many-valued associations.</p> </li> <li> <p>Now, when we get the customer again, we will not have many duplicated queries generated.</p> </li> </ul> <pre><code>Hibernate: select c1_0.id,c1_0.address,c1_0.dob,c1_0.email,c1_0.full_name,c1_0.gender,l1_0.id,l1_0.issue_date,l1_0.points,c1_0.phone from customers c1_0 left join loyalty_cards l1_0 on l1_0.id=c1_0.loyalty_card where 1=1 and 1=1 and 1=1 offset ? rows fetch first ? rows only\nHibernate: select count(c1_0.id) from customers c1_0 where 1=1 and 1=1 and 1=1\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id in(select c1_0.id from customers c1_0 left join loyalty_cards l1_0 on l1_0.id=c1_0.loyalty_card where 1=1 and 1=1 and 1=1)\nHibernate: select i1_0.order_id,i1_0.id,i1_0.item_name,i1_0.price,i1_0.quantity from items i1_0 where i1_0.order_id in(select o1_0.id from orders o1_0 where o1_0.customer_id in(select c1_0.id from customers c1_0 left join loyalty_cards l1_0 on l1_0.id=c1_0.loyalty_card where 1=1 and 1=1 and 1=1))\nHibernate: select count(c1_0.id) from customers c1_0 where 1=1 and 1=1 and 1=1\nHibernate: select count(*) from customers c1_0\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Fix%20Jpa%20OneToOne%20N%2B1%20Issue/","title":"Jpa OneToOne N+1 Issue","text":"","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Fix%20Jpa%20OneToOne%20N%2B1%20Issue/#fix_n1_issue_with_onetoone_relationship_in_jpa","title":"Fix N+1 Issue With OneToOne Relationship in Jpa.","text":"<ul> <li>In Jpa if we define <code>OneToOne</code> relationship as below. </li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    @Column(unique = true)\n    private String email;\n    private String address;\n    @Column(unique = true)\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @JoinColumn(name = \"loyalty_card\")\n    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private LoyaltyCardEntity loyaltyCard;\n\n    @Fetch(FetchMode.SUBSELECT)\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders;\n\n}\n</code></pre> LoyaltyCardEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"loyalty_cards\")\npublic class LoyaltyCardEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n\n    private Integer points;\n\n    private Date issueDate;\n\n    @PrePersist\n    private void preCreate() {\n        this.issueDate = new Date();\n    }\n\n}\n</code></pre> <ul> <li>Then when we query to get a <code>CustomerEntitty</code>, we will see in the log that every time we get a <code>LoyaltyCardEntity</code>, a hibernate query will be generated base on how many <code>LoyaltyCard</code> in the list.</li> </ul> <pre><code>Hibernate: select c1_0.id,c1_0.address,c1_0.dob,c1_0.email,c1_0.full_name,c1_0.gender,c1_0.loyalty_card,c1_0.phone from customers c1_0 where 1=1 and 1=1 and 1=1 offset ? rows fetch first ? rows only\nHibernate: select count(c1_0.id) from customers c1_0 where 1=1 and 1=1 and 1=1\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select o1_0.customer_id,o1_0.id,o1_0.created_date,o1_0.last_updated_date,o1_0.order_name,o1_0.order_status from orders o1_0 where o1_0.customer_id in(select c1_0.id from customers c1_0 where 1=1 and 1=1 and 1=1)\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\nHibernate: select l1_0.id,l1_0.issue_date,l1_0.points from loyalty_cards l1_0 where l1_0.id=?\n\n...\n</code></pre> <ul> <li> <p>So how do you think if there are 10000 customers with 10000 loyaltycards.  This will make the database execute thousands queries and it will lead to bad performance.</p> </li> <li> <p>To avoid it, we will use the <code>Entity Graphs</code> which are a feature introduced in JPA 2.1 that provides a more sophisticated method of dealing with performance loading.  They provide a way to define which attributes (fields) of an entity should be loaded from the database when the entity is fetched. This can be particularly useful when dealing with entities that have relationships with other entities.</p> </li> <li> <p>The main goal of the JPA <code>Entity Graph</code> is to improve the runtime performance when loading the entity\u2019s related associations and basic fields1. The JPA provider loads all the graphs in one select query and then avoids fetching associations with more <code>SELECT</code> queries. This is considered a good approach for improving application performance.</p> </li> <li> <p>In Spring Boot, we can define an <code>Entity Graph</code> using a combination of <code>@NamedEntityGraph</code> and<code>@EntityGraph</code> annotations. We can also define ad-hoc entity graphs with just the <code>attributePaths</code> argument of the <code>@EntityGraph</code> annotation.</p> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Fix%20Jpa%20OneToOne%20N%2B1%20Issue/#with_namedentitygraph","title":"With @NamedEntityGraph","text":"<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.NamedAttributeNode;\nimport jakarta.persistence.NamedEntityGraph;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\n@NamedEntityGraph(name = \"CustomerEntity.loyaltyCard\", attributeNodes = @NamedAttributeNode(\"loyaltyCard\"))\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    @Column(unique = true)\n    private String email;\n    private String address;\n    @Column(unique = true)\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @JoinColumn(name = \"loyalty_card\")\n    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private LoyaltyCardEntity loyaltyCard;\n\n    @Fetch(FetchMode.SUBSELECT)\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders;\n\n}\n</code></pre> <ul> <li>Then in the <code>repository</code> we just define the <code>findAll</code> method with <code>@EntityGraph</code> annotation.</li> </ul> CustomerRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport jakarta.annotation.Nonnull;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.data.jpa.repository.EntityGraph;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt;,\n        JpaSpecificationExecutor&lt;CustomerEntity&gt; {\n\n    CustomerEntity findCustomerByEmail(String email);\n\n    /**\n     *\n     * If we use @EntityGraph with attributePaths\n     * Ex: @EntityGraph(attributePaths = {\"loyaltyCard\"})\n     * we don't need to declare the @NamedEntityGraph in\n     * the CustomerEntity.\n     * In the example above the `loyaltyCard` is the field name of the entity relationship\n     *\n     */\n    @EntityGraph(value = \"CustomerEntity.loyaltyCard\")\n    @Nonnull Page&lt;CustomerEntity&gt; findAll(@Nonnull Specification&lt;CustomerEntity&gt; spec, @Nonnull Pageable pageable);\n\n\n}\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Fix%20Jpa%20OneToOne%20N%2B1%20Issue/#without_namedentitygraph","title":"Without @NamedEntityGraph","text":"<ul> <li>Then in the <code>repository</code> we just define the <code>findAll</code> method with <code>@EntityGraph</code> annotation using <code>attributePaths</code>.</li> </ul> CustomerRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport jakarta.annotation.Nonnull;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.data.jpa.repository.EntityGraph;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt;,\n        JpaSpecificationExecutor&lt;CustomerEntity&gt; {\n\n    CustomerEntity findCustomerByEmail(String email);\n\n    @EntityGraph(attributePaths = {\"loyaltyCard\"})\n    @Nonnull Page&lt;CustomerEntity&gt; findAll(@Nonnull Specification&lt;CustomerEntity&gt; spec, @Nonnull Pageable pageable);\n\n\n}\n</code></pre> <ul> <li> <p>With this approach, we don't need to use <code>@NamedEntityGraph</code> annotation in the <code>CustomerEntity</code>.</p> </li> <li> <p>References:</p> <ul> <li>Baeldung jpa named entity graphs</li> <li>Baeldung jpa entity graph</li> </ul> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/List.of%20-%20Arrays.asList/","title":"List.of() - Arrays.asList()","text":"","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/List.of%20-%20Arrays.asList/#notes","title":"Notes","text":"<ul> <li><code>List.of()</code> and <code>Arrays.asList()</code> return <code>unmodifiable</code> lists. So please be careful when using these utils in update apis.</li> </ul>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Spring%20Boot%203%20CSRF%20Configuration/","title":"Spring Boot 3 CSRF Configuration","text":"","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/Spring%20Boot%203%20CSRF%20Configuration/#notes","title":"Notes","text":"SecurityConfig.java<pre><code>package com.springboot.project.config;  \n\nimport com.springboot.project.config.oauth2.*;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.context.annotation.Bean;  \nimport org.springframework.context.annotation.Configuration;  \nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;  \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;  \nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;  \nimport org.springframework.security.config.http.SessionCreationPolicy;  \nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;  \nimport org.springframework.security.web.SecurityFilterChain;  \nimport org.springframework.security.web.access.ExceptionTranslationFilter;  \nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;  \nimport org.springframework.security.web.authentication.logout.HeaderWriterLogoutHandler;  \nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;  \nimport org.springframework.security.web.csrf.XorCsrfTokenRequestAttributeHandler;  \nimport org.springframework.security.web.header.writers.CacheControlHeadersWriter;  \n\nimport static com.springboot.project.config.oauth2.HttpCookieOAuth2AuthorizationRequestRepository.OAUTH2_AUTHORIZATION_REQUEST_COOKIE_NAME;  \nimport static com.springboot.project.config.oauth2.OAuth2AuthenticationSuccessHandler.AUTHORIZED_TOKEN_COOKIE_NAME;  \n\n@Configuration  \n@EnableWebSecurity  \n@EnableMethodSecurity  \npublic class SecurityConfig {  \n\n    private final HttpCookieOAuth2AuthorizationRequestRepository httpCookieOAuth2AuthorizationRequestRepository;  \n    private final OAuth2AuthenticationSuccessHandler oAuth2AuthenticationSuccessHandler;  \n    private final OAuth2AuthenticationFailureHandler oAuth2AuthenticationFailureHandler;  \n    private final TokenAuthenticationFilter tokenAuthenticationFilter;  \n    private final CustomCookieRequestCache customCookieRequestCache;  \n    private final OAuth2LogoutSuccessHandler oAuth2LogoutSuccessHandler;  \n    private final ApplicationProperty applicationProperty;  \n\n    @Autowired  \n    public SecurityConfig(HttpCookieOAuth2AuthorizationRequestRepository httpCookieOAuth2AuthorizationRequestRepository,  \n                          OAuth2AuthenticationSuccessHandler oAuth2AuthenticationSuccessHandler,  \n                          OAuth2AuthenticationFailureHandler oAuth2AuthenticationFailureHandler,  \n                          TokenAuthenticationFilter tokenAuthenticationFilter,  \n                          CustomCookieRequestCache customCookieRequestCache,  \n                          OAuth2LogoutSuccessHandler oAuth2LogoutSuccessHandler,  \n                          ApplicationProperty applicationProperty) {  \n        this.httpCookieOAuth2AuthorizationRequestRepository = httpCookieOAuth2AuthorizationRequestRepository;  \n        this.oAuth2AuthenticationSuccessHandler = oAuth2AuthenticationSuccessHandler;  \n        this.oAuth2AuthenticationFailureHandler = oAuth2AuthenticationFailureHandler;  \n        this.tokenAuthenticationFilter = tokenAuthenticationFilter;  \n        this.customCookieRequestCache = customCookieRequestCache;  \n        this.oAuth2LogoutSuccessHandler = oAuth2LogoutSuccessHandler;  \n        this.applicationProperty = applicationProperty;  \n    }  \n\n    @Bean  \n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {  \n        XorCsrfTokenRequestAttributeHandler xorCsrfTokenRequestAttributeHandler = new XorCsrfTokenRequestAttributeHandler();  \n        xorCsrfTokenRequestAttributeHandler.setCsrfRequestAttributeName(\"_csrf\");  \n        http.csrf(csrf -&gt;  \n                        csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  \n                        .csrfTokenRequestHandler(new SpaCsrfTokenRequestHandler()))  \n                .authorizeHttpRequests(auth -&gt;  \n                        auth.requestMatchers(this.applicationProperty.getSecurity().getAllowedApis())  \n                                .permitAll()  \n                                .anyRequest()  \n                                .authenticated())  \n                .logout(logout -&gt; logout  \n                        .logoutUrl(this.applicationProperty.getSecurity().getLogoutApiPath())  \n                        .addLogoutHandler(new HeaderWriterLogoutHandler(new CacheControlHeadersWriter()))  \n                        .logoutSuccessHandler(this.oAuth2LogoutSuccessHandler)  \n                        .invalidateHttpSession(true)  \n                        .clearAuthentication(true)  \n                        .deleteCookies(  \n                                AUTHORIZED_TOKEN_COOKIE_NAME,  \n                                OAUTH2_AUTHORIZATION_REQUEST_COOKIE_NAME,  \n                                OAuth2ParameterNames.REDIRECT_URI)  \n                )  \n                .oauth2Login(oauth2 -&gt;  \n                        oauth2.authorizationEndpoint(authorizationEndpointConfig -&gt;  \n                                        authorizationEndpointConfig  \n                                                .authorizationRequestRepository(this.httpCookieOAuth2AuthorizationRequestRepository))  \n                                .successHandler(this.oAuth2AuthenticationSuccessHandler)  \n                                .failureHandler(this.oAuth2AuthenticationFailureHandler))  \n                .sessionManagement(sessionConfig -&gt;  \n                        sessionConfig.sessionCreationPolicy(SessionCreationPolicy.STATELESS))  \n                .requestCache(cache -&gt; cache.requestCache(this.customCookieRequestCache))  \n                .addFilterBefore(this.tokenAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)  \n                .addFilterAfter(new CsrfCookieFilter(), ExceptionTranslationFilter.class);  \n        return http.build();  \n\n    }  \n\n}\n</code></pre> SpaCsrfTokenRequestHandler.java<pre><code>package com.springboot.project.config.oauth2;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.web.csrf.CsrfToken;\nimport org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;\nimport org.springframework.security.web.csrf.CsrfTokenRequestHandler;\nimport org.springframework.security.web.csrf.XorCsrfTokenRequestAttributeHandler;\nimport org.springframework.util.StringUtils;\n\nimport java.util.function.Supplier;\n\npublic class SpaCsrfTokenRequestHandler extends CsrfTokenRequestAttributeHandler {\n    private final CsrfTokenRequestHandler delegate = new XorCsrfTokenRequestAttributeHandler();\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, Supplier&lt;CsrfToken&gt; csrfToken) {\n        /*\n         * Always use XorCsrfTokenRequestAttributeHandler to provide BREACH protection of\n         * the CsrfToken when it is rendered in the response body.\n         */\n        this.delegate.handle(request, response, csrfToken);\n    }\n\n    @Override\n    public String resolveCsrfTokenValue(HttpServletRequest request, CsrfToken csrfToken) {\n        /*\n         * If the request contains a request header, use CsrfTokenRequestAttributeHandler\n         * to resolve the CsrfToken. This applies when a single-page application includes\n         * the header value automatically, which was obtained via a cookie containing the\n         * raw CsrfToken.\n         */\n        if (StringUtils.hasText(request.getHeader(csrfToken.getHeaderName()))) {\n            return super.resolveCsrfTokenValue(request, csrfToken);\n        }\n        /*\n         * In all other cases (e.g. if the request contains a request parameter), use\n         * XorCsrfTokenRequestAttributeHandler to resolve the CsrfToken. This applies\n         * when a server-side rendered form includes the _csrf request parameter as a\n         * hidden input.\n         */\n        return this.delegate.resolveCsrfTokenValue(request, csrfToken);\n    }\n}\n</code></pre> CsrfCookieFilter.java<pre><code>package com.springboot.project.config.oauth2;  \n\nimport jakarta.servlet.FilterChain;  \nimport jakarta.servlet.ServletException;  \nimport jakarta.servlet.http.HttpServletRequest;  \nimport jakarta.servlet.http.HttpServletResponse;  \nimport org.springframework.security.web.csrf.CsrfToken;  \nimport org.springframework.web.filter.OncePerRequestFilter;  \n\nimport java.io.IOException;  \n\npublic class CsrfCookieFilter extends OncePerRequestFilter {  \n\n    @Override  \n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)  \n            throws ServletException, IOException {  \n        CsrfToken csrfToken = (CsrfToken) request.getAttribute(\"_csrf\");  \n        csrfToken.getToken();  \n        filterChain.doFilter(request, response);  \n    }  \n\n}\n</code></pre> <ul> <li>References:<ul> <li>doc.spring.io</li> <li>stackoverflow.com</li> </ul> </li> </ul>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/SpringBoot%203%20Global%20Cors%20Congiration/","title":"SpringBoot 3 Global Cors Congiration","text":"","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Boot/Some%20Notes/SpringBoot%203%20Global%20Cors%20Congiration/#notes","title":"Notes","text":"<ul> <li>On local, to add quick cors configuration for FE interacting, just create the <code>WebConfig</code> which extends <code>WebMvcConfigurer</code> and override the method <code>addCorsMappings</code> as below.</li> </ul> <pre><code>package com.springboot.project.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.Arrays;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowCredentials(true)\n                .allowedHeaders(\"Authorization\", \"Requestor-Type\")\n                .allowedOriginPatterns(\"http://localhost:4200\")\n                .allowedMethods(\"GET\",\"POST\",\"PATCH\", \"PUT\", \"DELETE\", \"OPTIONS\", \"HEAD\")\n                .exposedHeaders(\"X-Get-Header\")\n                .maxAge(3600L);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringBoot","SpringBoot3","SpringBootNotes"]},{"location":"Spring%20Cloud/Distributed%20Tracing/","title":"Distributed Tracing","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#observability","title":"Observability","text":"<ul> <li><code>Observability</code> is a concept in software engineering that focuses on gaining insights into complex systems by collecting and analyzing relevant data.</li> <li> <p><code>Tracing</code>, alongside\u00a0<code>metrics</code>\u00a0and\u00a0<code>logs</code>, are three cornerstones of\u00a0Observability. In which:</p> <ul> <li><code>Tracing</code> provides a way to track and visualize the flow of requests as they traverse through a distributed system. It helps identify the path taken by a request, measure the duration of each step, and understand the dependencies and interactions between different components.</li> <li><code>Metrics</code>, on the other hand, provide quantitative measurements and statistics about various aspects of the system's behavior, such as response times, error rates, and resource utilization. They offer aggregated data that can be used to monitor performance, identify anomalies, and make data-driven decisions.</li> <li><code>Logs</code> capture important events, messages, and contextual information generated by the system. They can be used for debugging, auditing, and analyzing system behavior. Logs provide a chronological record of events and can help in understanding the sequence of operations and detecting issues.</li> </ul> </li> <li> <p>By combining tracing, metrics, and logs, observability enables system administrators and developers to gain a comprehensive understanding of system behavior, diagnose problems, and optimize performance. It provides insights into the inner workings of complex distributed systems, helping to improve reliability, troubleshoot issues, and enhance overall system performance.</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#what_is_the_distributed_tracing","title":"What Is The Distributed Tracing?","text":"<ul> <li> <p><code>Distributed tracing</code> is a method of observing requests as they\u00a0advance through a distributed system. Its primary use is to profile and monitor modern applications built using microservices and (or) cloud native architecture, enabling developers to find performance issues.</p> </li> <li> <p>With distributed tracing, developers can track a single request traversing through an entire system that is distributed across multiple applications, services, and databases.\u00a0</p> </li> <li> <p>By using a distributed tracing tool, you can collect data on each request that helps you present, analyze, and visualize the request in detail. These visual representations allow you to see each step (also known a span) a request makes and how long each step takes. Developers can review this information to see where the system is experiencing blockages and latencies to determine the root cause. For example, a request may pass back and forth through multiple microservices before fulfilling a request. Without a way of tracking the entire journey, there is no way to know exactly where the issues occur.</p> </li> <li> <p>View More</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#why_distributed_tracing","title":"Why Distributed Tracing?","text":"<ul> <li> <p>If we are working in micro-service systems, we will usually face to some pain points like:</p> <ul> <li>Identify the root cause in the system when some issues happen.</li> <li>Monitor execution time of services to identify the performance.</li> </ul> </li> <li> <p>So the <code>Distributed tracing</code> will help us to handle these things, it provides observability for microservices. It will help use to track a request from start to finish, making troubleshooting any issues faster and easier, then it also help us to show how the system is performing.</p> </li> <li> <p>Common distributed tracing solutions attach small pieces of metadata to the headers of each request, that are then propagated downstream to any subsequent services. Each individual component is then configured to send this metadata to a centralised tracing tool (Jaeger\u00a0or\u00a0Zipkin) which correlates the data and allows you to visualize the request as it passes through the system. </p> </li> <li> <p>View More</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#terminology","title":"Terminology","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#span","title":"Span","text":"<ul> <li><code>Span</code> represents a single unit of work within the system. Spans can be nested within one another to model the decomposition of the work. A detailed explanation can be found on the\u00a0OpenTracing site. For example, a span could be calling a\u00a0<code>REST</code>\u00a0endpoint and another child span could then be that endpoint calling another and so on in a different service.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#trace","title":"Trace","text":"<ul> <li><code>Trace</code> is a collection of spans which all share the same root span, or more simply put all spans which were created as a direct result of the original request. The hierarchy of spans (each with the own parent span alongside the root span) can be used to form directed acyclic graphs showing the path of the request as it made its way through various components.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#trace_context","title":"Trace Context","text":"<ul> <li><code>TraceContext</code> is the bundle of metadata that is passed from one service to the other, allowing for the creation of the final hierarchical trace. Depending on the propagation type used this can take multiple forms, but usually includes at least the root and parent span id\u2019s plus any extra \u201cbaggage\u201d.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#context_propagation","title":"Context Propagation","text":"<ul> <li> <p><code>Context Propagation</code> is the process of transferring trace information from one service to the other. Propagation is done by injecting the trace context into the message that is being sent. In the case of an\u00a0<code>HTTP</code>\u00a0call usually it is done by adding specific\u00a0<code>HTTP</code>\u00a0headers as defined by the standard. There are multiple different standards for this (which is where the complexity arises).\u00a0<code>Zipkin</code>\u00a0uses the\u00a0B3\u00a0format whereas the\u00a0W3C\u00a0has also defined a new standard which may be preferable. The libraries being used should be able to support multiple types and convert between them.</p> </li> <li> <p>Following B3 standard we will have some main headers below:</p> <ul> <li>X-B3-TraceId</li> <li>X-B3-ParentSpanId</li> <li>X-B3-SpanId</li> <li>X-B3-Sampled</li> </ul> </li> <li> <p>Following W3C standard we will have some main headers below:</p> <ul> <li>version</li> <li>trace-id</li> <li>parent-id</li> <li>trace-flags</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#sampling","title":"Sampling","text":"<ul> <li>In larger systems, or for those which process a high number of requests, we may not want to record every trace. It could be unnecessarily expensive to do so or could put pressure on the collectors. <code>Sampling</code> aims to limit the total number of traces recorded whilst still preserving the underlying trends. For example, you might employ a simple rate limiting sampler or use more complex probabilistic or adaptive approaches.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#instrumentation","title":"Instrumentation","text":"<ul> <li><code>Instrumentation</code> is injecting code into the service to gather tracing information. Can be done manually or automatically. As manual instrumentation requires some boilerplate code, the preferred way is to use auto instrumentation libraries from the providers.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#baggage","title":"Baggage","text":"<ul> <li>Distributed tracing works by propagating fields inside and across services that connect the trace together: traceId and spanId notably. The context that holds these fields can optionally push other fields that need to be consistent regardless of many services are touched. The simple name for these extra fields is \"Baggage\".</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Distributed%20Tracing/#references","title":"References","text":"<ul> <li>ryanharrison.co.uk</li> <li>appdynamics.com</li> <li>openzipkin</li> <li>w3.org</li> <li>opentracing.io</li> <li>jaegertracing.io</li> <li>zipkin.io</li> <li>cloud.spring.io</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/","title":"OpenApi - OpenFeign Integration","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#introduction","title":"Introduction","text":"<ul> <li>We maybe heard a lots about using OpenFeign and OpenApi in Spring Boot projects with micro-services architect. So in this section, we will try to integrate OpenFeign with OpenApi into our Spring Boot project for generating server - client apis.</li> <li>If you are not familiar with these concepts, you should topics in links below:<ul> <li>Spring Boot With OpenApi</li> <li>Spring Cloud OpenFeign Basic</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#example","title":"Example","text":"<ul> <li> <p>Before we deep dive into the implementation we should go to the situations that we will need to integrate OpenApi and OpenFeign. </p> </li> <li> <p>In this example, assume that we received\u00a0<code>an openapi specification</code>\u00a0from a technical analysis guy, with some apis, requests, responses and models. Then instead of writing code manually, we will use OpenApi generator plugin on Spring Boot service which will help us to generate controller and models and we will use them for building our Spring Boot service application quickly, we will name this service as\u00a0<code>openfeign-openapi-server</code>.</p> </li> <li> <p>After the code implementation on\u00a0<code>openfeign-openapi-server</code>. Another spring boot service will need to configure spring cloud OpenFeign to use apis from\u00a0<code>openfeign-openapi-server</code>. So instead of writing code manually, we also use the OpenApi generator plugin on Spring Boot service to generate\u00a0<code>openfeign client</code>\u00a0and models from the\u00a0<code>openapi specification</code>\u00a0of\u00a0<code>openfeign-openapi-server</code>. Let\u2019s call this service as\u00a0<code>openfeign-openapi-client</code>.</p> </li> <li> <p>Usually, the service\u00a0<code>openfeign-openapi-client</code>\u00a0will call to\u00a0<code>openfeign-openapi-server</code>\u00a0by url, using this way is okay but when\u00a0<code>openfeign-openapi-server</code>\u00a0changes ports or url, so we have to update\u00a0<code>openfeign-openapi-client</code>\u00a0configuration. To avoid this issue, spring cloud OpenFeign support us to use the name of target service instead of url to make connection. To do this we need an\u00a0<code>Eureka Server</code>\u00a0with registrations of\u00a0<code>openfeign-openapi-server</code>\u00a0and\u00a0<code>openfeign-openapi-client</code>. You can view the image below for more details.</p> </li> </ul> <p></p>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#eureka_server","title":"Eureka Server","text":"<ul> <li>To create Eureka Server, let's add some dependencies as below.</li> <li>Note Netflix Eureka Server dependencies  require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Server in your  Spring Boot application. You will need to add some dependencies as below:</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;  \n    &lt;/dependency&gt;  \n\n    &lt;dependency&gt;  \n         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;  \n         &lt;artifactId&gt;gson&lt;/artifactId&gt;  \n         &lt;version&gt;2.8.9&lt;/version&gt;  \n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Now, you will need to add annotation <code>@EnableEurekaServer</code> into your main class as below:</li> </ul> ServerApplication.java<pre><code>package com.eureka.server;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;  \n\n@SpringBootApplication  \n@EnableEurekaServer  \npublic class ServerApplication {  \n\n   public static void main(String[] args) {  \n      SpringApplication.run(ServerApplication.class, args);  \n   }  \n\n}\n</code></pre> <ul> <li>Then In your <code>application.yml</code>. Let's add some configuration. The details of configuration are put in the comments.</li> </ul> application.yml<pre><code>#server run at port 8761\nserver:\n  port: 8761\n\nspring:\n  application:\n    #application name\n    name: eureka-server\n\neureka:\n  client:\n    #self register is false\n    register-with-eureka: false\n    #self fetch registry is false\n    fetch-registry: false\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#openfeig-openapi-server","title":"OpenFeig-OpenApi-Server","text":"<ul> <li>So for Eureka Server, you need to add some dependencies as below in your\u00a0<code>pom.xml</code>.</li> </ul> pom.xml<pre><code> &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;2021.0.0&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--Openapi Generator--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;openapi-generator&lt;/artifactId&gt;\n            &lt;version&gt;5.4.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!--Openapi UI with validation--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n            &lt;version&gt;2.13.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.13.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n            &lt;version&gt;0.2.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n            &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;\n            &lt;version&gt;1.6.5&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--database - jpa--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n            &lt;version&gt;2.1.210&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--lombok--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.22&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--spring cloud eureka client--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n            &lt;artifactId&gt;gson&lt;/artifactId&gt;\n            &lt;version&gt;2.8.9&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;5.4.0&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;inputSpec&gt;\n                                ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                            &lt;/inputSpec&gt;\n                            &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                            &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                            &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                            &lt;supportingFilesToGenerate&gt;\n                                ApiUtil.java\n                            &lt;/supportingFilesToGenerate&gt;\n                            &lt;configOptions&gt;\n                                &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                                &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                            &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <ul> <li>To view more configuration that you can use in openapi generator plugin, you can view\u00a0this page.</li> <li>In this\u00a0<code>openfeign-openapi-server</code>\u00a0we just simply read the openapi specification yaml file to generate apis and models, then we also generate openapi ui to interact with these apis without using postman.</li> <li> <p>You can get sample openapi specification yaml\u00a0in this link</p> </li> <li> <p>After you import the dependencies, then you need to add the annotation\u00a0<code>@EnableDiscoveryClient</code>\u00a0in your file main as below:</p> </li> </ul> OpenFeignOpenApiServer.java<pre><code>package com.springboot.cloud.openfeign.openapi.server.app;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class OpenFeignOpenApiServer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(OpenFeignOpenApiServer.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Then in your\u00a0<code>application.yml</code>, you will need to add some configurations for datasource, JPA, h2 database, spring cloud and eureka client as below:</li> </ul> application.yml<pre><code>server:\n  port: 8081\n\nspring:\n  mandatory-file-encoding: UTF-8\n  http:\n    encoding:\n      charset: UTF-8\n      enabled: true\n  datasource:\n    url: jdbc:h2:file:./testdb\n    username: sa\n    password: password\n    driver-class-name: org.h2.Driver\n    platform: h2\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n    hibernate.ddl-auto: update\n    generate-ddl: true\n    show-sql: true\n  h2:\n    console:\n      enabled: true\n      path: /h2\n      settings:\n        trace: false\n        web-allow-others: false\n\n  #spring cloud configuration\n  application:\n    name: openfeign-openapi-server\n  cloud:\n    discovery:\n      enabled: true\n    loadbalancer:\n      retry:\n        enable: true\n        maxRetriesOnSameServiceInstance: 5\n        backoff:\n          maxBackoff: 5000\n\n#connect eureka server configuration\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka\n    fetch-registry: true\n</code></pre> <ul> <li>The property\u00a0<code>\u201ceureka.client.serviceUrl.defaultZone\u201d</code>\u00a0will be\u00a0<code>the url for register of eureka server</code>.</li> <li>Now let\u2019s build your service then check generated code at\u00a0<code>target/generated-sources/openapi/src/main/java/**</code>, then you should see your generated codes as in the image below:</li> </ul> <p></p> <ul> <li>Next, start your <code>eureka-server</code> and <code>openfeign-openapi-server</code> and go to <code>http://localhost:8761/eureka/</code> you will see <code>openfeign-openapi-server</code> has been registered into <code>eureka-server</code>.</li> </ul> <p></p> <ul> <li>Then when you go to\u00a0<code>http://localhost:8081/swagger-ui/index.html</code>\u00a0you should see the openapi ui is displayed as below:</li> </ul> <p></p> <ul> <li>Now, to implement codes for generated api class, you need to create a\u00a0<code>controller</code>\u00a0then you will implement the generated api class and\u00a0<code>@Override</code>\u00a0methods corresponding with apis as below:</li> </ul> ServerController.class<pre><code>package com.springboot.cloud.openfeign.openapi.server.app.controller;  \n\nimport com.springboot.cloud.openfeign.openapi.server.app.api.V1Api;  \nimport com.springboot.cloud.openfeign.openapi.server.app.model.Customer;  \nimport com.springboot.cloud.openfeign.openapi.server.app.model.CustomerRequest;  \nimport com.springboot.cloud.openfeign.openapi.server.app.service.CustomerService;  \nimport lombok.AllArgsConstructor;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.http.HttpStatus;  \nimport org.springframework.http.ResponseEntity;  \nimport org.springframework.web.bind.annotation.RestController;  \n\nimport java.util.List;  \nimport java.util.UUID;  \n\n@RestController  \n@AllArgsConstructor(onConstructor = @__(@Autowired))  \npublic class ServerController implements V1Api {  \n\n    private final CustomerService customerService;\n\n    @Override  \n    public ResponseEntity&lt;UUID&gt; createCustomer(CustomerRequest customerRequest) {  \n        return new ResponseEntity&lt;&gt;(this.customerService.createCustomer(customerRequest), HttpStatus.CREATED);  \n    }  \n\n    @Override  \n    public ResponseEntity&lt;List&lt;Customer&gt;&gt; getCustomers() {  \n        return new ResponseEntity&lt;&gt;(this.customerService.getCustomers(), HttpStatus.OK);  \n    }  \n\n}\n</code></pre> <ul> <li>Like other normal applications, we need to create\u00a0<code>CustomerService</code>\u00a0class to handle logic for Customer apis.</li> </ul> <pre><code>package com.springboot.cloud.openfeign.openapi.server.app.service;  \n\nimport com.springboot.cloud.openfeign.openapi.server.app.entity.CustomerEntity;  \nimport com.springboot.cloud.openfeign.openapi.server.app.entity.Gender;  \nimport com.springboot.cloud.openfeign.openapi.server.app.model.Customer;  \nimport com.springboot.cloud.openfeign.openapi.server.app.model.CustomerRequest;  \nimport com.springboot.cloud.openfeign.openapi.server.app.repository.CustomerRepository;  \nimport lombok.AllArgsConstructor;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.stereotype.Service;  \n\nimport java.util.List;  \nimport java.util.UUID;  \nimport java.util.stream.Collectors;  \n\n@Service  \n@AllArgsConstructor(onConstructor = @__(@Autowired))  \npublic class CustomerService {  \n\n    private final CustomerRepository customerRepository;  \n\n\n    public UUID createCustomer(CustomerRequest customerRequest) {  \n        CustomerEntity customerEntity = this.toCustomerEntity(new CustomerEntity(), customerRequest);  \n        return this.customerRepository.save(customerEntity).getId();  \n    }  \n\n    public List&lt;Customer&gt; getCustomers() {  \n        List&lt;CustomerEntity&gt; customerEntities = this.customerRepository.findAll();  \n        return this.toCustomers(customerEntities);  \n    }  \n\n    private CustomerEntity toCustomerEntity(CustomerEntity customerEntity, CustomerRequest customerRequest) {  \n        customerEntity.setAddress(customerRequest.getAddress());  \n        customerEntity.setDob(customerRequest.getDob());  \n        customerEntity.setEmail(customerRequest.getEmail());  \n        customerEntity.setGender(Gender.toGender(customerRequest.getGender().getValue()));  \n        customerEntity.setFullName(customerRequest.getFullName());  \n        customerEntity.setPhone(customerRequest.getPhone());  \n        return customerEntity;  \n    }  \n\n    private List&lt;Customer&gt; toCustomers(List&lt;CustomerEntity&gt; customerEntities) {  \n        return customerEntities.stream().map(c -&gt; this.toCustomer(c, new Customer())).collect(Collectors.toList());  \n}  \n\nprivate Customer toCustomer(CustomerEntity customerEntity, Customer customer) {  \n        customer.setId(customerEntity.getId());  \n        customer.setAddress(customerEntity.getAddress());  \n        customer.setFullName(customerEntity.getFullName());  \n        customer.setEmail(customerEntity.getEmail());  \n        customer.setGender(Customer.GenderEnum.fromValue(customerEntity.getGender().name()));  \n        customer.setPhone(customerEntity.getPhone());  \n        customer.setDob(customerEntity.getDob());  \n        customer.setCreatedAt(customerEntity.getCreatedAt());  \n        customer.setUpdatedAt(customerEntity.getUpdatedAt());  \n        return customer;  \n    }  \n\n}\n</code></pre> <ul> <li> <p>As you can see we will handle creating and getting Customers from database, you we need to define <code>CustomerEntity</code> and <code>CustomerRepository</code>.</p> </li> <li> <p>We are using JPA in this sample, so we will create a sample Customer Entity as below:</p> </li> </ul> CustomerEntity.java<pre><code>package com.springboot.cloud.openfeign.openapi.server.app.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.PrePersist;\nimport javax.persistence.PreUpdate;\nimport javax.persistence.Table;\nimport javax.validation.constraints.Email;\nimport java.time.LocalDate;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"customers\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n    private String fullName;\n    @Email\n    @Column(unique = true)\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private LocalDate dob;\n\n    private OffsetDateTime createdAt;\n\n    private OffsetDateTime updatedAt;\n\n    @PrePersist\n    public void prePersist() {\n        OffsetDateTime offsetDateTime = OffsetDateTime.now();\n        this.createdAt = offsetDateTime;\n        this.updatedAt = offsetDateTime;\n    }\n\n    @PreUpdate\n    public void preUpdate() {\n        this.updatedAt = OffsetDateTime.now();\n    }\n}\n</code></pre> Gender.java<pre><code>package com.springboot.cloud.openfeign.openapi.server.app.entity;\n\npublic enum Gender {\n\n    M, F;\n\n    public static Gender toGender(String genderStr) {\n        return Gender.valueOf(genderStr);\n    }\n\n}\n</code></pre> <ul> <li> <p>If you havem\u2019t know JPA before, so you can view\u00a0Spring Data JPA for more details.</p> </li> <li> <p>Finally we will create the\u00a0<code>CustomerRepository</code>\u00a0as below:</p> </li> </ul> CustomerRepository.java<pre><code>package com.springboot.cloud.openfeign.openapi.server.app.repository;  \n\nimport com.springboot.cloud.openfeign.openapi.server.app.entity.CustomerEntity;  \nimport org.springframework.data.jpa.repository.JpaRepository;  \nimport org.springframework.stereotype.Repository;  \n\nimport java.util.UUID;  \n\n@Repository  \npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt; {  \n\n}\n</code></pre> <ul> <li>So, let\u2019s start\u00a0<code>eureka-server</code>\u00a0and\u00a0<code>openfeign-openapi-server</code>\u00a0again, and go to\u00a0<code>http://localhost:8081/swagger-ui/index.html</code>\u00a0then trigger creating customer api and getting customer api, you should see result as below:</li> </ul> <p></p> <p></p> <ul> <li>So that\u2019s all for\u00a0<code>openfeign-openapi-server</code>, now we will move to\u00a0<code>openfeign-openapi-client</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#openfeign-openapi-client","title":"OpenFeign-OpenApi-Client","text":"<ul> <li>So in this\u00a0<code>openfeign-openapi-client</code>\u00a0we will use the openapi specification yaml file from\u00a0<code>openfeign-openapi-server</code>\u00a0to generate client.</li> <li>For\u00a0<code>openfeign-openapi-client</code>\u00a0we need to add some dependencies as below:</li> </ul> pom.xml<pre><code>    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;2021.0.0&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;dependencies&gt;\n\n        &lt;!--spring boot starter--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--Openapi Generator--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;openapi-generator&lt;/artifactId&gt;\n            &lt;version&gt;5.4.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--Openapi with validation--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n            &lt;version&gt;2.13.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.13.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n            &lt;version&gt;0.2.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--lombok--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.22&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--Spring cloud openfeign--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n            &lt;version&gt;3.1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n            &lt;version&gt;3.1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- eureka client--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n            &lt;artifactId&gt;gson&lt;/artifactId&gt;\n            &lt;version&gt;2.8.9&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n                &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;5.4.0&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;generate&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;inputSpec&gt;\n                                ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                            &lt;/inputSpec&gt;\n                            &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                            &lt;apiPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.api&lt;/apiPackage&gt;\n                            &lt;modelPackage&gt;com.springboot.cloud.openfeign.openapi.server.app.model&lt;/modelPackage&gt;\n                            &lt;supportingFilesToGenerate&gt;\n                                ApiUtil.java\n                            &lt;/supportingFilesToGenerate&gt;\n                            &lt;configOptions&gt;\n                                &lt;library&gt;spring-cloud&lt;/library&gt;\n                                &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                                &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                                &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                                &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                            &lt;/configOptions&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <ul> <li>We should note that, to generate openapi client side, we have to config\u00a0<code>library</code>\u00a0with value as\u00a0<code>spring-cloud</code>\u00a0in the tag\u00a0<code>configOptions</code>.</li> <li> <p>To view more configuration that you can use in openapi generator plugin, you can view\u00a0this page.</p> </li> <li> <p>After you import the dependencies, then you need to add annotations\u00a0<code>@EnableDiscoveryClient</code>\u00a0and\u00a0<code>@EnableFeignClients</code>\u00a0in your file main as below:</p> </li> </ul> OpenFeignOpenApiClient.java<pre><code>package com.springboot.cloud.openfeign.openapi.client.app;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class OpenFeignOpenApiClient {\n\n    public static void main(String[] args) {\n        SpringApplication.run(OpenFeignOpenApiClient.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Then in your\u00a0<code>application.yml</code>, you will need to add some configurations for openfeign server name, spring cloud, spring cloud load loadbalancer and eureka client as below:</li> </ul> application.yml<pre><code>server:\n  port: 8082\n\nopenfeign:\n  server:\n    name: OPENFEIGN-OPENAPI-SERVER\n\nspring:\n  application:\n    name: openfeign-openapi-client\n  cloud:\n    discovery:\n      enabled: true\n    loadbalancer:\n      retry:\n        enable: true\n        maxRetriesOnSameServiceInstance: 5\n        backoff:\n          minBackoff: 10000\n          maxBackoff: 30000\n          jitter: 5000\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka\n    fetch-registry: true\n</code></pre> <ul> <li>Now, let\u2019s build your\u00a0<code>openfeign-openapi-client</code>, then check generated code at\u00a0<code>target/generated-sources/openapi/src/main/java/**</code>\u00a0and you should see your generated codes as in the image below:</li> </ul> <p></p> <ul> <li>Next, to openfeign can recognize and use your generated client apis, you should create a configuration class and make some configuration as below:</li> </ul> FeignClientConfig.java<pre><code>package com.springboot.cloud.openfeign.openapi.client.app.config;\n\nimport com.springboot.cloud.openfeign.openapi.server.app.api.ServerApi;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.openfeign.FeignClientBuilder;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(\"com.springboot.cloud.openfeign.openapi.server.app\")\npublic class FeignClientConfig {\n\n    @Value(\"${openfeign.server.name}\")\n    private String serverName;\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    @Bean\n    public ServerApi v1ApiFeignClient() {\n        return new FeignClientBuilder(applicationContext)\n                        .forType(ServerApi.class, serverName)\n                        .build();\n    }\n\n}\n</code></pre> <ul> <li> <p>So in this class we will use\u00a0<code>ApplicationContext</code>\u00a0and generated client api class\u00a0<code>ServerApi</code>\u00a0to create\u00a0<code>ServerApi</code>\u00a0feign client. At this point you will confuse that how client can connect to server, so connecting to\u00a0<code>openfeign-openapi-client</code>\u00a0will be handle apart by\u00a0<code>eureka-server</code>. both\u00a0<code>openfeign-openapi-client</code>\u00a0and\u00a0<code>openfeign-openapi-server</code>\u00a0are connected to\u00a0<code>eureka-server</code>, so its know exactly the application names and urls correspondingly. Thus, in spring cloud openfeign, we just use the application name of\u00a0<code>openfeign-openapi-server</code>\u00a0then we can make the connection to. Doing this way, we won\u2019t worry about changing url or port on\u00a0<code>openfeign-openapi-server</code>\u00a0anymore.</p> </li> <li> <p>Note: we should use application name with all capital letters because\u00a0<code>eureka-server</code>\u00a0will automatically capitalize all application names of clients when they connect to.</p> </li> <li> <p>Finally, we will create a controller with an api, this api will use openfeign client that we configure above to get data from\u00a0<code>openfeign-openapi-server</code>. The controller is as below:</p> </li> </ul> ClientController.java<pre><code>package com.springboot.cloud.openfeign.openapi.client.app.controller;\n\nimport com.springboot.cloud.openfeign.openapi.server.app.api.ServerApi;\nimport com.springboot.cloud.openfeign.openapi.server.app.model.Customer;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class ClientController {\n\n    private final ServerApi serverApi;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/client/customers\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;List&lt;Customer&gt;&gt; getCustomer() {\n        return this.serverApi._getCustomers();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#testing","title":"Testing","text":"<ul> <li>Let\u2019s start 3 services, then go to\u00a0<code>http://localhost:8761/eureka</code>\u00a0to check the client connections. You should see result as below:</li> </ul> <ul> <li>Now, using postman to call to the export api of <code>openfeign-openapi-server</code>, you will see the result as below:</li> </ul> <pre><code>curl --location --request GET 'http://localhost:8082/v1/client/customers'\n</code></pre> <ul> <li>So it means, all configuration has been successful, request from postman will go to <code>openfeign-openapi-client</code>, then <code>openfeign-openapi-client</code> will call to <code>openfeign-openapi-server</code> by application name with supports of <code>eureka-server</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#summary","title":"Summary","text":"<ul> <li> <p>The <code>OpenAPI Specification</code> (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic</p> </li> <li> <p>With OpenApi Generator in Spring Boot: we can generate source code for boths server side and client side which will help use reduce writing codes, making developing application faster. Moreover, we also can generate OpenApi UI for server apis that we defined in OpenApi specification file.</p> </li> <li> <p>Combining OpenFeign and spring cloud eureka server will help us using generated OpenApi client easily and avoid issues that come from server side as changing domain url and ports. Moreover, we also can keep tract services that are running/available in our system.</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#see_also","title":"See Also","text":"<ul> <li>You can view full source code here</li> <li>Spring Boot With OpenApi</li> <li>Spring Cloud OpenFeign Basic</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/OpenApi%20-%20OpenFeign%20Integration/#referemces","title":"Referemces","text":"<ul> <li>SWAGGER IO</li> <li>SWAGGER EDITOR</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Introduction/","title":"Spring Cloud Introduction","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Introduction/#what_is_the_spring_cloud","title":"What Is The Spring Cloud?","text":"<ul> <li><code>Spring Cloud</code>  provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer\u2019s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Introduction/#features","title":"Features","text":"<ul> <li>Spring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.<ul> <li>Distributed/versioned configuration</li> <li>Service registration and discovery</li> <li>Routing</li> <li>Service-to-service calls</li> <li>Load balancing</li> <li>Circuit Breakers</li> <li>Global locks</li> <li>Leadership election and cluster state</li> <li>Distributed messaging</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Introduction/#getting_started","title":"Getting Started","text":"<ul> <li>If you are using an existing  Spring Boot app you want to add Spring Cloud to that app, the first step is to determine the version of Spring Cloud you should use. The version you use in your app will depend on the version of Spring Boot you are using.</li> <li>The table below outlines which version of Spring Cloud maps to which version of Spring Boot.</li> </ul> Release Train Boot Version Dalston 1.5.x Edgware 1.5.x Finchley 2.0.x Greenwich 2.1.x Hoxton 2.2.x, 2.3.x (Starting with SR5) 2020.0.x aka Ilford 2.4.x, 2.5.x (Starting with 2020.0.3) 2021.0.x aka Jubilee 2.6.x <p>Spring Cloud Dalston, Edgware, Finchley, and Greenwich have all reached end of life status and are no longer supported.</p> <ul> <li> <p>Bug fixes and backwards compatible features are added to each release train via a service release (SR). Once you determine which version of Spring Cloud to use, you should use the latest service release for that release train. You can find the latest service release information on our\u00a0release notes page.</p> </li> <li> <p>Now that you know which release train to use and the latest service release for that release train you are ready to add the Spring Cloud BOM to your application.</p> </li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Introduction/#main_projects","title":"Main Projects","text":"<ul> <li>Spring Cloud Netflix Eureka Server-Client</li> <li>Spring Cloud OpenFeign Basic</li> <li>Spring Cloud OpenFeign Custom</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Introduction/#references","title":"References","text":"<ul> <li>Spring IO</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/","title":"Spring Cloud Netflix Eureka Server-Client","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#what_is_netflix_eureka_server","title":"What Is Netflix Eureka Server?","text":"<ul> <li><code>Eureka Server</code> is an application that holds the information about all client-service applications. Every Micro service will register into the <code>Eureka server</code> and <code>Eureka server</code> knows all the client applications running on each port and IP address. <code>Eureka Server</code> is also known as <code>Discovery Server</code>.</li> <li>More information</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#netflix_eureka_server_dependencies","title":"Netflix Eureka Server Dependencies","text":"<ul> <li>Note Netflix Eureka Server dependencies  require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Server in your  Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;  \n    &lt;/dependency&gt;  \n\n    &lt;dependency&gt;  \n         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;  \n         &lt;artifactId&gt;gson&lt;/artifactId&gt;  \n         &lt;version&gt;2.8.9&lt;/version&gt;  \n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#configure_netflix_eureka_server","title":"Configure Netflix Eureka Server","text":"<ul> <li>Now, you will need to add annotation <code>@EnableEurekaServer</code> into your main class as below.</li> </ul> ServerApplication.java<pre><code>package com.eureka.server;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;  \n\n@SpringBootApplication  \n@EnableEurekaServer  \npublic class ServerApplication {  \n\n   public static void main(String[] args) {  \n      SpringApplication.run(ServerApplication.class, args);  \n   }  \n\n}\n</code></pre> <ul> <li>Then In your <code>application.yml</code>. Let's add some configuration. The details of configuration are put in the comments.</li> </ul> application.yml<pre><code>#server run at port 8761\nserver:\n  port: 8761\n\nspring:\n  application:\n    #application name\n    name: eureka-server\n\neureka:\n  client:\n    #self register is false\n    register-with-eureka: false\n    #self fetch registry is false\n    fetch-registry: false\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#testing","title":"TESTING","text":"<ul> <li>Now, let's start your Spring Boot service and go to access to <code>http://localhost:8761</code> to check the eureka service has run successfully.</li> </ul> <ul> <li>Then you can check your service log and you can see the url as in the image below which will be used for client to register to eureka server (<code>http://localhost:8761/eureka/</code>)</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#what_is_netflix_eureka_client","title":"What Is Netflix Eureka Client?","text":"<ul> <li><code>Eureka Client</code>: it can be a microservice that is ready to work so it registers itself to the <code>Eureka server</code> e.g. an API for some app, or some application that goes to the server and asks for directions to a specific microservice.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#netflix_eureka_client_dependencies","title":"Netflix Eureka Client Dependencies","text":"<ul> <li>Like <code>Eureka Server</code>, you also need to add a dependency for Spring Cloud.</li> <li>Note Netflix Eureka Server dependencies  require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Client in your Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#configure_netflix_eureka_client","title":"Configure Netflix Eureka Client","text":"<ul> <li>Now, Let's add annotation <code>@EnableDiscoveryClient</code> into main class.</li> </ul> BffApplication.java<pre><code>package com.application.bff;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class BffApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(BffApplication.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Then add some configuration in <code>application.yml</code> as below to connect to <code>Eureka Server</code>. The property <code>\u201ceureka.client.serviceUrl.defaultZone\u201d</code> will be <code>the url for register of eureka server</code>.</li> </ul> application.yml<pre><code>#service run at port 9090\nserver:\n  port: 9090\n\nspring:\n  application:\n    #service name which will be showed on eureka server dashboard\n    name: application-bff-service\n  #Enable Spring Cloud Discovery\n  cloud:\n    discovery:\n      enabled: true\n\n#register this service to eureka server by url\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#testing_1","title":"Testing","text":"<ul> <li>Now, let's start your Spring Boot service of Eureka Client then recheck the eureka server dashboard and you can see client registered successfully.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#how_do_they_work","title":"How Do They Work?","text":"<ul> <li>From these sections above, you will know how to create Eureka Server, Eureka Client and connect Client to Server. So in this section we will find how do they work behind the scene.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#eureka_client_instance_statuses","title":"Eureka Client Instance Statuses","text":"<ul> <li>By default, Eureka client starts in\u00a0<code>STARTING</code>\u00a0state which gives the instance a chance to do application-specific initializations, before it can serve traffic.</li> <li>The application then can explicitly put the instance for traffic, by turning the instance status to\u00a0<code>UP</code>.</li> <li>The application can also register health check\u00a0callbacks\u00a0which can change the instance status to <code>DOWN</code>\u00a0optionally when it can not start successfully.</li> <li>At Netflix, we also use the\u00a0<code>OUT_OF_SERVICE</code>\u00a0status, primarily for taking an instance out of traffic. It is used for easy rollback of deployments of new revisions in case of problems. Most applications create a new ASG(Auto Scaling Group) for a new revision and the traffic gets routed the new ASGs. In the case of problems, rolling back a revision is just a matter of turning off the traffic by setting all instances in the ASG to\u00a0<code>OUT_OF_SERVICE</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#eureka_server_-_eureka_client_interactions","title":"Eureka Server - Eureka Client Interactions","text":"<ul> <li>The Eureka client interacts with the server the following ways.</li> <li> <p><code>Register</code>: Eureka client registers the information about the running instance to the Eureka server. Registration happens on first heartbeat (after 30 seconds).</p> </li> <li> <p><code>Renew</code>: Eureka client needs to renew the lease by sending heartbeats every 30 seconds. The renewal informs the Eureka server that the instance is still alive. If the server hasn't seen a renewal for 90 seconds, it removes the instance out of its registry. It is advisable not to change the renewal interval since the server uses that information to determine if there is a wide spread problem with the client to server communication.</p> </li> <li> <p><code>Fetch Registry</code>: Eureka clients fetches the registry information from the server and caches it locally. After that, the clients use that information to find other services. This information is updated periodically (every 30 seconds) by getting the delta updates between the last fetch cycle and the current one. The delta information is held longer (for about 3 mins) in the server, hence the delta fetches may return the same instances again. The Eureka client automatically handles the duplicate information.</p> </li> </ul> <p></p> <ul> <li>After getting the deltas, Eureka client reconciles the information with the server by comparing the instance counts returned by the server and if the information does not match for some reason, the whole registry information is fetched again. Eureka server caches the compressed payload of the deltas, whole registry and also per application as well as the uncompressed information of the same. The payload also supports both JSON/XML formats. Eureka client gets the information in compressed JSON format using jersey apache client.</li> <li>You can visit method <code>fetchRegistry()</code> in class <code>com.netflix.discovery.DiscoveryClient</code>  to see the Eureka Client fetches the registry information from Eureka Server. This method will be called every 30s.</li> </ul> DiscoveryClient.java<pre><code>    /**\n     * Fetches the registry information.\n     *\n     * &lt;p&gt;\n     * This method tries to get only deltas after the first fetch unless there\n     * is an issue in reconciling eureka server and client registry information.\n     * &lt;/p&gt;\n     *\n     * @param forceFullRegistryFetch Forces a full registry fetch.\n     *\n     * @return true if the registry was fetched\n     */\n    private boolean fetchRegistry(boolean forceFullRegistryFetch) {\n        Stopwatch tracer = FETCH_REGISTRY_TIMER.start();\n\n        try {\n            // If the delta is disabled or if it is the first time, get all\n            // applications\n            Applications applications = getApplications();\n\n            if (clientConfig.shouldDisableDelta()\n                    || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))\n                    || forceFullRegistryFetch\n                    || (applications == null)\n                    || (applications.getRegisteredApplications().size() == 0)\n                    || (applications.getVersion() == -1)) //Client application does not have latest library supporting delta\n            {\n                logger.info(\"Disable delta property : {}\", clientConfig.shouldDisableDelta());\n                logger.info(\"Single vip registry refresh property : {}\", clientConfig.getRegistryRefreshSingleVipAddress());\n                logger.info(\"Force full registry fetch : {}\", forceFullRegistryFetch);\n                logger.info(\"Application is null : {}\", (applications == null));\n                logger.info(\"Registered Applications size is zero : {}\",\n                        (applications.getRegisteredApplications().size() == 0));\n                logger.info(\"Application version is -1: {}\", (applications.getVersion() == -1));\n                getAndStoreFullRegistry();\n            } else {\n                getAndUpdateDelta(applications);\n            }\n            applications.setAppsHashCode(applications.getReconcileHashCode());\n            logTotalInstances();\n        } catch (Throwable e) {\n            logger.info(PREFIX + \"{} - was unable to refresh its cache! This periodic background refresh will be retried in {} seconds. status = {} stacktrace = {}\",\n                    appPathIdentifier, clientConfig.getRegistryFetchIntervalSeconds(), e.getMessage(), ExceptionUtils.getStackTrace(e));\n            return false;\n        } finally {\n            if (tracer != null) {\n                tracer.stop();\n            }\n        }\n\n        // Notify about cache refresh before updating the instance remote status\n        onCacheRefreshed();\n\n        // Update remote status based on refreshed data held in the cache\n        updateInstanceRemoteStatus();\n\n        // registry was fetched successfully, so return true\n        return true;\n    }\n</code></pre> <ul> <li><code>Cancel</code>: Eureka client sends a cancel request to Eureka server on shutdown. This removes the instance from the server's instance registry thereby effectively taking the instance out of traffic.<ul> <li>This is done when the Eureka client shuts down and the application should make sure to call the following during its shutdown.</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#additional_information","title":"Additional Information","text":"<ul> <li><code>Time Lag</code>: All operations from Eureka client may take some time to reflect in the Eureka servers and subsequently in other Eureka clients. This is because of the caching of the payload on the eureka server which is refreshed periodically to reflect new information. Eureka clients also fetch deltas periodically. Hence, it may take up to 2 mins for changes to propagate to all Eureka clients.</li> <li><code>Communication mechanism</code>: By default, Eureka clients use\u00a0Jersey\u00a0and Jackson along with JSON payload to communicate with Eureka Server.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud Introduction</li> <li>Spring Boot Introduction</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Netflix%20Eureka%20Server-Client/#references","title":"References","text":"<ul> <li>Tutorials Point</li> <li>GitHub Netflix Eureka</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/","title":"Spring Cloud OpenFeign Basic","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#what_is_feign","title":"What Is Feign?","text":"<ul> <li>Feign is a declarative web service client. It makes writing web service clients easier. To use Feign, just create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. </li> <li><code>Feign</code> uses tools like Jersey and CXF to write java clients for REST or SOAP services. Furthermore, <code>Feign</code> allows you to write your own code on top of http libraries such as Apache HC. <code>Feign</code> connects your code to http APIs with minimal overhead and code via customizable decoders and error handling, which can be written to any text-based http API.</li> <li><code>Feign</code> works by processing annotations into a templatized request. Arguments are applied to these templates in a straightforward fashion before output. Although <code>Feign</code> is limited to supporting text-based APIs, it dramatically simplifies system aspects such as replaying requests. Furthermore, Feign makes it easy to unit test your conversions knowing this.</li> <li><code>Feign</code> 10.x and above are built on Java 8 and should work on Java 9, 10, and 11. For those that need JDK 6 compatibility, please use Feign 9.x</li> <li>By default <code>Feign</code> will use it's client which is built based on <code>Java Http Client</code> and annotations  to define <code>Contract</code> between the interface and how the underlying client should work. Feign's default contract defines the following annotations:</li> </ul> Annotation Interface Target Usage @RequestLine Method Defines the HttpMethod and UriTemplate for request. Expressions, values wrapped in curly-braces {expression} are resolved using their corresponding @Param annotated parameters. @Param Parameter Defines a template variable, whose value will be used to resolve the corresponding template Expression, by name provided as annotation value. If value is missing it will try to get the name from bytecode method parameter name (if the code was compiled with -parameters flag). @Headers Method Type    Defines a HeaderTemplate; a variation on a UriTemplate. that uses @Param annotated values to resolve the corresponding Expressions. When used on a Type, the template will be applied to every request. When used on a Method, the template will apply only to the annotated method. @QueryMap Parameter Defines a Map of name-value pairs, or POJO, to expand into a query string. @HeaderMap Parameter Defines a Map of name-value pairs, to expand into Http Headers @Body Method Defines a Template, similar to a UriTemplate and HeaderTemplate, that uses @Param annotated values to resolve the corresponding Expressions.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#what_is_the_spring_cloud_openfeign","title":"What Is The Spring Cloud OpenFeign?","text":"<ul> <li><code>Spring Cloud Openfeign</code> provides OpenFeign integrations for  Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.</li> <li>Spring Cloud adds support for Spring MVC annotations and for using the same <code>HttpMessageConverters</code> used by default in Spring Web. Spring Cloud integrates Eureka, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign. Basically, the dependency  <code>spring-cloud-starter-openfeign</code> that we use in Spring Boot applications is built based on the <code>Feign-core</code> with a lot of powerful features. You can look at the dependency tree below to see all dependencies wrapped in <code>spring-cloud-starter-openfeign</code>.</li> </ul> <pre><code>+- org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.1.0:compile\n|  +- org.springframework.cloud:spring-cloud-starter:jar:3.1.0:compile\n|  |  +- org.springframework.cloud:spring-cloud-context:jar:3.1.0:compile\n|  |  \\- org.springframework.security:spring-security-rsa:jar:1.0.10.RELEASE:compile\n|  |     \\- org.bouncycastle:bcpkix-jdk15on:jar:1.68:compile\n|  |        \\- org.bouncycastle:bcprov-jdk15on:jar:1.68:compile\n|  +- org.springframework.cloud:spring-cloud-openfeign-core:jar:3.1.0:compile\n|  |  +- org.springframework.boot:spring-boot-starter-aop:jar:2.6.1:compile\n|  |  |  \\- org.aspectj:aspectjweaver:jar:1.9.7:compile\n|  |  \\- io.github.openfeign.form:feign-form-spring:jar:3.8.0:compile\n|  |     +- io.github.openfeign.form:feign-form:jar:3.8.0:compile\n|  |     \\- commons-fileupload:commons-fileupload:jar:1.4:compile\n|  +- org.springframework.cloud:spring-cloud-commons:jar:3.1.0:compile\n|  |  \\- org.springframework.security:spring-security-crypto:jar:5.6.0:compile\n|  +- io.github.openfeign:feign-core:jar:11.7:compile\n|  \\- io.github.openfeign:feign-slf4j:jar:11.7:compile\n</code></pre> <ul> <li><code>Spring Cloud OpenFeign</code> provides the following beans by default for feign:</li> </ul> BeanType BeanName ClassName Decoder feignDecoder SpringDecoder Encoder feignEncoder SpringEncoder Logger feignLogger Slf4jLogger MicrometerCapability micrometerCapability If feign-micrometer is on the classpath and MeterRegistry is available CachingCapability cachingCapability If @EnableCaching annotation is used. Can be disabled via feign.cache.enabled. Contract feignContract SpringMvcContract Feign.Builder feignBuilder FeignCircuitBreaker.Builder Client feignClient If Spring Cloud LoadBalancer is on the classpath, FeignBlockingLoadBalancerClient is used. If none of them is on the classpath, the default feign client is used. <ul> <li>So with <code>Contract</code> is <code>SpringMvcContract</code>, so now you can use <code>Spring MVC annotaions</code> to define the client interfaces. Let's see some common annotations in the table below.</li> </ul> Annotation Path @RequestMapping import org.springframework.web.bind.annotation.RequestMapping; @PathVariable import org.springframework.web.bind.annotation.PathVariable; @RequestParam import org.springframework.web.bind.annotation.RequestParam; @RequestBody import org.springframework.web.bind.annotation.RequestBody; <ul> <li>Let's take an example:</li> </ul> AdapterServiceApi.java<pre><code>public interface AdapterServiceApi {\n\n        // define api path, method, input path variable and type of response\n        @RequestMapping(method = RequestMethod.GET, value = \"blog/posts/{id}\")\n        String getPostById(@PathVariable(value = \"id\") String id);\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#spring_cloud_openfeign_dependencies","title":"Spring Cloud OpenFeign Dependencies","text":"<ul> <li>To add Spring Cloud OpenFeign dependencies, you have to add Spring Cloud dependencies first as mentioned in Spring Cloud Introduction. So you have to add this dependency first for Spring Cloud</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then you can add this dependency below for Spring Cloud OpenFeign.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;  \n   &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;  \n&lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#spring_cloud_openfeign_default_using","title":"Spring Cloud OpenFeign Default Using","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#enable_spring_cloud_openfeign","title":"Enable Spring Cloud OpenFeign","text":"<ul> <li>Add annotation <code>@EnableFeignClients</code> into the <code>main</code> class as below to enable FeignClient.</li> </ul> BffApplication.java<pre><code>package com.application.bff;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.openfeign.EnableFeignClients;  \n\n@EnableFeignClients  \n@SpringBootApplication  \npublic class BffApplication {  \n\n   public static void main(String[] args) {  \n      SpringApplication.run(BffApplication.class, args);  \n   }  \n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#create_feignclient","title":"Create FeignClient","text":"<ul> <li>Now we will create an adapter interface to configure OpenFeign with target api as below:</li> </ul> AdapterServiceApi.java<pre><code>package com.application.bff.adapters;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n// name of this feign client adapter and the base url which is defined in `application.yml`\n@FeignClient(name = \"adapter.service.api\", url = \"${adapter.service.url.vn}\")\npublic interface AdapterServiceApi {\n\n        // define api path, method, input path variable and type of response\n        @RequestMapping(method = RequestMethod.GET, value = \"blog/posts/{id}\")\n        String getPostById(@PathVariable(value = \"id\") String id);\n}\n</code></pre> <ul> <li>The <code>application.yml</code> will contain the target URL of REST Server that we want to call to.</li> </ul> application.yml<pre><code>#service run at port 9090\nserver:\n  port: 9090\n\nadapter:\n  service:\n    url: http://localhost:8080\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#using_openfeign_in_code","title":"Using OpenFeign In Code","text":"<ul> <li>Now, you created the FeignClient interface. So you can inject for any service classes by <code>@Autowired</code> and methods for using.</li> </ul> AdapterServiceImpl.java<pre><code>package com.application.bff.service;\n\nimport com.application.bff.adapters.AdapterServiceApi;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class AdapterServiceImpl implements AdapterService{\n\n    @Autowired\n    private AdapterServiceApi adapterServiceApi;\n\n    @Override\n    public String getPostById(String id) {\n        return adapterServiceApi.getPostById(id);\n    }\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#testing","title":"Testing","text":"<ul> <li> <p>Now, Let's start target service application(Service A) and your application that contain the OpenFeign configuration above (Service B). Then when you can an api of Service B then this api will call to an api of Service A and you should see the result from the Service A.</p> </li> <li> <p>Let's call an api of Service A to create an data.</p> </li> </ul> <p></p> <ul> <li>Then let's call an api of Service B to get the data that has just created on Service A</li> </ul> <p></p> <ul> <li>As you can see the Service B can call to api of Service A to get data successfully, so it mean the configuration for OpenFeign is correct.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud Introduction</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Basic/#references","title":"References","text":"<ul> <li>GitHub </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/","title":"Spring Cloud OpenFeign Custom","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#why_do_we_need_to_custom_openfeign","title":"Why Do We Need To Custom OpenFeign?","text":"<ul> <li>So If you had take an example with Spring Cloud OpenFeign Basic so you can handle business requirements that need to call to another applications. However for specific cases, you had to create your own configurations. So let's imagine that you have a spring boot application and there is a business requirement that requires you to export an api. In which, this api should response data from 2 servers  based on the ISO country code because one server is deployed at VietNam and the other one is deployed at Singapore.</li> <li>So some people can say that, they can create 2 <code>OpenFeign</code> interfaces and use <code>if else</code> or <code>switch case</code> for the ISO country code to get the suitable <code>OpenFeign</code>. Yes, actually they can handle this case like that but if later we have 10 or 20 servers deployed at 10 or 20 countries, so you have to create 10 or 20 <code>OpenFeign</code> interfaces and use <code>if else</code> or <code>switch case</code> to support these countries codes? </li> <li>Actually, we just need to configure the <code>OpenFeign</code> a little bit and this business requirement can be solved and we also don't worry about extend supports for  10 or 20 servers deployed at 10 or 20 countries. -So,  let's take an example in the following steps.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#dependencies","title":"Dependencies","text":"<ul> <li>Dependency for Spring Cloud</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then you can add this dependency below for Spring Cloud OpenFeign.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;  \n   &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;  \n&lt;/dependency&gt;\n</code></pre> <ul> <li>Because we will configure Spring Cloud OpenFeign more to handle our business, so we have to add some more dependencies as below.</li> </ul> pom.xml<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;version&gt;3.1.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;\n        &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;\n        &lt;version&gt;10.11&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;\n        &lt;artifactId&gt;feign-gson&lt;/artifactId&gt;\n        &lt;version&gt;11.8&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;\n        &lt;artifactId&gt;feign-slf4j&lt;/artifactId&gt;\n        &lt;version&gt;10.11&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#configuration","title":"Configuration","text":"<ul> <li>Assume that VietNam and Singapore servers export the api <code>GET blog/posts/{id}</code>. So, we have to create an adapter interface for this api target as below.</li> </ul> AdapterServiceApi.java<pre><code>package com.springboot.cloud.bff.openfeign.lib.api;\n\nimport com.springboot.cloud.bff.openfeign.lib.model.PostResponse;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\npublic interface AdapterServiceApi {\n\n    @RequestMapping(method = RequestMethod.GET, value = \"blog/posts/{id}\")\n    PostResponse getPostById(@PathVariable(value = \"id\") String id);\n\n}\n</code></pre> <ul> <li>Then, create a configuration class and use\u00a0<code>Feign.builder()</code>\u00a0to configure <code>Feign</code> for the adapter interface as below</li> </ul> FeignClientAdapterBuilder.java<pre><code>package com.springboot.cloud.openfeign.lib.service;\n\nimport feign.Feign;\nimport feign.Logger;\nimport feign.codec.ErrorDecoder;\nimport feign.gson.GsonDecoder;\nimport feign.gson.GsonEncoder;\nimport feign.okhttp.OkHttpClient;\nimport feign.slf4j.Slf4jLogger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.openfeign.support.SpringMvcContract;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\n@Configuration\npublic class FeignClientAdapterBuilder&lt;T&gt; {\n\n    @Autowired\n    private Environment env;\n\n    public T feignClientAdapterConfig(String prefix, String code, Class&lt;T&gt; tClass) {\n        return Feign.builder()\n                .client(new OkHttpClient()) //configure client\n                .decoder(new GsonDecoder()) //configure decoder\n                .encoder(new GsonEncoder()) //configure encoder\n                .errorDecoder(new ErrorDecoder.Default())   //confiure errorDecoder\n                .logger(new Slf4jLogger(tClass))     //configure logger\n                .logLevel(Logger.Level.FULL)        //configure logLevel\n                .contract(new SpringMvcContract()) //configure contract\n                //configure target url\n                .target(tClass, env.getProperty(prefix.concat(\".\").concat(code)));\n    }\n\n}\n</code></pre> <ul> <li>So, the default <code>Feign</code> configurations in <code>Spring Cloud OpenFeign</code> will look like in the table below.</li> </ul> BeanType BeanName ClassName Decoder feignDecoder SpringDecoder Encoder feignEncoder SpringEncoder Logger feignLogger Slf4jLogger MicrometerCapability micrometerCapability If feign-micrometer is on the classpath and MeterRegistry is available CachingCapability cachingCapability If @EnableCaching annotation is used. Can be disabled via feign.cache.enabled. Contract feignContract SpringMvcContract Feign.Builder feignBuilder FeignCircuitBreaker.Builder Client feignClient If Spring Cloud LoadBalancer is on the classpath, FeignBlockingLoadBalancerClient is used. If none of them is on the classpath, the default feign client is used. <ul> <li>In this example, we will change some configurations as in the following table.</li> </ul> BeanType BeanName ClassName Decoder gsonDecoder SpringDecoder Encoder gsonDecoder SpringEncoder Logger slf4jLogger Slf4jLogger Contract springMvcContract SpringMvcContract Feign.Builder feignBuilder Feign.Builder Client okHttpClient OkHttpClient <ul> <li>As you can see in the target configuration, the url will be dynamic set base on the input\u00a0<code>code</code>\u00a0of method. In this example, it will be the <code>2 ISO countryCode</code>. So we need to add the target urls into\u00a0<code>application.yml</code> as below.</li> </ul> application.yml<pre><code>server:\n  port: 9092\n\nadapter:\n  service:\n    url:\n      vn: http://localhost:8080\n      sg: http://localhost:9090\n</code></pre> <ul> <li>So with the country code is <code>vn</code> or <code>sg</code>, It will call to the url respectively. Then if in future, there are 10 or 20 more servers with 10 or 20 new country codes, we just need to add them in this <code>application.yml</code> and restart our Spring Boot application.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#service","title":"Service","text":"<ul> <li>Now we can use this\u00a0<code>FeignClientAdapterBuilder</code>\u00a0in any Service class by\u00a0<code>@Autowired</code>. Let\u2019s create a service and put codes as below</li> </ul> PostService.java<pre><code>package com.springboot.cloud.bff.openfeign.lib.service;  \n\nimport com.google.gson.Gson;  \nimport com.springboot.cloud.bff.openfeign.lib.api.AdapterServiceApi;  \nimport com.springboot.cloud.openfeign.lib.service.FeignClientAdapterBuilder;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.stereotype.Service;  \n\n@Service  \npublic class PostService {  \n\n    @Autowired  \n    private FeignClientAdapterBuilder&lt;AdapterServiceApi&gt; feignClientAdapterBuilder;  \n\n    public String getPostById(String countryCode, String id) {  \n        AdapterServiceApi adapterServiceApi = this.feignClientAdapterBuilder  \n                        .feignClientAdapterConfig(\"adapter.service.url\", countryCode, AdapterServiceApi.class);  \n        return new Gson().toJson(adapterServiceApi.getPostById(id));  \n    }  \n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#controller","title":"Controller","text":"<ul> <li>Finally, create a simple REST controller with an api which will call the Service above.</li> </ul> ApiController.java<pre><code>package com.springboot.cloud.bff.openfeign.lib.controller;\n\nimport com.springboot.cloud.bff.openfeign.lib.service.PostService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ApiController {\n\n    @Autowired\n    private PostService postService;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/country/{countryId}/application/posts/{id}\", produces = {\"application/json\"})\n    public ResponseEntity&lt;String&gt; getPostById(@PathVariable(\"countryId\") String countryId, @PathVariable(\"id\") String id) {\n        return new ResponseEntity&lt;&gt;(postService.getPostById(countryId, id), HttpStatus.OK);\n    }\n\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud OpenFeign Basic</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Custom/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/","title":"Spring Cloud OpenFeign Interceptor","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#request_interceptor_concept","title":"Request Interceptor Concept","text":"<ul> <li><code>HTTP Interceptors</code> allow us to check or modify all the incoming or outgoing HTTP requests in our application. We can use them if we want to apply something like an authorization header to all the requests.</li> <li>There are many use-cases where <code>HTTP Interceptors</code> can come in handy. Since they intercept all the API calls, we can use them to apply some logic before or after the API call. These <code>interceptors</code> have access to the complete request and response body. So, if we want to apply some logic to all the requests, we can add it once using an <code>interceptor</code> instead of writing separate code for every request. Here are some examples of things we can do.<ul> <li>Apply an authorization header to all the requests.</li> <li>Prefix all the requests with the server name.</li> <li>Log all the requests and responses.</li> <li>Set a global error catch.</li> <li>Resend the request if it fails.</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#basic_auth_request_interceptor","title":"Basic Auth Request Interceptor","text":"<ul> <li>In <code>spring-cloud-starter-openfeign</code> dependency , we have been already provided the <code>BasicAuthRequestInterceptor</code> for supporting calling to apis which require the basic authentication token.</li> <li>So, let's start with the example below then we can understand it easily.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#prepare","title":"Prepare","text":"<ul> <li>So to begin with the example, we need to prepare some application services as below:</li> </ul> <ul> <li>In this image we will use <code>Postman</code> to call to the <code>Client Application</code> that we will configure below, then from this Client Application, it will call to the <code>Resource Application</code> which is configured with Basic Authentication.</li> <li>For the source code of <code>Resource Application</code> you can download here.</li> <li>Now, let's create and configure the <code>Client Application</code> as below.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#dependencies","title":"Dependencies","text":"<ul> <li>To use <code>BasicAuthRequestInterceptor</code> in <code>OpenFeign</code>, you need to import the dependency below into the <code>pom.xml</code> of your <code>Client Application</code> which is a Spring Boot application.</li> </ul> pom.xml<pre><code>....\n\n&lt;!--Spring cloud openfeign--&gt;  \n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;  \n    &lt;version&gt;3.1.0&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#create_feign_configuration","title":"Create Feign Configuration","text":"<ul> <li>Let's create a configuration class  with name <code>BasicAuthFeignConfig</code> for configuring <code>BasicAuthRequestInterceptor</code> as below:</li> </ul> BasicAuthFeignConfig.java<pre><code>package com.springboot.cloud.openfeign.interceptor.service.config;  \n\nimport feign.auth.BasicAuthRequestInterceptor;  \nimport org.springframework.beans.factory.annotation.Value;  \nimport org.springframework.context.annotation.Bean;  \n\n//We should not put the annotation @Configuration right here because it will apply the BasicAuthRequestInterceptor for all FeignClients  \npublic class BasicAuthFeignConfig {  \n\n    @Value(\"${spring.security.basic.username}\")  \n    private String username;  \n\n    @Value(\"${spring.security.basic.password}\")  \n    private String password;  \n\n    @Bean  \n    public BasicAuthRequestInterceptor basicAuthRequestInterceptor() {  \n        return new BasicAuthRequestInterceptor(username, password);  \n    }  \n\n}\n</code></pre> <ul> <li>As you can see, we will create a bean <code>BasicAuthRequestInterceptor</code> with the <code>username</code> and <code>password</code> that we load from the <code>application.yml</code>.</li> </ul> application.yml<pre><code>spring:\n  security:\n    basic:\n      url: http://localhost:8083\n      username: \"user\"\n      password: \"12345\"\n\nlogging:\n  level:\n    com.springboot.cloud.openfeign.interceptor.service.api: DEBUG\n\nfeign:\n  client:\n    config:\n      default:\n        loggerLevel: full\n</code></pre> <ul> <li>If you don't want to apply the <code>BasicAuthRequestInterceptor</code> for all FeignClients, so please don't put the annotation <code>@Configuration</code> in class <code>BasicAuthFeignConfig.java</code>. </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#feignclient_configuration","title":"FeignClient Configuration","text":"<ul> <li>Now we will create an adapter interface name <code>SpringBasicAuthClient</code> to configure FeignClient with target api as below:</li> </ul> SpringBasicAuthClient.java<pre><code>package com.springboot.cloud.openfeign.interceptor.service.api;  \n\nimport com.springboot.cloud.openfeign.interceptor.service.config.BasicAuthFeignConfig;  \nimport org.springframework.cloud.openfeign.FeignClient;  \nimport org.springframework.http.MediaType;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \nimport org.springframework.web.bind.annotation.RequestMethod;  \n\n@FeignClient(name = \"springBasicAuthClient\", url = \"${spring.security.basic.url}\", configuration = {BasicAuthFeignConfig.class})  \npublic interface SpringBasicAuthClient {  \n\n    @RequestMapping(method = RequestMethod.GET, path = \"/welcome\", consumes = MediaType.TEXT_HTML_VALUE)  \n    String sayWelcome();  \n\n}\n</code></pre> <ul> <li>As we can see, in the <code>@FeignClient</code> annotation, we will provide a client name, the server domain URL that we need to call to and we will load the <code>BasicAuthRequestInterceptor</code> configuration class  that we want to apply for this <code>FeignClient</code> by using param <code>configuration = {BasicAuthFeignConfig.class}</code>. </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#controller","title":"Controller","text":"<ul> <li>Now, we need to create a simple controller as below for testing with Postman.</li> </ul> OpenFeignInterceptorController.class<pre><code>package com.springboot.cloud.openfeign.interceptor.service.controller;\n\nimport com.springboot.cloud.openfeign.interceptor.service.api.SpringBasicAuthClient;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OpenFeignInterceptorController {\n\n    @Autowired\n    private SpringBasicAuthClient springBasicAuthClient;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/basic/auth/interceptor/welcome\")\n    public ResponseEntity&lt;String&gt; getWelcomeMessageWithBasicAuthInterceptor() {\n        return ResponseEntity.ok(this.springBasicAuthClient.sayWelcome());\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#testing","title":"Testing","text":"<ul> <li>Finally, let's start our <code>Client Application</code> and <code>Resource Application</code>, then you postman to call the exported api above. Then you should see the 200 result as below.</li> </ul> <ul> <li>Then if you check the log in the console, you can see <code>Authorization</code> header had been added into the request to the <code>Resource Application</code> for getting the data.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#header_interceptor","title":"Header Interceptor","text":"<ul> <li>In some cases, we might need to add some custom request headers into our requests for calling apis. In this case we would like to use <code>RequestInterceptor</code> of OpenFeign which will give us more options for configuring Request Interceptor.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#prepare_1","title":"Prepare","text":"<ul> <li>Like the example above, we also follow the diagram and services that we created. But when we test with the postman, we will look into the console log to check our custom headers have been added into the requests to <code>Resource Server</code></li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#create_feign_configuration_1","title":"Create Feign Configuration","text":"<ul> <li>Let's create a configuration class  with name <code>FeignHeaderConfig</code> for configuring <code>RequestInterceptor</code> as below:</li> </ul> FeignHeaderConfig.java<pre><code>package com.springboot.cloud.openfeign.interceptor.service.config;  \n\nimport feign.RequestInterceptor;  \nimport org.springframework.beans.factory.annotation.Value;  \nimport org.springframework.context.annotation.Bean;  \n\nimport java.util.UUID;  \n\n//We should not put the annotation @Configuration right here because it will apply the BasicAuthRequestInterceptor for all FeignClients  \npublic class FeignHeaderConfig {  \n\n    @Value(\"${spring.security.basic.token}\")  \n    private String token;  \n\n    @Bean  \n    public RequestInterceptor requestInterceptor() {  \n        return requestTemplate -&gt; {  \n            requestTemplate.header(\"Content-Type\", \"application/json\");  \n            requestTemplate.header(\"Accept\", \"application/json\");  \n            requestTemplate.header(\"random-uuid\", UUID.randomUUID().toString());  \n            requestTemplate.header(\"Authorization\", token);  \n        };  \n    }  \n\n}\n</code></pre> <ul> <li>As you can see, we will create a bean <code>RequestInterceptor</code> with some example headers  and an authorization token that we load from the <code>application.yml</code>.</li> </ul> application.yml<pre><code>spring:  \n  security:  \n    basic:  \n      url: http://localhost:8083  \n      username: \"user\"  \n      password: \"12345\"  \n      token: \"Basic dXNlcjoxMjM0NQ==\"\n\nlogging:  \n  level:  \n    com.springboot.cloud.openfeign.interceptor.service.api: DEBUG  \n\nfeign:  \n  client:  \n    config:  \n      default:  \n        loggerLevel: full\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#feignclient_configuration_1","title":"FeignClient Configuration","text":"<ul> <li>Now we will create an adapter interface name <code>SpringCustomHeaderClient</code> to configure FeignClient with target api as below:</li> </ul> SpringCustomHeaderClient.java<pre><code>package com.springboot.cloud.openfeign.interceptor.service.api;  \n\nimport com.springboot.cloud.openfeign.interceptor.service.config.FeignHeaderConfig;  \nimport org.springframework.cloud.openfeign.FeignClient;  \nimport org.springframework.http.MediaType;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \nimport org.springframework.web.bind.annotation.RequestMethod;  \n\n@FeignClient(name = \"springCustomHeaderClient\", url = \"${spring.security.basic.url}\", configuration = {FeignHeaderConfig.class})  \npublic interface SpringCustomHeaderClient {  \n\n    @RequestMapping(method = RequestMethod.GET, path = \"/welcome\", consumes = MediaType.TEXT_HTML_VALUE)  \n    String sayWelcome();  \n\n}\n</code></pre> <ul> <li>Like the <code>FeignClient</code> configuration that we did before in <code>SpringBasicAuthClient</code>, now we just need to change the name and use param\u00a0<code>configuration = {FeignHeaderConfig.class}</code> to load the <code>FeignHeaderConfig</code> which will be applied for this <code>FeignClient</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#controller_1","title":"Controller","text":"<ul> <li>Now, we need to add a new api into the controller that we created before.</li> </ul> OpenFeignInterceptorController.java<pre><code>package com.springboot.cloud.openfeign.interceptor.service.controller;  \n\nimport com.springboot.cloud.openfeign.interceptor.service.api.SpringBasicAuthClient;  \nimport com.springboot.cloud.openfeign.interceptor.service.api.SpringCustomHeaderClient;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.http.ResponseEntity;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \nimport org.springframework.web.bind.annotation.RequestMethod;  \nimport org.springframework.web.bind.annotation.RestController;  \n\n@RestController  \npublic class OpenFeignInterceptorController {  \n\n    @Autowired  \n    private SpringBasicAuthClient springBasicAuthClient;  \n\n    @Autowired  \n    private SpringCustomHeaderClient springCustomHeaderClient;  \n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/basic/auth/interceptor/welcome\")  \n    public ResponseEntity&lt;String&gt; getWelcomeMessageWithBasicAuthInterceptor() {  \n        return ResponseEntity.ok(this.springBasicAuthClient.sayWelcome());  \n    }  \n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/custom/header/interceptor/welcome\")  \n    public ResponseEntity&lt;String&gt; getWelcomeMessageWithCustomerHeaders() {  \n        return ResponseEntity.ok(this.springCustomHeaderClient.sayWelcome());  \n    }\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#testing_1","title":"Testing","text":"<ul> <li>Finally, let's start our <code>Client Application</code> and <code>Resource Application</code>, then you postman to call the exported api above. Then you should see the 200 result as below.</li> </ul> <ul> <li>Then if you check the log in the console, you can see all your custom headers had been added into the request to the <code>Resource Application</code> for getting the data.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#openfeign_interceptor_with_oauth2_client","title":"OpenFeign Interceptor With OAuth2 Client","text":"<ul> <li>Please view sections below:<ul> <li>Client Credentials Client Server</li> <li>Password Grant Type Client Server</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud OpenFeign Basic</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20Interceptor/#references","title":"References","text":"<ul> <li>Rapidapi</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/","title":"Spring Cloud OpenFeign With Eureka","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#why_spring_cloud_openfeign_with_eureka","title":"Why Spring Cloud OpenFeign With Eureka?","text":"<ul> <li>Assume that in a micro-service system, you have an adapter service which are used by 4 or 5 other services. By default, these services will use  Spring Cloud OpenFeign to call to adapter service based on the deployed route (Ex: https://example.domain.com:8080). Then one day, the business team decided to bring this adapter service to another domain and change current domain URL of adapter service (Ex: https://example.new.domain.com:8080). So for now, the developers have to update all configuration files of all services that are using the adapter service in the micro-service system and have to restart all of these services to fetch the latest configurations. This take a lot of time and efforts for developers and business side also have to stop all activities and wait for developer team finish updating.</li> <li>Thus, to avoid this issue, in micro-service system, we can use Spring Cloud OpenFeign together with Spring Cloud Netflix Eureka Server-Client. Then if there is any change happen to the domain URL, so every services in system will know and will be updated automatically.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#spring_cloud_openfeign_with_eureka_example","title":"Spring Cloud OpenFeign With Eureka Example","text":"<ul> <li>Let's take an example for using Spring Cloud OpenFeign With Eureka. We will need to create 3 services. One Eureka Server and 2 Eureka Clients in which 1 Eureka Clients will be an adapter service which connects to Database and the other will try to communicate to it by using service name in OpenFeign Client.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#eureka_server","title":"Eureka Server","text":"<ul> <li>To create Eureka Server, let's add some dependencies as below.</li> <li>Note Netflix Eureka Server dependencies  require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Server in your  Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;  \n    &lt;/dependency&gt;  \n\n    &lt;dependency&gt;  \n         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;  \n         &lt;artifactId&gt;gson&lt;/artifactId&gt;  \n         &lt;version&gt;2.8.9&lt;/version&gt;  \n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Now, you will need to add annotation <code>@EnableEurekaServer</code> into your main class as below.</li> </ul> ServerApplication.java<pre><code>package com.eureka.server;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;  \n\n@SpringBootApplication  \n@EnableEurekaServer  \npublic class ServerApplication {  \n\n   public static void main(String[] args) {  \n      SpringApplication.run(ServerApplication.class, args);  \n   }  \n\n}\n</code></pre> <ul> <li>Then In your <code>application.yml</code>. Let's add some configuration. The details of configuration are put in the comments.</li> </ul> application.yml<pre><code>#server run at port 8761\nserver:\n  port: 8761\n\nspring:\n  application:\n    #application name\n    name: eureka-server\n\neureka:\n  client:\n    #self register is false\n    register-with-eureka: false\n    #self fetch registry is false\n    fetch-registry: false\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#blog_application_adapter","title":"Blog Application Adapter","text":"<ul> <li>Like <code>Eureka Server</code>, you also need to add a dependency for Spring Cloud.</li> <li>Note Netflix Eureka Client dependencies require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Client in your Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Now, Let's add annotation <code>@EnableDiscoveryClient</code> into main class.</li> </ul> AdapterApplication.java<pre><code>package com.application.adapter;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class AdapterApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdapterApplication.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Then in this service, we will create a simple controller with an api as below.</li> </ul> HelloController.java<pre><code>package com.application.adapter.controller;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/hello\")\n    public ResponseEntity&lt;String&gt; getHello() {\n        return new ResponseEntity&lt;&gt;(\"Hello from blog application adapter\", HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>Then add some configuration in <code>application.yml</code> as below to connect to <code>Eureka Server</code>. The property <code>\u201ceureka.client.serviceUrl.defaultZone\u201d</code> will be <code>the url for register of eureka server</code>.</li> </ul> application.yml<pre><code>#service run at port 8080\nserver:\n  port: 8080\n\nspring:\n  application:\n    #service name which will be used for registering and showed on eureka server dashboard\n    name: blog-adapter-service\n  #Enable Spring Cloud Discovery\n  cloud:\n    discovery:\n      enabled: true\n\n#register this service to eureka server by url\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#application_bff_service","title":"Application BFF Service","text":"<ul> <li>Like the <code>Blog Application Adapter</code>, we will also need to add some dependencies below for Spring Cloud and Eureka Client</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Client in your Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Then we can add this dependency below for Spring Cloud OpenFeign.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;  \n   &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;  \n&lt;/dependency&gt;\n</code></pre> <ul> <li>Now, to enable Spring Cloud OpenFeign and Eureka Client, we will add <code>@EnableFeignClients</code> and <code>@EnableDiscoveryClient</code> into the <code>main</code> class as below</li> </ul> BffApplication.java<pre><code>package com.application.bff;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n@SpringBootApplication\npublic class BffApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(BffApplication.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Next, we will create an adapter interface to configure OpenFeign with target api as below:</li> </ul> AdapterServerApi.java<pre><code>package com.application.bff.adapters;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n// name of this feign client adapter which should be the adapter service name which registered with Eureka Server\n@FeignClient(name = \"${adapter.service.name}\")\npublic interface AdapterServerApi {\n\n    @RequestMapping(method = RequestMethod.GET, value = \"/v1/hello\")\n    String getHelloResponse();\n\n}\n</code></pre> <ul> <li>The <code>application.yml</code> will contain the adapter service name that we want to call to.</li> </ul> application.yml<pre><code>#service run at port 9090\nserver:\n  port: 9090\n\nspring:\n  application:\n    #service name which will be showed on eureka server dashboard\n    name: application-bff-service\n  #Enable Spring Cloud Discovery\n  cloud:\n    discovery:\n      enabled: true\n\n#register this service to eureka server by url\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n\n#adapter service name which registered with Eureka Server\nadapter:\n  service:\n    name: blog-adapter-service\n</code></pre> <ul> <li>Now, we created the FeignClient interface. So you can inject for any service classes by <code>@Autowired</code> and methods for using. So let's create a simple controller and Inject <code>AdapterServerApi</code> for using as below.</li> </ul> ApiController.java<pre><code>package com.application.bff.controller;\n\nimport com.application.bff.adapters.AdapterServerApi;\nimport com.application.bff.service.AdapterService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ApiController {\n\n    @Autowired\n    private AdapterServerApi adapterServerApi;\n\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/client/hello\")\n    public ResponseEntity&lt;String&gt; getHelloFromAdapter() {\n        return new ResponseEntity&lt;&gt;(adapterServerApi.getHelloResponse(), HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#testing","title":"Testing","text":"<ul> <li>Now, let's start all services and go to <code>http://localhost:8761</code> to check the Eureka Clients registered to Eureka Server successfully.</li> </ul> <ul> <li>Then we will try to call the api <code>/v1/client/hello</code> from BFF Service then we should see the message from the Adapter Service as below.</li> </ul> <ul> <li>So, It means applying Spring Cloud OpenFeign and Eureka worked correctly, and the BFF doesn't need to care about what is the endpoint of Adapter service is, It just needs the Adapter service name.</li> <li>Now, let's try to change the Adapter Service Endpoint by changing the Port in the <code>application.yml</code> as below.</li> </ul> application.yml<pre><code>#service run at port 7000\nserver:\n  port: 7000\n\nspring:\n  application:\n    #service name which will be used for registering and showed on eureka server dashboard\n    name: blog-adapter-service\n  #Enable Spring Cloud Discovery\n  cloud:\n    discovery:\n      enabled: true\n\n#register this service to eureka server by url\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n</code></pre> <ul> <li>Then Let's restart the Adapter Service, but still keep Eureka Server and BFF service running.</li> <li>Then call the api <code>/v1/client/hello</code> from BFF Service again. You may got the error as below.</li> </ul> <ul> <li>But if you wait for 30s and call again, you will receive a successful result.</li> </ul> <ul> <li>So Spring Cloud Eureka Server will help you to maintain Eureka Clients in the system. However, it has some delay for syncing the current status of an Client to the Eureka servers and subsequently in other Eureka clients. That why after restarting the Adapter service 30s, you will receive successful calls.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud Introduction</li> <li>Spring Boot Introduction</li> <li>Spring Cloud OpenFeign Basic</li> <li>Spring Cloud Netflix Eureka Server-Client</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Eureka/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/","title":"Spring Cloud OpenFeign With Web Services","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#using_openfeign_for_web_services","title":"Using OpenFeign For Web Services","text":"<ul> <li>In some projects, sometime we will meet some user stories that need us to make a connection to the SOAP service from our spring boot service by giving a file <code>.wsdl</code>. So This post will guild you step by step to archive it easily with the support of <code>Spring Cloud Feign</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#prepare_the_environment","title":"Prepare The Environment","text":"<ul> <li>To make an example we need an online WebService, so we can go to free SOAP service urls and choose one to make an example.</li> <li>In this example I will choose country list SOAP service because it is the one that is working well.</li> <li>So you need go to country list SOAP service by your browser. Then <code>Right Click</code> and choose <code>Save As</code>. After that you save the file with type <code>.wsdl</code> into any package in <code>src/main/resources</code> of your spring boot project as the images below:</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#dependencies","title":"Dependencies","text":"<ul> <li>We need to add some dependencies for <code>Spring cloud fiegn</code> and SOAP in <code>pom.xml</code> file. In which, we need to note about the declaration of  <code>generatePackage</code> which is the package that contains all generated java classes when we run command <code>mvn compile</code> and the <code>schemaDirectory</code> which is the path to our <code>countries.wsdl</code> file of us.</li> </ul> pom.xml<pre><code>&lt;!-- spring cloud feign dependencies --&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;2021.0.0&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;2.6.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;\n        &lt;artifactId&gt;feign-soap&lt;/artifactId&gt;\n        &lt;version&gt;12.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n\n    &lt;!-- dependencies for WSDL --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.ws&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-ws-core&lt;/artifactId&gt;\n        &lt;version&gt;3.1.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;\n        &lt;version&gt;5.3.23&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <pre><code>&lt;!-- pom.xml plugin for WSDL --&gt;\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jvnet.jaxb2.maven2&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-jaxb2-plugin&lt;/artifactId&gt;\n            &lt;version&gt;0.14.0&lt;/version&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;generate&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n            &lt;configuration&gt;\n                &lt;schemaLanguage&gt;WSDL&lt;/schemaLanguage&gt;\n                &lt;generateDirectory&gt;${project.basedir}/src/main/java&lt;/generateDirectory&gt;\n                &lt;!-- the package that will contain our generated java classes --&gt;\n                    &lt;generatePackage&gt;com.springboot.cloud.openfeign.web.services.models.gen&lt;/generatePackage&gt;\n                &lt;!-- the path where we put the wsdl file --&gt;\n                &lt;schemaDirectory&gt;${project.basedir}/src/main/resources&lt;/schemaDirectory&gt;\n                &lt;schemaIncludes&gt;\n                        &lt;include&gt;countries.wsdl&lt;/include&gt;\n                &lt;/schemaIncludes&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#generate_java_classes_from_wsdl_file","title":"Generate Java Classes From WSDL File","text":"<ul> <li>So let's open the <code>terminal/command line</code> then run <code>mvn compile</code>, then Maven will read the file <code>countries.wsdl</code> to generate java classes and put them into the <code>package</code> that we have already defined in the pom.xml of Step 2.</li> <li>If you note that, java classes have been configured with many annotation of XML, So these class will be formatted as xml type when we transfer them to SOAP service.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#configuration","title":"Configuration","text":"<ul> <li>In this step we need to create a configuration class to configure the <code>Encoder</code> and <code>Decoder</code> of Feign Client which we will use for the feign client soap adapter later.</li> <li>I will name this configuration class as FeignSOAPConfiguration</li> </ul> FeignSOAPConfiguration<pre><code>package com.springboot.cloud.openfeign.web.services.configuration;\n\nimport feign.jaxb.JAXBContextFactory;\nimport feign.soap.SOAPDecoder;\nimport feign.soap.SOAPEncoder;\nimport org.springframework.context.annotation.Bean;\n\n/**\n We should not put the annotation @Configuration here\n because Feign will override all other Feign clients with\n this configuration class\n */\npublic class FeignSOAPConfiguration {\n\n    @Bean\n    public JAXBContextFactory configJAXBContextFactory() {\n        return new JAXBContextFactory.Builder()\n                .withMarshallerJAXBEncoding(\"UTF-8\")\n                .withMarshallerSchemaLocation(\"http://api rest http://api host/schema.xsd\")\n                .build();\n    }\n\n    @Bean\n    public SOAPDecoder feignDecoder() {\n        return new SOAPDecoder(configJAXBContextFactory());\n    }\n\n    @Bean\n    public SOAPEncoder feignEncoder() {\n        return new SOAPEncoder(configJAXBContextFactory());\n    }\n\n}\n</code></pre> <ul> <li>Then in the Main Class, we need to enable OpenFeign Client by adding <code>@EnableFeignClients</code> annotation as below.</li> </ul> OpenFeignWebServicesApplication.java<pre><code>package com.springboot.cloud.openfeign.web.services;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.openfeign.EnableFeignClients;  \n\n@EnableFeignClients  \n@SpringBootApplication  \npublic class OpenFeignWebServicesApplication {  \n    public static void main(String[] args) {  \n        SpringApplication.run(OpenFeignWebServicesApplication.class, args);  \n    }  \n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#creating_adapter","title":"Creating Adapter","text":"<ul> <li> <p>So in this step we will crate an interface feign client adapter to call to our SOAP service.</p> </li> <li> <p>Remember that we have to put the class <code>FeignSOAPConfiguration</code> into the attribute <code>configuration</code> of annotation <code>@FeignClient</code>. Don't for get give it a name with attribute <code>name</code> and put the url of SOAP service (the url that we used to save <code>countries.wsdl</code> from browser).</p> </li> <li> <p>Because generated java classes (<code>CountryName.java</code> and <code>CountryNameResponse.java</code>) are formatted with xml so we have to define the <code>consumes</code> (Input) and <code>produces</code> (Output) as <code>text/xml</code> type.</p> </li> </ul> <p>```java linenums=\"1\" title=\"CountryClientAdapter.java\"</p> <p>package com.springboot.cloud.openfeign.web.services.api;</p> <p>import com.springboot.cloud.openfeign.web.services.configuration.FeignSOAPConfiguration; import com.springboot.cloud.openfeign.web.services.models.gen.CountryName; import com.springboot.cloud.openfeign.web.services.models.gen.CountryNameResponse; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.http.MediaType; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody;</p> <p>/*  this @FeignClient includes 3 attributes:  name of @FeignClient, url of SOAP service, configuration class for this FeignClient  / @FeignClient(name = \"soap.client.example\",         url = \"${country.client.soap.url}\",         configuration = FeignSOAPConfiguration.class) public interface CountryClientAdapter {</p> <pre><code>/**\n @RequestBody (CountryName) and CountryNameResponse  are the Object classes\n with format xml that was generated from the wsdl file.\n So the attribute consumes and produces must be \"text/xml\"\n */\n@PostMapping(value = \"\", consumes = MediaType.TEXT_XML_VALUE, produces = MediaType.TEXT_XML_VALUE)\nCountryNameResponse get(@RequestBody CountryName countryName);\n</code></pre> <p>}</p> <p>```</p> <p>```yaml linenums=\"1\" title=\"application.yml\" country:         client:                 soap:                         package: com.example.workflow.models.gen                         url: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL</p> <pre><code>### Create Service\n- Let's create a simple Service which use `CountryClientAdapter.java` as below.\n\n```java linenums=\"1\" title=\"CountryCodeHandler.java\"\n\npackage com.springboot.cloud.openfeign.web.services.service;\n\nimport com.springboot.cloud.openfeign.web.services.api.CountryClientAdapter;\nimport com.springboot.cloud.openfeign.web.services.models.gen.CountryName;\nimport com.springboot.cloud.openfeign.web.services.models.gen.CountryNameResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CountryCodeHandler {\n\n    @Autowired\n    private CountryClientAdapter countryClientAdapter;\n\n    public CountryNameResponse getCountryName(String countryISO) {\n        CountryName countryName = new CountryName();\n        countryName.setSCountryISOCode(countryISO);\n        return countryClientAdapter.get(countryName);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#create_controller","title":"Create Controller","text":"<ul> <li>Let's create a simple Service which use <code>CountryCodeHandler.java</code> as below.</li> </ul> WebServicesController.java<pre><code>package com.springboot.cloud.openfeign.web.services.controller;\n\nimport com.springboot.cloud.openfeign.web.services.models.gen.CountryNameResponse;\nimport com.springboot.cloud.openfeign.web.services.service.CountryCodeHandler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class WebServicesController {\n\n    @Autowired\n    private CountryCodeHandler countryCodeHandler;\n\n    @GetMapping(path = \"/v1/soap/country/{countryISO}\", produces = MediaType.APPLICATION_XML_VALUE)\n    public ResponseEntity&lt;CountryNameResponse&gt; getCountryNameByISO(@PathVariable(\"countryISO\") String countryISO) {\n        return ResponseEntity.ok(this.countryCodeHandler.getCountryName(countryISO));\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#testing","title":"Testing","text":"<ul> <li>Finally, let's start our spring boot application project and call the exported api by postman to test.</li> <li>The result we be showed as below, please not that the we use 3 ISO country code for test Ex: VNM, IDN</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud Introduction</li> <li>Spring Cloud OpenFeign Basic</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20OpenFeign%20With%20Web%20Services/#references","title":"References","text":"<ul> <li>sqa-dev.blogspot.com</li> <li>country list SOAP service</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/","title":"Spring Cloud Sleuth With Zipkin And Kibana","text":"<p>From the last 2 posts Distributed Tracing and Spring Cloud Sleuth we have known the definitions, the descriptions and the concepts of Distributed Tracing and Spring Cloud Sleuth. In this session we will deep dive into the example about using Spring Cloud Sleuth, Zipkin and Kibana in microservice system.</p>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#what_is_the_kibana","title":"What Is The Kibana?","text":"<ul> <li> <p>First of all, we need to understand a little bit about Kibana, so what is the Kibana?</p> <ul> <li> <p>Kibana is an open-source data visualization dashboard software for Elasticsearch. It allows users to create visualizations, reports, and dashboards from data indexed in Elasticsearch. Kibana can produce various types of charts, maps, and features for application monitoring, operational intelligence, and data exploration. (View more: Logit.io, Elastic)</p> </li> <li> <p>Kibana is the official interface of Elasticsearch. Users of Elasticsearch will find Kibana to be the most effective interface for discovering data insights and performing active management of the health of their Elastic Stack. Elastic has invested heavily in the innovation of the visualization interface. (View more:  Kibana - Wikipedia)</p> </li> </ul> </li> <li> <p>In this example we will use Kibana for visualizing the log data in a microservice system.</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#sample_microservice_system","title":"Sample Microservice System","text":"<ul> <li>Now, let's check the sample micro service system that we are going to build as in the diagram below.</li> </ul> <ul> <li>So as can see in the image above, our system will include 4 main parts:<ul> <li>Microservice system: this part will include 4 spring boot services, one Eureka service and 3 spring boot application services, then all the log data and tracing data will be sent to kafka.</li> <li>Kafka: we will create 2 topics in which one topic is used for receiving log data and one topic will be used for receiving tracing data</li> <li>Tracing system: In the tracing system, we will hava a zipkin server which will listen the zipkin topic of kafka and get the tracing data there to handle and show on web UI.</li> <li>Log system: In the log system, we will have 3 services, logstash, elastic and kibana. The logstash will listen the logstash topic of kafka and get the log data there for handling, then It will push the handled data to elastic and the kibana will read the data of elastic and visualize them on UI.</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#building_kafka-zipkin-kibana_systems","title":"Building Kafka-Zipkin-Kibana Systems","text":"<ul> <li>So to build the all the kafka, Zipkin and Kibana system, we will need to use the <code>docker-compose.yml</code> as below.</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n\n  zookeeper:\n    image: confluentinc/cp-zookeeper:7.3.2\n    container_name: zookeeper\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n    networks:\n      - elk   \n\n  broker:\n    image: confluentinc/cp-kafka:7.3.2\n    container_name: broker\n    ports:\n    # To learn about configuring Kafka for access across networks see\n    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/\n      - \"9092:9092\"\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      KAFKA_ADVERTISED_HOST_NAME: broker\n      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\n      KAFKA_LISTENERS: INSIDE://:19092,OUTSIDE://:9092\n      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker:19092,OUTSIDE://localhost:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n    networks:\n      - elk  \n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2\n    volumes:\n      - type: bind\n        source: ./elasticsearch/config/elasticsearch.yml\n        target: /usr/share/elasticsearch/config/elasticsearch.yml\n        read_only: true\n      - type: volume\n        source: elasticsearch\n        target: /usr/share/elasticsearch/data\n    ports:\n      - \"9200:9200\"\n      - \"9300:9300\"\n    environment:\n      ES_JAVA_OPTS: \"-Xmx256m -Xms256m\"\n      ELASTIC_PASSWORD: changeme\n      # Use single node discovery in order to disable production mode and avoid bootstrap checks\n      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html\n      discovery.type: single-node\n    depends_on:\n    - broker  \n    networks:\n      - elk\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:7.16.2\n    volumes:\n      - type: bind\n        source: ./logstash/config/logstash.yml\n        target: /usr/share/logstash/config/logstash.yml\n        read_only: true\n      - type: bind\n        source: ./logstash/pipeline\n        target: /usr/share/logstash/pipeline\n        read_only: true\n    ports:\n      - \"5000:5000/tcp\"\n      - \"5000:5000/udp\"\n      - \"9600:9600\"\n    environment:\n      LS_JAVA_OPTS: \"-Xmx256m -Xms256m\"\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.16.2\n    volumes:\n      - type: bind\n        source: ./kibana/config/kibana.yml\n        target: /usr/share/kibana/config/kibana.yml\n        read_only: true\n    ports:\n      - \"5601:5601\"\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n\n  storage:\n    image: openzipkin/zipkin-mysql\n    container_name: storage\n    command: --default-authentication-plugin=mysql_native_password\n    environment:\n      - MYSQL_ROOT_PASSWORD=zipkin\n      - MYSQL_DATABASE=zipkin\n      - MYSQL_USER=zipkin\n      - MYSQL_PASSWORD=zipkin\n    # Uncomment to expose the storage port for testing\n    # ports:\n    #   - 3306:3306\n    volumes:\n    - ./mysql-data:/var/lib/mysql:rw\n    networks:\n      - elk\n\n  # The zipkin process services the UI, and also exposes a POST endpoint that\n  # instrumentation can send trace data to. Scribe is disabled by default.\n  zipkin:\n    image: openzipkin/zipkin\n    container_name: zipkin\n    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables\n    environment:\n      - STORAGE_TYPE=mysql\n      # Point the zipkin at the storage backend\n      - MYSQL_HOST=storage\n      - MYSQL_USER=zipkin\n      - MYSQL_PASS=zipkin\n      - MYSQL_DB=zipkin\n      - KAFKA_BOOTSTRAP_SERVERS=broker:19092\n      # Uncomment to enable scribe\n      # - SCRIBE_ENABLED=true\n      # Uncomment to enable self-tracing\n      # - SELF_TRACING_ENABLED=true\n      # Uncomment to enable debug logging\n      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG\n    ports:\n      # Port used for the Zipkin UI and HTTP Api\n      - 9411:9411\n      # Uncomment if you set SCRIBE_ENABLED=true\n      # - 9410:9410\n    depends_on:\n      - storage\n    networks:\n      - elk  \n\n  # Adds a cron to process spans since midnight every hour, and all spans each day\n  # This data is served by http://192.168.99.100:8080/dependency\n  #\n  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies\n  dependencies:\n    image: openzipkin/zipkin-dependencies\n    container_name: dependencies\n    entrypoint: crond -f\n    environment:\n      - STORAGE_TYPE=mysql\n      - MYSQL_HOST=storage\n      # Add the baked-in username and password for the zipkin-mysql image\n      - MYSQL_USER=zipkin\n      - MYSQL_PASS=zipkin\n      # Uncomment to see dependency processing logs\n      # - ZIPKIN_LOG_LEVEL=DEBUG\n      # Uncomment to adjust memory used by the dependencies job\n      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G\n    depends_on:\n      - storage\n    networks:\n      - elk        \n\nnetworks:\n  elk:\n    driver: bridge\n\nvolumes:\n  elasticsearch:\n  mysql-data:\n</code></pre> <ul> <li>Then we also need to create some folder for configuration files as in the image below.</li> </ul> <ul> <li>We have contents of following files as below.</li> </ul> elasticsearch.yml<pre><code>---\n\n## Default Elasticsearch configuration from Elasticsearch base image.\n\n## https://github.com/elastic/elasticsearch/blob/master/distribution/docker/src/docker/config/elasticsearch.yml\n\n#\n\ncluster.name: \"docker-cluster\"\n\nnetwork.host: 0.0.0.0\n\n\n\n## X-Pack settings\n\n## see https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html\n\n#\n\n# xpack.license.self_generated.type: trial\n\nxpack.security.enabled: true\n\nxpack.monitoring.collection.enabled: true\n</code></pre> kibana.yml<pre><code>---\n\n## Default Kibana configuration from Kibana base image.\n\n## https://github.com/elastic/kibana/blob/master/src/dev/build/tasks/os_packages/docker_generator/templates/kibana_yml.template.js\n\n#\n\nserver.name: kibana\n\nserver.host: \"0\"\n\nelasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\n\nxpack.monitoring.ui.container.elasticsearch.enabled: true\n\n\n\n## X-Pack security credentials\n\n#\n\nelasticsearch.username: elastic\n\nelasticsearch.password: changeme\n</code></pre> logstash.yml<pre><code>---\n\n## Default Logstash configuration from Logstash base image.\n\n## https://github.com/elastic/logstash/blob/master/docker/data/logstash/config/logstash-full.yml\n\n#\n\nhttp.host: \"0.0.0.0\"\n\nxpack.monitoring.elasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\n\n\n\n## X-Pack security credentials\n\n#\n\nxpack.monitoring.enabled: true\n\nxpack.monitoring.elasticsearch.username: elastic\n\nxpack.monitoring.elasticsearch.password: changeme\n</code></pre> logstash.conf<pre><code>input {\n    tcp {\n        port =&gt; 5000\n    }\n    kafka {\n        bootstrap_servers =&gt; \"broker:19092\"\n        topics =&gt; [\"logstash\"]\n    }\n}\n\n## Add your filters / logstash plugins configuration here\nfilter {\n  json {\n    source =&gt; \"message\"\n  }\n}\n\noutput {\n    elasticsearch {\n        hosts =&gt; \"elasticsearch:9200\"\n        user =&gt; \"elastic\"\n        password =&gt; \"changeme\"\n        index =&gt; \"logstash-%{+YYYY.MM.dd}\"\n    }\n}\n</code></pre> <ul> <li>Okay now, let's deep dive into the docker compose of every service.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#kafka","title":"Kafka","text":"<ul> <li>Now, let's take a look into the kafka part in the <code>docker-compose.yml</code> as below.</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n\n  zookeeper:\n    image: confluentinc/cp-zookeeper:7.3.2\n    container_name: zookeeper\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n    networks:\n      - elk   \n\n  broker:\n    image: confluentinc/cp-kafka:7.3.2\n    container_name: broker\n    ports:\n    # To learn about configuring Kafka for access across networks see\n    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/\n      - \"9092:9092\"\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      KAFKA_ADVERTISED_HOST_NAME: broker\n      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\n      KAFKA_LISTENERS: INSIDE://:19092,OUTSIDE://:9092\n      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker:19092,OUTSIDE://localhost:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n    networks:\n      - elk  \n\n....\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#zookeeper","title":"ZooKeeper","text":"Field Value Description Image confluentinc/cp-zookeeper:7.3.2 The Docker image used for the ZooKeeper service. It is pulled from the Confluent repository with version 7.3.2. Container name zookeeper The name assigned to the ZooKeeper container. Environment Variables ZOOKEEPER_CLIENT_PORT 2181 Specifies the client port used to connect to ZooKeeper. ZOOKEEPER_TICK_TIME 2000 Specifies the tick time in milliseconds used by ZooKeeper for session timeouts. Networks elk Specifies the network(s) that the ZooKeeper container is connected to.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#broker","title":"Broker","text":"Field Value Description Image confluentinc/cp-kafka:7.3.2 The Docker image used for the Kafka broker service. It is pulled from the Confluent repository with version 7.3.2. Container name broker The name assigned to the Kafka broker container. Ports \"9092:9092\" Maps the host's port 9092 to the container's port 9092. This allows external access to Kafka on port 9092. Depends On zookeeper Specifies that this service depends on the ZooKeeper service. Environment Variables KAFKA_BROKER_ID 1 Specifies the ID of the Kafka broker. KAFKA_ZOOKEEPER_CONNECT 'zookeeper:2181' Specifies the connection string to ZooKeeper. KAFKA_ADVERTISED_HOST_NAME broker Specifies the advertised host name for the Kafka broker. KAFKA_INTER_BROKER_LISTENER_NAME INSIDE Specifies the name of the inter-broker listener. KAFKA_LISTENERS INSIDE://:19092,OUTSIDE://:9092 Specifies the listeners for Kafka. KAFKA_ADVERTISED_LISTENERS INSIDE://broker:19092,OUTSIDE://localhost:9092 Specifies the advertised listeners for Kafka. KAFKA_LISTENER_SECURITY_PROTOCOL_MAP INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT Specifies the listener security protocol mapping. Networks elk Specifies the network(s) that the Kafka broker container is connected to.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#logstash_-_elastic_-_kibana","title":"Logstash - Elastic - Kibana","text":"<ul> <li>Now, let's take a look into the log system part in the <code>docker-compose.yml</code> which contains logstash, elastic and kibana services as below.</li> </ul> docker-compose.yml<pre><code>version: '3.7'\n\nservices:\n\n....\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2\n    volumes:\n      - type: bind\n        source: ./elasticsearch/config/elasticsearch.yml\n        target: /usr/share/elasticsearch/config/elasticsearch.yml\n        read_only: true\n      - type: volume\n        source: elasticsearch\n        target: /usr/share/elasticsearch/data\n    ports:\n      - \"9200:9200\"\n      - \"9300:9300\"\n    environment:\n      ES_JAVA_OPTS: \"-Xmx256m -Xms256m\"\n      ELASTIC_PASSWORD: changeme\n      # Use single node discovery in order to disable production mode and avoid bootstrap checks\n      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html\n      discovery.type: single-node\n    depends_on:\n    - broker  \n    networks:\n      - elk\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:7.16.2\n    volumes:\n      - type: bind\n        source: ./logstash/config/logstash.yml\n        target: /usr/share/logstash/config/logstash.yml\n        read_only: true\n      - type: bind\n        source: ./logstash/pipeline\n        target: /usr/share/logstash/pipeline\n        read_only: true\n    ports:\n      - \"5000:5000/tcp\"\n      - \"5000:5000/udp\"\n      - \"9600:9600\"\n    environment:\n      LS_JAVA_OPTS: \"-Xmx256m -Xms256m\"\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.16.2\n    volumes:\n      - type: bind\n        source: ./kibana/config/kibana.yml\n        target: /usr/share/kibana/config/kibana.yml\n        read_only: true\n    ports:\n      - \"5601:5601\"\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n\n....\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#elasticsearch","title":"Elasticsearch","text":"Field Value Description Image docker.elastic.co/elasticsearch/elasticsearch:7.16.2 The Docker image used for the Elasticsearch service. It pulls the Elasticsearch image from the official Elastic repository with version 7.16.2. Volumes - type bind Specifies the volume type as bind, indicating a host directory will be mounted to the container. - source ./elasticsearch/config/elasticsearch.yml Specifies the path of the Elasticsearch configuration file on the host machine. - target /usr/share/elasticsearch/config/elasticsearch.yml Specifies the path where the Elasticsearch configuration file will be mounted inside the container. - read_only true Specifies that the mounted volume should be read-only. - type volume Specifies the volume type as volume, indicating a Docker volume will be used. - source elasticsearch Specifies the name of the Docker volume. - target /usr/share/elasticsearch/data Specifies the path where Elasticsearch will store its data inside the container. Ports \"9200:9200\", \"9300:9300\" Maps the host's ports 9200 and 9300 to the container's ports 9200 and 9300 respectively. This allows external access to Elasticsearch HTTP REST API and transport protocol ports. Environment Variables ES_JAVA_OPTS \"-Xmx256m -Xms256m\" Specifies the Java options for Elasticsearch, including memory settings. ELASTIC_PASSWORD changeme Specifies the password for the built-in Elasticsearch user 'elastic'. discovery.type single-node Specifies the discovery type as single-node. This disables production mode and avoids bootstrap checks during Elasticsearch startup. Depends On broker Specifies that this service depends on the 'broker' service. Networks elk Specifies the network(s) that the Elasticsearch container is connected to. <ul> <li>Then inside the <code>elasticsearch.yml</code> we have the content as below.</li> </ul> elasticsearch.yml<pre><code>---\n## Default Elasticsearch configuration from Elasticsearch base image.\n## https://github.com/elastic/elasticsearch/blob/master/distribution/docker/src/docker/config/elasticsearch.yml\n#\ncluster.name: \"docker-cluster\"\nnetwork.host: 0.0.0.0\n\n## X-Pack settings\n## see https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html\n#\n# xpack.license.self_generated.type: trial \nxpack.security.enabled: true\nxpack.monitoring.collection.enabled: true\n</code></pre> Configuration Value Explanation cluster.name \"docker-cluster\" Defines the name of the Elasticsearch cluster. This name is used to identify the cluster and allows nodes with the same cluster name to join together as a cluster and share data and workload. network.host 0.0.0.0 Specifies the network interface on which Elasticsearch listens for incoming connections. By setting it to 0.0.0.0, Elasticsearch listens on all network interfaces, allowing connections from any IP address. This is useful when running Elasticsearch in a containerized environment. xpack.security.enabled true Enables X-Pack security features for Elasticsearch. X-Pack provides authentication, role-based access control, and other security features to secure the Elasticsearch cluster and prevent unauthorized access. By setting it to true, the security features are enabled. xpack.monitoring.collection.enabled true Enables the collection of monitoring data by X-Pack. X-Pack provides monitoring and metrics capabilities for Elasticsearch clusters. By enabling this setting, Elasticsearch collects and stores various metrics and monitoring data that can be used for analyzing cluster health, performance, and resource usage.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#logstash","title":"Logstash","text":"Field Value Description Image docker.elastic.co/logstash/logstash:7.16.2 The Docker image used for the Logstash service. It pulls the Logstash image from the official Elastic repository with version 7.16.2. Volumes - type bind Specifies the volume type as bind, indicating a host directory will be mounted to the container. - source ./logstash/config/logstash.yml Specifies the path of the Logstash configuration file on the host machine. - target /usr/share/logstash/config/logstash.yml Specifies the path where the Logstash configuration file will be mounted inside the container. - read_only true Specifies that the mounted volume should be read-only. - type bind Specifies the volume type as bind, indicating a host directory will be mounted to the container. <ul> <li>Then inside the <code>logstash.yml</code> we have the content as below.</li> </ul> logstash.yml<pre><code>---\n## Default Logstash configuration from Logstash base image.\n## https://github.com/elastic/logstash/blob/master/docker/data/logstash/config/logstash-full.yml\n#\nhttp.host: \"0.0.0.0\"\nxpack.monitoring.elasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\n\n## X-Pack security credentials\n#\nxpack.monitoring.enabled: true\nxpack.monitoring.elasticsearch.username: elastic\nxpack.monitoring.elasticsearch.password: changeme\n</code></pre> Configuration Value Explanation http.host \"0.0.0.0\" Specifies the network interface on which Logstash listens for incoming HTTP connections. By setting it to 0.0.0.0, Logstash listens on all network interfaces, allowing connections from any IP address. This is useful when running Logstash in a containerized environment and receiving HTTP requests. xpack.monitoring.elasticsearch.hosts [ \"http://elasticsearch:9200\" ] Specifies the Elasticsearch hosts to which Logstash sends monitoring data. Logstash collects various monitoring data and sends it to Elasticsearch for storage and analysis. By setting it to \"http://elasticsearch:9200\", Logstash sends the monitoring data to Elasticsearch running on the specified host and port. xpack.monitoring.enabled true Enables the collection and sending of monitoring data by Logstash. When enabled, Logstash collects various monitoring data related to its own performance and activity and sends it to Elasticsearch for storage and analysis. xpack.monitoring.elasticsearch.username elastic Specifies the username for authentication when sending monitoring data to Elasticsearch. This username is used to authenticate Logstash with Elasticsearch. xpack.monitoring.elasticsearch.password changeme Specifies the password for authentication when sending monitoring data to Elasticsearch. This password is used in combination with the username to authenticate Logstash with Elasticsearch. <ul> <li>Next inside the <code>logstash.conf</code> we have the content as below.</li> </ul> logstash.conf<pre><code>input {\n    tcp {\n        port =&gt; 5000\n    }\n    kafka {\n        bootstrap_servers =&gt; \"broker:19092\"\n        topics =&gt; [\"logstash\"]\n    }\n}\n\n## Add your filters / logstash plugins configuration here\nfilter {\n  json {\n    source =&gt; \"message\"\n  }\n}\n\noutput {\n    elasticsearch {\n        hosts =&gt; \"elasticsearch:9200\"\n        user =&gt; \"elastic\"\n        password =&gt; \"changeme\"\n        index =&gt; \"logstash-%{+YYYY.MM.dd}\"\n    }\n}\n</code></pre> Configuration Value Explanation input Defines the input plugins that Logstash will use to receive data. In this configuration, two input plugins are specified: TCP and Kafka. input.tcp.port 5000 Specifies the TCP port on which Logstash listens for incoming data. This allows Logstash to receive data over a TCP connection on port 5000. input.kafka.bootstrap_servers \"broker:19092\" Specifies the bootstrap servers for the Kafka input plugin. These servers are used by Logstash to connect to the Kafka cluster and consume messages from the specified topics. In this case, the Kafka cluster is accessible at \"broker\" on port 19092. input.kafka.topics [\"logstash\"] Specifies the Kafka topics from which Logstash will consume messages. In this configuration, Logstash consumes messages from the \"logstash\" topic. filter Defines the filter plugins that Logstash will use to transform or manipulate the incoming data. In this configuration, a single filter plugin is specified: JSON. filter.json.source \"message\" Specifies the source field from which the JSON filter plugin will extract the JSON data. In this case, Logstash expects the incoming data to be in the \"message\" field, and the JSON filter will extract and parse the JSON data from it. output Defines the output plugins that Logstash will use to send the processed data to an external system. In this configuration, a single output plugin is specified: Elasticsearch. output.elasticsearch.hosts \"elasticsearch:9200\" Specifies the Elasticsearch hosts to which Logstash will send the processed data. In this case, Logstash sends the data to Elasticsearch running on the specified host and port. output.elasticsearch.user \"elastic\" Specifies the username for authentication when sending data to Elasticsearch. This username is used to authenticate Logstash with Elasticsearch. output.elasticsearch.password \"changeme\" Specifies the password for authentication when sending data to Elasticsearch. This password is used in combination with the username to authenticate Logstash with Elasticsearch. output.elasticsearch.index \"logstash-%{+YYYY.MM.dd}\" Specifies the index pattern that Logstash will use when storing the data in Elasticsearch. In this configuration, the index pattern includes the current date in the format \"logstash-YYYY.MM.dd\" to create daily indices for the data.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#kibana","title":"Kibana","text":"Field Value Description Image docker.elastic.co/kibana/kibana:7.16.2 The Docker image used for the Kibana service. It pulls the Kibana image from the official Elastic repository with version 7.16.2. Volumes - type bind Specifies the volume type as bind, indicating a host directory will be mounted to the container. - source ./kibana/config/kibana.yml Specifies the path of the Kibana configuration file on the host machine. - target /usr/share/kibana/config/kibana.yml Specifies the path where the Kibana configuration file will be mounted inside the container. - read_only true Specifies that the mounted volume should be read-only. Ports \"5601:5601\" Maps the host's port 5601 to the container's port 5601. This allows external access to the Kibana web interface. Networks elk Specifies the network(s) that the Kibana container is connected to. Depends On elasticsearch Specifies that this service depends on the 'elasticsearch' service. <ul> <li>Next, inside the <code>kibana.yml</code> we have the configuration below.</li> </ul> kibana.yml<pre><code>---\n## Default Kibana configuration from Kibana base image.\n## https://github.com/elastic/kibana/blob/master/src/dev/build/tasks/os_packages/docker_generator/templates/kibana_yml.template.js\n#\nserver.name: kibana\nserver.host: \"0\"\nelasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\nxpack.monitoring.ui.container.elasticsearch.enabled: true\n\n## X-Pack security credentials\n#\nelasticsearch.username: elastic\nelasticsearch.password: changeme\n</code></pre> <ul> <li>The <code>kibana.yml</code> file is a configuration file used by Kibana, the data visualization and exploration tool for Elasticsearch. It allows you to customize various settings related to Kibana's behavior and connection to Elasticsearch.</li> </ul> Field Value Description server.name kibana Sets the name of the Kibana server. server.host \"0\" Defines the host to which Kibana binds. Using \"0\" means it will bind to all available network interfaces. elasticsearch.hosts [ \"http://elasticsearch:9200\" ] Specifies the Elasticsearch cluster's URLs that Kibana should connect to. xpack.monitoring.ui.container.elasticsearch.enabled true Enables the Monitoring UI for containerized Elasticsearch clusters. elasticsearch.username elastic Sets the username to authenticate with Elasticsearch. elasticsearch.password changeme Sets the password to authenticate with Elasticsearch.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#zipkin","title":"Zipkin","text":"<ul> <li>Now, let's take a look into the kafka part in the <code>docker-compose.yml</code> as below.</li> </ul> docker-compose.yml<pre><code>  storage:\n    image: openzipkin/zipkin-mysql\n    container_name: storage\n    command: --default-authentication-plugin=mysql_native_password\n    environment:\n      - MYSQL_ROOT_PASSWORD=zipkin\n      - MYSQL_DATABASE=zipkin\n      - MYSQL_USER=zipkin\n      - MYSQL_PASSWORD=zipkin\n    # Uncomment to expose the storage port for testing\n    # ports:\n    #   - 3306:3306\n    volumes:\n    - ./mysql-data:/var/lib/mysql:rw\n    networks:\n      - elk\n\n  # The zipkin process services the UI, and also exposes a POST endpoint that\n  # instrumentation can send trace data to. Scribe is disabled by default.\n  zipkin:\n    image: openzipkin/zipkin\n    container_name: zipkin\n    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables\n    environment:\n      - STORAGE_TYPE=mysql\n      # Point the zipkin at the storage backend\n      - MYSQL_HOST=storage\n      - MYSQL_USER=zipkin\n      - MYSQL_PASS=zipkin\n      - MYSQL_DB=zipkin\n      - KAFKA_BOOTSTRAP_SERVERS=broker:19092\n      # Uncomment to enable scribe\n      # - SCRIBE_ENABLED=true\n      # Uncomment to enable self-tracing\n      # - SELF_TRACING_ENABLED=true\n      # Uncomment to enable debug logging\n      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG\n    ports:\n      # Port used for the Zipkin UI and HTTP Api\n      - 9411:9411\n      # Uncomment if you set SCRIBE_ENABLED=true\n      # - 9410:9410\n    depends_on:\n      - storage\n    networks:\n      - elk  \n\n  # Adds a cron to process spans since midnight every hour, and all spans each day\n  # This data is served by http://192.168.99.100:8080/dependency\n  #\n  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies\n  dependencies:\n    image: openzipkin/zipkin-dependencies\n    container_name: dependencies\n    entrypoint: crond -f\n    environment:\n      - STORAGE_TYPE=mysql\n      - MYSQL_HOST=storage\n      # Add the baked-in username and password for the zipkin-mysql image\n      - MYSQL_USER=zipkin\n      - MYSQL_PASS=zipkin\n      # Uncomment to see dependency processing logs\n      # - ZIPKIN_LOG_LEVEL=DEBUG\n      # Uncomment to adjust memory used by the dependencies job\n      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G\n    depends_on:\n      - storage\n    networks:\n      - elk        \n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#storage","title":"Storage","text":"<ul> <li>This Docker Compose part defines a service named \"storage\" using the image \"openzipkin/zipkin-mysql\" to run a MySQL database specifically for the Zipkin service. It provides the storage backend for Zipkin's tracing data.</li> </ul> Field Value Description image openzipkin/zipkin-mysql Specifies the Docker image to use for the \"storage\" service. It uses the official \"openzipkin/zipkin-mysql\" image. container_name storage Sets the name of the container that will be created when running the \"storage\" service. The container will be named \"storage\". command --default-authentication-plugin=mysql_native_password Provides additional configuration options to the MySQL server when the container starts. It sets the default authentication plugin for MySQL to \"mysql_native_password\". environment MYSQL_ROOT_PASSWORD=zipkinMYSQL_DATABASE=zipkinMYSQL_USER=zipkinMYSQL_PASSWORD=zipkin Defines environment variables passed to the MySQL server running inside the container. It sets the MySQL root password, creates a database named \"zipkin,\" and creates a user named \"zipkin\" with the password \"zipkin.\" volumes ./mysql-data:/var/lib/mysql:rw Maps the local directory \"./mysql-data\" to the \"/var/lib/mysql\" directory inside the container to persist MySQL data. networks elk Connects the \"storage\" service to the \"elk\" network, presumably defined elsewhere in the Docker Compose file for communication between services. ports (Commented out, not active) (Commented out) It exposes the MySQL port (3306) from the container to the host, allowing direct access to the MySQL database from the host machine (not necessary for normal operation).","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#zipkin_1","title":"Zipkin","text":"Field Value Description image openzipkin/zipkin Specifies the Docker image to use for the \"zipkin\" service. It uses the official \"openzipkin/zipkin\" image from Docker Hub, which is the Zipkin distributed tracing system. container_name zipkin Sets the name of the container that will be created when running the \"zipkin\" service. The container will be named \"zipkin\". environment STORAGE_TYPE=mysqlMYSQL_HOST=storageMYSQL_USER=zipkinMYSQL_PASS=zipkinMYSQL_DB=zipkinKAFKA_BOOTSTRAP_SERVERS=broker:19092 Defines environment variables passed to the Zipkin server running inside the container. It sets various configuration options like the storage backend type (MySQL), MySQL host, user, password, database name, Kafka bootstrap servers, and other optional settings like enabling Scribe, self-tracing, and debug logging. ports 9411:9411 Exposes the port 9411 from the container to the host. Port 9411 is used for the Zipkin UI and HTTP API, allowing access to the Zipkin UI and services via a web browser or HTTP requests. depends_on storage Defines that the \"zipkin\" service depends on the \"storage\" service. This ensures that the \"storage\" service starts before the \"zipkin\" service starts, allowing the Zipkin server to connect to the MySQL storage backend when it starts up. networks elk Connects the \"zipkin\" service to the \"elk\" network, presumably defined elsewhere in the Docker Compose file. This enables communication between the \"zipkin\" service and other services connected to the \"elk\" network.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#dependencies","title":"Dependencies","text":"<ul> <li>The \"dependencies\" service uses the \"openzipkin/zipkin-dependencies\" image to run a cron job that processes spans since midnight every hour and all spans each day. This data is then served at http://192.168.99.100:8080/dependency. The service uses MySQL as the storage backend, and it depends on the \"storage\" service to ensure the database is available. You can also see additional configuration options that can be uncommented, such as enabling dependency processing logs or adjusting memory usage for the job.</li> </ul> Field Value Description image openzipkin/zipkin-dependencies This field specifies the Docker image to use for the \"dependencies\" service. It uses the official \"openzipkin/zipkin-dependencies\" image from Docker Hub. The \"zipkin-dependencies\" service processes spans since midnight every hour and all spans each day, serving the data at http://192.168.99.100:8080/dependency. container_name dependencies The <code>container_name</code> field sets the name of the container that will be created when running the \"dependencies\" service. Containers are instances of Docker images that are isolated and run independently. In this case, the container will be named \"dependencies\". entrypoint crond -f The <code>entrypoint</code> field sets the command that will be executed when the container starts. In this case, it runs the <code>crond</code> command with the <code>-f</code> option, which starts the cron daemon in the foreground. The cron job inside the container will process spans since midnight every hour and all spans each day. environment See below The <code>environment</code> field defines environment variables passed to the Zipkin Dependencies service running inside the container. Environment variables are used to configure the behavior of the application. depends_on storage The <code>depends_on</code> field specifies that the \"dependencies\" service depends on the \"storage\" service. Dependencies ensure that services start in the correct order. In this case, the \"dependencies\" service depends on the \"storage\" service to ensure the MySQL storage backend is available before it starts. networks elk The <code>networks</code> field connects the \"dependencies\" service to the \"elk\" network. Networks are used to enable communication between containers. By connecting to the \"elk\" network, the \"dependencies\" service can communicate with other services connected to the same network, potentially enabling integration with an ELK (Elasticsearch, Logstash, Kibana) stack.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#building_micro-service_system","title":"Building Micro-Service System","text":"<ul> <li>Now, let's continue to build the micro-service system which contains 4 services in in the image below.</li> </ul> <ul> <li>So as we can see 3 services <code>bff-service</code>, <code>customer-service</code> and <code>product-service</code> will register into the <code>eureka-server</code>. After registering, those service can make client calls through exported REST apis of them with the support of <code>OpenFeign</code>. You can view more information in these sections: Spring Cloud OpenFeign Basic, Spring Cloud OpenFeign With Eureka.</li> <li>Then every time a HTTP call is made by any service, then the log data and tracing data will be sent to correct corresponding Kafka topics and then the Tracing System and Log System will consume those messages and store and display on UI.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#eureka_server","title":"Eureka Server","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#pomxml","title":"Pom.xml","text":"<ul> <li>To create Eureka Server, let's add some dependencies as below.</li> <li>Note Netflix Eureka Server dependencies  require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Server in your  Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;  \n   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  \n   &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;  \n    &lt;/dependency&gt;  \n\n    &lt;dependency&gt;  \n         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;  \n         &lt;artifactId&gt;gson&lt;/artifactId&gt;  \n         &lt;version&gt;2.8.9&lt;/version&gt;  \n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#configuration","title":"Configuration","text":"<ul> <li>Now, you will need to add annotation <code>@EnableEurekaServer</code> into your main class as below.</li> </ul> ServerApplication.java<pre><code>package com.eureka.server;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;  \n\n@SpringBootApplication  \n@EnableEurekaServer  \npublic class ServerApplication {  \n\n   public static void main(String[] args) {  \n      SpringApplication.run(ServerApplication.class, args);  \n   }  \n\n}\n</code></pre> <ul> <li>Then In your <code>application.yml</code>. Let's add some configuration. The details of configuration are put in the comments.</li> </ul> application.yml<pre><code>#server run at port 8761\nserver:\n  port: 8761\n\nspring:\n  application:\n    #application name\n    name: eureka-server\n\neureka:\n  client:\n    #self register is false\n    register-with-eureka: false\n    #self fetch registry is false\n    fetch-registry: false\n</code></pre>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#product_service","title":"Product Service","text":"<ul> <li>Now, let's continue on building the first service (<code>product-service</code>). In this service, it just simply receives REST Api calls from other services, it doesn't make any call to others.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#pomxml_1","title":"Pom.xml","text":"<ul> <li>Like <code>Eureka Server</code>, we also need to add a dependency for Spring Cloud.</li> <li>Note Netflix Eureka Client dependencies require you to add Spring Cloud dependency first as mentioned in Spring Cloud Introduction. So maybe you have to add the dependency below first.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Client in your Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Next, we will add dependencies for using <code>spring-cloud-sleuth</code> and sending tracing data to <code>kafka</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;version&gt;2.6.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.opentracing.brave&lt;/groupId&gt;\n        &lt;artifactId&gt;brave-opentracing&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n        &lt;version&gt;2.9.8&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> Dependency Description spring-boot-starter-actuator Provides production-ready features for monitoring and managing the Spring Boot application. Includes health checks, metrics, tracing, and more. spring-cloud-sleuth-zipkin Integrates with Zipkin, a distributed tracing system, to trace and visualize request flows in a distributed system. spring-cloud-starter-sleuth Works with spring-cloud-sleuth-zipkin to provide distributed tracing capabilities and trace requests across microservices. brave-opentracing Bridges between Brave and OpenTracing APIs, enabling OpenTracing-compatible instrumentation and trace propagation with Brave's implementation. spring-kafka Integrates the Spring Boot application with Apache Kafka, enabling messaging and event-driven communication between microservices. <ul> <li>Next,  we will also add dependencies for using <code>log4j2</code> and sending log data to <code>kafka</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;\n        &lt;version&gt;2.7.11&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;kafka-log4j-appender&lt;/artifactId&gt;\n        &lt;version&gt;2.8.2&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n        &lt;artifactId&gt;log4j-spring-cloud-config-client&lt;/artifactId&gt;\n        &lt;version&gt;2.17.2&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> Dependency Description org.springframework.boot:spring-boot-starter-log4j2:2.7.11 This dependency provides the Log4j2 logging framework as the default logging implementation for Spring Boot applications. Log4j2 offers advanced logging capabilities and allows you to configure logging using various configurations. It's commonly used for application logging in Spring Boot projects. org.apache.kafka:kafka-log4j-appender:2.8.2 This dependency provides the Log4j appender for Kafka. It enables you to send log messages from your application to a Kafka topic, which can then be consumed by various consumers for centralized logging and analysis. This is useful for distributing and managing logs in a distributed system. org.apache.logging.log4j:log4j-spring-cloud-config-client:2.17.2 This dependency integrates Log4j with Spring Cloud Config, allowing you to manage your logging configuration centrally using Spring Cloud Config Server. This is particularly useful in microservices architectures where you have multiple instances of the same application and want to manage their logging configuration externally. The exclusion of <code>spring-cloud-bus</code> prevents unnecessary dependencies that are not needed for this purpose.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#controller","title":"Controller","text":"<ul> <li>Next, let's create a simple controller with 2 Apis as below.</li> </ul> ProductController.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.product.service.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@Slf4j\npublic class ProductController {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/product/message\")\n    public ResponseEntity&lt;String&gt; getMessage() {\n        log.info(\"ProductController: getMessage\");\n        return ResponseEntity.ok(\"Hello From product Service\");\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/product/message/error\")\n    public ResponseEntity&lt;String&gt; getErrorMessage() {\n        log.info(\"ProductController: getErrorMessage\");\n        throw new RuntimeException(\"ProductController: getErrorMessage\");\n    }\n\n}\n</code></pre> <ul> <li>The first api will response some texts and the second api will return an error response.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#configuration_1","title":"Configuration","text":"<ul> <li>Firstly, we will use annotation <code>@EnableDiscoveryClient</code>  in the main class to enable discovery client.</li> </ul> <pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.product.service;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SleuthLog4j2KafkaZipkinProductService {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SleuthLog4j2KafkaZipkinProductService.class, args);\n    }\n\n}\n</code></pre> <ul> <li>Next, let's create a configuration class <code>SleuthConfig</code> with the content as below.</li> </ul> SleuthConfig.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.product.service.config;\n\nimport brave.baggage.BaggageFields;\nimport brave.baggage.CorrelationScopeConfig;\nimport brave.baggage.CorrelationScopeCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SleuthConfig {\n\n    @Bean\n    CorrelationScopeCustomizer addSampled() {\n        return b -&gt; b.add(CorrelationScopeConfig.SingleCorrelationField.create(BaggageFields.SAMPLED));\n    }\n\n    @Bean\n    CorrelationScopeCustomizer addParentId() {\n        return b -&gt; b.add(CorrelationScopeConfig.SingleCorrelationField.create(BaggageFields.PARENT_ID));\n    }\n\n}\n</code></pre> <ul> <li>Okay, currently we are using <code>spring-cloud-dependencies</code> version <code>2021.0.0</code> and behind the scene, it will automatically set the <code>spring-cloud-sleuth</code> version <code>3.1.0</code> for us. You can view the release note here</li> <li> <p>Then in the <code>spring-cloud-sleuth</code> version <code>3.1.0</code> we got some changes, the <code>parentId</code> and <code>spanExportable</code> will not be to the log by default. So if we want to log these information, we have to create a config class as above. You can view more information here.</p> </li> <li> <p>Next, let's add the configuration below into the <code>application.yml</code> for <code>sprint-cloud-sleuth</code> and sending tracing data to kafka.</p> </li> </ul> application.yml<pre><code>server:\n  port: 8080\n\nspring:\n  autoconfigure:\n    exclude: org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration\n  application:\n    name: sleuth-zipkin-customer-service\n  cloud:\n    discovery:\n      enabled: true\n  sleuth:\n    sampler:\n      probability: 1.0\n    # propagation:\n    #   type: B3,W3C\n    supports-join: true\n    trace-id128: true\n  opentracing:\n    enabled: true\n  zipkin:\n    kafka:\n      topic: zipkin\n    sender:\n      type: kafka\n#    base-url: http://localhost:9411\n\n\nlogging:\n  level:\n    root: INFO\n#    org:\n#      springframework:\n#        cloud:\n#          sleuth: DEBUG\n\nproduct:\n  service:\n    name: sleuth-zipkin-product-service\n</code></pre> Configuration Key Value Description server.port 8080 Specifies the port on which the Spring Boot application will run. In this case, the application will run on port 8080. spring.autoconfigure.exclude org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration Excludes the <code>KafkaAutoConfiguration</code> class from Spring Boot's auto-configuration. This is useful when you want to customize Kafka configuration yourself. spring.application.name sleuth-zipkin-customer-service Sets the name of the Spring Boot application. In this case, it is set to \"sleuth-zipkin-customer-service\". spring.cloud.discovery.enabled true Enables service discovery using Spring Cloud Discovery. spring.sleuth.sampler.probability 1.0 Configures the probability of sampling a trace. A value of 1.0 means all requests will be traced. spring.sleuth.supports-join true Enables support for joining spans in distributed tracing. spring.sleuth.trace-id128 true Configures trace IDs to be 128-bit values. spring.opentracing.enabled true Enables support for OpenTracing. spring.zipkin.kafka.topic zipkin Sets the Kafka topic to which trace data will be sent for Zipkin. spring.zipkin.sender.type kafka Specifies the sender type for Zipkin. In this case, it is set to \"kafka\". logging.level.root INFO Sets the root logging level to INFO, which controls the level of log messages printed by the application. product.service.name sleuth-zipkin-product-service Defines the name of the product service. <ul> <li>Next, to configure sending log data to kafka, we will continue to create the <code>bootstrap.yml</code> and <code>log4j2.xml</code> as below.</li> </ul> bootstrap.yml<pre><code>spring:\n  application:\n    name: sleuth-zipkin-customer-service\n</code></pre> <ul> <li>This value will be used for the log pattern in <code>log4j2.xml</code>.</li> </ul> log4j2.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Configuration status=\"info\" name=\"spring-boot-kafka-log\" packages=\"com.reloadly\"&gt;\n        &lt;!-- Define the Appenders --&gt;\n    &lt;Appenders&gt;\n            &lt;!-- Kafka Appender --&gt;\n        &lt;Kafka name=\"Kafka\" topic=\"logstash\"&gt;\n            &lt;PatternLayout&gt;\n                    &lt;!-- Define the log pattern --&gt;\n                &lt;alwaysWriteExceptions&gt;false&lt;/alwaysWriteExceptions&gt;\n                &lt;pattern&gt;\n                    {\"timestamp\":\"%d{yyyy-MM-ddHH:mm:ss.SSSZ}\",\"level\":\"%level\",\"service\":\"$${spring:spring.application.name}\",\"package\":\"%logger{36}\",\"class\":\"%c\",\"method\":\"%M\",\"traceId\":\"%X{traceId}\",\"spanId\":\"%X{spanId}\",\"parentSpanId\":\"%X{parentId}\",\"sampled\":\"%X{sampled}\",\"pid\":\"%pid\",\"thread\":\"%thread\",\"logger\":\"%logger{40}\",\"message\":\"%replace{%replace{%msg{separator()}}{(\\\")}{\\\\\\\"}}{\\t}{}\",\"exception\":\"%replace{%replace{%ex{full}{separator()}}{(\\\")}{\\\\\\\"}}{\\t}{}\"}\n                &lt;/pattern&gt;\n            &lt;/PatternLayout&gt;\n            &lt;!-- Define Kafka broker connection details --&gt;\n            &lt;Property name=\"bootstrap.servers\"&gt;localhost:9092&lt;/Property&gt;\n        &lt;/Kafka&gt;\n        &lt;!-- Async Appender --&gt;\n        &lt;Async name=\"Async\"&gt;\n            &lt;AppenderRef ref=\"Kafka\"/&gt;\n        &lt;/Async&gt;\n                &lt;!-- Console Appender (for standard output) --&gt;\n        &lt;Console name=\"stdout\" target=\"SYSTEM_OUT\"&gt;\n            &lt;PatternLayout pattern=\"%style{%d{ISO8601}}{cyan} %highlight{%-5level} %pid %style{[${spring:spring.application.name},%t,%X{traceId},%X{spanId},%X{parentId},%X{sampled}]}{bright,blue} %style{%C{1.}}{bright,yellow}: %msg%n%throwable\"/&gt;\n        &lt;/Console&gt;\n\n    &lt;/Appenders&gt;\n    &lt;!-- Define the Loggers --&gt;\n    &lt;Loggers&gt;\n            &lt;!-- Root Logger --&gt;\n        &lt;Root level=\"INFO\"&gt;\n                &lt;!-- Attach appenders to the root logger --&gt;\n            &lt;AppenderRef ref=\"Kafka\"/&gt;\n            &lt;AppenderRef ref=\"stdout\"/&gt;\n        &lt;/Root&gt;\n        &lt;!-- Logger for org.apache.kafka package --&gt;\n        &lt;Logger name=\"org.apache.kafka\" level=\"WARN\" /&gt;&lt;!-- avoid recursive logging --&gt;\n    &lt;/Loggers&gt;\n&lt;/Configuration&gt;\n</code></pre> <ul> <li> <p>This <code>log4j2.xml</code> configuration is used for configuring logging behavior in a Spring Boot application</p> <ul> <li><code>Appenders</code>: Defines various log appenders, including <code>Kafka</code> and <code>Async</code>.</li> <li><code>Kafka Appender</code>: Sends log messages to a Kafka topic named \"logstash\". The log pattern is defined using JSON format, including various placeholders for log data.</li> <li><code>Async Appender</code>: Wraps the <code>Kafka</code> appender to make it asynchronous for better performance.</li> <li><code>Console Appender</code>: Sends log messages to the standard output (console) with a specific log pattern.</li> <li><code>Loggers</code>: Defines loggers and their levels.</li> <li><code>Root Logger</code>: Specifies that log messages at the INFO level and higher should be captured by the <code>Kafka</code> and <code>stdout</code> appenders attached to the root logger.</li> <li><code>Logger for org.apache.kafka package</code>: Sets the log level for the <code>org.apache.kafka</code> package to WARN, avoiding recursive logging.</li> </ul> </li> <li> <p>You can view full source code of this service at this link</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#customer_service","title":"Customer Service","text":"<ul> <li>Now, let's continue on building the second service (<code>customer-service</code>). In this service, it just simply receives REST Api calls from <code>bff-service</code>, and it can also call to <code>product-service</code> following the Micro-Service System below.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#pomxml_2","title":"Pom.xml","text":"<ul> <li>Like <code>product-service</code> we also need to add a dependency for Spring Cloud.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Client in your Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Next, we will add dependency below for <code>openfeign</code> to make calls to <code>product-service</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n            &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;dependencies&gt;\n</code></pre> <ul> <li>Next, we will add dependencies for using <code>spring-cloud-sleuth</code> and sending tracing data to <code>kafka</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;version&gt;2.6.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.opentracing.brave&lt;/groupId&gt;\n        &lt;artifactId&gt;brave-opentracing&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n        &lt;version&gt;2.9.8&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> Dependency Description spring-boot-starter-actuator Provides production-ready features for monitoring and managing the Spring Boot application. Includes health checks, metrics, tracing, and more. spring-cloud-sleuth-zipkin Integrates with Zipkin, a distributed tracing system, to trace and visualize request flows in a distributed system. spring-cloud-starter-sleuth Works with spring-cloud-sleuth-zipkin to provide distributed tracing capabilities and trace requests across microservices. brave-opentracing Bridges between Brave and OpenTracing APIs, enabling OpenTracing-compatible instrumentation and trace propagation with Brave's implementation. spring-kafka Integrates the Spring Boot application with Apache Kafka, enabling messaging and event-driven communication between microservices. <ul> <li>Next,  we will also add dependencies for using <code>log4j2</code> and sending log data to <code>kafka</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;\n        &lt;version&gt;2.7.11&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;kafka-log4j-appender&lt;/artifactId&gt;\n        &lt;version&gt;2.8.2&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n        &lt;artifactId&gt;log4j-spring-cloud-config-client&lt;/artifactId&gt;\n        &lt;version&gt;2.17.2&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> Dependency Description org.springframework.boot:spring-boot-starter-log4j2:2.7.11 This dependency provides the Log4j2 logging framework as the default logging implementation for Spring Boot applications. Log4j2 offers advanced logging capabilities and allows you to configure logging using various configurations. It's commonly used for application logging in Spring Boot projects. org.apache.kafka:kafka-log4j-appender:2.8.2 This dependency provides the Log4j appender for Kafka. It enables you to send log messages from your application to a Kafka topic, which can then be consumed by various consumers for centralized logging and analysis. This is useful for distributing and managing logs in a distributed system. org.apache.logging.log4j:log4j-spring-cloud-config-client:2.17.2 This dependency integrates Log4j with Spring Cloud Config, allowing you to manage your logging configuration centrally using Spring Cloud Config Server. This is particularly useful in microservices architectures where you have multiple instances of the same application and want to manage their logging configuration externally. The exclusion of <code>spring-cloud-bus</code> prevents unnecessary dependencies that are not needed for this purpose.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#controller_1","title":"Controller","text":"<ul> <li>Next, let's create a simple controller with 3 Apis as below. </li> </ul> CustomerController.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.customer.service.controller;\n\nimport com.springboot.cloud.sleuth.log4j2.kafka.zipkin.customer.service.api.ProductServiceApi;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@Slf4j\npublic class CustomerController {\n\n    @Autowired\n    private ProductServiceApi productServiceApi;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/customer/message\")\n    public ResponseEntity&lt;String&gt; getMessage() {\n        log.info(\"Start CustomerController: getMessage\");\n        log.info(\"Call Product Service method getProductMessage: 1\");\n        String productMessage = this.productServiceApi.getProductMessage();\n        log.info(\"Content From Product Service: \" + productMessage);\n        log.info(\"Call Product Service method getProductMessage: 2\");\n        String productMessage2 = this.productServiceApi.getProductMessage();\n        log.info(\"Content From Product Service: \" + productMessage2);\n        return ResponseEntity.ok(\"Hello From application adapter Service\");\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/customer/message/error\")\n    public ResponseEntity&lt;String&gt; getErrorMessage() {\n        log.info(\"CustomerController: getErrorMessage\");\n        throw new RuntimeException(\"CustomerController: getErrorMessage\");\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/customer/message/error2\")\n    public ResponseEntity&lt;String&gt; getErrorMessage2() {\n        log.info(\"CustomerController: getErrorMessage2\");\n        log.info(\"Call Product Service method getProductMessage\");\n        String productMessage = this.productServiceApi.getProductMessage();\n        log.info(\"Content From Product Service: \" + productMessage);\n        log.info(\"Call Product Service method getErrorMessage\");\n        this.productServiceApi.getErrorMessage();\n        return ResponseEntity.ok(\"CustomerController: getErrorMessage\");\n    }\n\n}\n</code></pre> <ul> <li>On the first it just simply call to <code>product-service</code> two time and will receive some text responses. Then on the second api it will throw an error and the last api will call to <code>product-service</code> but will got an error response.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#feignclient","title":"FeignClient","text":"<ul> <li>Next let's create an interface <code>ProductServiceApi</code> for configuring the <code>FeignClient</code> which will help us to call to <code>product-service</code> easily.</li> </ul> ProductServiceApi.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.customer.service.api;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = \"${product.service.name}\")\npublic interface ProductServiceApi {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/product/message\")\n    public String getProductMessage();\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/product/message/error\")\n    public String getErrorMessage();\n\n}\n</code></pre> <ul> <li>In this interface, we just simply define 2 apis that we will call to <code>product-service</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#configuration_2","title":"Configuration","text":"<ul> <li>Firstly, we will use annotation <code>@EnableDiscoveryClient</code>  and <code>@EnableFeignClients</code> in the main class to enable discovery client and feign client.</li> </ul> SleuthLog4j2KafkaZipkinCustomerApplication.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.customer.service;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class SleuthLog4j2KafkaZipkinCustomerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SleuthLog4j2KafkaZipkinCustomerApplication.class, args);\n    }\n}\n</code></pre> <ul> <li>Next, let's create a configuration class <code>SleuthConfig</code> with the content as below.</li> </ul> SleuthConfig.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.customer.service.config;\n\nimport brave.baggage.BaggageFields;\nimport brave.baggage.CorrelationScopeConfig;\nimport brave.baggage.CorrelationScopeCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SleuthConfig {\n\n    @Bean\n    CorrelationScopeCustomizer addSampled() {\n        return b -&gt; b.add(CorrelationScopeConfig.SingleCorrelationField.create(BaggageFields.SAMPLED));\n    }\n\n    @Bean\n    CorrelationScopeCustomizer addParentId() {\n        return b -&gt; b.add(CorrelationScopeConfig.SingleCorrelationField.create(BaggageFields.PARENT_ID));\n    }\n\n}\n</code></pre> <ul> <li>Okay, currently we are using <code>spring-cloud-dependencies</code> version <code>2021.0.0</code> and behind the scene, it will automatically set the <code>spring-cloud-sleuth</code> version <code>3.1.0</code> for us. You can view the release note here</li> <li> <p>Then in the <code>spring-cloud-sleuth</code> version <code>3.1.0</code> we got some changes, the <code>parentId</code> and <code>spanExportable</code> will not be to the log by default. So if we want to log these information, we have to create a config class as above. You can view more information here.</p> </li> <li> <p>Next, let's add the configuration below into the <code>application.yml</code> for feign client <code>sprint-cloud-sleuth</code>  and sending tracing data to kafka.</p> </li> </ul> application.yml<pre><code>server:\n  port: 8080\n\nspring:\n  autoconfigure:\n    exclude: org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration\n  application:\n    name: sleuth-zipkin-customer-service\n  cloud:\n    discovery:\n      enabled: true\n  sleuth:\n    sampler:\n      probability: 1.0\n    # propagation:\n    #   type: B3,W3C\n    supports-join: true\n    trace-id128: true\n  opentracing:\n    enabled: true\n  zipkin:\n    kafka:\n      topic: zipkin\n    sender:\n      type: kafka\n#    base-url: http://localhost:9411\n\n\nlogging:\n  level:\n    root: INFO\n#    org:\n#      springframework:\n#        cloud:\n#          sleuth: DEBUG\n\nproduct:\n  service:\n    name: sleuth-zipkin-product-service\n</code></pre> Configuration Value Description <code>server.port</code> <code>8080</code> The port on which the server listens for incoming requests. <code>spring.autoconfigure.exclude</code> <code>org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration</code> Excludes Kafka auto-configuration from Spring Boot's auto-configuration. <code>spring.application.name</code> <code>sleuth-zipkin-customer-service</code> The name of the Spring Boot application. <code>spring.cloud.discovery.enabled</code> <code>true</code> Enables service discovery using Spring Cloud Discovery. <code>spring.sleuth.sampler.probability</code> <code>1.0</code> The probability of sampling traces (always enabled with probability 1.0). <code>spring.sleuth.supports-join</code> <code>true</code> Enables support for joining distributed traces. <code>spring.sleuth.trace-id128</code> <code>true</code> Enables 128-bit trace IDs for distributed tracing. <code>spring.opentracing.enabled</code> <code>true</code> Enables OpenTracing support. <code>spring.zipkin.kafka.topic</code> <code>zipkin</code> The Kafka topic to which trace data will be sent. <code>spring.zipkin.sender.type</code> <code>kafka</code> The sender type for trace data (Kafka). <code>logging.level.root</code> <code>INFO</code> Sets the root logging level to INFO. <code>product.service.name</code> <code>sleuth-zipkin-product-service</code> The name of the product service. <ul> <li>Next, to configure sending log data to kafka, we will continue to create the <code>bootstrap.yml</code> and <code>log4j2.xml</code> as below.</li> </ul> bootstrap.yml<pre><code>spring:\n  application:\n    name: sleuth-zipkin-customer-service\n</code></pre> <ul> <li>This value will be used for the log pattern in <code>log4j2.xml</code>.</li> </ul> log4j2.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Configuration status=\"info\" name=\"spring-boot-kafka-log\" packages=\"com.reloadly\"&gt;\n    &lt;Appenders&gt;\n        &lt;Kafka name=\"Kafka\" topic=\"logstash\"&gt;\n            &lt;PatternLayout&gt;\n                &lt;alwaysWriteExceptions&gt;false&lt;/alwaysWriteExceptions&gt;\n                &lt;pattern&gt;\n                    {\"timestamp\":\"%d{yyyy-MM-ddHH:mm:ss.SSSZ}\",\"level\":\"%level\",\"service\":\"$${spring:spring.application.name}\",\"package\":\"%logger{36}\",\"class\":\"%c\",\"method\":\"%M\",\"traceId\":\"%X{traceId}\",\"spanId\":\"%X{spanId}\",\"parentSpanId\":\"%X{parentId}\",\"sampled\":\"%X{sampled}\",\"pid\":\"%pid\",\"thread\":\"%thread\",\"logger\":\"%logger{40}\",\"message\":\"%replace{%replace{%msg{separator()}}{(\\\")}{\\\\\\\"}}{\\t}{}\",\"exception\":\"%replace{%replace{%ex{full}{separator()}}{(\\\")}{\\\\\\\"}}{\\t}{}\"}\n                &lt;/pattern&gt;\n            &lt;/PatternLayout&gt;\n            &lt;Property name=\"bootstrap.servers\"&gt;localhost:9092&lt;/Property&gt;\n        &lt;/Kafka&gt;\n        &lt;Async name=\"Async\"&gt;\n            &lt;AppenderRef ref=\"Kafka\"/&gt;\n        &lt;/Async&gt;\n\n        &lt;Console name=\"stdout\" target=\"SYSTEM_OUT\"&gt;\n            &lt;PatternLayout pattern=\"%style{%d{ISO8601}}{cyan} %highlight{%-5level} %pid %style{[${spring:spring.application.name},%t,%X{traceId},%X{spanId},%X{parentId},%X{sampled}]}{bright,blue} %style{%C{1.}}{bright,yellow}: %msg%n%throwable\"/&gt;\n        &lt;/Console&gt;\n\n    &lt;/Appenders&gt;\n    &lt;Loggers&gt;\n        &lt;Root level=\"INFO\"&gt;\n            &lt;AppenderRef ref=\"Kafka\"/&gt;\n            &lt;AppenderRef ref=\"stdout\"/&gt;\n        &lt;/Root&gt;\n        &lt;Logger name=\"org.apache.kafka\" level=\"WARN\" /&gt;&lt;!-- avoid recursive logging --&gt;\n    &lt;/Loggers&gt;\n&lt;/Configuration&gt;\n</code></pre> <ul> <li> <p>This <code>log4j2.xml</code> configuration is used for configuring logging behavior in a Spring Boot application</p> <ul> <li><code>Appenders</code>: Defines various log appenders, including <code>Kafka</code> and <code>Async</code>.</li> <li><code>Kafka Appender</code>: Sends log messages to a Kafka topic named \"logstash\". The log pattern is defined using JSON format, including various placeholders for log data.</li> <li><code>Async Appender</code>: Wraps the <code>Kafka</code> appender to make it asynchronous for better performance.</li> <li><code>Console Appender</code>: Sends log messages to the standard output (console) with a specific log pattern.</li> <li><code>Loggers</code>: Defines loggers and their levels.</li> <li><code>Root Logger</code>: Specifies that log messages at the INFO level and higher should be captured by the <code>Kafka</code> and <code>stdout</code> appenders attached to the root logger.</li> <li><code>Logger for org.apache.kafka package</code>: Sets the log level for the <code>org.apache.kafka</code> package to WARN, avoiding recursive logging.</li> </ul> </li> <li> <p>You can view full source code of this service at this link</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#bff_service","title":"BFF Service","text":"<ul> <li>Now, let's continue on building the final service (<code>bff-service</code>). In this service, it just simply receives REST Api calls from <code>postman</code>, and it will call to <code>customer-service</code> or <code>product-service</code> following the Micro-Service System below.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#pomxml_3","title":"Pom.xml","text":"<ul> <li>Like <code>customer-service</code> we also need to add a dependency for Spring Cloud.</li> </ul> pom.xml<pre><code>&lt;properties&gt;\n    &lt;spring.cloud-version&gt;2021.0.0&lt;/spring.cloud-version&gt;\n&lt;/properties&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring.cloud-version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Then to use Netflix Eureka Client in your Spring Boot application. You will need to add some dependencies as below</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n        &lt;version&gt;2.13.1&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>Next, we will add dependency below for <code>openfeign</code> to make calls to <code>customer-service</code>  and <code>product-service</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n            &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;dependencies&gt;\n</code></pre> <ul> <li>Next, we will add dependencies for using <code>spring-cloud-sleuth</code> and sending tracing data to <code>kafka</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;version&gt;2.6.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.opentracing.brave&lt;/groupId&gt;\n        &lt;artifactId&gt;brave-opentracing&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n        &lt;version&gt;2.9.8&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> Dependency Description spring-boot-starter-actuator Provides production-ready features for monitoring and managing the Spring Boot application. Includes health checks, metrics, tracing, and more. spring-cloud-sleuth-zipkin Integrates with Zipkin, a distributed tracing system, to trace and visualize request flows in a distributed system. spring-cloud-starter-sleuth Works with spring-cloud-sleuth-zipkin to provide distributed tracing capabilities and trace requests across microservices. brave-opentracing Bridges between Brave and OpenTracing APIs, enabling OpenTracing-compatible instrumentation and trace propagation with Brave's implementation. spring-kafka Integrates the Spring Boot application with Apache Kafka, enabling messaging and event-driven communication between microservices. <ul> <li>Next,  we will also add dependencies for using <code>log4j2</code> and sending log data to <code>kafka</code>.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;\n        &lt;version&gt;2.7.11&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;\n        &lt;artifactId&gt;kafka-log4j-appender&lt;/artifactId&gt;\n        &lt;version&gt;2.8.2&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n        &lt;artifactId&gt;log4j-spring-cloud-config-client&lt;/artifactId&gt;\n        &lt;version&gt;2.17.2&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- ...other dependencies --&gt;\n\n&lt;/dependencies&gt;\n</code></pre> Dependency Description org.springframework.boot:spring-boot-starter-log4j2:2.7.11 This dependency provides the Log4j2 logging framework as the default logging implementation for Spring Boot applications. Log4j2 offers advanced logging capabilities and allows you to configure logging using various configurations. It's commonly used for application logging in Spring Boot projects. org.apache.kafka:kafka-log4j-appender:2.8.2 This dependency provides the Log4j appender for Kafka. It enables you to send log messages from your application to a Kafka topic, which can then be consumed by various consumers for centralized logging and analysis. This is useful for distributing and managing logs in a distributed system. org.apache.logging.log4j:log4j-spring-cloud-config-client:2.17.2 This dependency integrates Log4j with Spring Cloud Config, allowing you to manage your logging configuration centrally using Spring Cloud Config Server. This is particularly useful in microservices architectures where you have multiple instances of the same application and want to manage their logging configuration externally. The exclusion of <code>spring-cloud-bus</code> prevents unnecessary dependencies that are not needed for this purpose.","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#controller_2","title":"Controller","text":"<ul> <li>Next, let's create a simple controller with 4 Apis as below. </li> </ul> BffApplicationController.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service.controller;\n\nimport com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service.api.CustomerServiceApi;\nimport com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service.api.ProductServiceApi;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\n@Slf4j\npublic class BffApplicationController {\n\n    @Autowired\n    private CustomerServiceApi customerServiceApi;\n    @Autowired\n    private ProductServiceApi productServiceApi;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/bff/customer/message\")\n    public ResponseEntity&lt;String&gt; getCustomerMessage() {\n        log.info(\"BffApplicationController: getCustomerMessage\");\n        return ResponseEntity.ok(this.customerServiceApi.getCustomerMessage());\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/bff/customer/message/error\")\n    public ResponseEntity&lt;String&gt; getCustomerErrorMessage() {\n        log.info(\"BffApplicationController: getCustomerErrorMessage\");\n        return ResponseEntity.ok(this.customerServiceApi.getErrorMessage());\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/bff/customer/message/error2\")\n    public ResponseEntity&lt;String&gt; getCustomerErrorMessage2() {\n        log.info(\"BffApplicationController: getCustomerErrorMessage2\");\n        return ResponseEntity.ok(this.customerServiceApi.getErrorMessage2());\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/bff/customer/product/message\")\n    public ResponseEntity&lt;String&gt; getCustomerProductMessage() {\n        log.info(\"BffApplicationController: getCustomerProductMessage\");\n        log.info(\"BffApplicationController: getCustomerMessage\");\n        String customerMessage = this.customerServiceApi.getCustomerMessage();\n        log.info(\"Content From Customer Service: \" + customerMessage);\n        log.info(\"BffApplicationController: getProductService\");\n        String productMessage = this.productServiceApi.getProductMessage();\n        log.info(\"Content From Product Service: \" + productMessage);\n        return ResponseEntity.ok(\"Customer Message: \" + customerMessage + \" - Product Message: \" + productMessage);\n    }\n\n}\n</code></pre> <ul> <li>In which:<ul> <li>The first it just simply call to <code>customer-service</code> and response some texts.</li> <li>The second api will call to <code>customer-servie</code> and get an error response.</li> <li>The third api will call to <code>customer-service</code> and <code>customer-service</code> will call to <code>product-service</code> and get an error response.</li> <li>The final api will call to <code>customer-service</code> and <code>product-service</code></li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#feignclient_1","title":"FeignClient","text":"<ul> <li>Next let's create 2 interfaces <code>CustomerServiceApi</code> and <code>ProductServiceApi</code> for configuring the <code>FeignClient</code> which will help us to call to <code>customer-service</code> and <code>product-service</code> easily.</li> </ul> CustomerServiceApi.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service.api;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = \"${service.customer.name}\")\npublic interface CustomerServiceApi {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/customer/message\")\n    public String getCustomerMessage();\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/customer/message/error\")\n    public String getErrorMessage();\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/customer/message/error2\")\n    public String getErrorMessage2();\n\n}\n</code></pre> ProductServiceApi.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service.api;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = \"${service.product.name}\")\npublic interface ProductServiceApi {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/product/message\")\n    public String getProductMessage();\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/application/product/message/error\")\n    public String getErrorMessage();\n\n}\n</code></pre> <ul> <li>In these 2 interfaces, we just simply defines apis that <code>customer-service</code> and <code>product-service</code> exported.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#configuration_3","title":"Configuration","text":"<ul> <li>Like <code>customer-service</code> we will use annotation <code>@EnableDiscoveryClient</code>  and <code>@EnableFeignClients</code> in the main class to enable discovery client and feign client.</li> </ul> SleuthLog4j2KafkaZipkinBffApplication.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class SleuthLog4j2KafkaZipkinBffApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SleuthLog4j2KafkaZipkinBffApplication.class, args);\n    }\n}\n</code></pre> <ul> <li>Next, let's create a configuration class <code>SleuthConfig</code> with the content as below.</li> </ul> SleuthConfig.java<pre><code>package com.springboot.cloud.sleuth.log4j2.kafka.zipkin.bff.application.service.config;\n\nimport brave.baggage.BaggageFields;\nimport brave.baggage.CorrelationScopeConfig;\nimport brave.baggage.CorrelationScopeCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SleuthConfig {\n\n    @Bean\n    CorrelationScopeCustomizer addSampled() {\n        return b -&gt; b.add(CorrelationScopeConfig.SingleCorrelationField.create(BaggageFields.SAMPLED));\n    }\n\n    @Bean\n    CorrelationScopeCustomizer addParentId() {\n        return b -&gt; b.add(CorrelationScopeConfig.SingleCorrelationField.create(BaggageFields.PARENT_ID));\n    }\n\n}\n</code></pre> <ul> <li>Okay, currently we are using <code>spring-cloud-dependencies</code> version <code>2021.0.0</code> and behind the scene, it will automatically set the <code>spring-cloud-sleuth</code> version <code>3.1.0</code> for us. You can view the release note here</li> <li> <p>Then in the <code>spring-cloud-sleuth</code> version <code>3.1.0</code> we got some changes, the <code>parentId</code> and <code>spanExportable</code> will not be to the log by default. So if we want to log these information, we have to create a config class as above. You can view more information here.</p> </li> <li> <p>Next, let's add the configuration below into the <code>application.yml</code> for feign client <code>sprint-cloud-sleuth</code>  and sending tracing data to kafka.</p> </li> </ul> application.yml<pre><code>#service run at port 9090\nserver:\n  port: 9090\n\nspring:\n  autoconfigure:\n    exclude: org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration\n  application:\n    #service name which will be showed on eureka server dashboard\n    name: sleuth-zipkin-bff-service\n  #Enable Spring Cloud Discovery\n  cloud:\n    discovery:\n      enabled: true\n  sleuth:\n    sampler:\n      probability: 1.0\n    # propagation:\n    #   type: B3,W3C\n    supports-join: true\n    trace-id128: true\n  opentracing:\n    enabled: true\n  zipkin:\n    kafka:\n      topic: zipkin\n    sender:\n      type: kafka\n#    base-url: http://localhost:9411\n\n\nlogging:\n  level:\n    root: INFO\n#    org:\n#      springframework:\n#        cloud:\n#          sleuth: DEBUG\n\n\n#register this service to eureka server by url\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n\nservice:\n  customer:\n    name: sleuth-zipkin-customer-service\n  product:\n    name: sleuth-zipkin-product-service\n</code></pre> Configuration Value Description <code>server.port</code> <code>9090</code> The port on which the service will run. <code>spring.autoconfigure.exclude</code> <code>org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration</code> Excludes Kafka auto-configuration from Spring Boot's auto-configuration. <code>spring.application.name</code> <code>sleuth-zipkin-bff-service</code> The name of the Spring Boot service, shown on Eureka server dashboard. <code>spring.cloud.discovery.enabled</code> <code>true</code> Enables service discovery using Spring Cloud Discovery. <code>spring.sleuth.sampler.probability</code> <code>1.0</code> The probability of sampling traces (always enabled with probability 1.0). <code>spring.sleuth.supports-join</code> <code>true</code> Enables support for joining distributed traces. <code>spring.sleuth.trace-id128</code> <code>true</code> Enables 128-bit trace IDs for distributed tracing. <code>spring.opentracing.enabled</code> <code>true</code> Enables OpenTracing support. <code>spring.zipkin.kafka.topic</code> <code>zipkin</code> The Kafka topic to which trace data will be sent. <code>spring.zipkin.sender.type</code> <code>kafka</code> The sender type for trace data (Kafka). <code>logging.level.root</code> <code>INFO</code> Sets the root logging level to INFO. <code>eureka.client.serviceUrl.defaultZone</code> <code>http://localhost:8761/eureka/</code> The URL for the Eureka server for service registration and discovery. <code>service.customer.name</code> <code>sleuth-zipkin-customer-service</code> The name of the customer service. <code>service.product.name</code> <code>sleuth-zipkin-product-service</code> The name of the product service. <ul> <li>Next, to configure sending log data to kafka, we will continue to create the <code>bootstrap.yml</code> and <code>log4j2.xml</code> as below.</li> </ul> bootstrap.yml<pre><code>spring:\n  application:\n    name: sleuth-zipkin-bff-service\n</code></pre> <ul> <li>This value will be used for the log pattern in <code>log4j2.xml</code>.</li> </ul> log4j2.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Configuration status=\"info\" name=\"spring-boot-kafka-log\" packages=\"com.reloadly\"&gt;\n    &lt;Appenders&gt;\n        &lt;Kafka name=\"Kafka\" topic=\"logstash\"&gt;\n            &lt;PatternLayout&gt;\n                &lt;alwaysWriteExceptions&gt;false&lt;/alwaysWriteExceptions&gt;\n                &lt;pattern&gt;\n                    {\"timestamp\":\"%d{yyyy-MM-ddHH:mm:ss.SSSZ}\",\"level\":\"%level\",\"service\":\"$${spring:spring.application.name}\",\"package\":\"%logger{36}\",\"class\":\"%c\",\"method\":\"%M\",\"traceId\":\"%X{traceId}\",\"spanId\":\"%X{spanId}\",\"parentSpanId\":\"%X{parentId}\",\"sampled\":\"%X{sampled}\",\"pid\":\"%pid\",\"thread\":\"%thread\",\"logger\":\"%logger{40}\",\"message\":\"%replace{%replace{%msg{separator()}}{(\\\")}{\\\\\\\"}}{\\t}{}\",\"exception\":\"%replace{%replace{%ex{full}{separator()}}{(\\\")}{\\\\\\\"}}{\\t}{}\"}\n                &lt;/pattern&gt;\n            &lt;/PatternLayout&gt;\n            &lt;Property name=\"bootstrap.servers\"&gt;localhost:9092&lt;/Property&gt;\n        &lt;/Kafka&gt;\n        &lt;Async name=\"Async\"&gt;\n            &lt;AppenderRef ref=\"Kafka\"/&gt;\n        &lt;/Async&gt;\n\n        &lt;Console name=\"stdout\" target=\"SYSTEM_OUT\"&gt;\n            &lt;PatternLayout pattern=\"%style{%d{ISO8601}}{cyan} %highlight{%-5level} %pid %style{[${spring:spring.application.name},%t,%X{traceId},%X{spanId},%X{parentId},%X{sampled}]}{bright,blue} %style{%C{1.}}{bright,yellow}: %msg%n%throwable\"/&gt;\n        &lt;/Console&gt;\n\n    &lt;/Appenders&gt;\n    &lt;Loggers&gt;\n        &lt;Root level=\"INFO\"&gt;\n            &lt;AppenderRef ref=\"Kafka\"/&gt;\n            &lt;AppenderRef ref=\"stdout\"/&gt;\n        &lt;/Root&gt;\n        &lt;Logger name=\"org.apache.kafka\" level=\"WARN\" /&gt;&lt;!-- avoid recursive logging --&gt;\n    &lt;/Loggers&gt;\n&lt;/Configuration&gt;\n</code></pre> <ul> <li> <p>This <code>log4j2.xml</code> configuration is used for configuring logging behavior in a Spring Boot application</p> <ul> <li><code>Appenders</code>: Defines various log appenders, including <code>Kafka</code> and <code>Async</code>.</li> <li><code>Kafka Appender</code>: Sends log messages to a Kafka topic named \"logstash\". The log pattern is defined using JSON format, including various placeholders for log data.</li> <li><code>Async Appender</code>: Wraps the <code>Kafka</code> appender to make it asynchronous for better performance.</li> <li><code>Console Appender</code>: Sends log messages to the standard output (console) with a specific log pattern.</li> <li><code>Loggers</code>: Defines loggers and their levels.</li> <li><code>Root Logger</code>: Specifies that log messages at the INFO level and higher should be captured by the <code>Kafka</code> and <code>stdout</code> appenders attached to the root logger.</li> <li><code>Logger for org.apache.kafka package</code>: Sets the log level for the <code>org.apache.kafka</code> package to WARN, avoiding recursive logging.</li> </ul> </li> <li> <p>You can view full source code of this service at this link</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#testing","title":"Testing","text":"<ul> <li>Before testing, let's take a look into test cases that we are going to do as in the images below.</li> <li>Firstly, we will test the happy case, when BFF service call to Customer Service and the Customer Service will call 2 times to Product Service. All calls are success.</li> </ul> <ul> <li>Next, we will test the first failed case, when BFF service call to Customer Service and get the error response.</li> </ul> <ul> <li>Finally, we will continue to test the second failed case, when BFF service call to Customer Service and the Customer Service calls to Product Service and get the error response at the second call.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#happy_case","title":"Happy Case","text":"<ul> <li>Okay Let's start the docker compose for <code>kafka-kibana-zipkin</code>. </li> </ul> <pre><code>duc@duc-MS-7E01:~/study/docker/kafka-kibana-zipkin$ docker compose up -d\n[+] Running 83/17\n \u2714 broker 2 layers [\u28ff\u28ff]      0B/0B      Pulled                                                                                                                                 270.2s \n \u2714 elasticsearch 9 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                    52.1s \n \u2714 logstash 11 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                      90.5s \n \u2714 storage 10 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                       273.3s \n \u2714 kibana 13 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                      77.0s \n \u2714 zipkin 9 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                          118.1s \n \u2714 dependencies 10 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                  256.7s \n \u2714 zookeeper 11 layers [\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff]      0B/0B      Pulled                                                                                                                    245.8s                                 \n[+] Running 10/10\n \u2714 Network kafka-kibana-zipkin_elk                Created                                                                                                                        0.1s \n \u2714 Volume \"kafka-kibana-zipkin_elasticsearch\"     Created                                                                                                                        0.0s \n \u2714 Container zookeeper                            Started                                                                                                                        1.4s \n \u2714 Container storage                              Started                                                                                                                        1.4s \n \u2714 Container dependencies                         Started                                                                                                                        1.1s \n \u2714 Container zipkin                               Started                                                                                                                        1.0s \n \u2714 Container broker                               Started                                                                                                                        1.1s \n \u2714 Container kafka-kibana-zipkin-elasticsearch-1  Started                                                                                                                        1.4s \n \u2714 Container kafka-kibana-zipkin-kibana-1         Started                                                                                                                        1.8s \n \u2714 Container kafka-kibana-zipkin-logstash-1       Started                \n</code></pre> <ul> <li>Then let's run 2 commands below to create 2 topics for Kafka.</li> </ul> <pre><code>docker exec broker kafka-topics --bootstrap-server broker:9092 --create --replication-factor 1 --partitions 1 --topic logstash\n\ndocker exec broker kafka-topics --bootstrap-server broker:9092 --create --replication-factor 1 --partitions 1 --topic zipkin\n</code></pre> <ul> <li> <p>Then let's start all services:</p> <ul> <li>Eureka Service</li> <li>BFF Service</li> <li>Customer Service</li> <li>Product Service</li> </ul> </li> <li> <p>Next, let's open Postman and call the GET <code>http://localhost:9090/v1/bff/customer/message</code> api, then you can see the result as below.</p> </li> </ul> <p></p> <ul> <li>Now, let's access to zipkin server at <code>localhost:9411</code>. Then let's search <code>sleuth-zipkin-bff-service</code> then we will have one trace as in the image below.</li> </ul> <p></p> <ul> <li>Next, if we view the detail of this trace then we can see we have a traceId and 4 spans which are corresponding with calls from Postman to BFF Service then from BFF Service to Customer Service and 2 times from Customer Service to Product Service. </li> </ul> <p></p> <p></p> <ul> <li>Because in <code>application.yaml</code> files in micro-service system we configured <code>supports-join: true</code> then we can see <code>client Send span</code> had joined with the <code>server received span</code>. For example if we look into the second span and view the details on the right side then we can see there are 4 events in this span which are <code>Client Send</code>, <code>Server Received</code>, <code>Server Sent</code> and <code>Client Received</code>.</li> <li>Next, when we access Kibana at <code>localhost:5601</code> then use the <code>traceId</code> in the Zipkin to search, we can see all the log information regarding to the calls from Postman to BFF Service then to Customer Service and finally to Product Service as in the image below.</li> </ul> <p></p> <ul> <li>So with using <code>traceId</code> in Kibana we can easily search log information in our micro-system. In the log we can also see the <code>parentSpanId</code> and <code>sampled</code> that we configured before in micro-service system services.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#failed_case_1","title":"Failed Case 1","text":"<ul> <li>In this example, we just simply use Postman to call BFF Service and the BFF Service will call Customer Service and receive an error response as in the image below.</li> </ul> <ul> <li>Okay let's use Postman and call to the api <code>http://localhost:9090/v1/bff/customer/message/error</code> then you can see the result as below.</li> </ul> <ul> <li>Now, if we access the <code>zipkin</code> server then we will get a trace with error as in the image below.</li> </ul> <ul> <li>Then if we view the trace detail then we will see error in the second span with some details inside the <code>Tags</code> like the error code, the controller class and api.</li> </ul> <ul> <li>Then, let's take this failed <code>traceId</code> and search in Kibana system, we can see all the log information for calls from Postman to BFF service and from BFF Service to Customer Service and also the exception stacktraces Customer Service and BFF Service for the failed client call also.</li> </ul> <ul> <li>So as a developer we can easily check and find the root cause of the error when we got some issues in our micro-service system.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#failed_case_2","title":"Failed Case 2","text":"<ul> <li>Okay the failed case 1 is really simple because we only have 2 services that interact with each other. In this example we will have 3 services in which Customer Service and Product Service will have 2 calls and we assume that the we will get the error at the second call as in the image below.</li> </ul> <ul> <li>Okay let's use Postman and call to the api <code>http://localhost:9090/v1/bff/customer/message/error2</code> then you can see the result as below.</li> </ul> <ul> <li>Now, if we access the <code>zipkin</code> server then we will get the second trace with error as in the image below.</li> </ul> <ul> <li>Then if we view the trace detail then we can easily determine the span that the error come from with some details inside the <code>Tags</code> like the error code, the controller class and api.</li> </ul> <ul> <li>Then, if we want to see more details, let's take this failed <code>traceId</code> and search in Kibana system and we can see a list of log information for calls from Postman to BFF Service then from BFF Service to Customer Service and then from Customer Service to Product Service. We also see the error stacktraces and can easily determine the root issue come from which service.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#support_join_is_false","title":"Support Join Is False","text":"<ul> <li> <p>Okay, let's change the configuration <code>supports-join: false</code> in <code>application.yaml</code> for all Spring Boot services and start again. Then when we call apis from postman we can see results in Zipkin as in images below.</p> </li> <li> <p>For the happy case we will get the result as below.</p> </li> </ul> <p></p> <p></p> <ul> <li>As we can see in the details of the trace, we have 7 spans which are corresponding with calls from Postman to BFF Service then from BFF Service to Customer Service and 2 times from Customer Service to Product Service.</li> </ul> <p></p> <ul> <li> <p>We can see <code>client span</code>  the <code>server span</code> are seperated. For example if we look into the second span and view the details on the right side then we can see there are only  2 events in this span which are <code>Client Send</code> and <code>Client Received</code>.</p> </li> <li> <p>Okay for the failed case 1, we will have the result as below.</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>For <code>supports-join: false</code> we will have 3 spans because <code>client span</code> and <code>server span</code> are separated and we can easily see the error came from the <code>server span</code> of Customer Service.</p> </li> <li> <p>Likewise, for the failed case 2.</p> </li> </ul> <p></p> <p></p> <ul> <li>We can see we also have 7 spans and we can easily determine the error span come from the <code>server span</code> of Product Service.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#summary","title":"Summary","text":"<ul> <li>Okay, we have just built a small micro-service system which use Spring Cloud Sleuth, Kafka, Zipkin and Kibana and we also see how these technologies help us in managing and detecting the issue quickly. All sources are put in the <code>References</code> part below.</li> <li>However, I also want to mention a little bit if you want to try this example. <ul> <li>Firstly, your computer have to have 16Gb minimum of RAM because we run many docker services and Spring Boot services there.</li> <li>Secondly, I got some issues with docker image <code>openzipkin/zipkin-mysql</code>. When I stop and restart the docker compose then all the trace data will be lost because new docker volume is always created. I will check it if I have time in future.</li> </ul> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#see_also","title":"See Also","text":"<ul> <li>Spring Cloud OpenFeign Basic</li> <li>Spring Cloud OpenFeign With Eureka</li> <li>Distributed Tracing</li> <li>Spring Cloud Sleuth</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth%20With%20Zipkin%20And%20Kibana/#references","title":"References","text":"<ul> <li>Logit.io</li> <li>Elastic</li> <li>Kibana - Wikipedia</li> <li>spring cloud 2021.0.0</li> <li>spring-cloud-sleuth 3.1.0</li> <li>Kafka-Kibana-Zipkin Docker Compose</li> <li>Sleuth-Log4j2-Kafka-Zipkin Micro-Service System</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/","title":"Spring Cloud Sleuth","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#what_is_the_spring_cloud_sleuth","title":"What Is The Spring Cloud Sleuth?","text":"<ul> <li> <p><code>Spring Cloud Sleuth</code> provides Spring Boot auto-configuration for Distributed Tracing. Underneath, Spring Cloud Sleuth is a layer over a Tracer library named\u00a0Brave.</p> </li> <li> <p>Sleuth configures everything you need to get started. This includes where trace data (spans) are reported to, how many traces to keep (sampling), if remote fields (baggage) are sent, and which libraries are traced.</p> </li> <li> <p>Spring Cloud Sleuth is able to trace your requests and messages so that you can correlate that communication to corresponding log entries. You can also export the tracing information to an external system to visualize latency. Spring Cloud Sleuth supports\u00a0OpenZipkin\u00a0compatible systems directly.</p> </li> <li> <p>More information</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#why_spring_cloud_sleuth","title":"Why Spring Cloud Sleuth?","text":"<ul> <li>Spring Cloud Sleuth provides Spring Boot auto-configuration for distributed tracing.</li> <li> <p>Specifically, Spring Cloud Sleuth\u2026\u200b</p> <ul> <li>Adds trace and span ids to the Slf4J MDC, so we can extract all the logs from a given trace or span in a log aggregator.</li> <li>Instruments common ingress and egress points from Spring applications (servlet filter, rest template, scheduled actions, message channels, feign client).</li> </ul> </li> <li> <p>If\u00a0<code>spring-cloud-sleuth-zipkin</code>\u00a0is available then the app will generate and report\u00a0Zipkin-compatible traces via HTTP. By default it sends them to a Zipkin collector service on localhost (port 9411). Configure the location of the service using\u00a0<code>spring.zipkin.baseUrl</code>.</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#what_is_the_zipkin","title":"What Is The Zipkin?","text":"<ul> <li> <p><code>Zipkin</code> is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures. Features include both the collection and lookup of this data.</p> </li> <li> <p>Applications need to be \u201cinstrumented\u201d to report trace data to Zipkin. This usually means configuration of a\u00a0tracer or instrumentation library. The most popular ways to report data to Zipkin are via HTTP or Kafka, though many other options exist, such as Apache ActiveMQ, gRPC and RabbitMQ. The data served to the UI are stored in-memory, or persistently with a supported backend such as Apache Cassandra or Elasticsearch.</p> </li> <li> <p>More information</p> </li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#what_is_the_brave_library","title":"What Is The Brave Library?","text":"<ul> <li><code>Brave</code> is a distributed tracing instrumentation library. Brave typically intercepts production requests to gather timing data, correlate and propagate trace contexts. While typically trace data is sent to\u00a0Zipkin server, third-party plugins are available to send to alternate services such as\u00a0Amazon X-Ray.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#how_does_spring_cloud_sleuth_work","title":"How Does Spring Cloud Sleuth Work?","text":"","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#context_generation","title":"Context Generation","text":"<ul> <li>Firstly, let's take a look into the picture below, as you can see when the service A receive an request from an external system then the <code>TraceContext</code> will be generated and then will be propagated to other services in micro service system.</li> <li>At this step, firstly spring cloud sleuth will check in the incoming headers that it contains the specific header <code>X\u2500B3\u2500TraceId</code>, so if the incoming headers doesn't contain this header then the spring cloud sleuth will knows that this is the first request to the micro service system then it will generate the <code>spanId</code>, <code>traceId</code> and create the <code>TraceContext</code>.  </li> </ul> <ul> <li>In the <code>TraceContext</code> we will have 3 <code>identifiers</code> which are <code>traceId</code>, <code>spanId</code> and <code>parentSpanId</code> and a <code>sampling state</code> which is <code>sampled</code>. We also have the headers from B3 Propagation, which is built-in to Brave and has implementations in many languages and frameworks. Let's check the table below for more details.</li> </ul> Fields Header Type Definition Example Value TraceId X\u2500B3\u2500TraceId itendifier The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID. 80f198ee56343ba864fe8b2a57d3eff7 (128 bits), 05e3ac9a4f6e3b90 (64 bits) SpanId X\u2500B3\u2500SpanId itendifier The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted: it may or may not be derived from the value of the TraceId. 05e3ac9a4f6e3b90 ParentSpanId X\u2500B3\u2500ParentSpanId itendifier The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId. 05e3ac9a4f6e3b90 Sampled X\u2500B3\u2500Sampled Sampling State Sampling is a mechanism to reduce the volume of data that ends up in the tracing system. In B3, sampling applies consistently per-trace: once the sampling decision is made, the same value should be consistently sent downstream. This means you will see all spans sharing a trace ID or none. true","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#context_propagation","title":"Context Propagation","text":"<ul> <li><code>B3 Propagation</code> is a specification for the header \"b3\" and those that start with \"x-b3-\". These headers are used for the <code>traceContext</code> propagation across service boundaries.</li> <li>Base on <code>B3</code> , Sleuth <code>propagates</code> the <code>traceContext</code> across service boundaries. When a request enters a service, Sleuth extracts the <code>traceContext</code> from the incoming request headers. It then adds the trace and span information to the outgoing requests, ensuring that the <code>traceId</code> is propagated across multiple services. This allows for end-to-end tracing of requests.</li> <li>For example, when a downstream HTTP call is made, its <code>traceContext</code> is encoded as request headers and sent along with it, as shown in the following images.</li> </ul> <ul> <li>Now, we need to understand when do spans are created, recorded and how does the <code>traceContext</code> is propagated. </li> <li>Firstly, we have the concept Annotation/Event\u00a0which is used to record the existence of an event in time. These events to highlight what kind of an action took place (it doesn\u2019t mean that physically such an event will be set on a span). </li> </ul> Name Full Name Description cs Client Send The client has made a request. This annotation indicates the start of the span. sr Server Received The server side got the request and started processing it. Subtracting the\u00a0<code>cs</code>\u00a0timestamp from this timestamp reveals the network latency. ss Server Sent Annotated upon completion of request processing (when the response got sent back to the client). Subtracting the\u00a0<code>sr</code>\u00a0timestamp from this timestamp reveals the time needed by the server side to process the request. cr Client Received Signifies the end of the span. The client has successfully received the response from the server side. Subtracting the\u00a0<code>cs</code>\u00a0timestamp from this timestamp reveals the whole time needed by the client to receive the response from the server. <ul> <li>Now, let's take a look about how do the <code>spanIds</code> are generated and sent between Client and Server as in the image below.</li> </ul> <ul> <li>As you can see in the image above, a new span will be created every time the <code>server received</code>, <code>client send</code> and <code>server received</code> events are determined and these span will be sent to the distributed tracing system like <code>Zipkin</code> when the events <code>server sends</code>, <code>client received</code> and <code>server sends</code> are determined respectively. </li> <li>Beside it, the <code>traceContext</code> will be mapped and propagated as in the image below without shared <code>spanIds</code>. It means at steps <code>server received</code>, <code>client send</code> and <code>server received</code>, new <code>spanIds</code> are always generated.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#sharing_span_ids_between_client_and_server","title":"Sharing span IDs between Client and Server","text":"<ul> <li>Okay, this part will be a little bit complicated so we will investigate step by step.</li> <li>For the <code>TraceContext Propagation</code> without sharing <code>spanIds</code>, it will look like as in the image below. In which, when the <code>Server Received</code>, the <code>traceContext</code> is extracted from the incoming request headers and  then it will be mapped to the new <code>TraceContext</code> with <code>new spanId</code></li> </ul> <ul> <li>So on Zipkin, we will see a trace with 3 spans as in the image below.</li> </ul> <ul> <li>Now, following the <code>B3</code>, by default the Spring Cloud Sleuth will enable sharing the <code>spanId</code> between Client and Server. In which, when the <code>Server Received</code>, the <code>traceContext</code> is extracted from the incoming request headers and then it will join to the new <code>TraceContext</code> without generating new <code>spanId</code> or we can say the <code>traceContext</code> of event <code>Server Received</code> will use all the information from extracted <code>traceContext</code> of incoming request.</li> </ul> <ul> <li>Now, if we look into the image below, then there is only two <code>Spans</code> will be displayed to <code>Zipkin</code> server because the <code>client Send span</code> had joined with the <code>server received span</code>. They use the same the same <code>traceId</code>, <code>spanId</code> and  <code>parentId</code>.</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#see_also","title":"See Also","text":"<ul> <li>Distributed Tracing</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Cloud/Spring%20Cloud%20Sleuth/#references","title":"References","text":"<ul> <li>ryanharrison.co.uk</li> <li>appdynamics.com</li> <li>openzipkin</li> <li>w3.org</li> <li>opentracing.io</li> <li>jaegertracing.io</li> <li>zipkin.io</li> <li>cloud.spring.io</li> <li>blog.sentry.io</li> </ul>","tags":["Spring","SpringCloud","SpringBoot"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/","title":"Spring Bean Configuration With Java Code","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#development_process_with_java_code","title":"Development Process With Java Code","text":"<ul> <li> <p>In Spring Inversion Of Control Java Code we knew how to configure the Spring Container without using the XML configuration file and we also use the annotations   to make the Spring Framework scan and inject the Spring Beans automatically. In this section, we will use the Java Code for configuring the Spring Bean manually without the powerful support of annotations. Then we will have a closer look at Spring Framework configuration.</p> </li> <li> <p>To configure the <code>Spring Beans with Java Code</code>, we should follow these steps:</p> <ul> <li>Define the dependency interface and class</li> <li>Define method to expose bean.</li> <li>Inject bean dependencies.</li> <li>Read Spring Java configuration class.</li> <li>Retrieve bean from Spring Container.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#example_for_spring_bean_configuration","title":"Example For Spring Bean Configuration","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#dependencies","title":"Dependencies","text":"<ul> <li>Like we took an example with Spring Inversion Of Control, we will need to add the dependency <code>spring-context</code> for creating the Spring Container and configuring Constructor Injection Type.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n    &lt;version&gt;5.3.24&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#define_the_dependency_interface_and_class","title":"Define the dependency interface and class","text":"<ul> <li> <p>So now, let's create 2 interfaces <code>Coach</code> and <code>ExanminationService</code> and they will be implemented by 4 java classes <code>EnglishCoach</code>, <code>HistoryCoach</code>, <code>EnglishExaminationService</code> and <code>HistoryExaminationService</code>  correspondingly. In which.</p> <ul> <li>The class <code>EnglishCoach</code> will need to use <code>EnglishExaminationService</code> as a dependency for it's method.</li> <li>The class <code>HistoryCoach</code> will need to use <code>HistoryExaminationService</code> as a dependency for it's method.</li> </ul> </li> <li> <p>Let's see the diagram below for more details.</p> </li> </ul> <p></p> <ul> <li>So, firstly let's create <code>ExaminationService</code> interface and <code>EnglishExaminationService</code> and <code>HistoryExaminationService</code> implementation classes as below.</li> </ul> ExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;  \n\npublic interface ExaminationService {  \n\n    public String getExamination();  \n\n}\n</code></pre> EnglishExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;  \n\n\npublic class EnglishExaminationService implements ExaminationService {  \n\n    @Override  \n    public String getExamination() {  \n        return \"Focus and take English examination in 3 hours\";  \n    }  \n}\n</code></pre> HistoryExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;\n\npublic class HistoryExaminationService implements ExaminationService {\n\n    @Override\n    public String getExamination() {\n        return \"Focus and take History examination in 3 hours\";\n    }\n\n}\n</code></pre> <ul> <li>Then let's create the <code>Coach</code> interface and <code>EnglishCoach</code> and <code>HistoryCoach</code> implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;  \n\npublic interface Coach {  \n\n    public String getDailyHomeWork();  \n\n    public String getExamination();  \n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;  \n\npublic class EnglishCoach implements Coach {  \n\n    @Override  \n    public String getDailyHomeWork() {  \n        return \"Spend 1 hour to practise Speaking Skill!\";  \n    }  \n\n    @Override  \n    public String getExamination() {  \n        return null;  \n    }  \n\n}\n</code></pre> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;\n\npublic class HistoryCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return null;\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#create_constructor_or_setter_for_injections","title":"Create constructor or setter for injections","text":"<ul> <li>Now, in the <code>EnglishCoach</code>, let's create a constructor for injecting the <code>ExaminationService</code> and use it for <code>getExamination()</code> method as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;  \n\npublic class EnglishCoach implements Coach {  \n\n    private ExaminationService examinationService;  \n\n    public EnglishCoach(ExaminationService examinationService) {  \n        this.examinationService = examinationService;  \n    }  \n\n    @Override  \n    public String getDailyHomeWork() {  \n        return \"Spend 1 hour to practise Speaking Skill!\";  \n    }  \n\n    @Override  \n    public String getExamination() {  \n        return this.examinationService.getExamination();  \n    }  \n\n}\n</code></pre> <ul> <li>Then in the <code>HistoryCoach</code>, let's create a setter method for injecting the <code>ExaminationService</code> and use it for <code>getExamination()</code> method as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;\n\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public void setExaminationService(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#define_method_to_expose_bean","title":"Define method to expose bean","text":"<ul> <li>Now, let's create the <code>ApplicationConfig</code> java class and put the configuration for exposing the bean as below.</li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code.config;\n\nimport com.spring.core.spring.dependency.injection.java.source.code.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class ApplicationConfig {\n\n    @Bean\n    public ExaminationService englishExaminationService() {\n        return new EnglishExaminationService();\n    }\n\n    @Bean\n    public ExaminationService historyExaminationService() {\n        return new HistoryExaminationService();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, For every type of bean we have to create the corresponding method and return the new instance of it. Then we will add the annotation <code>@Bean</code> on these methods to make returned instances become the beans and by default the method name will be the bean id.</li> <li>We define these two beans <code>englishExaminationService</code> and <code>historyExaminationService</code> first because they don't contain any dependency there.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#inject_bean_dependencies","title":"Inject bean dependencies","text":"<ul> <li>Then for injecting the dependencies between beans, we will reference methods that we exposed beans into the constructor or setter while creating the new instances for beans with dependencies as below.</li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code.config;\n\nimport com.spring.core.spring.dependency.injection.java.source.code.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class ApplicationConfig {\n\n    @Bean\n    public ExaminationService englishExaminationService() {\n        return new EnglishExaminationService();\n    }\n\n    @Bean\n    public ExaminationService historyExaminationService() {\n        return new HistoryExaminationService();\n    }\n\n    @Bean\n    public EnglishCoach englishCoach() {\n        return new EnglishCoach(englishExaminationService());\n    }\n\n    @Bean\n    public HistoryCoach historyCoach() {\n       HistoryCoach historyCoach = new HistoryCoach();\n       historyCoach.setExaminationService(historyExaminationService());\n       return historyCoach;\n    }\n\n}\n</code></pre> <ul> <li>As you can see, the <code>EnglishCoach</code> instance will need to inject the bean <code>englishExaminationService</code> from <code>englishExaminationService()</code> method by constructor while the <code>HistoryCoach</code> instance will need to inject the <code>historyExaminationService</code> from <code>historyExaminationService()</code> method by setter method.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#read_spring_java_configuration_class","title":"Read Spring Java configuration class","text":"<ul> <li>Now, let's use <code>AnnotationConfigApplicationContext</code> for creating the <code>applicationContext</code> which is known as <code>Spring Container</code> as below:</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;\n\nimport com.spring.core.spring.dependency.injection.java.source.code.config.ApplicationConfig;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Create a spring container\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\n\n    }\n}\n</code></pre> <ul> <li>In which the <code>AnnotationConfigApplicationContext</code> will be created with <code>ApplicationConfig</code> that we created above.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#retrieve_bean_from_spring_container","title":"Retrieve bean from Spring Container","text":"<ul> <li>Now, we can use the bean in the Spring Container by using <code>getBean()</code> method.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code;\n\nimport com.spring.core.spring.dependency.injection.java.source.code.config.ApplicationConfig;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Create a spring container\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\n\n        //Retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n\n        //Use bean\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n\n        //Close context\n        context.close();\n\n    }\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#testing","title":"Testing","text":"<ul> <li>Finally, we just simply run the main class then we can see the content in the spring bean as below.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#how_bean_works_behind_the_scences","title":"How @Bean Works Behind The Scences?","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#for_defining_methods_to_expose_beans","title":"For Defining methods to expose beans","text":"<ul> <li>As in the example above you may wonder how does the <code>@Bean</code> annotation works behind? Let's deep dive into it with following steps below.</li> <li>For the code creating the bean in the <code>ApplicationConfig.java</code> as below.</li> </ul> ApplicationConfig.java<pre><code>....\n\n    @Bean\n    public ExaminationService englishExaminationService() {\n        return new EnglishExaminationService();\n    }\n\n....\n</code></pre> <ul> <li>At a high-level, Spring creates a bean component manually. By default the scope is singleton. So any request for an <code>englishExaminationService</code> bean, will get the same instance of the bean since singleton is the default scope.</li> <li>The <code>@Bean</code> annotation tells Spring that we are creating a bean component manually. We didn't specify a scope so the default scope is singleton.</li> <li>The method <code>public ExaminationService englishExaminationService()</code> specifies that the bean will have the bean id <code>englishExaminationService</code>. The method name determines the bean id. The return type is the Coach interface. This is useful for dependency injection. This can help Spring find any dependencies that implement the Coach interface.</li> <li>The <code>@Bean</code> annotation will intercept any requests for <code>englishExaminationService</code> bean. Since we didn't specify a scope, the bean scope is singleton. As a result, it will give the same instance of the bean for any requests.</li> <li>The code <code>new EnglishExaminationService();</code> will create a new instance of the <code>EnglishExaminationService</code>.</li> <li> <p>The code <code>return new EnglishExaminationService();</code>  returns an instance of the <code>englishExaminationService</code>.</p> </li> <li> <p>Now let's step back and look at the method in it's entirety.</p> </li> </ul> ApplicationConfig.java<pre><code>....\n\n    @Bean\n    public ExaminationService englishExaminationService() {\n        return new EnglishExaminationService();\n    }\n\n....\n</code></pre> <ul> <li> <p>It is important to note that this method has the <code>@Bean</code> annotation. The annotation will intercept ALL calls to the method <code>englishExaminationService()</code>. Since no scope is specified the <code>@Bean</code> annotation uses singleton scope. Behind the scenes, during the <code>@Bean</code> interception, it will check in memory of the Spring container (applicationContext) and see if this given bean has already been created.</p> </li> <li> <p>If this is the first time the bean has been created then it will execute the method as normal. It will also register the bean in the application context. So that is knows that the bean has already been created before. Effectively setting a flag.</p> </li> <li> <p>The next time this method is called, the <code>@Bean</code> annotation will check in memory of the Spring container (applicationContext) and see if this given bean has already been created. Since the bean has already been created (previous paragraph) then it will immediately return the instance from memory. It will not execute the code inside of the method. Hence this is a singleton bean.</p> </li> <li> <p>The code inside the method <code>return new EnglishExaminationService();</code> is not executed for subsequent requests to the method <code>public ExaminationService englishExaminationService()</code> . This code is only executed once during the initial bean creation since it is singleton scope.</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#for_dependency_injection","title":"For Dependency Injection","text":"<ul> <li>In the example that we made before, we are creating an <code>EnglishCoach</code> and injecting the <code>englishExaminationService()</code> using the same information presented earlier.</li> </ul> ApplicationConfig.java<pre><code>....\n\n@Bean  \npublic ExaminationService englishExaminationService() {  \n    return new EnglishExaminationService();  \n}\n\n@Bean  \npublic EnglishCoach englishCoach() {  \n    return new EnglishCoach(englishExaminationService());  \n}\n\n....\n</code></pre> <ul> <li>In the code below, we define a bean for the <code>englishExaminationService</code>. Since the bean scope is not specified, it defaults to singleton.</li> </ul> ApplicationConfig.java<pre><code>....\n\n    @Bean\n    public ExaminationService englishExaminationService() {\n        return new EnglishExaminationService();\n    }\n\n....\n</code></pre> <ul> <li> <p>Any calls for <code>englishExaminationService</code>, the <code>@Bean</code> annotation intercepts the call and checks to see if an instance has been created. First time through, no instance is created so the code executes as desired. For subsequent calls, the singleton has been created so <code>@Bean</code> will immediately return with the singleton instance.</p> </li> <li> <p>Now for the code <code>return new EnglishCoach(englishExaminationService());</code>. It creates an instance of <code>EnglishCoach</code>. Note the call to the method <code>englishExaminationService()</code>. We are calling the annotated method above. The <code>@Bean</code> will intercept and return a singleton instance of <code>englishExaminationService</code>. The <code>englishExaminationService</code> is then injected into the <code>EnglishCoach</code> instance by using <code>EnglishCoach</code> constructor.</p> </li> <li> <p>For the setter injection, the behavior will be almost the same, just different in using setter method instead of using constructor.</p> </li> </ul> ApplicationConfig.java<pre><code>....\n\n@Bean  \npublic ExaminationService historyExaminationService() {  \n    return new HistoryExaminationService();  \n}\n\n@Bean  \npublic HistoryCoach historyCoach() {  \n   HistoryCoach historyCoach = new HistoryCoach();  \n   historyCoach.setExaminationService(historyExaminationService());  \n   return historyCoach;  \n}\n\n....\n</code></pre> <ul> <li>This is effectively dependency injection. It is accomplished using all Java configuration (no xml).</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#injecting_values_from_properties_file","title":"Injecting Values From Properties File","text":"<ul> <li>So in the Spring Dependency Injection XML and Spring Dependency Injection Annotation we knew how to inject values from the properties files by using <code>xml</code> and <code>annotation</code> and although using <code>anotation</code> but we still maintain the <code>xml</code> Spring Config file. So in this section we will inject values from properties files by using Java-Base configuration file.</li> <li>To injecting values from the properties files, we should follow these steps:<ul> <li>Create Properties File.</li> <li>Load Properties file in Spring Config.</li> <li>Reference values from Properties File.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#create_properties_file","title":"Create Properties File","text":"<ul> <li>In this step we just simply create a properties file in the <code>resources</code> folder of our project and put the name-value pair as in the example below. The name is before \"=\" and the value is after \"=\".</li> </ul> team-info.properties<pre><code>coach.team.english.email=englishCoach@example.com  \ncoach.team.history.email=historyCoach@example.com\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#load_properties_file_in_spring_config","title":"Load Properties File In Spring Config","text":"<ul> <li>In this step we will load the properties file that we created above into our Spring Config. We will create a java-base configuration file and annotation it with <code>@Configuration</code> annotation. Then to load the properties file we will use <code>@PropertySource</code> annotation with input is the properties file name that we created in the <code>resources</code> folder.</li> </ul> TeamInfoConfig.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\n\n@Configuration\n@PropertySource(\"classpath:team-info.properties\")\npublic class TeamInfoConfig {\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#reference_values_from_properties_file","title":"Reference values from Properties File","text":"<ul> <li>Finally, like we did before with <code>Inject Values From Properties File By Annotation</code> we just need to references values from the properties file using the annotation <code>@Value</code> and the actual name of the property that we defined in the properties file. The name of the property should be place inside the syntax <code>\"${&lt;nameOfProperty&gt;}\"</code>, Ex: <code>\"${coach.team.history.email}\"</code></li> </ul> HistoryCoach.class<pre><code>public class HistoryCoach implements Coach {  \n\n    private ExaminationService examinationService;  \n\n    @Value(\"${coach.team.history.email}\")  \n    private String teamEmail;\n\n        .......\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#example_injecting_values_from_properties_file_with_java_code","title":"Example Injecting Values From Properties File With Java Code","text":"<ul> <li>We will continue with the example that we did in the section <code>Example For Spring Bean Configuration</code> above for injection values from properties file.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#create_properties_file_1","title":"Create Properties File","text":"<ul> <li>So, firstly let's create a properties file with any name (In this example we will use <code>team-info.properties</code>) in the resources folder and put some properties for it as below.</li> </ul> team-info.properties<pre><code>coach.team.english.email=englishCoach@example.com  \ncoach.team.history.email=historyCoach@example.com\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#load_properties_file_in_spring_config_1","title":"Load Properties File In Spring Config","text":"<ul> <li>Now, let's create a Java-Base configuration file name <code>TeamInfoConfig.java</code> by using the annotation <code>@Configuration</code>. Then we will use the <code>@PropertySource</code> annotation with input is the properties file that we created in the step above.</li> </ul> <pre><code>package com.spring.core.spring.dependency.injection.java.source.code.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\n\n@Configuration\n@PropertySource(\"classpath:team-info.properties\")\npublic class TeamInfoConfig {\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#reference_values_from_properties_file_1","title":"Reference values from Properties File","text":"<ul> <li>Now, we will reference values from the properties file into <code>EnglishCoach</code> and <code>HistoryCoach</code> beans using <code>annotation injection</code> as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    @Value(\"${coach.team.english.email}\")\n    private String teamEmail;\n\n    @Autowired\n    public EnglishCoach(@Qualifier(\"englishExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n    public void setTeamEmail(String teamEmail) {\n        this.teamEmail = teamEmail;\n    }\n}\n</code></pre> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Value(\"${coach.team.history.email}\")\n    private String teamEmail;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    @Autowired\n    public void setExaminationService(@Qualifier(\"historyExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n    public void setTeamEmail(String teamEmail) {\n        this.teamEmail = teamEmail;\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will create a field name <code>teamEmail</code> with the <code>getter</code> and <code>setter</code> methods in the <code>EnglishCoach</code> and <code>HistoryCoach</code>, then we will use the <code>@Value</code> annotation with the actual name of the property that we defined in the properties file to inject the value there.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#testing_1","title":"Testing","text":"<ul> <li>Finally, To check injecting values from the properties file we will get beans <code>englishCoach</code> and <code>historyCoach</code> and get the <code>teamEmail</code> value as below.</li> </ul> SpringApplication.class<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n        Coach scienceCoach = context.getBean(\"scienceCoach\", Coach.class);\n\n        EnglishCoach englishCoachDetail = context.getBean(\"englishCoach\", EnglishCoach.class);\n        HistoryCoach historyCoachDetail = context.getBean(\"historyCoach\", HistoryCoach.class);\n\n        //use beans\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n        System.out.println(scienceCoach.getDailyHomeWork());\n        System.out.println(scienceCoach.getExamination());\n\n        System.out.println(englishCoachDetail.getTeamEmail());\n        System.out.println(historyCoachDetail.getTeamEmail());\n\n        //close container\n        context.close();\n    }\n\n}\n</code></pre> <ul> <li>Then let's start our application then we can see the result as below, values from the properties file injected successfully and printed out.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\nSpend 40 minutes to read science books\nFocus and take Science examination in 3 hours\nenglishCoach@example.com\nhistoryCoach@example.com\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Inversion Of Control XML</li> <li>Spring Inversion Of Control Java Code</li> <li>Spring Dependency Injection XML</li> <li>Spring Dependency Injection Annotation</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Configuration%20With%20Java%20Code/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/","title":"Spring Bean Scopes And Lifecycle Annotation","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#example_singleton_bean_scope_annotation","title":"Example Singleton Bean Scope Annotation","text":"<ul> <li>In the example above, we had configured the singleton bean scope by xml, for now we will try the second way to configure the singleton bean scope with annotation.</li> <li>Spring Framework had provided for us the <code>@Scope</code> annotation to configure the bean scopes with 2 main values are:<ul> <li>singleton. Ex: <code>@Scope(\"singleton\")</code>.</li> <li>prototype. Ex: <code>@Scope(\"prototype\")</code>.</li> </ul> </li> <li>Let's take the example in the follow session below.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#dependencies","title":"Dependencies","text":"<ul> <li>We will need to add the dependency <code>spring-context</code> for creating the Spring Container and <code>spring-core</code> for using Spring Annotations for configuring the Spring Bean Scopes.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependencies&gt;  \n\n    &lt;dependency&gt;  \n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n        &lt;version&gt;5.3.24&lt;/version&gt;  \n    &lt;/dependency&gt;  \n\n    &lt;dependency&gt;  \n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  \n        &lt;version&gt;5.3.24&lt;/version&gt;  \n    &lt;/dependency&gt;\n\n&lt;/dependencies&gt;\n\n....\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#configure_the_spring_bean","title":"Configure The Spring Bean","text":"<ul> <li>Let's create an interface and implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;  \n\npublic interface Coach {  \n\n    public String getDailyHomeWork();  \n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;  \n\nimport org.springframework.stereotype.Component;  \n\n@Component  \npublic class EnglishCoach implements Coach {  \n\n    @Override  \n    public String getDailyHomeWork() {  \n        return \"Spend 1 hour to practise Speaking Skill!\";  \n    }  \n\n}\n</code></pre> <ul> <li>As you can see, by default, we have the singleton bean scope already, so we don't need to add more any <code>@Scope</code> annotation. We just need to add the annotation <code>@Component</code> to make the Spring Framework knows that this is a bean and it need to be registered during the scanning.</li> <li>Next, we need to update the <code>applicationContext.xml</code> file as below to enable the Spring bean scanning.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.spring.core.spring.bean.scopes.and.lifecycle.annotation\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#testing","title":"Testing","text":"<ul> <li>Now,  let's create the <code>SpringApplication</code> class for getting and using bean <code>englishCoach</code> as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Load Spring Configuration File\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach englishCoach2 = context.getBean(\"englishCoach\", Coach.class);;\n\n        boolean result = (englishCoach == englishCoach2);\n\n        //Check Bean scope result\n        System.out.println(\"Pointing to the same object: \" + result);\n        System.out.println(\"Memory location of englishCoach: \" + englishCoach);\n        System.out.println(\"Memory location of englishCoach2: \" + englishCoach2);\n\n        //close the context\n        context.close();\n    }\n}\n</code></pre> <ul> <li>As you can see, we will try to get bean <code>englishCoach</code> from the Spring Container 2 times and then we will check them together to make sure they are equal and they are loaded from the same memory area or not. So let's start the application and check the log as below.</li> </ul> <pre><code>Pointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@de3a06f\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@de3a06f\n\nProcess finished with exit code 0\n</code></pre> <ul> <li>As you can see the bean <code>englishCoach</code> that we get from the Spring Container 2 times are the same bean and stored in the same memory address <code>de3a06f</code>. So it means each time we get the bean <code>englishCoach</code> from the Spring Container, it will check this bean existed or not, if exist Spring Container will return to us that bean and in case if doesn't exist then Spring Container will create it only one time and return to us.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#example_prototype_bean_scope_annotation","title":"Example Prototype Bean Scope Annotation","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#configure_the_spring_bean_1","title":"Configure The Spring Bean","text":"<ul> <li>Like we did in the example for <code>Singleton</code> scope with annotation, so let's create a new  implementation class <code>HistoryCoach</code> as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(\"prototype\")\npublic class HistoryCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in this <code>HistoryCoach</code> class, we will use annotation <code>@Scope(\"prototype\")</code>. It means the <code>historyCoach</code> bean will have prototype scope.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#testing_1","title":"Testing","text":"<ul> <li>Now,  let's update the <code>SpringApplication</code> class for getting and using prototype bean <code>historyCoach</code> as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Load Spring Configuration File\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach englishCoach2 = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n        Coach historyCoach2 = context.getBean(\"historyCoach\", Coach.class);\n\n        boolean result = (englishCoach == englishCoach2);\n        boolean result2 = (historyCoach == historyCoach2);\n\n        //Check Bean scope result\n        System.out.println(\"Pointing to the same object: \" + result);\n        System.out.println(\"Memory location of englishCoach: \" + englishCoach);\n        System.out.println(\"Memory location of englishCoach2: \" + englishCoach2);\n\n        System.out.println(\"Pointing to the same object: \" + result2);\n        System.out.println(\"Memory location of historyCoach: \" + historyCoach);\n        System.out.println(\"Memory location of historyCoach2: \" + historyCoach2);\n\n        //close the context\n        context.close();\n    }\n}\n</code></pre> <ul> <li>As you can see, we will try to get bean <code>historyCoach</code> from the Spring Container 2 times and then we will check them together to see they are equal and loaded from the same memory area or not. So let's start the application and check the log as below.</li> </ul> <pre><code>Pointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@166fa74d\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@166fa74d\nPointing to the same object: false\nMemory location of historyCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@40f08448\nMemory location of historyCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@276438c9\n\nProcess finished with exit code 0\n</code></pre> <ul> <li>As you can see, the bean <code>historyCoach</code> that we get from the Spring Container 2 times are not the same bean and they are stored in different memory address <code>40f08448</code> and <code>276438c9</code>. So it means each time we get the <code>historyCoach</code> from the Spring Container, It will create a new bean and return to us for using.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#example_bean_lifecycle_hooks_annotation","title":"Example Bean Lifecycle Hooks Annotation","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#prepare","title":"Prepare","text":"<ul> <li>To avoid duplicated steps, so in this example we will continue with the example that we did in the Example Prototype Bean Scope Annotation.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#define_our_methods_for_init_and_destroy","title":"Define our methods for init and destroy","text":"<ul> <li>So, let's go to the <code>EnglishCoach</code> and create 2 methods with any name. In this example they will be named <code>initAdHocMethod</code> and <code>destroyAdHocMethod</code> which are used for bean initialization and bean destruction respectively.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    public void initAdHocMethod() {\n        System.out.println(\"EnglishCoach: The initAdHocMethod() is called!\");\n    }\n\n    public void destroyAdHocMethod() {\n        System.out.println(\"EnglishCoach: The destroyAdHocMethod() is called!\");\n    }\n\n}\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#add_annotations_postconstruct_and_predestroy","title":"Add annotations: <code>@PostConstruct</code> and <code>@PreDestroy</code>","text":"<ul> <li>Now, let's add annotations: <code>@PostConstruct</code> and <code>@PreDestroy</code> for methods <code>initAdHocMethod</code> and <code>destroyAdHocMethod</code> respectively as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @PostConstruct\n    public void initAdHocMethod() {\n        System.out.println(\"EnglishCoach: The initAdHocMethod() is called!\");\n    }\n\n    @PreDestroy\n    public void destroyAdHocMethod() {\n        System.out.println(\"EnglishCoach: The destroyAdHocMethod() is called!\");\n    }\n\n}\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#testing_2","title":"Testing","text":"<ul> <li>Finally, let's run our application and then check the console output, you should see the method <code>initAdHocMethod()</code> is executed before the bean <code>englishCoach</code> is used and the method <code>destroyAdHocMethod()</code> is executed before the application is actually closed.</li> </ul> <pre><code>EnglishCoach: The initAdHocMethod() is called!\nPointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@6e2c9341\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@6e2c9341\nPointing to the same object: false\nMemory location of historyCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@32464a14\nMemory location of historyCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@4e4aea35\nEnglishCoach: The destroyAdHocMethod() is called!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#example_with_destroy_method_for_prototype_bean_annotation","title":"Example With Destroy Method For Prototype Bean Annotation","text":"<ul> <li>As we know in the <code>Bean Lifecycle Hooks</code> section,  for the bean with prototype scope, Spring does not call the destroy method although we apply <code>destroy-method</code> property for XML configuration or use <code>@PostDestroy</code> for annotation based configuration.</li> <li>For this case, if we want to call the destroy method on prototype scope beans, we have to add some custom codes and follow the process as below:<ul> <li>Create a custom bean processor: This bean processor will keep track of prototype scoped beans. During shutdown it will call the destroy() method on the prototype scoped beans. The custom processor is configured in the spring config file.</li> <li>Implement DisposableBean For Prototype Beans: the prototype scoped beans MUST implement the <code>DisposableBean</code> interface. This interface defines a \"destroy()\" method.</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#prepare_1","title":"Prepare","text":"<ul> <li>In this example we will continue with the example that we did in the Bean Lifecycle Hooks Annotation.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#create_a_custom_bean_processor","title":"Create A Custom Bean Processor","text":"<ul> <li>Firstly, let's create the <code>CustomBeanProcessor</code> java class which will implement <code>BeanPostProcessor</code>, <code>BeanFactoryAware</code> and <code>DisposableBean</code> and override methods as below.</li> </ul> CustomBeanProcessor.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\n@Component\npublic class CustomBeanProcessor implements BeanPostProcessor, BeanFactoryAware, DisposableBean {\n\n    private BeanFactory beanFactory;\n\n    private final List&lt;Object&gt; prototypeBeans = Collections.synchronizedList(new LinkedList&lt;&gt;());\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        this.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        // loop through the prototype beans and call the destroy() method on each one\n        System.out.println(\"CustomBeanProcessor: the destroy() method is called!\");\n        for (Object bean : prototypeBeans) {\n            if (bean instanceof DisposableBean) {\n                DisposableBean disposable = (DisposableBean) bean;\n                try {\n                    disposable.destroy();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        prototypeBeans.clear();\n        System.out.println(\"CustomBeanProcessor: the destroy() method is finished!\");\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        // after start up, keep track of the prototype scoped beans.\n        // we will need to know who they are for later destruction\n        if (beanFactory.isPrototype(beanName)) {\n            prototypeBeans.add(bean);\n        }\n        return bean;\n    }\n}\n</code></pre> <ul> <li>As you can see, in the <code>CustomBeanProcessor</code> class. Firstly we will inject the bean <code>beanFactory</code> into the <code>CustomBeanProcessor</code> by overriding the method <code>setBeanFactory</code>. </li> <li>Then for the method <code>postProcessAfterInitialization</code>, we will check every bean after initialized if the bean is the prototype bean then we will add it into a synchronized linked list. <ul> <li>Why synchronized linked list? Because we want to maintain the insertion order for calling destroy method of every bean. For example, we have two prototype beans, the first bean is initialized then we add it into the synchronized linked list. Likewise, the second prototype bean is also initialized then we also add it into the synchronized linked list. Then when the <code>customBeanProcessor</code> bean  is going to be destroyed, then the <code>destroy()</code> method of it is executed, then we will loop through the prototype beans and the first bean initialized will be executed destroy method first and the second bean will be executed destroy method later.</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#implement_disposablebean_for_prototype_beans","title":"Implement DisposableBean For Prototype Beans","text":"<ul> <li>Now, let's use the class <code>HistoryCoach</code> to implement <code>DisposableBean</code> interface and override the method <code>destroy()</code> as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;\n\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(\"prototype\")\npublic class HistoryCoach implements Coach, DisposableBean {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        System.out.println(\"HistoryCoach: The destroy() method is called!: \" + this);\n    }\n}\n</code></pre> <ul> <li>This <code>destroy()</code> method will be called from the <code>destroy()</code> method in the <code>customBeanProcessor</code>  bean.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#testing_3","title":"Testing","text":"<ul> <li>Finally, let's run our application and then check the console output, you should see the <code>destroy</code> methods in prototype bean <code>historyCoach()</code> are executed when the <code>destroy</code> method of <code>customBeanProcessor</code> is executed and they are executed with the same order as they were created.</li> </ul> <pre><code>EnglishCoach: The initAdHocMethod() is called!\nPointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@12028586\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.EnglishCoach@12028586\nPointing to the same object: false\nMemory location of historyCoach: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@17776a8\nMemory location of historyCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@69a10787\nEnglishCoach: The destroyAdHocMethod() is called!\nCustomBeanProcessor: the destroy() method is called!\nHistoryCoach: The destroy() method is called!: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@17776a8\nHistoryCoach: The destroy() method is called!: com.spring.core.spring.bean.scopes.and.lifecycle.annotation.HistoryCoach@69a10787\nCustomBeanProcessor: the destroy() method is finished!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20Annotation/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode - With Annotation Configuration</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/","title":"Spring Bean Scopes And Lifecycle XML","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#example_singleton_bean_scope_xml","title":"Example Singleton Bean Scope XML","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#dependencies","title":"Dependencies","text":"<ul> <li>Like we did before in Spring Inversion Of Control and Spring Dependency Injection example. We just need to use the dependency <code>spring-context</code> as below.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n    &lt;version&gt;5.3.24&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#configure_the_spring_bean","title":"Configure The Spring Bean","text":"<ul> <li>Let's create an interface and implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\npublic interface Coach {\n\n    public String getDailyHomeWork();\n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\npublic class EnglishCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n}\n</code></pre> <ul> <li>Then in the <code>resources</code> let's create an <code>applicationContext.xml</code> for configuring Spring beans.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\" class=\"com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach\"&gt;\n\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#testing","title":"Testing","text":"<ul> <li>Now,  let's create the <code>SpringApplication</code> class for getting and using bean <code>englishCoach</code> as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Load Spring Configuration File\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach englishCoach2 = context.getBean(\"englishCoach\", Coach.class);\n\n        boolean result = (englishCoach == englishCoach2);\n\n        //Check Bean scope result\n        System.out.println(\"Pointing to the same object: \" + result);\n        System.out.println(\"Memory location of englishCoach: \" + englishCoach);\n        System.out.println(\"Memory location of englishCoach2: \" + englishCoach2);\n\n\n        //close the context\n        context.close();\n\n    }\n}\n</code></pre> <ul> <li>As you can see, we will try to get bean <code>englishCoach</code> from the Spring Container 2 times and then we will check them together to make sure they are equal and they are loaded from the same memory area or not. So let's start the application and check the log as below.</li> </ul> <pre><code>Pointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@59494225\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@59494225\n\nProcess finished with exit code 0\n</code></pre> <ul> <li>As you can see the bean <code>englishCoach</code> that we get from the Spring Container 2 times are the same bean and stored in the same memory address <code>59494225</code>. So it means each time we get the bean <code>englishCoach</code> from the Spring Container, it will check this bean existed or not, if exist Spring Container will return to us that bean and in case if doesn't exist then Spring Container will create it only one time and return to us.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#example_prototype_bean_scope_xml","title":"Example Prototype Bean Scope XML","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#configure_the_spring_bean_1","title":"Configure The Spring Bean","text":"<ul> <li>Like we did in the example for <code>Singleton</code> scope, so let's create a new  implementation class <code>HistoryCoach</code> as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\npublic class HistoryCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n}\n</code></pre> <ul> <li>Then in the <code>resources</code> let's update <code>applicationContext.xml</code> with configuring prototype bean <code>historyCoach</code>.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach\"&gt;\n\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach\"\n          scope=\"prototype\"&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#testing_1","title":"Testing","text":"<ul> <li>Now,  let's update the <code>SpringApplication</code> class for getting and using prototype bean <code>historyCoach</code> as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Load Spring Configuration File\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach englishCoach2 = context.getBean(\"englishCoach\", Coach.class);\n\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n        Coach historyCoach2 = context.getBean(\"historyCoach\", Coach.class);\n\n\n        boolean result = (englishCoach == englishCoach2);\n        boolean result2 = (historyCoach == historyCoach2);\n\n        //Check Bean scope result\n        System.out.println(\"Pointing to the same object: \" + result);\n        System.out.println(\"Memory location of englishCoach: \" + englishCoach);\n        System.out.println(\"Memory location of englishCoach2: \" + englishCoach2);\n\n        System.out.println(\"Pointing to the same object: \" + result2);\n        System.out.println(\"Memory location of historyCoach: \" + historyCoach);\n        System.out.println(\"Memory location of historyCoach2: \" + historyCoach2);\n\n        //close the context\n        context.close();\n\n    }\n}\n</code></pre> <ul> <li>As you can see, we will try to get bean <code>historyCoach</code> from the Spring Container 2 times and then we will check them together to see they are equal and loaded from the same memory area or not. So let's start the application and check the log as below.</li> </ul> <pre><code>Pointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@5cb9f472\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@5cb9f472\n\nPointing to the same object: false\nMemory location of historyCoach: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@cb644e\nMemory location of historyCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@13805618\n\nProcess finished with exit code 0\n</code></pre> <ul> <li>As you can see, the bean <code>historyCoach</code> that we get from the Spring Container 2 times are not the same bean and they are stored in different memory address <code>cb644e</code> and <code>13805618</code>. So it means each time we get the <code>historyCoach</code> from the Spring Container, It will create a new bean and return to us for using.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#example_bean_lifecycle_hooks_xml","title":"Example Bean Lifecycle Hooks XML","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#prepare","title":"Prepare","text":"<ul> <li>To avoid duplicated steps, so in this example we will continue with the example that we did in the Example Prototype Bean Scope XML.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#define_our_methods_for_init_and_destroy","title":"Define our methods for init and destroy","text":"<ul> <li>So, let's go to the <code>EnglishCoach</code> and create 2 methods with any name. In this example they will be named <code>initAdHocMethod</code> and <code>destroyAdHocMethod</code> which are used for bean initialization and bean destruction respectively.</li> </ul> <p>```java linenums=\"1\" titles=\"EnglishCoach.java\"</p> <p>package com.spring.core.spring.bean.scopes.and.lifecycle;</p> <p>public class EnglishCoach implements Coach {</p> <pre><code>@Override\npublic String getDailyHomeWork() {\n    return \"Spend 1 hour to practise Speaking Skill!\";\n}\n\npublic void initAdHocMethod() {\n    System.out.println(\"EnglishCoach: The initAdHocMethod() is called!\");\n}\n\npublic void destroyAdHocMethod() {\n    System.out.println(\"EnglishCoach: The destroyAdHocMethod() is called!\");\n}\n</code></pre> <p>}</p> <pre><code>### Configure the method names in Spring config file\n- Now, let's open the `applicationContext.xml` file and adding 2 properties `init-method` and `destroy-method` for the bean `englishCoach` as below.\n\n```xml linenums=\"1\" title=\"applicationContext.xml\"\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach\"\n          init-method=\"initAdHocMethod\"\n          destroy-method=\"destroyAdHocMethod\"&gt;\n\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach\"\n          scope=\"prototype\"&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>In which, the property <code>init-method</code> is used for hooking our custom method into the bean initialization of <code>englishCoach</code> and the value of this property is the <code>method's name</code> in it.</li> <li>The property <code>destroy-method</code> is used for hooking our custom method into the bean destruction of <code>englishCoach</code> and the value of this property is the <code>method's name</code> in it.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#testing_2","title":"Testing","text":"<ul> <li>Finally, let's run our application and then check the console output, you should see the method <code>initAdHocMethod()</code> is executed before the bean <code>englishCoach</code> is used and the method <code>destroyAdHocMethod()</code> is executed before the application is actually closed.</li> </ul> <pre><code>EnglishCoach: The initAdHocMethod() is called!\nPointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@56ef9176\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@56ef9176\nPointing to the same object: false\nMemory location of historyCoach: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@4566e5bd\nMemory location of historyCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@1ed4004b\nEnglishCoach: The destroyAdHocMethod() is called!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#example_with_destroy_method_for_prototype_bean_xml","title":"Example With Destroy Method For Prototype Bean XML","text":"<ul> <li>As we know in the <code>Bean Lifecycle Hooks</code> section,  for the bean with prototype scope, Spring does not call the destroy method although we apply <code>destroy-method</code> property for XML configuration or use <code>@PostDestroy</code> for annotation based configuration.</li> <li>For this case, if we want to call the destroy method on prototype scope beans, we have to add some custom codes and follow the process as below:<ul> <li>Create a custom bean processor: This bean processor will keep track of prototype scoped beans. During shutdown it will call the destroy() method on the prototype scoped beans. The custom processor is configured in the spring config file.</li> <li>Implement DisposableBean For Prototype Beans: the prototype scoped beans MUST implement the <code>DisposableBean</code> interface. This interface defines a \"destroy()\" method.</li> <li>Configure Spring configuration file: The Spring configuration does not require use the destroy-method attribute. We can safely remove it.</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#prepare_1","title":"Prepare","text":"<ul> <li>In this example we will continue with the example that we did in the Bean Lifecycle Hooks XML.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#create_a_custom_bean_processor","title":"Create A Custom Bean Processor","text":"<ul> <li>Firstly, let's create the <code>CustomBeanProcessor</code> java class which will implement <code>BeanPostProcessor</code>, <code>BeanFactoryAware</code> and <code>DisposableBean</code> and override methods as below.</li> </ul> CustomBeanProcessor.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class CustomBeanProcessor implements BeanPostProcessor, BeanFactoryAware, DisposableBean {\n\n    private BeanFactory beanFactory;\n\n    private final List&lt;Object&gt; prototypeBeans = Collections.synchronizedList(new LinkedList&lt;&gt;());\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        this.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        // loop through the prototype beans and call the destroy() method on each one\n        System.out.println(\"CustomBeanProcessor: the destroy() method is called!\");\n        for (Object bean : prototypeBeans) {\n            if (bean instanceof DisposableBean) {\n                DisposableBean disposable = (DisposableBean) bean;\n                try {\n                    disposable.destroy();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        prototypeBeans.clear();\n        System.out.println(\"CustomBeanProcessor: the destroy() method is finished!\");\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        // after start up, keep track of the prototype scoped beans.\n        // we will need to know who they are for later destruction\n        if (beanFactory.isPrototype(beanName)) {\n            prototypeBeans.add(bean);\n        }\n        return bean;\n    }\n}\n</code></pre> <ul> <li>As you can see, in the <code>CustomBeanProcessor</code> class. Firstly we will inject the bean <code>beanFactory</code> into the <code>CustomBeanProcessor</code> by overriding the method <code>setBeanFactory</code>. </li> <li>Then for the method <code>postProcessAfterInitialization</code>, we will check every bean after initialized if the bean is the prototype bean then we will add it into a synchronized linked list. <ul> <li>Why synchronized linked list? Because we want to maintain the insertion order for calling destroy method of every bean. For example, we have two prototype beans, the first bean is initialized then we add it into the synchronized linked list. Likewise, the second prototype bean is also initialized then we also add it into the synchronized linked list. Then when the <code>customBeanProcessor</code> bean  is going to be destroyed, then the <code>destroy()</code> method of it is executed, then we will loop through the prototype beans and the first bean initialized will be executed destroy method first and the second bean will be executed destroy method later.</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#implement_disposablebean_for_prototype_beans","title":"Implement DisposableBean For Prototype Beans","text":"<ul> <li>Now, let's use the class <code>HistoryCoach</code> to implement <code>DisposableBean</code> interface and override the method <code>destroy()</code> as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle;\n\nimport org.springframework.beans.factory.DisposableBean;\n\npublic class HistoryCoach implements Coach, DisposableBean {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        System.out.println(\"HistoryCoach: The destroy() method is called!: \" + this);\n    }\n}\n</code></pre> <ul> <li>This <code>destroy()</code> method will be called from the <code>destroy()</code> method in the <code>customBeanProcessor</code>  bean.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#configure_spring_configuration_file","title":"Configure Spring Configuration File","text":"<ul> <li>So, let's update the <code>applicationContext.xml</code> for configuring <code>customBeanProcessor</code> bean as below.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach\"\n          init-method=\"initAdHocMethod\"\n          destroy-method=\"destroyAdHocMethod\"&gt;\n\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach\"\n          scope=\"prototype\"&gt;\n    &lt;/bean&gt;\n\n\n    &lt;bean id=\"customBeanProcessor\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.CustomBeanProcessor\"&gt;\n\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#testing_3","title":"Testing","text":"<ul> <li>Finally, let's run our application and then check the console output, you should see the <code>destroy</code> methods in prototype bean <code>historyCoach()</code> are executed when the <code>destroy</code> method of <code>customBeanProcessor</code> is executed and they are executed with the same order as they were created.</li> </ul> <pre><code>EnglishCoach: The initAdHocMethod() is called!\nPointing to the same object: true\nMemory location of englishCoach: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@ff5b51f\nMemory location of englishCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach@ff5b51f\nPointing to the same object: false\nMemory location of historyCoach: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@25bbe1b6\nMemory location of historyCoach2: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@5702b3b1\nEnglishCoach: The destroyAdHocMethod() is called!\nCustomBeanProcessor: the destroy() method is called!\nHistoryCoach: The destroy() method is called!: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@25bbe1b6\nHistoryCoach: The destroy() method is called!: com.spring.core.spring.bean.scopes.and.lifecycle.HistoryCoach@5702b3b1\nCustomBeanProcessor: the destroy() method is finished!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle%20XML/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>tutorialspoint</li> <li>FullSourceCode - With XML Configuration</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/","title":"Spring Bean Scopes And Lifecycle","text":"","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#what_is_the_bean_scopes","title":"What Is The Bean Scopes?","text":"<ul> <li> <p>A bean scope refers to the lifecycle of a bean that means when the object of Bean is instantiated. It will let us know:</p> <ul> <li>How long the bean will live?</li> <li>How many instances will be created? </li> <li>How is the bean shared in the Spring environment?.</li> </ul> </li> <li> <p>Basically, it controls the instance creation of the bean and it is managed by the <code>Spring Container</code>.</p> </li> <li> <p>The Spring framework provides five scopes for a bean. We can use three of them only in the context of web-aware Spring ApplicationContext and the rest of the two is available for both IoC container and Spring-MVC container. The following are the different scopes provided for a bean: </p> <ul> <li>Singleton: Only one instance will be created for a single bean definition per Spring IoC container and the same object will be shared for each request made for that bean.</li> <li>Prototype: A new instance will be created for a single bean definition every time a request is made for that bean.</li> <li>Request: A new instance will be created for a single bean definition every time an HTTP request is made for that bean. But Only valid in the context of a web-aware Spring ApplicationContext.</li> <li>Session: Scopes a single bean definition to the lifecycle of an HTTP Session. But Only valid in the context of a web-aware Spring ApplicationContext.</li> <li>Global-Session: Scopes a single bean definition to the lifecycle of a global HTTP Session. It is also only valid in the context of a web-aware Spring ApplicationContext.</li> </ul> </li> <li> <p>Spring Framework provides 2 ways for configuring the bean scopes:</p> <ul> <li>Configure the bean scopes by XML file (See Spring Bean Scopes And Lifecycle XML).</li> <li>Configure the bean scopes by annotation (See Spring Bean Scopes And Lifecycle Annotation).</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#default_scope_-_singleton","title":"Default Scope - Singleton","text":"<ul> <li>The default scope for a bean is singleton. So what is the singleton?<ul> <li>For the singleton, Spring Container creates only one instance of the bean by default.</li> <li>This bean will be cached in memory.</li> <li>Then whenever a new request is made for that bean, spring IOC container first checks whether an instance of that bean is already created or not. If it is already created, then the IOC container returns the same instance otherwise it creates a new instance of that bean only at the first request.</li> </ul> </li> </ul> <ul> <li>This default scope is applied for both configuring bean by XML file and annotation, so it means when we don't set the bean scope during configuring the bean with XML file or annotation, then these bean will have singleton bean scope by default.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#prototype_scope","title":"Prototype Scope","text":"<ul> <li>If the scope is declared\u00a0prototype, then spring IOC container will create a new instance of that bean every time a request is made for that specific bean.</li> <li>A request can be made to the bean instance either programmatically using\u00a0getBean()\u00a0method or by XML for Dependency Injection of secondary type. Generally, we use the prototype scope for all beans that are stateful, while the singleton scope is used for the stateless beans.</li> </ul> Singleton Prototype Only one instance is created for a single bean definition per Spring IoC container A new instance is created for a single bean definition everytime a request is made for that bean. Same object is shared for each request made for that bean. i.e. The same object is returned each time it is injected. For each new request a new instance is created. i.e. A new object is created each time it is injected. By default scope of a bean is singleton. So we don\u2019t need to declare a been as singleton explicitly. By default scope is not prototype so you have to declare the scope of a been as prototype explicitly. Singleton scope should be used for stateless beans. While prototype scope is used for all beans that are stateful","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#what_is_the_bean_lifecycle","title":"What Is The Bean Lifecycle?","text":"<ul> <li>The life cycle of a Spring bean is easy to understand. When a bean is instantiated, it may be required to perform some initialization to get it into a usable state. Similarly, when the bean is no longer required and is removed from the container, some cleanup may be required.</li> <li>Though, there are lists of the activities that take place behind the scene between the time of bean Instantiation and its destruction.</li> </ul> <ul> <li>Firstly, the beans are instantiated and then the actual dependencies are injected. Next, we will have some internal Spring processing that occurs with the Spring Container and then we have the option for adding our own custom initialization code. After that point the bean is ready for use and we can call methods on these beans, do work with them and so on. Then at a certain point, the containers actually shutdown, meaning our application is shutdown like <code>context.close()</code>. Then we also have a chance to call our custom destroy method and it will be executed before the actual application is stopped or before the actual bean life cycle is over.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#bean_lifecycle_hooks","title":"Bean Lifecycle Hooks","text":"<ul> <li> <p>As you can see in the image above, Spring provides us two chances to add our custom codes.</p> <ul> <li>Add custom code during bean initialization</li> <li>Add custom code during bean destruction</li> </ul> </li> <li> <p>In which, Adding custom code during bean initialization is usually used for:</p> <ul> <li>Calling custom business logic methods.</li> <li>Setting up handles to resources (database, sockets, file etc)</li> </ul> </li> <li> <p>Adding custom code during bean destruction is usually used for:</p> <ul> <li>Calling custom business logic method.</li> <li>Clean up handles to resources (database, sockets, file etc).</li> </ul> </li> <li> <p>Spring Framework provided for us two ways to hook our custom code during bean initialization or bean destruction</p> <ul> <li>Using configuration XML file.</li> <li>Using annotations.</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#configure_with_xml_file","title":"Configure With XML File","text":"<ul> <li> <p>To hook our custom code during bean initialization or bean destruction by using configuration XML file, we should follow these steps:</p> <ul> <li>Define our methods for init and destroy.</li> <li>Configure the method names in Spring config file.</li> </ul> </li> <li> <p>To configure the Spring config file for adding custom code during bean initialization and bean destruction, we will use 2 properties <code>init-method</code> and <code>destroy-method</code> respectively. The values of these methods will be the method's name in the bean that we are configuring for.</p> </li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.bean.scopes.and.lifecycle.EnglishCoach\"\n          init-method=\"initAdHocMethod\"\n          destroy-method=\"destroyAdHocMethod\"&gt;\n\n    &lt;/bean&gt;\n\n        ....\n\n&lt;/beans&gt;\n</code></pre> <p>**For \"prototype\" scoped beans, Spring does not call the destroy method.\u00a0**</p> <ul> <li>See Examples in Spring Bean Scopes And Lifecycle XML.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#configure_with_annotations","title":"Configure With Annotations.","text":"<ul> <li> <p>To hook our custom code during bean initialization or bean destruction by using annotations, we should follow these steps:</p> <ul> <li>Define our methods for init and destroy.</li> <li>Add annotations: <code>@PostConstruct</code> and <code>@PreDestroy</code>.</li> </ul> </li> <li> <p>We can use the annotation <code>@PostConstruct</code> and <code>@PreDestroy</code> on any methods in the bean.</p> <ul> <li>If a method in the bean is added <code>@PostConstruct</code> annotation, then this method will be executed after the constructor and after the injection of dependencies.</li> <li>If a method in the bean is added <code>@PreDestroy</code> annotation , then this method will be executed before the bean is destroyed.</li> </ul> </li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.bean.scopes.and.lifecycle.annotation;  \n\nimport org.springframework.stereotype.Component;  \n\nimport javax.annotation.PostConstruct;  \nimport javax.annotation.PreDestroy;  \n\n@Component  \npublic class EnglishCoach implements Coach {  \n\n    @Override  \n    public String getDailyHomeWork() {  \n        return \"Spend 1 hour to practise Speaking Skill!\";  \n    }  \n\n    @PostConstruct  \n    public void initAdHocMethod() {  \n        System.out.println(\"EnglishCoach: The initAdHocMethod() is called!\");  \n    }  \n\n    @PreDestroy  \n    public void destroyAdHocMethod() {  \n        System.out.println(\"EnglishCoach: The destroyAdHocMethod() is called!\");  \n    }  \n\n}\n</code></pre> <ul> <li>The table below contains some special notes when we use <code>@PostConstruct</code> and <code>@PreDestroy</code> on methods.</li> </ul> Special Notes Description Access modifier The method can have any access modifier (public, protected, private) Return type The method can have any return type. However, \"void' is most commonly used. If you give a return type just note that you will not be able to capture the return value. As a result, \"void\" is commonly used. Method name The method can have any method name. Arguments The method can not accept any arguments. The method should be no-arg. <ul> <li>See Examples in Spring Bean Scopes And Lifecycle Annotation.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection</li> <li>Spring Bean Scopes And Lifecycle XML</li> <li>Spring Bean Scopes And Lifecycle Annotation</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Bean%20Scopes%20And%20Lifecycle/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>tutorialspoint</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/","title":"Spring Core Introduction","text":"<p>Spring is one of the most popular frameworks for Java enterprise edition. Developers use Spring for developing reliable and high-quality applications. Spring was designed by Rob Johnson.</p> <ul> <li>More information</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/#spring_core_concepts","title":"Spring Core Concepts","text":"<ul> <li><code>Inversion of control</code>: This is the principle of object-oriented programming, in which objects of the program do not depend on concrete implementations of other objects, but may have knowledge about their abstractions (<code>interfaces</code>) for later interaction.</li> <li><code>Dependency Injection</code>: is a composition of structural design patterns, in which each function of the application there is one, a conditionally independent object (<code>service</code>) that can have the need to use other objects (<code>dependencies</code>) know to it by interfaces. Dependencies are transferred (<code>implemented</code>) to the service at the time of it's creation. This is the situation where we introduce an element of one class into another. In practice, DI is implemented to the constructor or using setters. Libraries that implement this approach are also called <code>Ioc containers</code>.</li> <li><code>Aspect Oriented Programming</code>: a programming paradigm that allows to distinguish cross-through (<code>functional</code>) functionality in application. These functions, which spam multiple application nodes, are call <code>cross-cutting concerns</code> and these <code>cross-cutting nodes</code> are seperated from the immediate business logic of the application. In OOP, the key unit is the class, which in AOP, the key element is the <code>aspect</code>. DI helps to separate application classes into separate modules, and APO helps to create <code>cross-cutting concerns</code> from the objects they effect.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/#spring_ioc_container","title":"Spring IoC Container","text":"<ul> <li><code>Spring IoC Container</code> is the machanism to achieve loose-coupling between Object dependencies. To achieve loose coupling and dynamic binding of the objects at runtime, objects dependencies. Spring IoC container is the program that injects dependencies into an object and make it ready for our use.</li> <li><code>Spring IoC Container</code> classes are part of <code>org.springframework.bean</code> and <code>org.springframework.context</code> packages.</li> <li><code>BeanFactory</code> is the root interface of spring IoC container. <code>ApplicationContext</code> is the child interface of <code>BeanFactory</code>.</li> <li>Usually, if you are working with Spring MVC application and your application is configured to use Spring Framework, Spring IoC container gets initialized when the application starts and when a bean is requested, the dependencies are injected automatically.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/#spring_bean","title":"Spring Bean","text":"<ul> <li><code>Spring Bean</code> is nothing special, any object in the Spring Framework that initialize through spring container is call <code>Spring Bean</code>. Any normal Java POJO class (Plain Old Java Object) can be a <code>Spring Bean</code> if it is configured to be initialized via container by providing configuration metadata information.</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/#spring_bean_scopes","title":"Spring Bean Scopes","text":"<ul> <li>There are 5 scopes definded for <code>spring beans</code>:<ul> <li><code>singleton</code>: Only one instance of the bean will be create for each container. This is the default scope of spring beans. While using this scope, make sure bean does not have shared instances variables otherwise it might lead to data insconsistency issues.</li> <li><code>prototype</code>: a new instance will be created every time the bean is requested.</li> <li><code>request</code>: This is the same as prototype scope, however it meant to be used for web application. A new instance of the bean will be created for each HTTP request.</li> <li><code>session</code>: A new bean will be created for each HTTP session by the container.</li> <li><code>global-session</code>: This is used to create global session bean for Prolet applications.</li> </ul> </li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/#see_also","title":"See Also","text":"<ul> <li>Spring Boot Introduction</li> <li>Spring Data Introduction</li> <li>Spring Cloud Introduction</li> <li>Spring Security Introduction</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Core%20Introduction/#references","title":"References","text":"<ul> <li>Journal Dev</li> </ul>","tags":["Spring"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/","title":"Spring Dependency Injection Annotation","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#annotation_injection_type","title":"Annotation Injection Type","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#what_is_the_spring_autowiring","title":"What Is The Spring Autowiring?","text":"<ul> <li>Spring can automatically wire up our objects together for injecting dependency. So basically the Spring Framework will look for a class that matched a given property and it will actually match by type. The type of the class could be interface or class. Once Spring finds a match then it'll automatically inject it. Hence it's called autowired.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#autowiring_injection_types","title":"Autowiring Injection Types","text":"<ul> <li>There are 3 types of autowiring injection.<ul> <li>Constructor Injection</li> <li>Setter Injection</li> <li>Field Injections</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#constructor_injection_annotation","title":"Constructor Injection Annotation","text":"<ul> <li>To apply Constructor Injection for injecting dependencies with annotations, we should follow these steps below:<ul> <li>Define the dependency interface and class.</li> <li>Create a constructor in our class for injections</li> <li>Configure the dependency injection with <code>@Autowired</code> annotation.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#dependency","title":"Dependency","text":"<ul> <li>We will need to add the dependency <code>spring-context</code> for creating the Spring Container and <code>spring-core</code> for using Spring Annotations for configuring Constructor Injection Annotation.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependencies&gt;  \n\n    &lt;dependency&gt;  \n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n        &lt;version&gt;5.3.24&lt;/version&gt;  \n    &lt;/dependency&gt;  \n\n    &lt;dependency&gt;  \n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  \n        &lt;version&gt;5.3.24&lt;/version&gt;  \n    &lt;/dependency&gt;\n\n&lt;/dependencies&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#enable_component_scanning_in_spring_config_file","title":"Enable Component Scanning In Spring Config File","text":"<ul> <li>Now, let's create the <code>applicationContext.xml</code> file in our resources folder of our project and add configuration as below to enable components scanning.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.spring.core.spring.dependency.injection.annotation\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#define_the_dependency_interface_and_class","title":"Define the dependency interface and class","text":"<ul> <li>So now, let's create 2 interfaces <code>Coach</code> and <code>ExanminationService</code> and they will be implemented by 2 java classes <code>EnglishCoach</code> and <code>EnghlishExaminationService</code> correspondingly. Then the class <code>EnglishCoach</code> will need to use <code>ExanminationService</code> as a dependency for it's method.</li> </ul> <ul> <li>So, firstly let's create <code>ExaminationService</code> interface and <code>EnglishExaminationService</code> implementation class as below.</li> </ul> ExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\npublic interface ExaminationService {\n\n    public String getExamination();\n\n}\n</code></pre> EnglishExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishExaminationService implements ExaminationService {\n\n    @Override\n    public String getExamination() {\n        return \"Focus and take English examination in 3 hours\";\n    }\n}\n</code></pre> <ul> <li>Then let's create the <code>Coach</code> interface and <code>EnglishCoach</code> implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\npublic interface Coach {\n\n    public String getDailyHomeWork();\n\n    public String getExamination();\n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return null;\n    }\n\n}\n</code></pre> <ul> <li>As you can see, for implement classes <code>EnglishExaminationService</code> and <code>EnglishCoach</code>. We use the annotation <code>@Component</code> to let Spring Framework knows these are beans need to be registered during the scanning.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#create_a_constructor_in_our_class_for_injections","title":"Create a constructor in our class for injections","text":"<ul> <li>Now, in the <code>EnglishCoach</code>, let's create a constructor and inject the <code>ExaminationService</code> as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    public EnglishCoach(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in the constructor of <code>EnglishCoach</code> class we will inject the <code>ExaminationService</code> and use it for <code>getExamination()</code> method.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#configure_dependency_injection_with_autowired_annotation","title":"Configure dependency injection with <code>@Autowired</code> Annotation","text":"<ul> <li>Now, Let's put the annotation <code>@Autowired</code> above the constructor that we created in the <code>EnglishCoach</code> as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    @Autowired\n    public EnglishCoach(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre> <ul> <li>So with this annotation, we will tell to the Spring Framework that let's find the component that implements the <code>ExaminationService</code> and inject it (autowired) it there.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#testing","title":"Testing","text":"<ul> <li>Then, let's create the main class <code>SpringApplication</code> and then we will create the container with xml configuration file and get beans for using.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n\n        //use bean\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n\n        //close container\n        context.close();\n    }\n\n}\n</code></pre> <ul> <li>So when we run our application, we expect that we will get the information from the <code>EnglishExaminationService</code> because we injected it into the <code>EnglishCoach</code> by using constructor type in xml configuration.</li> <li>The successful result when run the application is show as below.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#setter_injection_annotation","title":"Setter Injection Annotation","text":"<ul> <li>As we known before, setter injection is injecting dependencies by calling setter method(s) on our class.</li> <li>To use the <code>Setter Injection</code> by using annotations in our Spring Framework project. We should follow steps as below:<ul> <li>Create setter methods in our class for injections</li> <li>Configure the dependency injection with @Autowired Annotation.</li> </ul> </li> </ul> <ul> <li>Note: Spring Framework also provide us the ability to inject dependencies by calling ANY method on our classes.</li> <li>So, instead of using setter methods, we can actually use any method and put the @Autowired Annotation on it.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#create_setter_methods_in_our_class_for_injections","title":"Create Setter Methods In Our Class For Injections","text":"<ul> <li>Now, we will extend the example that we made before in <code>Constructor Injection Annotation</code>  with new interface and implementation class. Let's see the diagram below.</li> </ul> <ul> <li>So let's create class <code>HistoryExaminationService</code> which will implement <code>ExaminationService</code> interface as below</li> </ul> HistoryExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryExaminationService implements ExaminationService {\n\n    @Override\n    public String getExamination() {\n        return \"Focus and take History examination in 3 hours\";\n    }\n\n}\n</code></pre> <ul> <li>Now, let's create class <code>HistoryCoach</code> which will implement <code>Coach</code> interface as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public void setExaminationService(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n}\n</code></pre> <ul> <li>As you can see, in the <code>HistoryCoach</code> we will create a setter method for <code>ExaminationService</code>.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#configure_dependency_injection_with_autowired_annotation_1","title":"Configure dependency injection with <code>@Autowired</code> Annotation","text":"<ul> <li>Now, Let's put the annotation <code>@Autowired</code> above the setter method that we created in the <code>HistoryCoach</code> as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    @Autowired\n    public void setExaminationService(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n}\n</code></pre> <ul> <li>As you can see, we will put the annotation <code>@Autowired</code> above the setter method.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#qualifiers_for_dependency_injection","title":"Qualifiers For Dependency Injection","text":"<ul> <li>Now, if we look at the diagram again, we can see the one issue that we need to handle here.</li> </ul> <ul> <li>As you can see, we have 2 implementation classes (<code>EnglishExaminationService</code> and <code>HistoryExaminationService</code>) on the same interface <code>ExaminationService</code>. In which, the <code>EnglishExaminationService</code> will be injected and used in <code>EnglishCoach</code> and the <code>HistoryExaminationService</code> will be injected and used in <code>HistoryCoach</code>.</li> <li> <p>So now, the question is how does the Spring know which implementation class that  should be injected for <code>EnglishCoach</code> and <code>HistoryCoach</code>?</p> <ul> <li>The answer is the Spring Framework doesn't know which class it should use there, and if we run the application, an error will be thrown.</li> <li>However, Spring Framework provides for us an annotation in which we will tell to the Spring Framework which implementation bean it should use for. The annotation is <code>@Qualifier</code>.</li> </ul> </li> <li> <p>When we use the bean <code>@Qualifier</code>, we have to input the value which is the bean id of the component that we want to use. Ex: <code>@Qualifier(\"historyExaminationService\")</code>.</p> </li> </ul> <p></p> <ul> <li> <p>We can apply <code>@Qualifier</code> annotation to:</p> <ul> <li>Constructor Injection.</li> <li>Setter Injection.</li> <li>Field Injection.</li> </ul> </li> <li> <p>So, let's update the <code>EnglishCoach</code> and <code>HistoryCoach</code> with the annotation <code>@Qualifier</code> in constructor and setter method respectively as below.</p> </li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    @Autowired\n    public EnglishCoach(@Qualifier(\"englishExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    @Autowired\n    public void setExaminationService(@Qualifier(\"historyExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#testing_1","title":"Testing","text":"<ul> <li>Then, let's update the main class <code>SpringApplication</code> for getting and using the bean <code>historyCoach</code> as below</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n\n        //use beans\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n\n        //close container\n        context.close();\n    }\n\n}\n</code></pre> <ul> <li>Finally, let's start our application and you should see the successful result as in the console log below. So it means, setter injection annotation and qualifier configuration have worked correctly.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#field_injection_annotation","title":"Field Injection Annotation","text":"<ul> <li>With the field injection using annotation, we can inject the dependencies by setting the field values on our class directly even for private fields. This happens because behind the scene, Spring Framework use some java technology called <code>Reflection</code>.</li> <li>So, to use <code>field injection</code> by using annotation, we should only to follow one step below:<ul> <li>Configure the dependency injection with <code>@Autowired</code> annotation. In which, we will apply directly annotation to the field and we don't need to create setter methods.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#prepare","title":"Prepare","text":"<ul> <li>We will extend the example that we made before in <code>Setter Injection Annotation</code>  with new 2 implementation classes. Let's see the diagram below.</li> </ul> <ul> <li>Before going to the example, we will create more 2 classes <code>ScienceCoach</code> and <code>ScienceExaminationService</code> which will implement <code>Coach</code> and <code>ExaminationService</code> respectively as below.</li> </ul> ScienceExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;  \n\nimport org.springframework.stereotype.Component;  \n\n@Component  \npublic class ScienceExaminationService implements ExaminationService {  \n\n    @Override  \n    public String getExamination() {  \n        return \"Focus and take Science examination in 3 hours\";  \n    }  \n}\n</code></pre> ScienceCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ScienceCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 40 minutes to read science books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in the <code>ScienceCoach</code>, we will declare <code>examinationService</code> as an attribute without setter/getter method.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#configure_dependency_injection_with_autowired_annotation_2","title":"Configure dependency injection with <code>@Autowired</code> Annotation","text":"<ul> <li>Now, in the <code>ScienceCoach</code>, we just need to set 2 annotations <code>@Autowired</code> and <code>@Qualifier(\"scienceExaminationService\")</code> on the attribute <code>examinationService</code> directly as below and that's all for the field injection annotation configuration.</li> </ul> ScienceCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ScienceCoach implements Coach {\n\n    @Autowired\n    @Qualifier(\"scienceExaminationService\")\n    private ExaminationService examinationService;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 40 minutes to read science books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#testing_2","title":"Testing","text":"<ul> <li>Then, let's update the main class <code>SpringApplication</code> for getting and using the bean <code>scienceCoach</code> as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n        Coach scienceCoach = context.getBean(\"scienceCoach\", Coach.class);\n\n        //use beans\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n        System.out.println(scienceCoach.getDailyHomeWork());\n        System.out.println(scienceCoach.getExamination());\n\n        //close container\n        context.close();\n    }\n\n}\n</code></pre> <ul> <li>Finally, let's start our application and you should see the successful result as in the console log below. So it means, field injection annotation and qualifier configuration have worked correctly.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\nSpend 40 minutes to read science books\nFocus and take Science examination in 3 hours\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#inject_values_from_properties_file_by_annotation","title":"Inject Values From Properties File By Annotation","text":"<ul> <li>From the section above, we learnt how to use <code>Field Injection Type With Annotation</code> for DI. In this section, we will continue to use it for injecting values from the <code>properties</code> files in our <code>resources</code> folders.</li> </ul> <ul> <li>To use the <code>Field Injection</code> for injecting values from the <code>properties</code> file in our Spring, we should follow these steps:<ul> <li>Create Properties File.</li> <li>Load Properties File in Spring config file</li> <li>Reference values from Properties file With Annotation</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#prepare_1","title":"Prepare","text":"<ul> <li>So, Let's continue with the example that we did from the last section <code>Field Injection Annotation</code>. In the <code>HistoryCoach</code> and <code>EnglishCoach</code> classes, we will set new attributes <code>teamEmail</code> with <code>getter</code> methods for them as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    private String teamEmail;\n\n    @Autowired\n    public EnglishCoach(@Qualifier(\"englishExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n}\n</code></pre> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    private String teamEmail;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    @Autowired\n    public void setExaminationService(@Qualifier(\"historyExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#create_properties_file","title":"Create Properties File","text":"<ul> <li>Let's create a properties file with name <code>application.properties</code> in our project <code>resources</code>  as below.</li> </ul> application.properties<pre><code>coach.team.english.email=englishCoach@example.com  \ncoach.team.history.email=historyCoach@example.com\n</code></pre> <ul> <li>As you can see in the <code>application.properties</code> we have 2 variable with <code>name</code> and <code>value</code>.<ul> <li><code>name</code> is the left part of <code>=</code></li> <li><code>value</code> is the right part of <code>=</code></li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#load_properties_file_in_spring_config_file","title":"Load Properties File In Spring Config File","text":"<ul> <li>To load variables from <code>application.properties</code>, we just need to add the tag <code>context:property-placeholder</code> with <code>location</code> attribute as below into <code>applicationContext.xml</code>.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.spring.core.spring.dependency.injection.annotation\"/&gt;\n    &lt;context:property-placeholder location=\"classpath:application.properties\"/&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>In which, the value of attribute <code>location</code> in <code>context:property-placeholder</code> tag should be start with <code>classpath:</code> then the properties's file name will be put after.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#reference_values_from_properties_file_with_annotation","title":"Reference Values From Properties File With Annotation","text":"<ul> <li>Now, to reference values from the <code>application.properties</code> file into <code>HistoryCoach</code> and <code>EnglishCoach</code> beans, we will use <code>@Value</code> annotation with <code>value</code> is the name of variable that we defined in the <code>application.properties</code> file (<code>coach.team.english.email</code> and <code>coach.team.history.email</code>)  and these names have to be put in the syntax <code>${&lt;variable name&gt;}</code>. Ex: <code>@Value(\"${coach.team.english.email}\")</code>. With this syntax Spring will load the value of that variable for us directly.</li> <li>Now, let's put the <code>@Value</code> annotation on the <code>teamEmail</code> fields for <code>EnglishCoach</code> and <code>HistoryCoach</code> classes as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    @Value(\"${coach.team.english.email}\")\n    private String teamEmail;\n\n    @Autowired\n    public EnglishCoach(@Qualifier(\"englishExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n}\n</code></pre> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    @Value(\"${coach.team.history.email}\")\n    private String teamEmail;\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    @Autowired\n    public void setExaminationService(@Qualifier(\"historyExaminationService\") ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#testing_3","title":"Testing","text":"<ul> <li>Finally, let's update our <code>SpringApplication</code> for getting and using bean <code>EnglishCoach</code> and <code>historyCoach</code> with injected values from the <code>application.properties</code> file as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n        Coach scienceCoach = context.getBean(\"scienceCoach\", Coach.class);\n\n        EnglishCoach englishCoachDetail = context.getBean(\"englishCoach\", EnglishCoach.class);\n        HistoryCoach historyCoachDetail = context.getBean(\"historyCoach\", HistoryCoach.class);\n\n        //use beans\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n        System.out.println(scienceCoach.getDailyHomeWork());\n        System.out.println(scienceCoach.getExamination());\n\n        System.out.println(englishCoachDetail.getTeamEmail());\n        System.out.println(historyCoachDetail.getTeamEmail());\n\n        //close container\n        context.close();\n    }\n\n}\n</code></pre> <ul> <li>Then when our application run, we will see the successful result as below. We can see the values in the <code>application.properties</code> which are injected and used by <code>EnglishCoach</code> and <code>HistoryCoach</code>.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\nSpend 40 minutes to read science books\nFocus and take Science examination in 3 hours\nenglishCoach@example.com\nhistoryCoach@example.com\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#annotations_-_default_bean_name_-_the_special_case","title":"Annotations - Default Bean Name - The Special Case","text":"<ul> <li>In general, when using Annotations, for the default bean name, Spring uses the following rule.</li> <li> <p>If the annotation's value doesn't indicate a bean name, an appropriate name will be built based on the short name of the class (with the first letter lower-cased).</p> <ul> <li>For example: ScienceExaminationService --&gt; scienceExaminationService</li> </ul> </li> <li> <p>However, for the\u00a0special case of when BOTH the first and second characters of the class name are upper case, then the\u00a0name is NOT converted.</p> <ul> <li>For example: RESTScienceExaminationService --&gt; RESTScienceExaminationService (No conversion since the first two characters are upper case.)</li> </ul> </li> <li>Behind the scenes, Spring uses the\u00a0Java Beans Introspector\u00a0to generate the default bean name.</li> </ul> <pre><code>.......\n\n    /**\n     * Utility method to take a string and convert it to normal Java variable\n     * name capitalization.  This normally means converting the first\n     * character from upper case to lower case, but in the (unusual) special\n     * case when there is more than one character and both the first and\n     * second characters are upper case, we leave it alone.\n     * &lt;p&gt;\n     * Thus \"FooBah\" becomes \"fooBah\" and \"X\" becomes \"x\", but \"URL\" stays\n     * as \"URL\".\n     *\n     * @param  name The string to be decapitalized.\n     * @return  The decapitalized version of the string.\n     */\n    public static String decapitalize(String name) {\n        if (name == null || name.length() == 0) {\n            return name;\n        }\n        if (name.length() &gt; 1 &amp;&amp; Character.isUpperCase(name.charAt(1)) &amp;&amp;\n                        Character.isUpperCase(name.charAt(0))){\n            return name;\n        }\n        char chars[] = name.toCharArray();\n        chars[0] = Character.toLowerCase(chars[0]);\n        return new String(chars);\n    }\n\n......\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#see_also","title":"See Also","text":"<ul> <li>Spring Overview</li> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection</li> <li>Spring Dependency Injection XML</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20Annotation/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode - Annotation Injections</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/","title":"Spring Dependency Injection XML","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#constructor_injection_type_with_xml","title":"Constructor Injection Type With XML","text":"<ul> <li>In this approach, the DI will be injected with the help of constructors. Now to set the DI of a bean as Constructor Injection Type in XML bean-configuration file, we have to use the <code>&lt;constructor-arg&gt;</code> tag in the bean-config.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishExaminationService\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishCoach\"&gt;\n        &lt;constructor-arg ref=\"englishExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li> <p>To use the <code>Constructor Injection</code> in our Spring, we should follow these steps:</p> <ul> <li>Define the dependency interface and class</li> <li>Create a constructor in our class for injections</li> <li>Configure the dependency injection in Spring config file.</li> </ul> </li> <li> <p>So let's take an example for the Constructor Injection Type as following steps below.</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#dependency","title":"Dependency","text":"<ul> <li>Like we took an example with Spring Inversion Of Control, we will need to add the dependency <code>spring-context</code> for creating the Spring Container and configuring Constructor Injection Type.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n    &lt;version&gt;5.3.24&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#define_the_dependency_interface_and_class","title":"Define the dependency interface and class","text":"<ul> <li>So now, let's create 2 interfaces <code>Coach</code> and <code>ExanminationService</code> and they will be implemented by 2 java classes <code>EnglishCoach</code> and <code>EnghlishExaminationService</code> correspondingly. Then the class <code>EnglishCoach</code> will need to use <code>ExanminationService</code> as a dependency for it's method.</li> </ul> <ul> <li>So, firstly let's create <code>ExaminationService</code> interface and <code>EnglishExaminationService</code> implementation class as below.</li> </ul> ExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic interface ExaminationService {\n\n    public String getExamination();\n\n}\n</code></pre> EnglishExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic class EnglishExaminationService implements ExaminationService {\n\n    @Override\n    public String getExamination() {\n        return \"Focus and take English examination in 3 hours\";\n    }\n}\n</code></pre> <ul> <li>Then let's create the <code>Coach</code> interface and <code>EnglishCoach</code> implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic interface Coach {\n\n    public String getDailyHomeWork();\n\n    public String getExamination();\n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection;  \n\npublic class EnglishCoach implements Coach {  \n\n    @Override  \n    public String getDailyHomeWork() {  \n        return \"Spend 1 hour to practise Speaking Skill!\";  \n    }  \n\n    @Override  \n    public String getExamination() {  \n        return null; \n    }  \n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#create_a_constructor_in_our_class_for_injections","title":"Create a constructor in our class for injections","text":"<ul> <li>Now, in the <code>EnglishCoach</code>, let's create a constructor and inject the <code>ExaminationService</code> as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n\n    public EnglishCoach(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in the constructor of <code>EnglishCoach</code> class we will inject the <code>ExaminationService</code> and use it for <code>getExamination()</code> method.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#configure_the_di_in_spring_config_file","title":"Configure the DI in Spring config file","text":"<ul> <li>Now, let's create the XML configuration file <code>applicationContext.xml</code> in our <code>resources</code> folder and put the configuration as below.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishExaminationService\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishCoach\"&gt;\n        &lt;constructor-arg ref=\"englishExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>As you can see, for the bean <code>englishCoach</code>, we will inject the bean <code>englishExaminationService</code> by using tag <code>constructor-arg</code> for constructor injection type.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#testing","title":"Testing","text":"<ul> <li>So now, let's create the main class <code>SpringApplication</code> and then we will create the container with xml configuration file and get beans for using.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n\n        //use bean\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n\n        //close container\n        context.close();\n    }\n}\n</code></pre> <ul> <li>So when we run our application, we expect that we will get the information from the <code>EnglishExaminationService</code> because we injected it into the <code>EnglishCoach</code> by using constructor type in xml configuration.</li> <li>The successful result when run the application is show as below.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#setter_injection_type_with_xml","title":"Setter Injection Type With XML","text":"<ul> <li>This is the simpler of the two DI methods. In this approach, the DI will be injected with the help of setter and/or getter methods. Now to set the DI as setter dependency injection in a bean we have to use the <code>&lt;property&gt;</code> tag in the bean-config.</li> <li> <p>To use the <code>Setter Injection</code> in our Spring, we should follow these steps:</p> <ul> <li>Create setter methods in our class for injections</li> <li>Configure the dependency injection in Spring config file.</li> </ul> </li> <li> <p>So let's take an example for the Constructor Injection Type as following steps below.</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#create_setter_methods_in_our_class_for_injections","title":"Create Setter Methods In Our Class For Injections","text":"<ul> <li>Now, we will extend the example that we made before in <code>Constructor Injection Type</code>  with new interface and implementation class. Let's see the diagram below.</li> </ul> <ul> <li>So let's create class <code>HistoryExaminationService</code> which will implement <code>ExaminationService</code> interface as below</li> </ul> HistoryExaminationService.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic class HistoryExaminationService implements ExaminationService {\n\n    @Override\n    public String getExamination() {\n        return \"Focus and take History examination in 3 hours\";\n    }\n\n}\n</code></pre> <ul> <li>Now, let's create class <code>HistoryCoach</code> which will implement <code>Coach</code> interface as below.</li> </ul> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic class HistoryCoach implements Coach {\n\n    private ExaminationService examinationService;\n\n    public void setExaminationService(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in the <code>HistoryCoach</code> we will create a setter method for <code>ExaminationService</code>.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#configure_the_di_in_spring_config_file_1","title":"Configure The DI in Spring Config File","text":"<ul> <li>Next, let's add more configuration in the <code>applicationContext.xml</code> in our <code>resources</code> folder.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishExaminationService\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishCoach\"&gt;\n        &lt;constructor-arg ref=\"englishExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyCoach\"\n          class=\"com.spring.core.spring.dependency.injection.HistoryCoach\"&gt;\n        &lt;property name=\"examinationService\" ref=\"historyExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.HistoryExaminationService\"&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>As you can see, for the bean <code>historyCoach</code>, we will inject the bean <code>historyExaminationService</code> by using <code>property</code> tag with <code>name</code> and <code>ref</code> attributes. In which:<ul> <li><code>name</code> will contain the name  of setter method  in the <code>historyCoach</code> without <code>set</code> and the first letter is lower case (examinationService).</li> <li><code>ref</code> will contain the bean-id of the bean that we want to inject, in this case it is <code>historyExaminationService</code>.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#testing_1","title":"Testing","text":"<ul> <li>Finally, let's update our <code>SpringApplication</code> for getting and using bean <code>historyCoach</code> as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n\n        //use bean\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n\n        //close container\n        context.close();\n    }\n}\n</code></pre> <ul> <li>Then when our application run, we will see the successful result as below. We can see the information of <code>historyExaminationService</code> which is injected and used by <code>historyCoach</code>.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#inject_values_from_properties_file_with_xml","title":"Inject Values From Properties File With XML","text":"<ul> <li>From the section above, we learnt how to use <code>Setter Injection Type</code> for DI. In this section, we will continue to use it for injecting values from the <code>properties</code> files in our <code>resources</code> folders.</li> </ul> <ul> <li>To use the <code>Setter Injection</code> for injecting values from the <code>properties</code> file in our Spring, we should follow these steps:<ul> <li>Create Properties File.</li> <li>Load Properties File in Spring config file</li> <li>Reference values from Properties file</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#prepare","title":"Prepare","text":"<ul> <li>So, Let's continue with the example that we did from the last section <code>Setter Injection Type</code>. In the <code>HistoryCoach</code> and <code>EnglishCoach</code> classes, we will set new attribute <code>teamEmail</code> with <code>getter</code> and <code>setter</code> methods for them as below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic class EnglishCoach implements Coach {\n\n    private final ExaminationService examinationService;\n    private String teamEmail;\n\n    public EnglishCoach(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public ExaminationService getExaminationService() {\n        return examinationService;\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n    public void setTeamEmail(String teamEmail) {\n        this.teamEmail = teamEmail;\n    }\n}\n</code></pre> HistoryCoach.java<pre><code>package com.spring.core.spring.dependency.injection;\n\npublic class HistoryCoach implements Coach {\n\n    private String teamEmail;\n    private ExaminationService examinationService;\n\n    public void setExaminationService(ExaminationService examinationService) {\n        this.examinationService = examinationService;\n    }\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 20 minutes to read history books\";\n    }\n\n    @Override\n    public String getExamination() {\n        return this.examinationService.getExamination();\n    }\n\n    public String getTeamEmail() {\n        return teamEmail;\n    }\n\n    public void setTeamEmail(String teamEmail) {\n        this.teamEmail = teamEmail;\n    }\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#create_properties_file","title":"Create Properties File","text":"<ul> <li>Let's create a properties file with name <code>application.properties</code> in our project <code>resources</code>  as below.</li> </ul> application.properties<pre><code>coach.team.english.email=englishCoach@example.com  \ncoach.team.history.email=historyCoach@example.com\n</code></pre> <ul> <li>As you can see in the <code>application.properties</code> we have 2 variable with <code>name</code> and <code>value</code>.<ul> <li><code>name</code> is the left part of <code>=</code></li> <li><code>value</code> is the right part of <code>=</code></li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#load_properties_file_in_spring_config_file","title":"Load Properties File In Spring Config File","text":"<ul> <li>To load variables from <code>application.properties</code>, we just need to add the tag <code>context:property-placeholder</code> with <code>location</code> attribute as below into <code>applicationContext.xml</code>.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:property-placeholder location=\"classpath:application.properties\"/&gt;\n\n    &lt;bean id=\"englishExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishExaminationService\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishCoach\"&gt;\n        &lt;constructor-arg ref=\"englishExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyCoach\"\n          class=\"com.spring.core.spring.dependency.injection.HistoryCoach\"&gt;\n        &lt;property name=\"examinationService\" ref=\"historyExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.HistoryExaminationService\"&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>In which, the value of attribute <code>location</code> in <code>context:property-placeholder</code> tag should be start with <code>classpath:</code> then the properties's file name will be put after.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#reference_values_from_properties_file","title":"Reference Values From Properties File","text":"<ul> <li>Now, to reference values from the <code>application.properties</code> file into <code>HistoryCoach</code> and <code>EnglishCoach</code> beans, we will use <code>property</code> tag with <code>name</code> and <code>value</code> attributes. In which:<ul> <li><code>name</code> will contain the name  of setter method  in the <code>historyCoach</code>  and <code>EnglishCoach</code> without <code>set</code> and the first letter is lower case (teamEmail).</li> <li><code>value</code> will contain the name of variable that we defined in the <code>application.properties</code> file (<code>coach.team.english.email</code> and <code>coach.team.history.email</code>)  and these names have to be put in the syntax <code>${&lt;variable name&gt;}</code>. Ex: <code>${coach.team.english.email}</code>. With this syntax Spring will load the value of that variable for you directly.</li> </ul> </li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:property-placeholder location=\"classpath:application.properties\"/&gt;\n\n    &lt;bean id=\"englishExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishExaminationService\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishCoach\"&gt;\n        &lt;constructor-arg ref=\"englishExaminationService\"/&gt;\n        &lt;property name=\"teamEmail\" value=\"${coach.team.english.email}\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyCoach\"\n          class=\"com.spring.core.spring.dependency.injection.HistoryCoach\"&gt;\n        &lt;property name=\"examinationService\" ref=\"historyExaminationService\"/&gt;\n        &lt;property name=\"teamEmail\" value=\"${coach.team.history.email}\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"historyExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.HistoryExaminationService\"&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#testing_2","title":"Testing","text":"<ul> <li>Finally, let's update our <code>SpringApplication</code> for getting and using bean <code>EnglishCoach</code> and <code>historyCoach</code> with injected values from the <code>application.properties</code> file as below.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.dependency.injection;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //create Spring Container with configuration file\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //Get bean from container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n        Coach historyCoach = context.getBean(\"historyCoach\", Coach.class);\n\n        EnglishCoach englishCoachDetail = context.getBean(\"englishCoach\", EnglishCoach.class);\n        HistoryCoach historyCoachDetail = context.getBean(\"historyCoach\", HistoryCoach.class);\n\n        //use bean\n        System.out.println(englishCoach.getDailyHomeWork());\n        System.out.println(englishCoach.getExamination());\n\n        System.out.println(historyCoach.getDailyHomeWork());\n        System.out.println(historyCoach.getExamination());\n\n        System.out.println(englishCoachDetail.getTeamEmail());\n        System.out.println(historyCoachDetail.getTeamEmail());\n\n        //close container\n        context.close();\n    }\n}\n</code></pre> <ul> <li>Then when our application run, we will see the successful result as below. We can see the values in the <code>application.properties</code> which are injected and used by <code>EnglishCoach</code> and <code>HistoryCoach</code>.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\nFocus and take English examination in 3 hours\nSpend 20 minutes to read history books\nFocus and take History examination in 3 hours\nenglishCoach@example.com\nhistoryCoach@example.com\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#see_also","title":"See Also","text":"<ul> <li>Spring Overview</li> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection</li> <li>Spring Dependency Injection Annotation</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection%20XML/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode - Constructor and Setter Injections</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/","title":"Spring Dependency Injection","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#what_is_the_dependency_injection","title":"What Is The Dependency Injection?","text":"<ul> <li><code>Dependency Injection (DI)</code> is a design pattern used to implement IoC. It allows the creation of dependent objects outside of a class and provides those objects to a class through different ways. Using DI, we move the creation and binding of the dependent objects outside of the class that depends on them.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#spring_injection_types","title":"Spring Injection Types","text":"<ul> <li>There are 3 main types of injection with Spring.<ul> <li>Constructor Injection With XML</li> <li>Setter Injection With XML</li> <li>Annotation Injection.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#constructor_injection_type_xml","title":"Constructor Injection Type XML","text":"<ul> <li>In this approach, the DI will be injected with the help of constructors. Now to set the DI of a bean as Constructor Injection Type in XML bean-configuration file, we have to use the <code>&lt;constructor-arg&gt;</code> tag in the bean-config.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishExaminationService\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishExaminationService\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"englishCoach\"\n          class=\"com.spring.core.spring.dependency.injection.EnglishCoach\"&gt;\n        &lt;constructor-arg ref=\"englishExaminationService\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li> <p>To use the <code>Constructor Injection</code> in our Spring, we should follow these steps:</p> <ul> <li>Define the dependency interface and class</li> <li>Create a constructor in our class for injections</li> <li>Configure the dependency injection in Spring config file.</li> </ul> </li> <li> <p>So let's take an example for the Constructor Injection Type as following steps in Spring Dependency Injection XML</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#setter_injection_type_xml","title":"Setter Injection Type XML","text":"<ul> <li>This is the simpler of the two DI methods. In this approach, the DI will be injected with the help of setter and/or getter methods. Now to set the DI as setter dependency injection in a bean we have to use the <code>&lt;property&gt;</code> tag in the bean-config.</li> <li> <p>To use the <code>Setter Injection</code> in our Spring, we should follow these steps:</p> <ul> <li>Create setter methods in our class for injections</li> <li>Configure the dependency injection in Spring config file.</li> </ul> </li> <li> <p>So let's take an example for the Constructor Injection Type as following steps in Spring Dependency Injection Annotation.</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#inject_values_from_properties_file_with_xml","title":"Inject Values From Properties File With XML","text":"<ul> <li>From the section above, we learnt how to use <code>Setter Injection Type</code> for DI. In this section, we will continue to use it for injecting values from the <code>properties</code> files in our <code>resources</code> folders.</li> </ul> <ul> <li> <p>To use the <code>Setter Injection</code> for injecting values from the <code>properties</code> file in our Spring, we should follow these steps:</p> <ul> <li>Create Properties File.</li> <li>Load Properties File in Spring config file</li> <li>Reference values from Properties file</li> </ul> </li> <li> <p>So let's take an example for <code>Setter Injection</code> for injecting values from the <code>properties</code> file as following steps in Spring Dependency Injection XML.</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#annotation_injection_type","title":"Annotation Injection Type","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#what_is_the_spring_autowiring","title":"What Is The Spring Autowiring?","text":"<ul> <li>Spring can automatically wire up our objects together for injecting dependency. So basically the Spring Framework will look for a class that matched a given property and it will actually match by type. The type of the class could be interface or class. Once Spring finds a match then it'll automatically inject it. Hence it's called autowired.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#autowiring_injection_types","title":"Autowiring Injection Types","text":"<ul> <li> <p>There are 3 types of autowiring injection.</p> <ul> <li>Constructor Injection Annotation</li> <li>Setter Injection Annotation</li> <li>Field Injections Annotation</li> </ul> </li> <li> <p>Let's take examples for these these autowiring injection types in Spring Dependency Injection Annotation.</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#inject_values_from_properties_file_by_annotation","title":"Inject Values From Properties File By Annotation","text":"<ul> <li>From the section above, we learnt how to use <code>Field Injection Type With Annotation</code> for DI. In this section, we will continue to use it for injecting values from the <code>properties</code> files in our <code>resources</code> folders.</li> </ul> <ul> <li>To use the <code>Field Injection</code> for injecting values from the <code>properties</code> file in our Spring, we should follow these steps:<ul> <li>Create Properties File.</li> <li>Load Properties File in Spring config file</li> <li>Reference values from Properties file With Annotation</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#see_also","title":"See Also","text":"<ul> <li>Spring Overview</li> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection XML</li> <li>Spring Dependency Injection Annotation</li> <li>Spring Bean Scopes And Lifecycle</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Dependency%20Injection/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20DispactcherServlet/","title":"DispactcherServlet","text":"","tags":["Spring","SpringCore","Servlet"]},{"location":"Spring%20Core/Spring%20DispactcherServlet/#what_is_the_dispactcherservlet","title":"What Is The DispactcherServlet?","text":"<ul> <li> Spring's web MVC framework is, like many other web MVC frameworks, request-driven, designed around a central servlet that dispatches requests to controllers and offers other functionality that facilitates the development of web applications. Spring's\u00a0<code>DispatcherServlet</code>\u00a0however, does more than just that. It is completely integrated with the  Spring IoC container and as such allows us to use every other feature that Spring has.</li> <li>The request processing workflow of the Spring Web MVC\u00a0<code>DispatcherServlet</code>\u00a0is illustrated in the following diagram. The pattern-savvy reader will recognize that the\u00a0<code>DispatcherServlet</code>\u00a0is an expression of the \u201cFront Controller\u201d design pattern (this is a pattern that Spring Web MVC shares with many other leading web frameworks).</li> </ul> <ul> <li>The\u00a0<code>DispatcherServlet</code>\u00a0is an actual\u00a0<code>Servlet</code>\u00a0(it inherits from the\u00a0<code>HttpServlet</code>\u00a0base class), and as such is declared in the\u00a0<code>web.xml</code>\u00a0of our web application. We need to map requests that we want the\u00a0<code>DispatcherServlet</code>\u00a0to handle, by using a URL mapping in the same\u00a0<code>web.xml</code>\u00a0file. This is standard J2EE servlet configuration; the following example shows such a\u00a0<code>DispatcherServlet</code>\u00a0declaration and mapping.</li> </ul> web.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\"\n         metadata-complete=\"true\"&gt;\n\n    &lt;display-name&gt;spring-mvc-xml-configuration&lt;/display-name&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;/WEB-INF/spring-mvc-xml-configuration-servlet.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre> <ul> <li>In the preceding example, all requests\u00a0will be handled by the\u00a0<code>dispatcher</code> DispatcherServlet. This is only the first step in setting up Spring Web MVC. We now need to configure the various beans used by the Spring Web MVC framework (over and above the\u00a0<code>DispatcherServlet</code>\u00a0itself.</li> </ul>","tags":["Spring","SpringCore","Servlet"]},{"location":"Spring%20Core/Spring%20DispactcherServlet/#dispactcherservlet_and_applicationcontext","title":"DispactcherServlet And ApplicationContext","text":"<ul> <li><code>ApplicationContext</code> instances in Spring can be scoped. In the Web MVC framework, each\u00a0<code>DispatcherServlet</code>\u00a0has its own\u00a0<code>WebApplicationContext</code>, which inherits all the beans already defined in the root\u00a0<code>WebApplicationContext</code>. These inherited beans defined can be overridden in the servlet-specific scope, and we can define new scope-specific beans local to a given servlet instance.</li> </ul> <ul> <li>Upon initialization of a <code>DispatcherServlet</code>, the framework looks for a file named <code>[servlet-name]-servlet.xml</code> in the <code>WEB-INF</code> directory of our web application and create the beans defined there, overriding the definitions of any beans defined with the same name in the global scope.</li> <li>Consider the following\u00a0<code>DispatcherServlet</code>\u00a0servlet configuration (in the\u00a0<code>web.xml</code>\u00a0file).</li> </ul> web.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\"\n         metadata-complete=\"true\"&gt;\n\n    &lt;display-name&gt;spring-mvc-xml-configuration&lt;/display-name&gt;\n\n&lt;!--    Spring MVC Configs--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;/WEB-INF/spring-mvc-xml-configuration-servlet.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/sample/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre> <ul> <li>With the above servlet configuration in place, we will need to have a file called <code>/WEB-INF/sample/*.xml</code> in out application; this file will contain all of our Spring Web MVC-specific components (beans). We can change the exact location of this configuration file through a servlet initialization parameter (see below for details).</li> <li>The\u00a0<code>WebApplicationContext</code>\u00a0is an extension of the plain\u00a0<code>ApplicationContext</code>\u00a0that has some extra features necessary for web applications. It differs from a normal\u00a0<code>ApplicationContext</code>\u00a0in that it is capable of resolving themes, and that it knows which servlet it is associated with (by having a link to the\u00a0<code>ServletContext</code>). The\u00a0<code>WebApplicationContext</code>\u00a0is bound in the\u00a0<code>ServletContext</code>, and by using static methods on the\u00a0<code>RequestContextUtils</code>\u00a0class we can always look up the\u00a0<code>WebApplicationContext</code>\u00a0if we need access to it.</li> <li> <p>The Spring\u00a0<code>DispatcherServlet</code>\u00a0uses special beans to process requests and render the appropriate views. These beans are part of Spring Framework. We can configure them in the\u00a0<code>WebApplicationContext</code>, just as we configure any other bean. However, for most beans, sensible defaults are provided so we initially do not need to configure them. These beans are described in the following table.</p> </li> <li> <p>Special beans in the <code>WebApplicationContext</code>:</p> </li> </ul> Bean type Explanation controllers Form the C part of the MVC. handler mappings Handle the execution of a list of pre-processors and post-processors and controllers that will be executed if they match certain criteria (for example, a matching URL specified with the controller). view resolvers Resolves view names to views. locale resolver A locale resolver is a component capable of resolving the locale a client is using, in order to be able to offer internationalized views Theme resolver A theme resolver is capable of resolving themes our web application can use, for example, to offer personalized layouts multipart file resolver Contains functionality to process file uploads from HTML forms. handler exception resolvers Contains functionality to map exceptions to views or implement other more complex exception handling code. <ul> <li> <p>After we set up a <code>DispatcherServlet</code>, and a request comes in for that specific <code>DispatcherServlet</code>, the <code>DispatcherServlet</code> starts processing the request as follows:</p> <ul> <li>The <code>WebApplicationContext</code> is searched for and bound in the request as an attribute that the controller and other elements in the process can use. It is bound by default under the key DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE.</li> <li>The locale resolver is bound to the request to enable elements in the process to resolve the locale to use when processing the request (rendering the view, preparing data, and so on). If we do not need locale resolving, we do not need it.</li> <li>The theme resolver is bound to the request to let elements such as views determine which theme to use. If we do not use themes, we can ignore it.</li> <li>If we specify a multipart file resolver, the request is inspected for multiparts; if multiparts are found, the request is wrapped in a <code>MultipartHttpServletRequest</code> for further processing by other elements in the process.</li> <li>An appropriate handler is searched for. If a handler is found, the execution chain associated with the handler (preprocessors, postprocessors, and controllers) is executed in order to prepare a model or rendering.</li> <li>If a model is returned, the view is rendered. If no model is returned, (may be due to a preprocessor or postprocessor intercepting the request, perhaps for security reasons), no view is rendered, because the request could already have been fulfilled.</li> </ul> </li> <li> <p>Handler exception resolvers that are declared in the\u00a0<code>WebApplicationContext</code>\u00a0pick up exceptions that are thrown during processing of the request. Using these exception resolvers allows us to define custom behaviors to address exceptions.</p> </li> <li>The Spring\u00a0<code>DispatcherServlet</code>\u00a0also supports the return of the\u00a0<code>last-modification-date</code>, as specified by the Servlet API. The process of determining the last modification date for a specific request is straightforward: <ul> <li>The\u00a0<code>DispatcherServlet</code>\u00a0looks up an appropriate handler mapping and tests whether the handler that is found implements the\u00a0<code>LastModified</code>\u00a0interface. If so, the value of the\u00a0<code>long getLastModified(request)</code>\u00a0method of the\u00a0<code>LastModified</code>\u00a0interface is returned to the client.</li> </ul> </li> <li>We can customize Spring's\u00a0<code>DispatcherServlet</code>\u00a0by adding context parameters in the\u00a0<code>web.xml</code>\u00a0file or servlet initialization parameters. See the following table.</li> <li><code>DispatcherServlet</code> initialization parameters:</li> </ul> Parameter Explanation contextClass Class that implements WebApplicationContext, which instantiates the context used by this servlet. By default, the XmlWebApplicationContext is used. contextConfigLocation String that is passed to the context instance (specified by contextClass) to indicate where context(s) can be found. The string consists potentially of multiple strings (using a comma as a delimiter) to support multiple contexts. In case of multiple context locations with beans that are defined twice, the latest location takes precedence. namespace Namespace of the WebApplicationContext. Defaults to <code>[servlet-name]-servlet</code>.","tags":["Spring","SpringCore","Servlet"]},{"location":"Spring%20Core/Spring%20DispactcherServlet/#see_also","title":"See Also","text":"<ul> <li>Spring MVC Overview</li> <li>Spring Inversion Of Control</li> <li>Spring MVC XML Configuration</li> </ul>","tags":["Spring","SpringCore","Servlet"]},{"location":"Spring%20Core/Spring%20DispactcherServlet/#references","title":"References","text":"<ul> <li>SpringDoc</li> </ul>","tags":["Spring","SpringCore","Servlet"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/","title":"Spring Inversion Of Control Annotation","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#development_process_with_annotations","title":"Development Process With Annotations","text":"<ul> <li> <p>As we known in Spring Inversion Of Control, there are 3 ways that we can use to configure the Spring Container in Spring Framework:</p> <ul> <li>XML configuration file (legacy, but most legacy apps still use this)</li> <li>Java Annotations (modern)</li> <li>Java Source Code (modern)</li> </ul> </li> <li> <p>Why do we should use Spring configuration with Annotations?</p> <ul> <li>XML configuration can be verbose.</li> <li>Configure your Spring beans with Annotations.</li> <li>Annotations minimizes the XML configuration.</li> </ul> </li> <li> <p>So for Configuring Spring Container with Java Annotations, we should follows steps below:</p> <ul> <li>Enable component scanning in Spring config file.</li> <li>Add the @Component Annotation to our Java classes.</li> <li>Retrieve bean from Spring Container.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#enable_component_scanning_in_spring_config_file","title":"Enable Component Scanning In Spring Config File","text":"<ul> <li>When we add an annotation to a class, then Spring will actually scan our java classes for those annotations. When it finds a class that has a special Spring Annotation on it, it will automatically register that bean with the Spring Container.</li> <li>So instead of doing everything long hand via XML config file, Spring will just scan and register beans with the Spring Container. These are two main points in scanning for component classes in Spring Framework.</li> <li>Now, let's use the tag <code>&lt;context:component-scan&gt;</code> and property <code>base-package</code> with the value is the package that we want Spring Framework will scan.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.spring.core.spring.inversion.of.control.annotation\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#add_component_annotation_into_java_classes","title":"Add @Component Annotation Into Java Classes","text":"<ul> <li>We need to add the @Component annotation into our java classes, so with this annotation, we tell to the Spring that this class should be registered when it starts scanning.</li> <li>When we use the @Component annotation we can provide it any bean id name that we want to use. See example below.</li> </ul> EnglishCoach.java<pre><code>package com.spring.core.spring.inversion.of.control.annotation;  \n\nimport org.springframework.stereotype.Component;  \n\n@Component(\"englishCoach\")  \npublic class EnglishCoach implements Coach {  \n\n    @Override  \n    public String getDailyHomeWork() {  \n        return \"Spend 1 hour to practise Speaking Skill!\";  \n    }  \n\n}\n</code></pre> <p>By default, if we don't provide any bean id name, then the Spring Framework will set the bean id automatically by class name with the first lower case character. Ex: <code>EnglishCoach</code> class -&gt; the bean id will be <code>englishCoach</code>.</p>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#retrieve_beans_from_container","title":"Retrieve Beans From Container","text":"<ul> <li>In this step, we will do the same what we did before in retrieving beans from container. See the example below:</li> </ul> <pre><code>// create a spring container\nClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n//retrieve bean from spring container\nEnglishCoach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#example_with_annotation","title":"Example With Annotation","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#dependencies","title":"Dependencies","text":"<ul> <li>To begin with the example, we will need to use the dependency <code>spring-context</code> for creating the Spring Container.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n    &lt;version&gt;5.3.24&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#enable_component_scanning_in_spring_config_file_1","title":"Enable Component Scanning In Spring Config File","text":"<ul> <li>Now, let's create the <code>applicationContext.xml</code> file in our resources folder of our project and add configuration as below.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.spring.core.spring.inversion.of.control.annotation\"/&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>As you can see, we will use the tag <code>&lt;context:component-scan&gt;</code> to tell Spring Framework that we want Spring Framework scans our package and the property <code>base-package</code> is used to tell Spring Framework that where it should do the scanning and register the beans.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#add_component_annotation_into_java_classes_1","title":"Add @Component Annotation Into Java Classes","text":"<ul> <li>Let's create an interface and implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.inversion.of.control.annotation;  \n\npublic interface Coach {  \n\n    public String getDailyHomeWork();  \n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.inversion.of.control.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component(\"englishCoach\")\npublic class EnglishCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in the implement class  <code>EnglishCoach</code>. We will use the annotation <code>@Component</code> with value is <code>englishCoach</code> which will tell Spring Framework that, this class is a bean with the bean id is <code>englishCoach</code> and Spring Framework should register it during the scanning.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#retrieve_beans_from_container_1","title":"Retrieve Beans From Container","text":"<ul> <li>Next, we can use the bean in the Spring Container by using <code>getBean()</code> method.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.inversion.of.control.annotation;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n\n        //use the bean\n        System.out.println(englishCoach.getDailyHomeWork());\n\n        context.close();\n    }\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#testing","title":"Testing","text":"<ul> <li>Finally, we just simply run the main class then we can see the content in the spring bean as below.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Inversion Of Control XML</li> <li>Spring Inversion Of Control Java Code</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Annotation/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode - Example With Annotation</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/","title":"Spring Inversion Of Control Java Code","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#development_process_with_java_source_code","title":"Development Process With Java Source Code","text":"<ul> <li> <p>As we known in Spring Inversion Of Control, there are 3 ways that we can use to configure the Spring Container in Spring Framework:</p> <ul> <li>XML configuration file (legacy, but most legacy apps still use this)</li> <li>Java Annotations (modern)</li> <li>Java Source Code (modern)</li> </ul> </li> <li> <p>In which, for the first <code>XML configuration file</code> and <code>Java Annotations</code> we have to maintain the XML Spring configuration file, so our projects will not be a pure Java Code. However, in the third way <code>Java Source Code</code>, Spring Framework provides for us the ability to write Spring Container configuration by Java Code and no need to maintain the XML Spring configuration file anymore.</p> </li> <li> <p>So for Configuring Spring Container with Java Source Code, we should follows steps below:</p> <ul> <li>Create a Java class and annotate as <code>@Configuration</code>.</li> <li>Add component scanning support: <code>@ComponentScan</code> (Optional).</li> <li>Read Spring Java configuration class.</li> <li>Retrieve bean from Spring Container.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#create_a_java_class_and_annotate_as_configuration","title":"Create a Java class and annotate as <code>@Configuration</code>","text":"<ul> <li>So in the step one, we just simply create a java class and we annotate it with <code>@Configuration</code> annotation.</li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.inversion.of.control.java.source.code.config;\n\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class ApplicationConfig {\n\n}\n</code></pre> <ul> <li>So this class is name <code>ApplicationConfig</code> and it contains empty config there. Later this class will be used to add some bean configurations.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#add_component_scanning_support_optional","title":"Add component scanning support (Optional)","text":"<ul> <li>Now, we will continue to add the <code>@ComponentScan</code> annotation, this annotation will tell Spring: let's scan and register beans with the Spring Container. This annotation is like the tag <code>&lt;context:component-scan&gt;</code> that we used before in <code>XML configuration file</code>.</li> <li>In the <code>@ComponentScan</code>, we have to provide the values for the property <code>basePackages</code> which are the packages that we want the Spring Framework to scan.<ul> <li>Ex: <code>@ComponentScan(basePackages = {\"com.spring.core.spring.inversion.of.control.java.source.code\"})</code></li> </ul> </li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.inversion.of.control.java.source.code.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = {\"com.spring.core.spring.inversion.of.control.java.source.code\"})\npublic class ApplicationConfig {\n}\n</code></pre> <ul> <li>In case, we don't want to use the <code>@ComponentScan</code> annotation, so we have configure Spring Beans manually in this <code>ApplicationConfig.java</code>.</li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.dependency.injection.java.source.code.config;  \n\nimport com.spring.core.spring.dependency.injection.java.source.code.*;  \nimport org.springframework.context.annotation.Bean;  \nimport org.springframework.context.annotation.Configuration;  \n\n@Configuration  \npublic class ApplicationConfig {  \n\n    @Bean  \n    public ExaminationService englishExaminationService() {  \n        return new EnglishExaminationService();  \n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will create the method which return the java class that we want to create the bean for it. Then we will add the annotation <code>@Bean</code> on it and by default the method name will be the bean id.</li> <li>You can view more in this section Spring Bean Configuration With Java Code.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#read_spring_java_configuration_class","title":"Read Spring Java configuration class","text":"<ul> <li>Now, at this step, we just simply read the configuration java class that we created in the step above. So in our main class, we will create Spring Container by creating new <code>AnnotationConfigApplicationContext</code> with the <code>ApplicationConfig</code> class. Then the Spring Context will be available for us.</li> </ul> SpringApplication.java<pre><code>//Create a spring container  \nAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#retrieve_beans_from_container","title":"Retrieve Beans From Container","text":"<ul> <li>In this step, we will do the same what we did before in retrieving beans from container. See the example below:</li> </ul> SpringApplication.class<pre><code>//Create a spring container  \nAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);  \n\n//Retrieve bean from the spring container  \nCoach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#example_with_java_source_code","title":"Example With Java Source Code","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#dependencies","title":"Dependencies","text":"<ul> <li>To begin with the example, we will need to use the dependency <code>spring-context</code> for creating the Spring Container.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n    &lt;version&gt;5.3.24&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#create_a_java_class_and_annotate_as_configuration_1","title":"Create a Java class and annotate as <code>@Configuration</code>","text":"<ul> <li>Now, let's create the <code>ApplicationConfig</code> class in our project and add the annotation <code>@Configuration</code> as below.</li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.inversion.of.control.java.source.code.config;  \n\nimport org.springframework.context.annotation.Configuration;  \n\n@Configuration  \npublic class ApplicationConfig {  \n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#add_component_scanning_support_optional_1","title":"Add component scanning support (Optional)","text":"<ul> <li>Next, we just simply add the annotation <code>@ComponentScan</code> and set the <code>basePackages</code> value to the packages that we want the Spring Framework will scan.</li> </ul> ApplicationConfig.java<pre><code>package com.spring.core.spring.inversion.of.control.java.source.code.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = {\"com.spring.core.spring.inversion.of.control.java.source.code\"})\npublic class ApplicationConfig {\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#read_spring_java_configuration_class_1","title":"Read Spring Java configuration class","text":"<ul> <li>Now, let's use <code>AnnotationConfigApplicationContext</code> for creating the <code>applicationContext</code> which is known as <code>Spring Container</code> as below:</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.inversion.of.control.java.source.code;\n\nimport com.spring.core.spring.inversion.of.control.java.source.code.config.ApplicationConfig;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Create a spring container\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\n\n    }\n}\n</code></pre> <ul> <li>In which the <code>AnnotationConfigApplicationContext</code> will be created with <code>ApplicationConfig</code> that we created above.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#retrieve_beans_from_container_1","title":"Retrieve Beans From Container","text":"<ul> <li>Now, we can use the bean in the Spring Container by using <code>getBean()</code> method.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.inversion.of.control.java.source.code;\n\nimport com.spring.core.spring.inversion.of.control.java.source.code.config.ApplicationConfig;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class SpringApplication {\n    public static void main(String[] args) {\n\n        //Create a spring container\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\n\n        //Retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n\n        //Use bean\n        System.out.println(englishCoach.getDailyHomeWork());\n\n        //Close context\n        context.close();\n\n    }\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#testing","title":"Testing","text":"<ul> <li>Finally, we just simply run the main class then we can see the content in the spring bean as below.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Inversion Of Control XML</li> <li>Spring Inversion Of Control Annotation</li> <li>Spring Bean Configuration With Java Code</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20Java%20Code/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/","title":"Spring Inversion Of Control XML","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#development_process_with_xml","title":"Development Process With XML","text":"<ul> <li> <p>As we known in Spring Inversion Of Control, there are 3 ways that we can use to configure the Spring Container in Spring Framework:</p> <ul> <li>XML configuration file (legacy, but most legacy apps still use this)</li> <li>Java Annotations (modern)</li> <li>Java Source Code (modern)</li> </ul> </li> <li> <p>So for configuring Spring Container using XML configuration file, we should follows these step below:</p> <ul> <li>Configure Spring Beans.</li> <li>Create a Spring Container.</li> <li>Retrieve beans from Spring Container for using.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#configure_the_spring_bean_xml","title":"Configure The Spring Bean XML","text":"<ul> <li>The Spring Bean will be configured in an XML configuration file and in this file we will configure the tag bean with <code>id</code> and <code>class</code>.</li> <li>Let's see the example below with the XML configuration file <code>applicationContext.xml</code>. For the tag bean, the <code>id</code> is like an alias, and <code>class</code> is the fully qualified class name of implementation java class</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\" class=\"com.spring.core.spring.inversion.of.control.EnglishCoach\"&gt;\n\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#create_a_spring_container","title":"Create A Spring Container","text":"<ul> <li><code>Spring Container</code> is generally known as <code>ApplicationContext</code> and we have some implementation of it as below:</li> <li> <p>Specialized implementations of <code>ApplicationContext</code>:</p> <ul> <li>ClassPathXmlApplicationContext</li> <li>AnnotationConfigApplicationContext</li> <li>GenericWebApplicationContext</li> <li>other...</li> </ul> </li> <li> <p>For <code>ClassPathXmlApplicationContext</code>: we can create Spring Container by creating new <code>ClassPathXmlApplicationContext</code> with the name of config file (applicationContext.xml) as below.</p> </li> </ul> <pre><code>// create a spring container\nClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#retrieve_beans_from_container","title":"Retrieve Beans From Container","text":"<ul> <li>Now, to get the bean from the container we will use the method <code>getBean(&lt;beanId&gt;, &lt;interface class&gt;)</code>. In which the <code>beanId</code> is the id of bean that we defined in <code>applicationContext.xml</code> and <code>interface class</code> is the interface of implemented class that we also defined in <code>applicationContext.xml</code>.</li> </ul> <pre><code>// create a spring container\nClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n//retrieve bean from spring container\nEnglishCoach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n</code></pre> <ul> <li>Why do we specify the interface in getBean()?<ul> <li>When we pass the interface to the method, behind the scenes <code>Spring</code> will cast the object for us.</li> <li>However, there are some slight differences than normal casting.</li> <li>From the Spring docs: Behaves the same as getBean(String), but provides a measure of type safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the required type. This means that ClassCastException can't be thrown on casting the result correctly, as can happen with getBean(String).</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#example_code_with_xml","title":"Example Code With XML","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#dependencies","title":"Dependencies","text":"<ul> <li>To begin with the example, we will need to use the dependency <code>spring-context</code> for creating the Spring Container.</li> </ul> pom.xml<pre><code>....  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  \n    &lt;version&gt;5.3.24&lt;/version&gt;  \n&lt;/dependency&gt;\n\n....\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#configure_the_spring_bean","title":"Configure The Spring Bean","text":"<ul> <li>Let's create an interface and implementation class as below.</li> </ul> Coach.java<pre><code>package com.spring.core.spring.inversion.of.control;  \n\npublic interface Coach {  \n\n    public String getDailyHomeWork();  \n\n}\n</code></pre> EnglishCoach.java<pre><code>package com.spring.core.spring.inversion.of.control;\n\npublic class EnglishCoach implements Coach {\n\n    @Override\n    public String getDailyHomeWork() {\n        return \"Spend 1 hour to practise Speaking Skill!\";\n    }\n\n}\n</code></pre> <ul> <li>Then in the <code>resources</code> let's create an <code>applicationContext.xml</code> for configuring Spring beans.</li> </ul> applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;bean id=\"englishCoach\" class=\"com.spring.core.spring.inversion.of.control.EnglishCoach\"&gt;\n\n    &lt;/bean&gt;\n\n\n&lt;/beans&gt;\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#create_a_spring_container_1","title":"Create A Spring Container","text":"<ul> <li>Now, let's use <code>ClassPathXmlApplicationContext</code> for creating the <code>applicationContext</code> which is known as <code>Spring Container</code> as below:</li> </ul> <pre><code>package com.spring.core.spring.inversion.of.control;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //Load Spring Configuration File\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n    }\n\n}\n</code></pre> <ul> <li>In which the <code>ClassPathXmlApplicationContext</code> will be created with <code>applicationContext.xml</code> file.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#retrieve_beans_from_container_1","title":"Retrieve Beans From Container","text":"<ul> <li>Now, we can use the bean in the Spring Container by using <code>getBean()</code> method.</li> </ul> SpringApplication.java<pre><code>package com.spring.core.spring.inversion.of.control;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringApplication {\n\n    public static void main(String[] args) {\n\n        //Load Spring Configuration File\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        //retrieve bean from the spring container\n        Coach englishCoach = context.getBean(\"englishCoach\", Coach.class);\n\n        //use the bean\n        System.out.println(englishCoach.getDailyHomeWork());\n\n        //close the context\n        context.close();\n\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#testing","title":"Testing","text":"<ul> <li>Finally, we just simply run the main class then we can see the content in the spring bean as below.</li> </ul> <pre><code>Spend 1 hour to practise Speaking Skill!\n\nProcess finished with exit code 0\n</code></pre>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#see_also","title":"See Also","text":"<ul> <li>Spring Inversion Of Control</li> <li>Spring Inversion Of Control Annotation</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control%20XML/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>FullSourceCode - Example With XML</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/","title":"Spring Inversion Of Control","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#what_is_the_inversion_of_control_ioc","title":"What Is the Inversion Of Control (IOC)","text":"<ul> <li><code>Inversion of control</code>: This is the principle of object-oriented programming, in which objects of the program do not depend on concrete implementations of other objects, but may have knowledge about their abstractions (<code>interfaces</code>) for later interaction. <code>IoC</code> refers to transferring the control of objects and their dependencies from the main program to a container or framework.</li> <li>In general, <code>IoC</code> is the approach of outsourcing the construction and management of objects.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#spring_inversion_of_control_1","title":"Spring Inversion Of Control","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#spring_container","title":"Spring Container","text":"<ul> <li><code>Spring Framework</code> provides for us a <code>Spring Container</code> which fully support <code>IoC</code>. The Spring Container will provide 2 primary functions:<ul> <li>Create and Manage objects (Inversion Of Control)</li> <li>Inject object's dependencies (Dependency Injection)</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#configure_spring_container","title":"Configure Spring Container","text":"<ul> <li>There are 3 ways that we can use to configure the Spring Container in Spring Framework:<ul> <li>XML configuration file (legacy, but most legacy apps still use this)</li> <li>Java Annotations (modern)</li> <li>Java Source Code (modern - No XML)</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#spring_development_processes","title":"Spring Development Processes","text":"<ul> <li> <p>So for configuring Spring Container using XML configuration file (See Spring Inversion Of Control XML), we should follow steps below:</p> <ul> <li>Configure Spring Beans.</li> <li>Create a Spring Container.</li> <li>Retrieve beans from Spring Container for using.</li> </ul> </li> <li> <p>If we use Java Annotations for configuring Spring Container (See Spring Inversion Of Control Annotation), we should follow steps below:</p> <ul> <li>Enable component scanning in Spring config file.</li> <li>Add the @Component Annotation to our Java classes.</li> <li>Retrieve bean from Spring Container.</li> </ul> </li> <li> <p>If we use Java Source Code for configuring Spring Container (See Spring Inversion Of Control Java Code), we should follow steps below:</p> <ul> <li>Create a Java class and annotate as <code>@Configuration</code>.</li> <li>Add component scanning support: <code>@ComponentScan</code> (Optional).</li> <li>Read Spring Java configuration class.</li> <li>Retrieve bean from Spring Container.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#what_is_the_spring_bean","title":"What Is The Spring Bean?","text":"<ul> <li>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called <code>beans</code>. A bean is an object that is instantiated, assembled and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in our application. Beans, and the dependencies among them are reflected in the configuration metadata used by a container.<ul> <li>A \"Spring Bean\" is simply a Java object.</li> <li>When Java objects are created by the Spring Container, then Spring refers to them as \"Spring Beans\".</li> <li>Spring Beans are created from normal Java classes .... just like Java objects.</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#what_is_the_java_annotation","title":"What Is The Java Annotation?","text":"<ul> <li>Java Annotation is a tag that represents the metadata i.e. attached with class, interface, methods or fields to indicate some additional information which can be used by java compiler and JVM.</li> <li> <p>In general, Java Annotations</p> <ul> <li>Are special labels/markers added to Java classes.</li> <li>Provide meta-data about the class</li> <li>Are processed at compile time or run-time for special processing.</li> </ul> </li> <li> <p>Annotations in Java are used to provide additional information, so it is an alternative option for XML and Java marker interfaces.</p> </li> <li> <p>There are several built-in annotations in Java. Some annotations are applied to Java code and some to other annotations.</p> </li> <li> <p>Built-In Java Annotations used in Java code</p> <ul> <li>@Override</li> <li>@SuppressWarnings</li> <li>@Deprecated</li> <li>@SafeVarArgs</li> <li>@FunctionalInterface</li> </ul> </li> <li> <p>Built-In Java Annotations used in other annotations</p> <ul> <li>@TaSpring Container using XML configuration file, we should follows these step below:</li> <li>Configure Spring Beans.</li> <li>Create a Spring Container.</li> <li>Retrieve beans from Spring Container for using.rget</li> <li>@Retention</li> <li>@Inherited</li> <li>@Documented</li> <li>@Repeatable</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#see_also","title":"See Also","text":"<ul> <li>Spring Overview</li> <li>Spring Inversion Of Control XML</li> <li>Spring Inversion Of Control Annotation</li> <li>Spring Inversion Of Control Java Code</li> <li>Spring Dependency Injection</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Inversion%20Of%20Control/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/","title":"Spring MVC Behind The Scenes","text":"","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#components_of_spring_mvc_application","title":"Components Of Spring MVC Application","text":"<ul> <li>There are 3 main components of a Spring MVC Application:<ul> <li>A set of web pages to layout UI components.</li> <li>A collection of Spring beans (controllers, services, etc).</li> <li>Spring configuration (XML, Annotations or Java).</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#how_does_spring_mvc_work","title":"How Does Spring MVC Work?","text":"<ul> <li>Let's see the diagram of a Spring MVC Application below then we will go to details for every components.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#front_controller","title":"Front Controller","text":"<ul> <li>So the <code>Front Controller</code> known as <code>DispatcherServlet</code>.<ul> <li>It is a part of the Spring Framework.</li> <li>It already developed by Spring Develop Team.</li> <li>It incoming HTTP requests and delegate them to the the appropriate controller for processing.</li> </ul> </li> </ul> <ul> <li>When we work with Spring MVC, we don't need to create it anymore. We will focus on creating:<ul> <li>Model Objects</li> <li>View Templates</li> <li>Controller Classes</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#dispatcherservlet","title":"DispatcherServlet","text":"<ul> <li>The <code>DispatcherServlet</code> is the key component of the Spring MVC web framework. It is a servlet that receives incoming HTTP requests and then processes them through a series of handlers, which ultimately generate a response that is sent back to the client. The DispatcherServlet is responsible for managing the entire lifecycle of a request, including handling request mapping, view resolution, and exception handling. It also manages the flow of control between multiple handler components, such as controllers and view resolvers, and provides a unified interface for processing both synchronous and asynchronous requests.</li> <li> You can view more here</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#controller","title":"Controller","text":"<ul> <li><code>Controller</code> is the code that is created by developer. It contains our business logic like:<ul> <li>Handle the request.</li> <li>Store / retrieve data (database, web service...).</li> <li>Place data in model then send it to the appropriate view template.</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#model","title":"Model","text":"<ul> <li>The <code>Model</code> contains our data, so when our controller is executed and performs an operation to retrieve data from back-end systems like database, web services or Spring Bean. Then we can take that data and place it in into the <code>Model</code>. So the <code>Model</code> is like our container and we can ship it between various parts in our Spring MVC application and it will be passed over the <code>View Template</code>.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#view_template","title":"View Template","text":"<ul> <li>The Spring MVC is flexible, it supports many view templates and there are two most view templates are:<ul> <li>JSP (Jave Server Page).</li> <li>JSTL (JSP Standard Tag Library)</li> </ul> </li> <li>So When the <code>Model</code> data comes to our view template then our JSP page can read that model data and display it.</li> </ul> <ul> <li>In case that we don't want to use the JSP template, we can make use of some other templates like Thymeleaf, Groovy, Velocity, Freemarker etc.</li> <li>You can view more here</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#see_also","title":"See Also","text":"<ul> <li>Spring MVC Overview</li> <li>Spring Core Introduction</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Behind%20The%20Scenes/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>Spring Doc</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/","title":"Spring MVC Java Configuration","text":"","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#spring_mvc_java_configuration_process","title":"Spring MVC Java Configuration Process","text":"<ul> <li>When we create an new Spring MVC project. There are some steps that we need to setup as below.<ul> <li>Add Spring MVC configuration class.<ul> <li>Add support for Spring component scanning.</li> <li>Add support for conversion, formatting and validation.</li> <li>Configure Spring MVC View Resolver.</li> </ul> </li> <li>Add Java configuration class for configuring Dispatcher Servlet.<ul> <li>Configure Spring MVC Dispatcher Servlet.</li> <li>Set up URL mappings to Spring MVC Dispatcher Servlet.</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#add_spring_mvc_configuration_class","title":"Add Spring MVC Configuration Class","text":"<ul> <li>We will create a class called\u00a0SpringApplicationConfig,\u00a0where we will register all Spring-related beans using Spring's Java-based configuration style. Let's see the code below.</li> </ul> SpringApplicationConfig.java<pre><code>package spring.mvc.java.based.configuration.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.springframework.web.servlet.view.JstlView;\n\n@Configuration\n@EnableWebMvc\n@ComponentScan({\"spring.mvc.java.based.configuration\"})\npublic class SpringApplicationConfig {\n\n    @Bean\n    public ViewResolver viewResolver() {\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n        viewResolver.setViewClass(JstlView.class);\n        viewResolver.setPrefix(\"/WEB-INF/views/\");\n        viewResolver.setSuffix(\".jsp\");\n        return viewResolver;\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in this class, we will use annotation <code>@ComponentScan</code>and the input class path for packages that we want Spring Framework to scan. This annotation is like we are using tag <code>&lt;context:component-scan base-package=\".....\" /&gt;</code> in Spring MVC XML Configuration.</li> <li>Next, we also need to use annotation <code>@EnableWebMvc</code> to Enable Spring MVC-specific annotations. This annotation is like we are using tag <code>&lt;mvc:annotation-driven/&gt;</code> in Spring MVC XML Configuration.</li> <li>Finally, we will create a <code>viewResolver</code> bean which will be used for Spring MVC View Resolver. <ul> <li>In which, we will create a new instance of <code>InternalResourceViewResolver</code> then we will configure <code>viewClass</code> to set the view class to be used by the view resolver to <code>JstlView</code>, which is a Spring view class that provides support for JSTL (JavaServer Pages Standard Tag Library).</li> <li>The <code>prefix</code> is set to \"/WEB-INF/views/\" and the <code>suffix</code> to \".jsp\", which means that when a view name is returned by a controller method, Spring will look for a JSP file with that name in the \"/WEB-INF/views/\" directory with a \".jsp\" extension.</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#add_java_configuration_class_for_configuring_dispatcher_servlet","title":"Add Java Configuration Class For Configuring Dispatcher Servlet","text":"<ul> <li>Let's create a Java class that implements the <code>WebApplicationInitializer</code> interface as below which is used to configure a web application in a Servlet 3.0+ container. This class will replace our traditional <code>web.xml</code>.</li> </ul> WebInitializer.java<pre><code>package spring.mvc.java.based.configuration;\n\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport spring.mvc.java.based.configuration.config.SpringApplicationConfig;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\n\npublic class WebInitializer implements WebApplicationInitializer {\n\n    @Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n        context.register(SpringApplicationConfig.class);\n        context.setServletContext(servletContext);\n        ServletRegistration.Dynamic servlet = servletContext.addServlet(\"dispatcher\", new DispatcherServlet(context));\n        servlet.setLoadOnStartup(1);\n        servlet.addMapping(\"/\");\n    }\n\n}\n</code></pre> <ul> <li>As you can see we will override the method <code>onStartup</code>, this method is called by the container when the application starts up. </li> <li>Then we will create a new <code>AnnotationConfigWebApplicationContext</code> for creating and configuring Spring web application Context using Java-based configuration as in the image below.</li> </ul> <ul> <li>Next, the application context is then set to the servlet context using the <code>setServletContext()</code> method.</li> <li>Then we will create a new <code>DispatcherServlet</code> with the application context as a param.</li> <li>Then we will create an instance of <code>ServletRegistration.Dynamic</code> by using <code>servletContext.addServlet()</code> and the <code>DispatcherServlet</code> will be added into a dynamic servlet registration with the name is <code>dispatcher</code> and it maps to the root URL (<code>/</code>).</li> <li>Finally, the servlet's <code>loadOnStartup</code> property is set to 1, indicating that the servlet should be loaded on application startup.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#example_with_spring_mvc_java-based_configuration","title":"Example With Spring MVC Java-Based Configuration","text":"<ul> <li>So let's take the example for Spring MVC Java-Based configuration. Let's create a maven project and follow steps below.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#dependencies","title":"Dependencies","text":"<ul> <li>Let's create the <code>pom.xml</code> with the content as below.</li> </ul> pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;com.spring.core&lt;/artifactId&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/parent&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;artifactId&gt;spring-mvc-xml-configuration&lt;/artifactId&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.3.24&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;webXml&gt;src/main/webapp/WEB-INF/web.xml&lt;/webXml&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <ul> <li>Firstly, we would like to package our project to <code>.war</code> file by using tag <code>packaging</code> instead of <code>.jar</code> (default) because we will use this <code>.war</code> file to deploy to Tomcat Server.</li> <li>Next, we will use the dependency <code>spring-webmvc</code> to use Spring MVC framework.</li> <li>Finally, we will use the plugin below, for supporting building <code>.war</code> file, we also have to configure path to the file <code>web.xml</code> that we are going to create in the next steps. With this plugin, our <code>.war</code> file will be packaged will all references and supported libraries, classes and configuration files.</li> </ul> <pre><code>&lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n        &lt;configuration&gt;\n                &lt;webXml&gt;src/main/webapp/WEB-INF/web.xml&lt;/webXml&gt;\n        &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#add_spring_mvc_configuration_class_1","title":"Add Spring MVC Configuration Class","text":"<ul> <li>We will create a class called\u00a0<code>SpringApplicationConfig</code>,\u00a0where we will register all Spring-related beans using Spring's Java-based configuration style. Let's see the code below.</li> </ul> SpringApplicationConfig.java<pre><code>package spring.mvc.java.based.configuration.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.springframework.web.servlet.view.JstlView;\n\n@Configuration\n@EnableWebMvc\n@ComponentScan({\"spring.mvc.java.based.configuration\"})\npublic class SpringApplicationConfig {\n\n    @Bean\n    public ViewResolver viewResolver() {\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n        viewResolver.setViewClass(JstlView.class);\n        viewResolver.setPrefix(\"/WEB-INF/views/\");\n        viewResolver.setSuffix(\".jsp\");\n        return viewResolver;\n    }\n\n}\n</code></pre> <ul> <li>We will use annotation <code>@ComponentScan</code>and the input class path for packages that we want Spring Framework to scan. Then, we also need to use annotation <code>@EnableWebMvc</code> to Enable Spring MVC-specific annotations.</li> <li>Finally, we will create a <code>viewResolver</code> bean which will be used for Spring MVC View Resolver.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#add_java_configuration_class_for_configuring_dispatcher_servlet_1","title":"Add Java Configuration Class For Configuring Dispatcher Servlet","text":"<ul> <li>Let's create a Java class that implements the <code>WebApplicationInitializer</code> interface as below which is used to configure a web application in a Servlet 3.0+ container. This class will replace our traditional <code>web.xml</code>.</li> </ul> WebInitializer.java<pre><code>package spring.mvc.java.based.configuration;\n\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport spring.mvc.java.based.configuration.config.SpringApplicationConfig;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\n\npublic class WebInitializer implements WebApplicationInitializer {\n\n    @Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n        context.register(SpringApplicationConfig.class);\n        context.setServletContext(servletContext);\n        ServletRegistration.Dynamic servlet = servletContext.addServlet(\"dispatcher\", new DispatcherServlet(context));\n        servlet.setLoadOnStartup(1);\n        servlet.addMapping(\"/\");\n    }\n\n}\n</code></pre>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#create_views","title":"Create Views","text":"<ul> <li>So, let's create the folder <code>views</code> inside the <code>WEB-INF</code> as below.</li> </ul> <p>Then inside the\u00a0<code>views</code>\u00a0we will create an example\u00a0<code>welcome.jsp</code>\u00a0with the content as below.</p> welcome.jsp<pre><code>&lt;%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\"\n    pageEncoding=\"US-ASCII\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n&lt;title&gt;First JSP&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h3&gt;Welcome ${name}&lt;/h3&gt;&lt;br&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>In this <code>welcome.jsp</code> file, we just simply map the value of variable name that we will define in the <code>Controller</code>.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#create_controller","title":"Create Controller","text":"<ul> <li> <p>Next, let's create a controller class in side the parent package <code>spring.mvc.java.based.configuration.controller</code> that we configured in the <code>SpringApplicationConfig.java</code> class.</p> </li> <li> <p>The created controller <code>WelcomeController</code> will have the content as below.</p> </li> </ul> WelcomeController.java<pre><code>package spring.mvc.java.based.configuration.controller;  \n\nimport org.springframework.stereotype.Controller;  \nimport org.springframework.ui.ModelMap;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \n\n@Controller  \npublic class WelcomeController {  \n\n    @RequestMapping(\"/welcome\")  \n    public String welcome(ModelMap modelMap) {  \n        modelMap.addAttribute(\"name\", \"Duc\");  \n        return \"welcome\";  \n    }  \n\n}\n</code></pre> <ul> <li>We can annotate classic controllers with the <code>@Controller</code> annotation. This is simply a specialization of the <code>@Component</code> class, which allows us to auto-detect implementation classes through the classpath scanning.</li> <li>We typically use <code>@Controller</code> in combination with a <code>@RequestMapping</code> annotation for request handling methods.</li> <li>In the api <code>/welcome</code>, we just simply add an attribute <code>name</code> with value <code>Duc</code> to the <code>welcome.jsp</code> view, the <code>return \"welcome\";</code> means we will use the file <code>welcome.jsp</code> in the <code>views</code> folder that we configured and the attribute <code>name</code> will be mapped with value <code>Duc</code> there.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#building_war_file","title":"Building War File","text":"<ul> <li>Now, let's run the command <code>mvn clean package</code> to package the <code>.war</code> file as below.</li> </ul> <ul> <li>So, in the <code>.war</code> file we can see, we already have all classes, libraries and configuration files. </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#testing","title":"Testing","text":"<ul> <li>Finally, let's deploy this <code>.war</code> file into the Tomcat server and then go to the browser and put the url <code>http://localhost:8080/spring-mvc-xml-configuration/welcome</code> to check the successful result.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#see_also","title":"See Also","text":"<ul> <li>Spring MVC Overview</li> <li>Spring Inversion Of Control</li> <li>Spring MVC XML Configuration</li> <li>Spring DispactcherServlet</li> <li>Spring MVC XML Configuration</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Java%20Configuration/#references","title":"References","text":"<ul> <li>Baeldung</li> <li>YouTube</li> <li>Spring &amp; Hibernate for Beginners</li> <li>Dzone</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Overview/","title":"Spring MVC Overview","text":"","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Overview/#model-view-controller_mvc","title":"Model-View-Controller (MVC)","text":"<ul> <li> <p><code>MVC</code> stands for Model-View-Controller, which is a popular design pattern used in software engineering to separate the application's user interface (view) from the application's data (model) and logic (controller).</p> </li> <li> <p>The MVC pattern separates an application into three components:</p> <ul> <li>Model: represents the data and business logic of the application.</li> <li>View: represents the user interface of the application.</li> <li>Controller: handles the user input, manipulates the model, and updates the view.</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Overview/#what_is_spring_mvc","title":"What Is Spring MVC?","text":"<ul> <li><code>Spring MVC</code> is a Java framework used for developing web applications, which is built based on the MVC architectural pattern. This framework is a part of the larger Spring Framework and makes use of the features of the Core Spring Framework such as Spring Inversion Of Control (IoC) and Spring Dependency Injection (DI).</li> </ul> <ul> <li> <p>In <code>Spring MVC</code>, the model is represented by the application's business objects or data access objects, the view is typically implemented with JavaServer Pages (JSP), and the controller is implemented with a Java class annotated with the <code>@Controller</code> annotation. The front controller which is known as a Dispatcher Servlet receives the HTTP request then delegate it to the controller to process the request by invoking the appropriate service or data access object, and then returns a response to the client in the form of a view.</p> </li> <li> <p><code>Spring MVC</code> also provides several features such as data binding, validation, and internationalization to simplify the development of web applications. It also provides integration with other Spring frameworks such as Spring Security for implementing security, and Spring Web Services for building web services.</p> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Overview/#why_spring_mvc","title":"Why Spring MVC?","text":"<ul> <li>The Spring way of building web app UIs in Java.</li> <li>Leverage a set of reusable UI components.</li> <li>Help manage application state for web requests.</li> <li>Process form data: validation, conversion etc.</li> <li>Flexible configuration for the view layer.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Overview/#see_also","title":"See Also","text":"<ul> <li>Spring Core Introduction</li> <li>Spring Inversion Of Control</li> <li>Spring Dependency Injection</li> <li>Spring MVC Behind The Scenes</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20Overview/#references","title":"References","text":"<ul> <li>Spring &amp; Hibernate for Beginners</li> <li>Spring Doc</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/","title":"Spring MVC XML Configuration","text":"","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#spring_mvc_xml_configuration_process","title":"Spring MVC XML Configuration Process","text":"<ul> <li>When we create an new Spring MVC project. There are some steps that we need to setup as below.<ul> <li>Add configurations to file <code>WEB-INF/web.xml</code>.<ul> <li>Configure Spring MVC Dispatcher Servlet.</li> <li>Set up URL mappings to Spring MVC Dispatcher Servlet.</li> </ul> </li> <li>Add configurations to file: <code>WEB-INF/spring-mvc-servlet.xml</code><ul> <li>Add support for Spring component scanning.</li> <li>Add support for conversion, formatting and validation.</li> <li>Configure Spring MVC View Resolver.</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#configure_spring_dispacherservlet","title":"Configure Spring DispacherServlet","text":"<ul> <li>If you haven't what is the <code>DispacherServlet</code>. You can  view more here</li> <li>So to configure the DispatcherServlet, firstly, we have to create a folder <code>WEB-INF</code> which is located in the folder <code>src/main/webapp/</code>. Then in the <code>src/main/webapp/WEB-INF/</code> folder we will create the <code>web.xml</code> configuration file as below.</li> </ul> web.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\"\n         metadata-complete=\"true\"&gt;\n\n    &lt;display-name&gt;spring-mvc-xml-configuration&lt;/display-name&gt;\n\n&lt;!--    Spring MVC Configs--&gt;\n\n&lt;!--    Step 1: Configure Spring MVC Dispatcher Servlet--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;/WEB-INF/spring-mvc-xml-configuration-servlet.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n&lt;/web-app&gt;\n</code></pre> <ul> <li>The\u00a0<code>WEB-INF</code>\u00a0directory contains the deployment descriptors for the Web application (<code>web.xml</code>\u00a0and\u00a0<code>weblogic.xml</code>) and two subdirectories for storing compiled Java classes and library JAR files. These subdirectories are respectively named\u00a0<code>classes</code>\u00a0and\u00a0<code>lib</code></li> <li>So in the <code>web.xml</code> we will configure a servlet which will use the class <code>DispatcherServlet</code> with a parameter is <code>contextConfigLocation</code> and the value is the path to a configuration file also in the <code>WEB-INF</code> folder, but this file will contain all of our Spring Web MVC-specific components (beans).</li> <li>Then we configure the <code>load-on-startup</code> with value is 1. The\u00a0load-on-startup\u00a0element of\u00a0web-app\u00a0loads the servlet at the time of deployment or server start if value is positive. It is also known as\u00a0pre initialization of servlet. </li> <li>We can pass positive and negative value for the servlet. <ul> <li>If we pass the positive value, the lower integer value servlet will be loaded before the higher integer value servlet. In other words, container loads the servlets in ascending integer value. The 0 value will be loaded first then 1, 2, 3 and so on.</li> <li>If we pass the negative value, servlet will be loaded at request time, at first request.</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#set_up_url_mappings_to_spring_mvc_dispatcher_servlet","title":"Set up URL mappings to Spring MVC Dispatcher Servlet","text":"<ul> <li>Now, in the <code>web.xml</code> we will continue to set up URL mappings to Spring MVC Dispatcher Servlet as below.</li> </ul> web.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\"\n         metadata-complete=\"true\"&gt;\n\n    &lt;display-name&gt;spring-mvc-xml-configuration&lt;/display-name&gt;\n\n&lt;!--    Spring MVC Configs--&gt;\n\n&lt;!--    Step 1: Configure Spring MVC Dispatcher Servlet--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;/WEB-INF/spring-mvc-xml-configuration-servlet.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n&lt;!--    Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet--&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre> <ul> <li>So we will use tag <code>&lt;servlet-mapping&gt;</code> to map the <code>dispatcher</code>  servlet to the url <code>/</code>. It means we will catch all requests from the client and bind them to the <code>dispatcher</code> servlet and when the <code>dispatcher</code> servlet is creating, it will load an init param which has name <code>contextConfigLocation</code> and the value of it this the path to another config file <code>spring-mvc-xml-configuration-servlet.xml</code>.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#add_support_for_spring_component_scanning","title":"Add Support For Spring Component Scanning","text":"<ul> <li>Now, let's create the configuration file <code>spring-mvc-xml-configuration-servlet.xml</code> in the <code>src/main/webapp/WEB-INF/</code> with the configuration for supporting Spring Component Scanning as below.</li> </ul> spring-mvc-xml-configuration-servlet.xml<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n         http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/context\n         http://www.springframework.org/schema/context/spring-context.xsd\n         http://www.springframework.org/schema/mvc\n         http://www.springframework.org/schema/mvc/spring-mvc.xsd\n         http://www.springframework.org/schema/aop\n         http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;\n\n\n    &lt;!-- Step 3: Add support for component scanning --&gt;\n    &lt;context:component-scan base-package=\"com.spring.core.spring.mvc.xml.configuration\" /&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>As you can see, we will use the tag <code>context:component-scan</code> and property <code>base-package</code> with the value is the package that we want Spring Framework to scan.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#add_support_for_conversion_formatting_and_validation","title":"Add Support For Conversion, Formatting and Validation.","text":"<ul> <li>Next, we will continue to add the configuration for supporting Conversion, Formatting and Validation into the <code>spring-mvc-xml-configuration-servlet.xml</code> as below.</li> </ul> <pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n         http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/context\n         http://www.springframework.org/schema/context/spring-context.xsd\n         http://www.springframework.org/schema/mvc\n         http://www.springframework.org/schema/mvc/spring-mvc.xsd\n         http://www.springframework.org/schema/aop\n         http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;\n\n\n    &lt;!-- Step 3: Add support for component scanning --&gt;\n    &lt;context:component-scan base-package=\"com.spring.core.spring.mvc.xml.configuration\" /&gt;\n\n    &lt;!-- Step 4: Add support for conversion, formatting and validation support --&gt;\n    &lt;mvc:annotation-driven/&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>We will use the tag \u00a0<code>&lt;mvc:annotation-driven&gt;</code> to enable MVC configuration, so it means that we will registers a number of Spring MVC infrastructure beans and adapts to dependencies available on the classpath (for example, payload converters for JSON, XML, and others).</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#configure_spring_mvc_view_resolver","title":"Configure Spring MVC View Resolver","text":"<ul> <li>Finally,  let's add the configuration for configuring the Spring MVC View Resolver as below.</li> </ul> <pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n         http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/context\n         http://www.springframework.org/schema/context/spring-context.xsd\n         http://www.springframework.org/schema/mvc\n         http://www.springframework.org/schema/mvc/spring-mvc.xsd\n         http://www.springframework.org/schema/aop\n         http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;\n\n\n    &lt;!-- Step 3: Add support for component scanning --&gt;\n    &lt;context:component-scan base-package=\"com.spring.core.spring.mvc.xml.configuration\" /&gt;\n\n    &lt;!-- Step 4: Add support for conversion, formatting and validation support --&gt;\n    &lt;mvc:annotation-driven/&gt;\n\n    &lt;!-- Step 5: Define Spring MVC view resolver --&gt;\n    &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/view\"/&gt;\n        &lt;property name=\"suffix\" value=\".jsp\"/&gt;\n     &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>We will create a bean <code>internalResourceViewResolver</code> from the using the class <code>org.springframework.web.servlet.view.InternalResourceViewResolver</code> with 2 properties <code>prefix</code> and <code>suffix</code>. <ul> <li>In which the <code>prefix</code> will contain the path to the folder that contains <code>views</code> (Ex: <code>/WEB-INF/views</code>).</li> <li>The <code>suffix</code> has the value is the type of the file used for the view (Ex: <code>.jsp</code>).</li> </ul> </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#example_with_spring_mvc_xml_configuration","title":"Example With Spring MVC XML Configuration","text":"<ul> <li>So let's take the example for Spring MVC XML configuration. Let's create a maven project and follow steps below.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#dependencies","title":"Dependencies","text":"<ul> <li>Let's create the <code>pom.xml</code> with the content as below.</li> </ul> pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;com.spring.core&lt;/artifactId&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/parent&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;artifactId&gt;spring-mvc-xml-configuration&lt;/artifactId&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.3.24&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;webXml&gt;src/main/webapp/WEB-INF/web.xml&lt;/webXml&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <ul> <li>Firstly, we would like to package our project to <code>.war</code> file by using tag <code>packaging</code> instead of <code>.jar</code> (default) because we will use this <code>.war</code> file to deploy to Tomcat Server.</li> <li>Next, we will use the dependency <code>spring-webmvc</code> to use Spring MVC framework.</li> <li>Finally, we will use the plugin below, for supporting building <code>.war</code> file, we also have to configure path to the file <code>web.xml</code> that we are going to create in the next steps. With this plugin, our <code>.war</code> file will be packaged will all references and supported libraries, classes and configuration files.</li> </ul> <pre><code>&lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n        &lt;configuration&gt;\n                &lt;webXml&gt;src/main/webapp/WEB-INF/web.xml&lt;/webXml&gt;\n        &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#configure_webxml","title":"Configure web.xml","text":"<ul> <li>Now, let's create the <code>WEB-INF</code> folder with the structure <code>src/main/webapp/WEB-INF</code> that we configured in the <code>pom.xml</code> as below.</li> </ul> <ul> <li>Then inside the <code>WEB-INF</code> we will create the <code>web.xml</code> file for <code>configuring the DispacherServlet</code> and <code>set up URL mappings to Spring MVC Dispatcher Servlet</code>  as below.</li> </ul> web.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\"\n         metadata-complete=\"true\"&gt;\n\n    &lt;display-name&gt;spring-mvc-xml-configuration&lt;/display-name&gt;\n\n&lt;!--    Spring MVC Configs--&gt;\n\n&lt;!--    Step 1: Configure Spring MVC Dispatcher Servlet--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;/WEB-INF/spring-mvc-xml-configuration-servlet.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n&lt;!--    Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet--&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre> <ul> <li>So we you can see, in the dispatcher servlet configuration we will load Spring MVC configuration file <code>spring-mvc-xml-configuration-servlet.xml</code>. So, let's create this file on the next step.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#configure_spring-mvc-xml-configuration-servletxml","title":"Configure spring-mvc-xml-configuration-servlet.xml","text":"<ul> <li>Now, let's create the configuration file <code>spring-mvc-xml-configuration-servlet.xml</code> in the <code>src/main/webapp/WEB-INF/</code> with the configurations for supporting <code>Spring Component Scanning</code>, <code>Spring MVC configuration supports</code> and <code>Spring MVC view resolver</code> as below.</li> </ul> spring-mvc-xml-configuration-servlet.xml<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n         http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/context\n         http://www.springframework.org/schema/context/spring-context.xsd\n         http://www.springframework.org/schema/mvc\n         http://www.springframework.org/schema/mvc/spring-mvc.xsd\n         http://www.springframework.org/schema/aop\n         http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;\n\n\n    &lt;!-- Step 3: Add support for component scanning --&gt;\n    &lt;context:component-scan base-package=\"com.spring.core.spring.mvc.xml.configuration\" /&gt;\n\n    &lt;!-- Step 4: Add support for conversion, formatting and validation support --&gt;\n    &lt;mvc:annotation-driven/&gt;\n\n    &lt;!-- Step 5: Define Spring MVC view resolver --&gt;\n    &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/views/\"/&gt;\n        &lt;property name=\"suffix\" value=\".jsp\"/&gt;\n     &lt;/bean&gt;\n\n\n&lt;/beans&gt;\n</code></pre> <ul> <li>As you can see, in the <code>Define Spring MVC view resolver</code> we configured to use <code>.jsp</code> file for <code>view</code> in the path <code>/WEB-INF/views/</code>. So let's create it in the next step.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#create_views","title":"Create Views","text":"<ul> <li>So, let's create the folder <code>views</code> inside the <code>WEB-INF</code> as below.</li> </ul> <ul> <li>Then inside the <code>views</code> we will create an example <code>welcome.jsp</code> with the content as below.</li> </ul> welcome.jsp<pre><code>&lt;%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\"\n    pageEncoding=\"US-ASCII\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n&lt;title&gt;First JSP&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h3&gt;Welcome ${name}&lt;/h3&gt;&lt;br&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>In this <code>welcome.jsp</code> file, we just simply map the value of variable name that we will define in the <code>Controller</code>.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#create_controller","title":"Create Controller","text":"<ul> <li> <p>Next, let's create a controller class in side the parent package <code>com.spring.core.spring.mvc.xml.configuration</code> that we configured in the <code>spring-mvc-xml-configuration-servlet.xml</code> file.</p> </li> <li> <p>The created controller <code>WelcomeController</code> will have the content as below.</p> </li> </ul> WelcomeController.java<pre><code>package com.spring.core.spring.mvc.xml.configuration.controller;  \n\nimport org.springframework.stereotype.Controller;  \nimport org.springframework.ui.ModelMap;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \n\n@Controller  \npublic class WelcomeController {  \n\n    @RequestMapping(\"/welcome\")  \n    public String welcome(ModelMap modelMap) {  \n        modelMap.addAttribute(\"name\", \"Duc\");  \n        return \"welcome\";  \n    }  \n\n}\n</code></pre> <ul> <li>We can annotate classic controllers with the <code>@Controller</code> annotation. This is simply a specialization of the <code>@Component</code> class, which allows us to auto-detect implementation classes through the classpath scanning.</li> <li>We typically use <code>@Controller</code> in combination with a <code>@RequestMapping</code> annotation for request handling methods.</li> <li>In the api <code>/welcome</code>, we just simply add an attribute <code>name</code> with value <code>Duc</code> to the <code>welcome.jsp</code> view, the <code>return \"welcome\";</code> means we will use the file <code>welcome.jsp</code> in the <code>views</code> folder that we configured and the attribute <code>name</code> will be mapped with value <code>Duc</code> there.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#building_war_file","title":"Building War File","text":"<ul> <li>Now, let's run the command <code>mvn clean package</code> to package the <code>.war</code> file as below.</li> </ul> <ul> <li>So, in the <code>.war</code> file we can see, we already have all classes, libraries and configuration files. </li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#testing","title":"Testing","text":"<ul> <li>Finally, let's deploy this <code>.war</code> file into the Tomcat server and then go to the browser and put the url <code>http://localhost:8080/spring-mvc-xml-configuration/welcome</code> to check the successful result.</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#see_also","title":"See Also","text":"<ul> <li>Spring MVC Overview</li> <li>Spring Inversion Of Control</li> <li>Spring MVC XML Configuration</li> <li>Spring DispactcherServlet</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20MVC%20XML%20Configuration/#references","title":"References","text":"<ul> <li>Baeldung</li> <li>YouTube</li> <li>Spring &amp; Hibernate for Beginners</li> </ul>","tags":["Spring","SpringCore","SpringMVC"]},{"location":"Spring%20Core/Spring%20Overview/","title":"Spring Framework Overview","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#why_spring","title":"Why Spring?","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_in_a_nullshell","title":"Spring In A NullShell","text":"<ul> <li><code>Spring</code> is a very popular framework for building enterprise Java applications.</li> <li>Initial a simpler and lightweight alternative to J2EE.</li> <li>Provides a large number of helper classes and make thing easier.</li> <li>So for the reason <code>why Spring</code> we can say it simplifies Java Enterprise Development.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#what_is_the_j2ee","title":"What Is The J2EE?","text":"<ul> <li>The Java EE stands for <code>Java Enterprise Edition</code>, which was earlier known as J2EE and is currently known as Jakarta EE. It is a set of specifications wrapping around Java SE (Standard Edition). The Java EE provides a platform for developers with enterprise features such as distributed computing and web services. Java EE applications are usually run on reference run times such as microservers or application servers. Examples of some contexts where Java EE is used are e-commerce, accounting, banking information systems.</li> <li>Below is the 4 types of J2EE modules.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#what_is_the_java_se","title":"What Is The Java SE?","text":"<ul> <li>The SE stands for <code>Java Standard Edition</code> is a computing platform in which we can execute software, and it can be used for development and deployment of portable code for desktop and server environments. It has the Java programming language in use. It is part of Java software-platform family. Java SE has a variety of general purpose APIs and the Java Class Library. It is the core Java programming platform and provides all the libraries and APIs such as java.lang, java.io, java.math, java.net, java.util etc.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#java_ee_history","title":"Java EE History","text":"<ul> <li>Let's see the history of J2EE as in image below.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#ejb_complexity","title":"EJB Complexity","text":"<ul> <li>Early version of EJB V1 and V2 were extremely complex</li> <li>Multiple deployment descriptors</li> <li>Multiple interfaces</li> <li>Poor performance of Entity Beans</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#j2ee_without_ejb","title":"J2EE Without EJB","text":"<ul> <li>Rod Johnson is the founder of Spring who wrote 2 books.<ul> <li>J2EE development without EJB, Wrox Press</li> <li>Java Development with the Spring Framework, Worx Press</li> </ul> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#release_timeline","title":"Release Timeline","text":"<ul> <li>The JEE and Spring release timeline is showed as in the picture below.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_demand","title":"Spring Demand","text":"<ul> <li>Most of Java works today requires employee knows using Spring Framework and it will be an addition point for you in interviews.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_5","title":"Spring 5","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_5_release","title":"Spring 5 Release","text":"<ul> <li>In September 2017, Spring 5 was released.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_5_main_features","title":"Spring 5 Main Features","text":"<ul> <li>Update minimum requirements for Java 8 or higher</li> <li>Deprecated legacy integration for Tiles, Velocity, Portlet, Guava etc.</li> <li>Upgraded Spring MVC to use new version of Servlet Api 4.0</li> <li>Added new reactive programming framework: Spring WebFlux</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_core_framework","title":"Spring Core Framework","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#goals_of_spring","title":"Goals Of Spring","text":"<ul> <li>Lightweight development with Java POJOs (Plain Old Java Objects)</li> <li>Dependency injection to promote loose coupling</li> <li>Declarative programming with Aspect-Oriented-Programming (AOP)</li> <li>Minimize boilerplate Java code.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#core_container","title":"Core Container","text":"<ul> <li>Core container is the main item of Spring, it manages how beans are created, it has a bean factory for creating the beans and manage bean dependencies. It also can read config files for setting properties and dependencies.</li> <li>The context is the spring container that holds the beans in memory.</li> <li>The SpEL is the Spring Expression Language that we can use within the config files to refer to other beans.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#infrasturcture","title":"Infrasturcture","text":"<ul> <li>AOP (Aspect Oriented Programming), it allows you to create application-wide services like logging, security, transactions, instrumentation and then you can apply these services to your objects in a declarative fashion. You don't need to modify your code to have support for this, just need to add config file or annotation.</li> <li>The instrumentation module is used for creating Java agents to remotely monitor our app with JMX (Java Management Extension).</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#data_access_layer","title":"Data Access Layer","text":"<ul> <li>This is used for communicating with database either a relational database or a NoSQL database and also making use of like a message queue.</li> <li>On the top we have JDBC helper classes which will reduce your JDBC code by 50%.</li> <li>Next we have ORM (Object to Relation Mapping) module which allows us to hook into Hibernate or JPA</li> <li>JMS (Java Message Service) which allows us to send aynchronous messages to a Message Broker. This module provides helper classes for us to make use of the Java Message Service and we can reduce our code by over 50%.</li> <li>Transactions module is used for transaction support. Spring provides a transaction manager that we can make use of transactions on methods, on database calls and pretty much anything we want.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#web_layer","title":"Web Layer","text":"<ul> <li>The Web Layer contains all web related classes, it is the home of Spring MVC framework.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#test_layer","title":"Test Layer","text":"<ul> <li>Spring has supported for test-driven development, so the framework includes mock objects for mocking out servlet, JNDI access and so on and we can do all of this outside of the container.</li> <li>We can also make use of integration tests by creating an application context and wiring up our desired objects.</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#spring_projects","title":"Spring Projects","text":"","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#what_are_spring_projects","title":"What Are Spring Projects?","text":"<ul> <li>Spring Projects are additional Spring modules built-on top of the core Spring Framework.</li> <li> <p>Some Spring projects:</p> <ul> <li> Spring Cloud,  Spring Data</li> <li>Spring Batch,  Spring Security</li> <li>Spring For Android, Spring Web Flow</li> <li>Spring Web Services, Spring LDAP</li> </ul> </li> <li> <p>You can view more in this page</p> </li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Core/Spring%20Overview/#references","title":"References","text":"<ul> <li>JavaTPoint</li> <li>Spring &amp; Hibernate for Beginners</li> </ul>","tags":["Spring","SpringCore"]},{"location":"Spring%20Data/Application%20Managed%20Persistence%20Context/","title":"Application Managed Persistence Context Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Application%20Managed%20Persistence%20Context/#what_is_the_application_managed_persistence_context_introduction","title":"What is the Application Managed Persistence Context Introduction?","text":"<ul> <li>The <code>Application Managed Persistence Context</code> is managed by the application (JSE): The application is responsible for <code>Persistence Context</code> creation and disposal. The application is also required to ensure that the application created <code>Persistence Context</code> is aware of any eventual ongoing Transaction. An <code>Application Managed Persistence Context scope</code> is always <code>Extended persistence scope</code>.</li> <li>For the <code>Application Managed Persistence Context</code>, developers have to create each time the EntityManager from the <code>EntityManagerFactory</code>. They have more control over the flow, but also more responsibilities (e.g. they have to remember to close the <code>EntityManager</code>, they have to explicitly call commit and rollback operations).</li> <li>You can find more here</li> <li>You can find more here</li> <li>You can find more here</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Application%20Managed%20Persistence%20Context/#see_also","title":"See Also","text":"<ul> <li>Entity</li> <li>EntityManager</li> <li>Transaction</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Application%20Managed%20Persistence%20Context/#references","title":"References","text":"<ul> <li>BytesLounge</li> <li>Vincenzoracca</li> <li>IBM Doc</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Auditing%20With%20Hibernate%20Envers/","title":"Auditing With Hibernate Envers","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Auditing%20With%20Hibernate%20Envers/#what_is_the_hibernate_envers","title":"What Is The Hibernate Envers?","text":"<ul> <li> <p>The Envers project aims to enable easy auditing of persistent classes. All that you have to do is annotate your persistent class or some of its properties, that you want to audit, with\u00a0<code>@Audited</code>. For each audited entity, a table will be created, which will hold the history of changes made to the entity. You can then retrieve and query historical data without much effort.</p> </li> <li> <p>Similarly to Subversion, the library has a concept of revisions. Basically, one transaction is one revision (unless the transaction didn't modify any audited entities). As the revisions are global, having a revision number, you can query for various entities at that revision, retrieving a (partial) view of the database at that revision. You can find a revision number having a date, and the other way round, you can get the date at which a revision was commited.</p> </li> <li> <p>The library works with Hibernate and requires Hibernate Annotations or Entity Manager. For the auditing to work properly, the entities must have immutable unique identifiers (primary keys). You can use Envers wherever Hibernate works: standalone, inside JBoss AS, with JBoss Seam or Spring.</p> </li> <li>Some of the features:<ul> <li>Auditing of all mappings defined by the JPA specification.</li> <li>Auditing of Hibernate mappings, which extend JPA, like custom types and collections/maps of \"simple\" types (Strings, Integers, etc.).</li> <li>Logging data for each revision using a \"revision entity\".    </li> <li>Querying historical data.</li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Auditing%20With%20Hibernate%20Envers/#implementations","title":"Implementations","text":"<ul> <li>Hibnerate Envers With JPA</li> <li>Get Hibernate Envers Audit Data</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Auditing%20With%20Hibernate%20Envers/#references","title":"References","text":"<ul> <li>HibernateEnver</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Container%20Managed%20Persistence%20Context/","title":"Container Managed Persistence Context Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Container%20Managed%20Persistence%20Context/#what_is_the_container_managed_persistence_context","title":"What Is The Container Managed Persistence Context?","text":"<ul> <li>The <code>Container Managed Persistence Context</code> - as the name states - is managed by the enterprise container (JEE Container or Spring). The container is responsible for <code>Persistence Context</code> injection into enterprise components, and is also responsible for its disposal at the end of the current Transaction. <code>Container-managed persistence context</code> might be defined to have one of two different scopes: <code>Transaction persistence scope</code> or <code>Extended persistence scope</code>.</li> <li>The container, before performing an operation on the Entity, checks if there is a <code>Persistence Context</code> connected to the <code>transaction</code>; if not present, it creates a new <code>Persistence Context</code> (session) and connects it. In practice, an EntityManager is automatically created for each new <code>transaction</code>. Operations such as commits and rollbacks are handled automatically by the Container.</li> <li>You can find more here</li> <li>You can find more here</li> <li>You can find more here</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Container%20Managed%20Persistence%20Context/#see_also","title":"See Also","text":"<ul> <li>Entity</li> <li>EntityManager</li> <li>Transaction</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Container%20Managed%20Persistence%20Context/#references","title":"References","text":"<ul> <li>BytesLounge</li> <li>Vincenzoracca</li> <li>IBM Doc</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Database%20Migrations%20with%20Flyway/","title":"Database Migrations with Flyway","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Database%20Migrations%20with%20Flyway/#what_is_the_flyway","title":"What Is The FlyWay?","text":"<ul> <li><code>Flyway</code> is an open-source database migration tool. It strongly favors simplicity and convention over configuration.</li> <li><code>Migrations</code> can be written in\u00a0SQL (PL/SQL, T-SQL, ... is supported) or in Java\u00a0for advanced data transformations.</li> <li>More Information</li> <li>With <code>Flyway</code> all changes to the database are called\u00a0migrations. Migrations can be either\u00a0<code>versioned</code>\u00a0or\u00a0<code>repeatable</code>. Versioned migrations come in 2 forms: regular and\u00a0undo.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Database%20Migrations%20with%20Flyway/#why_flyway","title":"Why Flyway?","text":"<ul> <li> <p>So, why do we need to use flyway? let's image that you are developing an application on DEV environment, then you need to deploy your application on TEST environment. On DEV environment you know that your application with version 1.0 will work perfectly and ready for testing. However, on DEV you are testing your application with version 2.0 and the table structures in the database of this version is quite different with the version 1.0. So you have to find a way to prepare the correct table structures of version 1.0 for the TEST environment.</p> <ul> <li>You have to trace back the source code or recheck the US to find what is the correct table structures when you worked with version 1.0.</li> <li>When you have the correct tables structures, you have to go to TEST database and use SQL scripts to initialize tables.</li> <li>If you don't note what did you do so in future you can forget or other teammates or other new member will not know  what SQL scripts of table structures that you applied into TEST database, version 1.0 or 1.1 or 1.2..etc?</li> <li>It is hard for you to maintain table structures of database following versions of your application.</li> <li>If you checkout another version of your source code and you do some test and got errors. You will usually received the question like this: What state is the database in this machine?</li> </ul> </li> <li> <p>So Database Migrations with Flyway will be a great way to control your database. With flyway, you can:</p> <ul> <li>Recreate a database from scratch.</li> <li>Make it clear at all times what state a database is in.</li> <li>Migrate in a deterministic way from your current version of the database to a newer one.</li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Database%20Migrations%20with%20Flyway/#flyway_in_details","title":"Flyway In Details","text":"<ul> <li>Flyway Migrations<ul> <li>Flyway Versioned Migrations<ul> <li>Flyway Regular Versioned Migration Example</li> </ul> </li> <li>Flyway Repeatable Migrations</li> <li>Flyway SQL-based Migrations</li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Database%20Migrations%20with%20Flyway/#references","title":"References","text":"<ul> <li>Flaywaydb.org</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Entity/","title":"Entity Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Entity/#what_is_the_entity","title":"What Is The Entity?","text":"<ul> <li><code>Entity</code> objects: An entity is a simple Java class that represents a row in a database table.</li> <li><code>Entities</code> can be concrete classes or abstract classes. They maintain states by using properties or fields.</li> <li>So in <code>Entity</code> classes we will use a lot of mapping annotations from JPA, you can review these annotations in the table below:</li> </ul> Annotation Description @Entity The @Entity annotation is used to specify that the currently annotated class represents an entity type. Unlike basic and embeddable types, entity types have an identity and their state is managed by the underlying Persistence Context. @Table The @Table annotation is used to specify the primary table of the currently annotated entity. @Id The @Id annotation specifies the entity identifier. An entity must always have an identifier attribute which is used when loading the entity in a given Persistence Context. @GeneratedValue The @GeneratedValue annotation specifies that the entity identifier value is automatically generated using an identity column, a database sequence, or a table generator. Hibernate supports the @GeneratedValue mapping even for UUID identifiers. @Type The @Type annotation is used to specify the Hibernate @Type used by the currently annotated basic attribute. @Column The @Column annotation is used to specify the mapping between a basic entity attribute and the database table column. @Enumerated The @Enumerated annotation is used to specify that an entity attribute represents an enumerated type. In which, ORDINAL: stored according to the enum value\u2019s ordinal position within the enum class, as indicated by java.lang.Enum#ordinal STRING: stored according to the enum value\u2019s name, as indicated by java.lang.Enum#name @OneToMany The @OneToMany annotation is used to specify a one-to-many database relationship. @ManyToOne The @ManyToOne annotation is used to specify a many-to-one database relationship. @JoinColumn The @JoinColumn annotation is used to specify the FOREIGN KEY column used when joining an entity association or an embeddable collection. @PrePersist The @PrePersist annotation is used to specify a callback method that fires before an entity is persisted. @PreUpdate The @PreUpdate annotation is used to specify a callback method that fires before an entity is updated. <ul> <li>You can find more here.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Entity/#entity_example","title":"Entity Example","text":"<ul> <li>We will create entities which represent for 3 tables in the database.</li> </ul> <ul> <li>Note: You don't need to create these 3 tables in the database because JPA will create for you automatically when the Spring Boot application has started.</li> <li>So in Entity classes we will use a lot of mapping annotations from JPA, so you can review these annotations in the table below:</li> </ul> Annotation Description @Entity The @Entity annotation is used to specify that the currently annotated class represents an entity type. Unlike basic and embeddable types, entity types have an identity and their state is managed by the underlying Persistence Context. @Table The @Table annotation is used to specify the primary table of the currently annotated entity. @Id The @Id annotation specifies the entity identifier. An entity must always have an identifier attribute which is used when loading the entity in a given Persistence Context. @GeneratedValue The @GeneratedValue annotation specifies that the entity identifier value is automatically generated using an identity column, a database sequence, or a table generator. Hibernate supports the @GeneratedValue mapping even for UUID identifiers. @Type The @Type annotation is used to specify the Hibernate @Type used by the currently annotated basic attribute. @Column The @Column annotation is used to specify the mapping between a basic entity attribute and the database table column. @Enumerated The @Enumerated annotation is used to specify that an entity attribute represents an enumerated type. In which, ORDINAL: stored according to the enum value\u2019s ordinal position within the enum class, as indicated by java.lang.Enum#ordinal STRING: stored according to the enum value\u2019s name, as indicated by java.lang.Enum#name @OneToMany The @OneToMany annotation is used to specify a one-to-many database relationship. @ManyToOne The @ManyToOne annotation is used to specify a many-to-one database relationship. @JoinColumn The @JoinColumn annotation is used to specify the FOREIGN KEY column used when joining an entity association or an embeddable collection. @PrePersist The @PrePersist annotation is used to specify a callback method that fires before an entity is persisted. @PreUpdate The @PreUpdate annotation is used to specify a callback method that fires before an entity is updated. <ul> <li> <p>You can find more here.</p> </li> <li> <p>The fist Entity is <code>CustomerEntity</code>, this Entity will be the parent of <code>OrderEntity</code> and one <code>CustomerEntity</code> will have many <code>OrderEntity</code>. The <code>CustomerEntity</code> java class will look like the code below.</p> </li> </ul> CustomerEntity.java<pre><code>package com.springboot.data.jpa.app.entity;\n\nimport com.springboot.data.jpa.app.model.response.CustomerResponse;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n//The @Entity annotation is used to specify that the currently annotated class represents an entity type. Unlike basic and embeddable types, entity types have an identity and their state is managed by the underlying Persistence Context.\n@Entity\n//The @Table annotation is used to specify the primary table of the currently annotated entity.\n@Table(name = \"customers\")\npublic class CustomerEntity {\n\n    //The @Id annotation specifies the entity identifier. An entity must always have an identifier attribute which is used when loading the entity in a given Persistence Context.\n    @Id\n    //The @GeneratedValue annotation specifies that the entity identifier value is automatically generated using an identity column, a database sequence, or a table generator. Hibernate supports the @GeneratedValue mapping even for UUID identifiers.\n    @GeneratedValue\n    //The @Type annotation is used to specify the Hibernate @Type used by the currently annotated basic attribute.\n    @Type(type=\"uuid-char\")\n    private UUID id;\n    private String fullName;\n    //The @Column annotation is used to specify the mapping between a basic entity attribute and the database table column.\n    @Column(unique = true)\n    private String email;\n    private String address;\n    private String phone;\n    //The @Enumerated annotation is used to specify that an entity attribute represents an enumerated type.\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    //The @OneToMany annotation is used to specify a one-to-many database relationship.\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders = new ArrayList&lt;&gt;();\n\n    public UUID getId() {\n        return id;\n    }\n\n    public void setId(UUID id) {\n        this.id = id;\n    }\n\n    public String getFullName() {\n        return fullName;\n    }\n\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public Gender getGender() {\n        return gender;\n    }\n\n    public void setGender(Gender gender) {\n        this.gender = gender;\n    }\n\n    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob;\n    }\n\n    public List&lt;OrderEntity&gt; getOrders() {\n        return orders;\n    }\n\n    public void setOrders(List&lt;OrderEntity&gt; orders) {\n        this.orders = orders;\n    }\n}\n</code></pre> <ul> <li>Next we will create <code>OrderEntity</code>, so this Entity will be the parent of <code>ItemEntity</code> and One <code>OrderEntity</code> will have many <code>ItemEntity</code>. The <code>OrderEntity</code> java class will be look like as below</li> </ul> OrderEntity.java<pre><code>package com.springboot.data.jpa.app.entity;\n\nimport com.springboot.data.jpa.app.model.response.OrderResponse;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.PrePersist;\nimport javax.persistence.PreUpdate;\nimport javax.persistence.Table;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"orders\")\npublic class OrderEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String orderName;\n\n    private LocalDateTime createdDate;\n\n    private LocalDateTime lastUpdatedDate;\n\n    @Enumerated(value = EnumType.STRING)\n    private OrderStatus orderStatus;\n\n    //The @ManyToOne annotation is used to specify a many-to-one database relationship.\n    @ManyToOne(fetch = FetchType.LAZY)\n    //The @JoinColumn annotation is used to specify the FOREIGN KEY column used when joining an entity association or an embeddable collection.\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List&lt;ItemEntity&gt; items = new ArrayList&lt;&gt;();\n\n\n    public UUID getId() {\n        return id;\n    }\n\n    public void setId(UUID id) {\n        this.id = id;\n    }\n\n    public String getOrderName() {\n        return orderName;\n    }\n\n    public void setOrderName(String orderName) {\n        this.orderName = orderName;\n    }\n\n    public CustomerEntity getCustomer() {\n        return customer;\n    }\n\n    public void setCustomer(CustomerEntity customer) {\n        this.customer = customer;\n    }\n\n    public LocalDateTime getCreatedDate() {\n        return createdDate;\n    }\n\n    @PrePersist\n    private void setCreatedDate() {\n        LocalDateTime localDateTime = LocalDateTime.now();\n        this.createdDate = localDateTime;\n        this.lastUpdatedDate = localDateTime;\n    }\n\n    public LocalDateTime getLastUpdatedDate() {\n        return lastUpdatedDate;\n    }\n\n    @PreUpdate\n    private void setLastUpdatedDate() {\n        this.lastUpdatedDate = LocalDateTime.now();\n    }\n\n    public OrderStatus getOrderStatus() {\n        return orderStatus;\n    }\n\n    public void setOrderStatus(OrderStatus orderStatus) {\n        this.orderStatus = orderStatus;\n    }\n\n    public List&lt;ItemEntity&gt; getItems() {\n        return items;\n    }\n\n    public void setItems(List&lt;ItemEntity&gt; items) {\n        this.items = items;\n    }\n\n}\n</code></pre> <ul> <li>Next we will create <code>ItemEntity</code>. The <code>OrderEntity</code> java class will be look like as below</li> </ul> ItemEntity.java<pre><code>package com.springboot.data.jpa.app.entity;\n\nimport com.springboot.data.jpa.app.model.response.ItemResponse;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"items\")\npublic class ItemEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String itemName;\n\n    private Long quantity;\n\n    private Float price;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\")\n    private OrderEntity order;\n\n    public UUID getId() {\n        return id;\n    }\n\n    public void setId(UUID id) {\n        this.id = id;\n    }\n\n    public String getItemName() {\n        return itemName;\n    }\n\n    public void setItemName(String itemName) {\n        this.itemName = itemName;\n    }\n\n    public Long getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(Long quantity) {\n        this.quantity = quantity;\n    }\n\n    public Float getPrice() {\n        return price;\n    }\n\n    public void setPrice(Float price) {\n        this.price = price;\n    }\n\n    public OrderEntity getOrder() {\n        return order;\n    }\n\n    public void setOrder(OrderEntity order) {\n        this.order = order;\n    }\n}\n</code></pre> <ul> <li>So that's all for creating Entities and relationships.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManager/","title":"EntityManager Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManager/#what_is_the_entitymanager","title":"What Is The EntityManager?","text":"<ul> <li> <p><code>EntityManager</code>: The resource manager that maintains the active collection of Entity objects that are being used by the application. The <code>EntityManager</code> handles the database interaction and metadata for <code>object-relational mappings (ORM)</code> . An instance of an <code>EntityManager</code> represents a Persistence Context. </p> <ul> <li>An <code>application in a container</code> can obtain the <code>EntityManage</code> through injection into the application or by looking it up in the Java component name-space. </li> <li>If the application manages its persistence, the <code>EntityManager</code> is obtained from the <code>EntityManagerFactory</code> .</li> </ul> </li> <li> <p>In JPA, the <code>EntityManager</code> interface is used to allow applications to manage and search for entities in the relational database.</p> <ul> <li>The <code>EntityManager</code> is an API that manages the life-cycle of Entity instances. An <code>EntityManager</code> object manages a set of entities that are defined by a Persistence Unit. Each <code>EntityManager</code> instance is associated with a <code>persistence context</code>. A <code>persistence context</code> defines the scope under which particular entity instances are created, persisted, and removed through the APIs made available by <code>EntityManager</code>. In some ways, a <code>persistence context</code> is conceptually similar to a transaction context.</li> <li>The <code>EntityManager</code> tracks all Entity objects within a<code>persistence context</code> for changes and updates that are made, and flushes these changes to the database. Once a <code>persistence context</code> is closed, all managed entity object instances become detached from the <code>persistence context</code> and its associated <code>entity manager</code>, and are no longer managed. Once an object is detached from a <code>persistence context</code>, it can no longer be managed by an <code>entity manager</code>, and any state changes to this object instance will not be synchronized with the database.</li> <li>There's always a new <code>Persistence Context</code> if there's a new <code>EntityManager</code>.</li> </ul> </li> <li> <p>You can view more here</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManager/#see_also","title":"See Also","text":"<ul> <li>Entity</li> <li>Persistence Unit</li> <li>Persistence Context</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManager/#references","title":"References","text":"<ul> <li>IBM Doc</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManagerFactory/","title":"EntityManagerFactory Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManagerFactory/#what_is_the_entitymanagerfactory","title":"What Is The EntityManagerFactory?","text":"<ul> <li><code>EntityManagerFactory</code>: Used to create an EntityManager for database interactions. An instance of an EntityManager represents a Persistence Context.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/EntityManagerFactory/#see_also","title":"See Also","text":"<ul> <li>EntityManager</li> <li>Persistence Context</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Migrations/","title":"Flyway Migrations","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Migrations/#migrations","title":"Migrations","text":"<ul> <li>With <code>Flyway</code> all changes to the database are called\u00a0<code>migrations</code>. <code>Migrations</code> can be either\u00a0<code>versioned</code>\u00a0or\u00a0<code>repeatable</code>. <code>Versioned migrations</code> come in 2 forms: <code>regular</code> and\u00a0<code>undo</code>.</li> <li>Flyway Versioned Migrations\u00a0have a\u00a0<code>version</code>, a\u00a0<code>description</code>\u00a0and a\u00a0<code>checksum</code>. The version must be unique. The description is purely informative for you to be able to remember what each migration does. The checksum is there to detect accidental changes. Versioned migrations are <code>the most common type of migration</code>. They are applied in order exactly once.</li> <li> <p>Optionally their effect can be undone by supplying an\u00a0 undo migration \u00a0with the same version.</p> </li> <li> <p>Flyway Repeatable Migrations\u00a0have a <code>description</code> and a <code>checksum</code>, but no version. Instead of being run just once, they are (re-)applied every time their checksum changes.</p> </li> <li>Within a single migration run, repeatable migrations are always applied last, after all pending versioned migrations have been executed. Repeatable migrations are applied in the order of their description.</li> <li> <p>By default both <code>versioned</code> and <code>repeatable migrations</code> can be written either in SQL (see Flyway SQL-based Migrations)\u00a0or in\u00a0Java\u00a0and can consist of multiple statements.</p> </li> <li> <p>Flyway automatically discovers migrations on the\u00a0<code>filesystem</code>\u00a0and on the Java\u00a0<code>classpath</code>.</p> </li> <li> <p>To keep track of which migrations have already been applied when and by whom, Flyway adds a\u00a0<code>schema history table</code>\u00a0to your schema.</p> </li> <li> <p>More information</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Migrations/#see_also","title":"See Also","text":"<ul> <li>Flyway Versioned Migrations</li> <li>Flyway Repeatable Migrations</li> <li>Flyway SQL-based Migrations</li> <li>Database Migrations with Flyway</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Migrations/#references","title":"References","text":"<ul> <li>Flywaydb.org</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/","title":"Flyway Regular Versioned Migration Example","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#regular_versioned_migration_with_spring_boot","title":"Regular Versioned Migration With Spring Boot","text":"<ul> <li>In this example, we will use flyway with Flyway Versioned Migrations and  SQL-based migrations for  Spring Boot service.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#dependencies","title":"Dependencies","text":"<ul> <li>To use Flyway in Spring Boot, we need to add the dependencies as below:</li> </ul> pom.xml<pre><code>    &lt;!--flyway dependency--&gt;\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n            &lt;version&gt;8.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#configuration","title":"CONFIGURATION","text":"<ul> <li>In this example, we will use mysql database and  JPA. So we will need to add some configurations below into our <code>application.yml</code></li> </ul> application.yml<pre><code>spring:\n  datasource:\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/customer?useSSL=false\n    username: root\n    password: password\n  jpa:\n    hibernate.ddl-auto: none\n    hibernate.dialect: org.hibernate.dialect.MySQL5Dialect\n    generate-ddl: true\n    show-sql: false\n  flyway:\n#    enabled: true\n#    baselineOnMigrate: true\n    driverClassName: ${spring.datasource.driverClassName}\n    url: ${spring.datasource.url}\n    user: ${spring.datasource.username}\n    password: ${spring.datasource.password}\n    locations: classpath:db/migration\n</code></pre> <ul> <li>As you can see, we will stop using <code>ddl-auto</code> of JPA by set <code>none</code> value, because we want to control our table structures by Flyway with versions, not from the  Entities relationships.</li> <li>In <code>flyway</code> configuration, we will need to reuse configurations from the <code>datasource</code> such as <code>url</code>, <code>username</code>, <code>password</code> and <code>driverClassName</code>. By default, the <code>flyway.enabled</code> will be <code>true</code>.</li> <li>In the <code>locations</code> field, you will put your path from your <code>resources</code> to the directory that contains <code>migration</code> files.</li> </ul> <ul> <li>For the <code>baselineOnMigrate</code> we will have another topic about it.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#create_migration_file","title":"Create Migration File","text":"<ul> <li>We are using <code>Versioned Migration</code> so we will set the name of migration file as below.</li> </ul> <p><pre><code>V1.0_20220426223800__Initial_Table.sql\n</code></pre> - View more about naming in  Flyway SQL-based Migrations. - In which:     -  <code>V</code> is the prefix which used for <code>Versioned Migration</code>.     - <code>1.0_20220426223800</code> is the version with timestamp.     - <code>__</code> is the separator.     - <code>Initial_Table</code> is the description.     - <code>.sql</code> is the suffix.</p> <ul> <li>Then, in the migration file, we should put the the SQL scripts for creating table as below:</li> </ul> <pre><code>CREATE TABLE `customers` (\n  `id` varchar(255) NOT NULL,\n  `address` varchar(255) DEFAULT NULL,\n  `dob` datetime(6) DEFAULT NULL,\n  `email` varchar(255) DEFAULT NULL,\n  `fullName` varchar(255) DEFAULT NULL,\n  `phone` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#testing_1","title":"Testing 1","text":"<ul> <li>Now, let's start your Spring Boot service and go to your database. You should see there are two tables that created.</li> </ul> <pre><code>mysql&gt; show tables;\n+-----------------------+\n| Tables_in_customer    |\n+-----------------------+\n| customers             |\n| flyway_schema_history |\n+-----------------------+\n2 rows in set (0.00 sec)\n</code></pre> <ul> <li><code>mysql&gt; describe customers;</code></li> </ul> Field Type Null Key Default Extra id varchar(255) NO PRI NULL address varchar(255) YES NULL dob datetime(6) YES NULL email varchar(255) YES NULL fullName varchar(255) YES NULL phone varchar(255) YES NULL full_name varchar(255) YES NULL <p>-<code>mysql&gt; describe flyway_schema_history;</code></p> Field Type Null Key Default Extra installed_rank int NO PRI NULL version varchar(50) YES NULL description varchar(200) NO NULL type varchar(20) NO NULL script varchar(1000) NO NULL checksum int YES NULL installed_by varchar(100) NO NULL installed_on timestamp NO CURRENT_TIMESTAMP DEFAULT_GENERATED execution_time int NO NULL success tinyint(1) NO MUL NULL <ul> <li>Now, let's check the table <code>flyway_schema_history</code> then you can see one record is saved.</li> </ul> <p><code>mysql&gt; select * from flyway_schema_history;</code></p> installed_rank version description type script checksum installed_by installed_on execution_time success 1 1.0.20220426223800 Initial Table SQL V1.0/V1.0_20220426223800__Initial_Table.sql 1800508254 root 2022-04-30 14:45:16 56 1 <ul> <li>In which:<ul> <li><code>version</code> is <code>1.0.20220426223800</code>, </li> <li><code>description</code> is <code>Initial Table</code>,</li> <li><code>checksum</code> is <code>1800508254</code></li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#add_new_migration_version","title":"Add New Migration Version","text":"<ul> <li>Now, let's create another migration version like 1.1 and because in the software development we want to extend the current table with two more column <code>createdDate</code> and <code>updatedDate</code> into our table.</li> <li>So we will set the new migration file with name as below.</li> </ul> <pre><code>V1.1_20220430223800__Add_New_2_Columns.sql\n</code></pre> <ul> <li> <p>In which:</p> <ul> <li><code>V</code> is the prefix which used for <code>Versioned Migration</code>.</li> <li><code>1.1_20220430223800</code> is the new version with timestamp.</li> <li><code>__</code> is the separator.</li> <li><code>Add_New_2_Columns</code> is the description.</li> <li><code>.sql</code> is the suffix.</li> </ul> </li> <li> <p>Then let's add the SQL scripts below to add more two column into the table.</p> </li> </ul> <pre><code>ALTER TABLE `customers` ADD `created_date` TIMESTAMP;  \nALTER TABLE `customers` ADD `updated_date` TIMESTAMP;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#testing_2","title":"Testing 2","text":"<ul> <li>Now, restart your spring boot service again, then check the <code>customers</code> and <code>flyway_schema_history</code>.</li> <li><code>mysql&gt; describe customers;</code></li> </ul> Field Type Null Key Default Extra id varchar(255) NO PRI NULL address varchar(255) YES NULL dob datetime(6) YES NULL email varchar(255) YES NULL fullName varchar(255) YES NULL phone varchar(255) YES NULL created_date timestamp YES NULL updated_date timestamp YES NULL full_name varchar(255) YES NULL <ul> <li><code>mysql&gt; select * from flyway_schema_history;</code></li> </ul> installed_rank version description type script checksum installed_by installed_on execution_time success 1 1.0.20220426223800 Initial Table SQL V1.0/V1.0_20220426223800__Initial_Table.sql 1800508254 root 2022-04-30 14:45:16 56 1 2 1.1.20220430223800 Add New 2 Columns SQL V1.1/V1.1_20220430223800__Add_New_2_Columns.sql 222139554 root 2022-04-30 14:45:16 68 1 <ul> <li>As you can see, new two columns <code>created_date</code> and <code>updated_date</code> have been added into the <code>customers</code> table. Then you also see the new record in <code>flyway_schema_history</code> has been added:</li> <li>In which:<ul> <li><code>version</code> is <code>1.1.20220430223800</code>, </li> <li><code>description</code> is <code>Add New 2 Columns</code>,</li> <li><code>checksum</code> is <code>222139554</code></li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#see_also","title":"See Also","text":"<ul> <li>Database Migrations with Flyway</li> <li>Flyway Versioned Migrations</li> <li>Flyway SQL-based Migrations</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Regular%20Versioned%20Migration%20Example/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Repeatable%20Migrations/","title":"Flyway Repeatable Migrations","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Repeatable%20Migrations/#repeatable_migrations","title":"Repeatable Migrations","text":"<ul> <li> <p><code>Repeatable migrations</code> have a <code>description</code> and a <code>checksum</code>, but <code>no version</code>. Instead of being run just once, they are (re-)applied every time their checksum changes.</p> </li> <li> <p>This is very useful for managing database objects whose definition can then simply be maintained in a single file in version control. They are typically used for</p> <ul> <li>(Re-)creating views/procedures/functions/packages/\u2026</li> <li>Bulk reference data reinserts</li> </ul> </li> <li> <p>Within a single migration run, repeatable migrations are always applied last, after all pending versioned migrations have been executed. Repeatable migrations are applied in the order of their description.</p> </li> </ul> <p>It is your responsibility to ensure the same repeatable migration can be applied multiple times. This usually involves making use of CREATE OR REPLACE clauses in your DDL statements.</p> <p>Here is an example of what a repeatable migration looks like:</p> <pre><code>CREATE OR REPLACE VIEW blue_cars AS\n    SELECT id, license_plate FROM cars WHERE color='blue';\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Repeatable%20Migrations/#see_also","title":"See Also","text":"<ul> <li>Flyway Versioned Migrations</li> <li>Database Migrations with Flyway</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Repeatable%20Migrations/#references","title":"References","text":"<ul> <li>Flaywaydb.org</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20SQL-based%20Migrations/","title":"Flyway SQL-based Migrations","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20SQL-based%20Migrations/#sql-based_migrations","title":"SQL-based Migrations","text":"<ul> <li>As we read in the section Flyway Migrations, <code>Migrations</code> can be written in\u00a0SQL (PL/SQL, T-SQL, ... is supported) so <code>Migrations</code> (Versioned Migration, Undo Migration and Repeatable Migration) are most commonly written in\u00a0<code>SQL</code>. This makes it easy to get started and leverage any existing scripts, tools and skills. It gives you access to the full set of capabilities of your database and eliminates the need to understand any intermediate translation layer.</li> <li> <p>SQL-based migrations are typically used for</p> <ul> <li>DDL changes (CREATE/ALTER/DROP statements for TABLES,VIEWS,TRIGGERS,SEQUENCES,\u2026)</li> <li>Simple reference data changes (CRUD in reference data tables)</li> <li>Simple bulk data changes (CRUD in regular data tables)</li> </ul> </li> <li> <p>So to Flyway know which type of <code>Migrations</code> (Versioned Migration, Undo Migration and Repeatable Migration) that you are going to use and the SQL files that you created are used for Flyway. So Flyway has naming pattern as below:</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20SQL-based%20Migrations/#naming_for_regular_versioned_migration","title":"Naming For Regular Versioned Migration","text":"<ul> <li>So to Flyway know that you are using <code>Regular Versioned Migration</code>. You have to using the pattern as: <code>V + (version) + __ + (description) + .sql</code> . For example</li> </ul> <pre><code>V2__Add_new_table.sql\n</code></pre> <ul> <li>Prefix: <code>V</code> for <code>Versioned Migration</code> (configurable)</li> <li>Version: <code>Version</code> with dots or underscores separate as many parts as you like. You can check Flyway Versioned Migrations for more details.</li> <li>Separator:\u00a0<code>__</code>\u00a0(two underscores) (configurable)</li> <li><code>Description</code>: Underscores or spaces separate the words</li> <li>Suffix:\u00a0<code>.sql</code>\u00a0(configurable)</li> <li>See Flyway Regular Versioned Migration Example for more details.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20SQL-based%20Migrations/#naming_for_undo_migration","title":"Naming For Undo Migration","text":"<ul> <li>So to Flyway know that you are using <code>Undo Migration</code>. You have to using the pattern as: <code>U + (version) + __ + (description) + .sql</code> . For example</li> </ul> <pre><code>U2__Add_new_table.sql\n</code></pre> <ul> <li>Prefix: <code>U</code> for <code>Undo Migration</code> (configurable)</li> <li>Version: <code>Version</code> with dots or underscores separate as many parts as you like. You can check Flyway Versioned Migrations for more details.</li> <li>Separator:\u00a0<code>__</code>\u00a0(two underscores) (configurable)</li> <li><code>Description</code>: Underscores or spaces separate the words</li> <li>Suffix:\u00a0<code>.sql</code>\u00a0(configurable)</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20SQL-based%20Migrations/#repeatable_migration","title":"Repeatable Migration","text":"<ul> <li>So to Flyway know that you are using <code>Undo Migration</code>. You have to using the pattern as: <code>R + __ + (description) + .sql</code> . For example</li> </ul> <pre><code>R__Add_new_table.sql\n</code></pre> <ul> <li>Prefix: <code>R</code> for <code>Repeatable Migration</code> (configurable)</li> <li>Separator:\u00a0<code>__</code>\u00a0(two underscores) (configurable)</li> <li><code>Description</code>: Underscores or spaces separate the words</li> <li>Suffix:\u00a0<code>.sql</code>\u00a0(configurable)</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20SQL-based%20Migrations/#see_also","title":"See Also","text":"<ul> <li>Flyway Regular Versioned Migration Example</li> <li>Flyway Versioned Migrations</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Versioned%20Migrations/","title":"Flyway Versioned Migrations","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Versioned%20Migrations/#regular_versioned_migrations","title":"Regular Versioned Migrations","text":"<ul> <li>The most common type of migration is a\u00a0<code>versioned migration</code>. Each versioned migration has a\u00a0<code>version</code>, a\u00a0<code>description</code>\u00a0and a\u00a0<code>checksum</code>. The version must be unique. The description is purely informative for you to be able to remember what each migration does. The checksum is there to detect accidental changes. Versioned migrations are applied in order exactly once.</li> <li> <p>Versioned migrations are typically used for:</p> <ul> <li>Creating/altering/dropping tables/indexes/foreign keys/enums/UDTs/\u2026</li> <li>Reference data updates</li> <li>User data corrections</li> </ul> </li> <li> <p>See the example below:</p> </li> <li>We have a versioned migration file which is written based on SQL.</li> </ul> <pre><code>V1.1_20220430223800__Add_New_2_Columns.sql\n</code></pre> <ul> <li>The content of versioned migration can be as the example below:</li> </ul> <p><pre><code>CREATE TABLE car (\n    id INT NOT NULL PRIMARY KEY,\n    license_plate VARCHAR NOT NULL,\n    color VARCHAR NOT NULL\n);\n\nALTER TABLE owner ADD driver_license_id VARCHAR;\n\nINSERT INTO brand (name) VALUES ('DeLorean');\n</code></pre> - As you can see for versioned migrations, we will use SQL commands as <code>CREATE</code>, <code>ALTER</code> and <code>INSERT</code>.  - Each versioned migration must be assigned a <code>unique version</code>. Any version is valid as long as it conforms to the usual dotted notation. For most cases a simple increasing integer should be all you need. However Flyway is quite flexible and all these versions are valid versioned migration versions:</p> <pre><code>1\n001\n5.2\n1.2.3.4.5.6.7.8.9\n205.68\n20130115113556\n2013.1.15.11.35.56\n2013.01.15.11.35.56\n</code></pre> <ul> <li>Versioned migrations are applied in the order of their versions. Versions are sorted numerically as you would normally expect.</li> <li>See Flyway Regular Versioned Migration Example</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Versioned%20Migrations/#undo_migrations","title":"Undo Migrations","text":"<ul> <li><code>Undo migrations</code> are the opposite of <code>regular versioned migrations</code>. An undo migration is responsible for undoing the effects of the versioned migration with the same version. Undo migrations are optional and not required to run regular versioned migrations.</li> </ul> <p>For the example above, this is how the undo migration would look like:</p> <pre><code>DELETE FROM brand WHERE name='DeLorean';\n\nALTER TABLE owner DROP driver_license_id;\n\nDROP TABLE car;\n</code></pre> <p>it's important to note that\u00a0Flyway Undo is a commercial feature of Flyway and isn't available in the Community Edition.\u00a0Therefore, we'll need either the Pro Edition or Enterprise Edition in order to use this feature.</p>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Versioned%20Migrations/#see_also","title":"See Also","text":"<ul> <li>Flyway Regular Versioned Migration Example</li> <li>Flyway Migrations</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Flyway%20Versioned%20Migrations/#references","title":"References","text":"<ul> <li>Flaywaydb.org</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/","title":"Get Hibernate Envers Audit Data","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#get_hibernate_envers_audit_data_1","title":"Get Hibernate Envers Audit Data","text":"<ul> <li>In the section Hibnerate Envers With JPA, we know how to integrate hibernate envers with jpa for storing audit data. Now, we will continue investigate the way to get the audit data from hibernate envers for using.</li> <li>So, let's assume that after we implemented hibernate envers for auditing data then the business team in company want us to export a history api that returns all changes that happened on an object which is stored in database. In this example it will be all the changes that happened with <code>CustomerEntity</code></li> <li>To do so we will extract audit data of hibernate envers from database and return.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#entities","title":"Entities","text":"<ul> <li>We will extend our entities a little bit with new two column <code>createdDate</code> and <code>updatedDate</code> because with audit data we would like to know the time that the record is created and updated.</li> <li>We will update for <code>CustomerEntity</code>, and <code>ItemEntity</code> because they have not those fields <code>createdDate</code> and <code>updatedDate</code> before.</li> </ul> CustomerEntity.java<pre><code>package com.springboot.data.hibernate.envers.app.entity;\n\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport javax.persistence.*;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Audited\n@Entity\n@Table(name = \"customers\")\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n    private String fullName;\n    @Column(unique = true)\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    private OffsetDateTime createdDate;\n\n    private OffsetDateTime updatedDate;\n\n    @NotAudited\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders = new ArrayList&lt;&gt;();\n\n        ...\n        //getter, setter\n\n    public OffsetDateTime getCreatedDate() {\n        return createdDate;\n    }\n\n    public OffsetDateTime getUpdatedDate() {\n        return updatedDate;\n    }\n\n    @PrePersist\n    private void onCreate() {\n        OffsetDateTime now = OffsetDateTime.now();\n        this.createdDate = now;\n        this.updatedDate = now;\n    }\n\n    @PreUpdate\n    private void onUpdate() {\n        this.updatedDate = OffsetDateTime.now();\n    }\n\n}\n</code></pre> ItemEntity.java<pre><code>package com.springboot.data.hibernate.envers.app.entity;\n\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport javax.persistence.*;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\n@Audited\n@Entity\n@Table(name = \"items\")\npublic class ItemEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String itemName;\n\n    private Long quantity;\n\n    private Float price;\n\n    private OffsetDateTime createdDate;\n\n    private OffsetDateTime updatedDate;\n\n    @NotAudited\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\")\n    private OrderEntity order;\n\n        ...\n        //getter, setter\n\n    public OffsetDateTime getCreatedDate() {\n        return createdDate;\n    }\n\n    public OffsetDateTime getUpdatedDate() {\n        return updatedDate;\n    }\n\n    @PrePersist\n    private void onCreate() {\n        OffsetDateTime now = OffsetDateTime.now();\n        this.createdDate = now;\n        this.updatedDate = now;\n    }\n\n    @PreUpdate\n    private void onUpdate() {\n        this.updatedDate = OffsetDateTime.now();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#service","title":"Service","text":"<ul> <li>Now, let's create an <code>AuditService</code> and put the implementation code as below</li> </ul> AuditService.java<pre><code>package com.springboot.data.hibernate.envers.app.service;\n\nimport com.springboot.data.hibernate.envers.app.entity.CustomerEntity;\nimport com.springboot.data.hibernate.envers.app.model.response.CustomerResponse;\nimport org.hibernate.envers.AuditReaderFactory;\nimport org.hibernate.envers.query.AuditEntity;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.persistence.EntityManager;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\npublic class AuditService {\n\n    private static final boolean SELECT_ENTITIES_ONLY_VALUE_TRUE = true;\n    private static final boolean SELECT_DELETED_ENTITIES_VALUE_TRUE = false;\n\n    @Autowired\n    private EntityManager entityManager;\n\n    public List&lt;CustomerResponse&gt; getAuditCustomer(UUID customerId) {\n        List&lt;CustomerEntity&gt; auditEntities = AuditReaderFactory.get(entityManager)\n                .createQuery()\n                .forRevisionsOfEntity(CustomerEntity.class, SELECT_ENTITIES_ONLY_VALUE_TRUE,SELECT_DELETED_ENTITIES_VALUE_TRUE)\n                .add(AuditEntity.property(\"id\").eq(customerId))\n                .addOrder(AuditEntity.property(\"createdDate\").desc())\n                .addOrder(AuditEntity.property(\"updatedDate\").desc())\n                .getResultList();\n        return auditEntities.stream().map(this::toCustomerResponse).collect(Collectors.toList());\n    }\n\n    private CustomerResponse toCustomerResponse(CustomerEntity customerEntity) {\n        CustomerResponse customerResponse = new CustomerResponse();\n        customerResponse.setId(customerEntity.getId());\n        customerResponse.setAddress(customerEntity.getAddress());\n        customerResponse.setDob(customerEntity.getDob());\n        customerResponse.setEmail(customerEntity.getEmail());\n        customerResponse.setPhone(customerEntity.getPhone());\n        customerResponse.setFullName(customerEntity.getFullName());\n        customerResponse.setGender(customerEntity.getGender());\n        customerResponse.setCreatedDate(customerEntity.getCreatedDate());\n        customerResponse.setUpdatedDate(customerEntity.getUpdatedDate());\n        return customerResponse;\n    }\n\n}\n</code></pre> <ul> <li>The implementation above is used for query all changed that happened on a customer except deleted record case by the <code>customerId</code> and sorted by <code>createdDate</code> and <code>updatedDate</code> with desc.  </li> <li>So, to query audit data we will use the <code>AuditReaderFactory</code> and an <code>entityManager</code> to create an <code>AuditQueryCreator</code>. Then with this <code>AuditQueryCreator</code>, we will use it to create <code>AuditQuery</code> through method <code>.forRevisionsOfEntity(CustomerEntity.class, true, false)</code>. In which, the first parameter is the entity that we want to get, the second parameter is <code>selectEntitiesOnly</code>, we should put it as true to get only <code>CustomerEntity</code> and the finial one is the <code>selectDeletedEntities</code> for getting deleted record of   <code>CustomerEntity</code>.</li> <li>Then with <code>AuditQuery</code>, we can use it to create query <code>CustomerEntity</code> by column <code>id</code> and sort the result list with <code>createdDate</code> and <code>updatedDate</code>. Finally, we use the method <code>getResultList()</code> to end the query and return the audit list.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#controller","title":"Controller","text":"<ul> <li>Next, we just create a simple controller with a simple api for getting audit data as below</li> </ul> AuditController.java<pre><code>package com.springboot.data.hibernate.envers.app.controller;\n\nimport com.springboot.data.hibernate.envers.app.model.response.CustomerResponse;\nimport com.springboot.data.hibernate.envers.app.service.AuditService;\nimport com.springboot.data.hibernate.envers.app.service.CustomerJpaService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\npublic class AuditController {\n\n    @Autowired\n    private AuditService auditService;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/jpa/customers/{customerId}/audit\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;List&lt;CustomerResponse&gt;&gt; getCustomerAudit(@PathVariable(name = \"customerId\") UUID customerId) {\n        return new ResponseEntity&lt;&gt;(this.auditService.getAuditCustomer(customerId), HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#testing","title":"Testing","text":"<ul> <li>Now, let's start our spring boot application, then create and update <code>Customer</code> to have some records in the <code>customers_aud</code> table as below.</li> </ul> id rev revtype address created_date dob email full_name gender phone updated_date 8f0e57e4-5535-494e-b4b3-c84d9b68536e 1 0 Binh Duong Province 2022-11-23 20:38:15 1995-10-10 07:00:00 abc3@gmail.com Nguyen Minh Duc M 0123456789 2022-11-23 20:38:15 8f0e57e4-5535-494e-b4b3-c84d9b68536e 2 1 Ho Chi Minh City 2022-11-23 20:38:15 1995-10-10 07:00:00 abc5@gmail.com Nguyen Minh Duc M 0123456789 2022-11-23 20:41:02 <ul> <li>Then let's execute the audit api from postman and you should see the result with 2 records and sorted as below.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#see_also","title":"See Also","text":"<ul> <li>Auditing With Hibernate Envers</li> <li>Hibnerate Envers With JPA</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Get%20Hibernate%20Envers%20Audit%20Data/#references","title":"References","text":"<ul> <li>Hibernate Envers Jboss Doc</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibernate/","title":"Hibernate Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibernate/#what_is_the_hibernate","title":"What Is The Hibernate?","text":"<ul> <li><code>Hibernate</code> is an open-source, non-invasive, light-weight java ORM(Object-relational mapping) framework to develop objects which are independent of the database software and make independent persistence logic in all JAVA, JEE. It simplifies the interaction of java applications with databases. Hibernate is an implementation of JPA(Java Persistence API).</li> <li><code>Hibernate</code> maps Java classes to database tables and from Java data types to SQL data types and relieves the developer from 95% of common data persistence related programming tasks.</li> <li><code>Hibernate</code> sits between traditional Java objects and database server to handle all the works in persisting those objects based on the appropriate O/R mechanisms and patterns. </li> <li>There is an important thing to remember that \"internally\", <code>Hibernate</code> uses <code>JDBC</code> to interact with the database.</li> <li>More information</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibernate/#some_differences_between_jdbc_and_hibernate","title":"Some Differences Between JDBC And Hibernate","text":"<ul> <li>Because <code>Hibernate</code> is used as an implementation of JPA, so we will compare some differences between  JDBC and <code>Hibernate</code> as below.</li> </ul> NO JDBC HIBERNATE 1. In <code>JDBC</code>, one needs to write code to map the object model\u2019s data representation to the schema of the relational model. <code>Hibernate</code> maps the object model\u2019s data to the schema of the database itself with the help of annotations. 2. <code>JDBC</code> enables developers to create queries and update data to a relational database <code>using the Structured Query Language (SQL)</code>. <code>Hibernate</code> <code>uses HQL (Hibernate Query Language)</code> which is similar to SQL but understands object-oriented concepts like inheritance, association etc. 3. <code>JDBC</code> code needs to be written in a try catch block as it throws checked exception(SQLexception). Whereas <code>Hibernate</code> manages the exceptions itself by marking them as unchecked. 4. <code>JDBC</code> is database dependent i.e. one needs to write different codes for different database. Whereas <code>Hibernate</code> is database independent and same code can work for many databases with minor changes. 5. Creating associations between relations is quite hard in <code>JDBC</code>. Associations like one-to-one, one-to-many, many-to-one, and many-to-many can be acquired easily with the help of annotations. <ul> <li>View more</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibernate/#see_also","title":"See Also","text":"<ul> <li>Spring Data JDBC</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibernate/#references","title":"References","text":"<ul> <li>DZone</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibnerate%20Envers%20With%20JPA/","title":"Hibnerate Envers With JPA","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibnerate%20Envers%20With%20JPA/#hibnerate_envers_with_jpa_1","title":"Hibnerate Envers With JPA","text":"<ul> <li>In this section we will try to apply auditing with hibernate envers for our Spring Data JPA project.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibnerate%20Envers%20With%20JPA/#dependencies","title":"Dependencies","text":"<ul> <li>Let's assume that you have a JPA project and now you want to apply hibernate envers for auditing data. So you just need to apply the dependencies as below to your project.</li> </ul> pom.xml<pre><code>...\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-envers&lt;/artifactId&gt;\n        &lt;version&gt;5.4.29.Final&lt;/version&gt;\n    &lt;/dependency&gt;\n\n...\n</code></pre> <ul> <li>Note: the version of <code>hibernate-envers</code> will depend on the version of the <code>hibernate-core</code> in your JPA dependencies. For example, we are using JPA with version as below.</li> </ul> pom.xml<pre><code>...\n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;  \n    &lt;version&gt;2.4.4&lt;/version&gt;  \n&lt;/dependency&gt;\n\n...\n</code></pre> <ul> <li>Then if we check the <code>hibernate-core</code> of this JPA version, we can see it is using <code>5.4.29.Final</code> version. So we need to choose the <code>hibernate-envers</code> with version <code>5.4.29.Final</code> also.</li> </ul> <ul> <li>When we add <code>hibernate-envers</code> dependency into our spring boot project, it also provide for us some configurations that we can put into our <code>application.yml</code> or <code>application.properties</code>. All configurations are showed as in the table below.</li> </ul> Property name Default value Description org.hibernate.envers.audit_table_prefix String that will be prepended to the name of an audited entity to create the name of the entity, that will hold audit information. org.hibernate.envers.audit_table_suffix <code>_AUD</code> String that will be appended to the name of an audited entity to create the name of the entity, that will hold audit information. If you audit an entity with a table name Person, in the default setting Envers will generate a Person_AUD table to store historical data. org.hibernate.envers.revision_field_name <code>REV</code> Name of a field in the audit entity that will hold the revision number. org.hibernate.envers.revision_type_field_name <code>REVTYPE</code> Name of a field in the audit entity that will hold the type of the revision (currently, this can be: add, mod, del). org.hibernate.envers.revision_on_collection_change <code>true</code> Should a revision be generated when a not-owned relation field changes (this can be either a collection in a one-to-many relation, or the field using \"mappedBy\" attribute in a one-to-one relation). org.hibernate.envers.do_not_audit_optimistic_locking_field <code>true</code> When true, properties to be used for optimistic locking, annotated with @Version, will be automatically not audited (their history won't be stored; it normally doesn't make sense to store it). org.hibernate.envers.store_data_at_delete <code>false</code> Should the entity data be stored in the revision when the entity is deleted (instead of only storing the id and all other properties as null). This is not normally needed, as the data is present in the last-but-one revision. Sometimes, however, it is easier and more efficient to access it in the last revision (then the data that the entity contained before deletion is stored twice). org.hibernate.envers.default_schema null (same as normal tables) The default schema name that should be used for audit tables. Can be overriden using the @AuditTable(schema=\"...\") annotation. If not present, the schema will be the same as the schema of the normal tables. org.hibernate.envers.default_catalog null (same as normal tables) The default catalog name that should be used for audit tables. Can be overriden using the @AuditTable(catalog=\"...\") annotation. If not present, the catalog will be the same as the catalog of the normal tables.","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibnerate%20Envers%20With%20JPA/#applying_hibernate_envers","title":"Applying Hibernate Envers","text":"<ul> <li>We can use annotation <code>@Audited</code> to audit data of entities and fields. <ul> <li>If we put the <code>@Audited</code>  annotation on entity class, so all properties of that entity will be audited. </li> <li>When we put <code>@Audited</code>  annotation on a field of an entity class so this field will be audited only.</li> </ul> </li> <li>If we don't want to audit a specific field in an entity class that we put  <code>@Audited</code>. We can use annotation<code>@NotAudited</code> on this specific one. Let's see the example below.</li> </ul> CustomerEntity.java<pre><code>package com.springboot.data.hibernate.envers.app.entity;\n\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Audited\n@Entity\n@Table(name = \"customers\")\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n    private String fullName;\n    @Column(unique = true)\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @NotAudited\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders = new ArrayList&lt;&gt;();\n\n        ...\n        //getter, setter\n</code></pre> OrderEntity.java<pre><code>package com.springboot.data.hibernate.envers.app.entity;\n\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport javax.persistence.*;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@Audited\n@Entity\n@Table(name = \"orders\")\npublic class OrderEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String orderName;\n\n    private LocalDateTime createdDate;\n\n    private LocalDateTime lastUpdatedDate;\n\n    @Enumerated(value = EnumType.STRING)\n    private OrderStatus orderStatus;\n\n    @NotAudited\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    @NotAudited\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List&lt;ItemEntity&gt; items = new ArrayList&lt;&gt;();\n\n        ...\n        //getter, setter\n</code></pre> ItemEntity.java<pre><code>package com.springboot.data.hibernate.envers.app.entity;\n\nimport org.hibernate.annotations.Type;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.envers.NotAudited;\n\nimport javax.persistence.*;\nimport java.util.UUID;\n\n@Audited\n@Entity\n@Table(name = \"items\")\npublic class ItemEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String itemName;\n\n    private Long quantity;\n\n    private Float price;\n\n    @NotAudited\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\")\n    private OrderEntity order;\n\n        ...\n        //getter, setter\n</code></pre> <ul> <li>As you can see, in examples above we will try to audit all fields in entities with <code>@Audited</code> annotation but we will exclude fields which are used for entities relationships with <code>@NotAudited</code> annotation.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibnerate%20Envers%20With%20JPA/#testing","title":"Testing","text":"<ul> <li>Now, Let's start our Spring Boot JPA project and go to database to check tables. We see tables with suffix \"aud\" are generated automatically.</li> </ul> <ul> <li>Then, let's use postman and create customer data. Then let's go audit tables and you can see the audit data has been saved successfully.</li> </ul> <ul> <li><code>customers_aud</code> table</li> </ul> id rev revtype address dob email full_name gender phone 6ecc2e24-bd38-496b-bda1-7af3ce420a6c 1 0 Binh Duong Province 1995-10-10 07:00:00 abc3@gmail.com Nguyen Minh Duc M 0123456789 <ul> <li><code>orders_aud</code> table</li> </ul> id rev revtype created_date last_updated_date order_name order_status 1b962ecd-6994-428c-9c07-d54b93c569c4 1 0 2022-10-29 10:39:39 2022-10-29 10:39:39 PC CREATED <ul> <li><code>items_aud</code> table</li> </ul> id rev revtype item_name price quantity 0ea9a57c-86a4-4508-ab78-0d264e3848f4 1 0 Monitor 100.0 1 <ul> <li>Now, let's use postman to update data for customer and check the <code>customer_aud</code> again. We will see there is a new record in audit table for tracking changes of the customer.</li> </ul> <ul> <li><code>customers_aud</code> table</li> </ul> id rev revtype address dob email full_name gender phone 6ecc2e24-bd38-496b-bda1-7af3ce420a6c 1 0 Binh Duong Province 1995-10-10 07:00:00 abc3@gmail.com Nguyen Minh Duc M 0123456789 6ecc2e24-bd38-496b-bda1-7af3ce420a6c 2 1 Ho Chi Minh City 1995-10-10 07:00:00 abc5@gmail.com Nguyen Minh Duc M 0123456789 <ul> <li> <p>For other tables they are still have one record in audit table because there are no change in their data.</p> </li> <li> <p><code>orders_aud</code> table</p> </li> </ul> id rev revtype created_date last_updated_date order_name order_status 1b962ecd-6994-428c-9c07-d54b93c569c4 1 0 2022-10-29 10:39:39 2022-10-29 10:39:39 PC CREATED <ul> <li><code>items_aud</code> table</li> </ul> id rev revtype item_name price quantity 0ea9a57c-86a4-4508-ab78-0d264e3848f4 1 0 Monitor 100.0 1","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Hibnerate%20Envers%20With%20JPA/#see_also","title":"See Also","text":"<ul> <li>Auditing With Hibernate Envers</li> <li>Get Hibernate Envers Audit Data</li> <li>Spring Data JPA</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/","title":"JDBC In SpringBoot","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#jdbc_in_springboot_projects","title":"JDBC In SpringBoot Projects","text":"<ul> <li>In  SpringBoot projects, we usually use dependency libraries <code>spring-boot-starter-jdbc</code> for <code>JDBC</code>. We should note that these SpringBoot dependencies will wrap many others libraries and <code>JDBC core</code> are just a part of them.</li> <li>Let's see the dependency tree of <code>spring-boot-starter-jdbc</code> as below.</li> </ul> <pre><code>+- org.springframework.boot:spring-boot-starter-jdbc:jar:2.4.4:compile\n|  +- org.springframework.boot:spring-boot-starter:jar:2.4.4:compile\n|  |  +- org.springframework.boot:spring-boot:jar:2.4.4:compile\n|  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.4.4:compile\n|  |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.4.4:compile\n|  |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile\n|  |  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile\n|  |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile\n|  |  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.13.3:compile\n|  |  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.30:compile\n|  |  +- jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile\n|  |  +- org.springframework:spring-core:jar:5.3.5:compile\n|  |  |  \\- org.springframework:spring-jcl:jar:5.3.5:compile\n|  |  \\- org.yaml:snakeyaml:jar:1.27:compile\n|  +- com.zaxxer:HikariCP:jar:3.4.5:compile\n|  |  \\- org.slf4j:slf4j-api:jar:1.7.25:compile\n|  \\- org.springframework:spring-jdbc:jar:5.3.5:compile\n|     +- org.springframework:spring-beans:jar:5.3.5:compile\n|     \\- org.springframework:spring-tx:jar:5.3.5:compile\n</code></pre> <ul> <li>As you can see we will have the <code>spring-jdbc</code> and  <code>HikariCP</code> also. </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#what_is_the_hikaricp","title":"What Is The HikariCP?","text":"<ul> <li><code>HikariCP</code> is solid high-performance  JDBC connection pool. A connection pool is a cache of database connections maintained so that the connections can be reused when future requests to the database are required. Connection pools may significantly reduce the overall resource usage. You can find more here.<ul> <li><code>HikariCP</code> is a very lightweight and high performance compared with other connection pooling frameworks. So It is the reason why <code>HikariCP</code> become the default pool implementation in Spring Boot 2.0.</li> <li>One more thing, <code>HikariCP</code> has some default configurations and configure <code>HikariCP</code> is also simple, so It will not take you many times to work with. You can find more here.</li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#spring_boot_jdbc_example","title":"Spring Boot JDBC Example","text":"<ul> <li>We will make an example with  Spring Boot JDBC starter in  SpringBoot projects.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#dependencies","title":"Dependencies","text":"<ul> <li>So in this example we need to imports dependencies as <code>spring-jdbc</code> and <code>commons-dbcp</code> as below. In which <code>commons-dbcp</code> (dbcp - Database Connection Pool) from Apache will help us to manage database connections pool.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n    &lt;version&gt;2.4.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#dao","title":"DAO","text":"<ul> <li>In Database we will have some tables with One to Many relationships as the image below</li> </ul> <ul> <li>Note: you need to go to Database and create these tables manually before running this Spring Boot application. Please use the scripts below for <code>Postgres</code> database.</li> </ul> <pre><code>CREATE TABLE \"customers\" (\n  \"id\" uuid PRIMARY KEY NOT NULL,\n  \"address\" varchar(255) DEFAULT NULL,\n  \"dob\" date DEFAULT NULL,\n  \"email\" varchar(255) DEFAULT NULL,\n  \"gender\" varchar(255) DEFAULT NULL,\n  \"full_name\" varchar(255) DEFAULT NULL,\n  \"phone\" varchar(255) DEFAULT NULL\n);\n\nCREATE TABLE \"orders\" (\n    \"id\" uuid PRIMARY KEY NOT NULL,\n    \"created_date\"  timestamp,\n    \"last_updated_date\" timestamp,\n    \"order_name\" varchar(255),\n    \"order_status\" varchar(255),\n    \"customer_id\"  uuid,\n    FOREIGN KEY (\"customer_id\") REFERENCES customers(\"id\")\n);\n\nCREATE TABLE \"items\" (\n    \"id\" uuid PRIMARY KEY NOT NULL,\n    \"item_name\" varchar(225),\n    \"price\"  numeric,\n    \"quantity\" BIGINT,\n    \"order_id\" uuid,\n    FOREIGN KEY (\"order_id\") REFERENCES orders(\"id\")\n\n);\n</code></pre> <ul> <li>Then we will create a DAO (Data Access Object) java class which will contain queries for Create a customer with orders and items in database. The code in <code>CustomerDao</code> will look like as below.</li> </ul> CustomerDao.java<pre><code>package com.springboot.data.jdbc.app.dao;\n\nimport com.springboot.data.jdbc.app.model.OrderStatus;\nimport com.springboot.data.jdbc.app.model.request.CustomerRequest;\nimport com.springboot.data.jdbc.app.model.request.ItemRequest;\nimport com.springboot.data.jdbc.app.model.request.OrderRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Repository\npublic class CustomerDao {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Autowired\n    private NamedParameterJdbcOperations namedParameterJdbcOperations;\n\n\n    public UUID createCustomer(CustomerRequest customerRequest) {\n        String sqlCustomerQuery =\n                           \"INSERT INTO customers(                          \"\n                +          \"id,                                             \"   /*1*/\n                +          \"address,                                        \"   /*2*/\n                +          \"dob,                                            \"   /*3*/\n                +          \"email,                                          \"   /*4*/\n                +          \"full_name,                                      \"   /*5*/\n                +          \"gender,                                         \"   /*6*/\n                +          \"phone)                                          \"   /*7*/\n                +          \"VALUES (?, ?, ?, ?, ?, ?, ?)                    \"\n                ;\n        UUID uuid = this.getRandomUUID();\n        this.jdbcTemplate.update(sqlCustomerQuery,\n                uuid.toString(),\n                customerRequest.getAddress(),\n                customerRequest.getDob(),\n                customerRequest.getEmail(),\n                customerRequest.getFullName(),\n                customerRequest.getGender().toString(),\n                customerRequest.getPhone());\n        return uuid;\n    }\n\n    public Map&lt;UUID, OrderRequest&gt; createOrders(UUID customerId, List&lt;OrderRequest&gt; orderRequestList) {\n        Map&lt;UUID, OrderRequest&gt; map = new HashMap&lt;&gt;();\n        final int size = orderRequestList.size();\n        String sqlOrderQuery =\n                         \"INSERT INTO orders(                                \"\n                 +       \"id,                                                \" /*1*/\n                 +       \"created_date,                                      \" /*2*/\n                 +       \"last_updated_date,                                 \" /*3*/\n                 +       \"order_name,                                        \" /*4*/\n                 +       \"order_status,                                      \" /*5*/\n                 +       \"customer_id)                                       \" /*6*/\n                 +       \"VALUES(                                            \"\n                 +       \":id,                                               \" /*1*/\n                 +       \":created_date,                                     \" /*2*/\n                 +       \":last_updated_date,                                \" /*3*/\n                 +       \":order_name,                                       \" /*4*/\n                 +       \":order_status,                                     \" /*5*/\n                 +       \":customer_id)                                      \" /*6*/\n                ;\n        List&lt;SqlParameterSource&gt; sqlParameterSources = new ArrayList&lt;&gt;(size);\n        for (OrderRequest orderRequest: orderRequestList) {\n            UUID uuid = this.getRandomUUID();\n            MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n            LocalDateTime now = LocalDateTime.now();\n            mapSqlParameterSource.addValue(\"id\", uuid.toString());\n            mapSqlParameterSource.addValue(\"created_date\",now);\n            mapSqlParameterSource.addValue(\"last_updated_date\", now);\n            mapSqlParameterSource.addValue(\"order_name\", orderRequest.getOrderName());\n            mapSqlParameterSource.addValue(\"order_status\", OrderStatus.CREATED.toString());\n            mapSqlParameterSource.addValue(\"customer_id\", customerId.toString());\n            sqlParameterSources.add(mapSqlParameterSource);\n            map.put(uuid, orderRequest);\n        }\n        this.namedParameterJdbcOperations.batchUpdate(sqlOrderQuery, sqlParameterSources.toArray(new SqlParameterSource[size]));\n        return map;\n    }\n\n    public void createItems(UUID orderId, List&lt;ItemRequest&gt; itemRequests) {\n        final int size = itemRequests.size();\n        String itemSqlQuery =\n                                \"INSERT INTO items(                                 \"\n                        +       \"id,                                                \" /*1*/\n                        +       \"item_name,                                         \" /*2*/\n                        +       \"price,                                             \" /*3*/\n                        +       \"quantity,                                          \" /*4*/\n                        +       \"order_id)                                          \" /*5*/\n                        +       \"VALUES(                                            \"\n                        +       \":id,                                               \" /*1*/\n                        +       \":item_name,                                        \" /*2*/\n                        +       \":price,                                            \" /*3*/\n                        +       \":quantity,                                         \" /*4*/\n                        +       \":order_id)                                         \" /*5*/\n                        ;\n        UUID uuid = this.getRandomUUID();\n        List&lt;SqlParameterSource&gt; sqlParameterSources = new ArrayList&lt;&gt;(size);\n        for (ItemRequest itemRequest: itemRequests) {\n            MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n            mapSqlParameterSource.addValue(\"id\", uuid.toString());\n            mapSqlParameterSource.addValue(\"item_name\", itemRequest.getItemName());\n            mapSqlParameterSource.addValue(\"price\", itemRequest.getPrice());\n            mapSqlParameterSource.addValue(\"quantity\", itemRequest.getQuantity());\n            mapSqlParameterSource.addValue(\"order_id\", orderId.toString());\n            sqlParameterSources.add(mapSqlParameterSource);\n        }\n        this.namedParameterJdbcOperations.batchUpdate(itemSqlQuery, sqlParameterSources.toArray(new SqlParameterSource[size]));\n    }\n\n    private UUID getRandomUUID() {\n        return UUID.randomUUID();\n    }\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#service","title":"Service","text":"<ul> <li>Next we need to create a service named <code>CustomerJdbcService</code> to handle logics for create a Customer with many orders and items. The Customer will be created first, then if the Customer contains orders so orders will be created and if in every order which contains items then items will be also created. See example code below:</li> </ul> CustomerJdbcService.java<pre><code>package com.springboot.data.jdbc.app.service;\n\nimport com.springboot.data.jdbc.app.dao.CustomerDao;\nimport com.springboot.data.jdbc.app.model.request.CustomerRequest;\nimport com.springboot.data.jdbc.app.model.request.OrderRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Service\npublic class CustomerJdbcService {\n\n\n    @Autowired\n    private CustomerDao customerDao;\n\n    public UUID createCustomer(CustomerRequest customerRequest) {\n        UUID customerId = this.customerDao.createCustomer(customerRequest);\n        List&lt;OrderRequest&gt; orders = customerRequest.getOrders();\n        if (orders != null &amp;&amp; !orders.isEmpty()) {\n            Map&lt;UUID, OrderRequest&gt; orderRequestMap = this.customerDao.createOrders(customerId, customerRequest.getOrders());\n            for (Map.Entry&lt;UUID, OrderRequest&gt; map : orderRequestMap.entrySet()) {\n                if (map.getValue().getItems() != null &amp;&amp; !map.getValue().getItems().isEmpty()) {\n                    this.customerDao.createItems(map.getKey(), map.getValue().getItems());\n                }\n            }\n        }\n        return customerId;\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#configuration","title":"Configuration","text":"<ul> <li>Now we will go to database connection configuration with <code>hikariCP</code>. To do this, firstly you need to add these configurations below into application.yml.</li> </ul> application.yaml<pre><code># config datasource for Jpa and Jdbc\nspring:\n  datasource:\n    driverClassName: \"org.postgresql.Driver\"\n    url: \"jdbc:postgresql://localhost:5432/sample?useUnicode=true&amp;characterEncoding=UTF-8\"\n    username: \"root\"\n    password: \"password\"\n\n    #config hikari pool\n    hikari:\n      connection-timeout: \"30000\"\n      maximum-pool-size: \"20\"\n      minimumIdle: \"15\"\n      idleTimeout: \"30000\"\n      maxLifetime: \"180000\"\n\nlogging:\n  level:\n    org:\n      hibernate:\n        stat: \"DEBUG\"\n      springframework:\n        jdbc:\n          core: \"DEBUG\"\n</code></pre> <ul> <li>To configure HikariCP we will focus on some parameters below:</li> </ul> Configuration Description Value Explanation <code>connection-timeout</code> Maximum time to wait for a connection from the pool before throwing an exception <code>30000</code> Waits up to 30 seconds (30,000 ms) before timing out if a connection isn't available in the pool. <code>maximum-pool-size</code> Maximum number of connections in the pool <code>20</code> Limits the total number of active database connections to 20. <code>minimumIdle</code> Minimum number of idle connections maintained in the pool <code>15</code> Ensures at least 15 idle connections are available for use, even during low traffic periods. <code>idleTimeout</code> Maximum time that a connection can remain idle in the pool before it is eligible for eviction <code>30000</code> After 30 seconds (30,000 ms) of inactivity, idle connections are eligible for removal from the pool. <code>maxLifetime</code> Maximum lifetime of a connection in the pool before it is closed and replaced <code>180000</code> Connections are closed and replaced after 3 minutes (180,000 ms) to prevent stale connections from lingering too long. ### Testing - So now, let's start your Spring Boot service then use the postman and call the test the Api <code>/v1/jdbc/customers</code> then we can see the successful result as below. <ul> <li> <p>By default, <code>HikariCP</code> only creates the connection pool when the <code>DataSource</code> is accessed (e.g., when a database query is executed). If no code accesses the database on startup, the connection pool might not be initialized immediately. So to make sure the <code>HikariCP</code> connections are created we used postman to call the Api create customer first.</p> </li> <li> <p>Then login into <code>postgres</code> database and use command below to view the HikariCP connections</p> </li> </ul> <pre><code>SELECT application_name, count(*)\nFROM pg_stat_activity\nGROUP BY application_name;\n</code></pre> <ul> <li>Then you will be result with row <code>PostgreSQL JDBC Driver</code> with 15 connections count that is the same with the number we configured in the <code>application.yaml</code></li> </ul> application_name count DBeaver 22.2.4 - Metadata  1 DBeaver 22.2.4 - SQLEditor  1 DBeaver 22.2.4 - Metadata  1 DBeaver 22.2.4 - Main  1 PostgreSQL JDBC Driver 15 5 DBeaver 22.2.4 - Main  1","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Spring Data JDBC</li> <li>Spring Boot Introduction</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JDBC%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>ZetCode.</li> <li>GitHub HikariCp.</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JPA%20In%20Spring%20Boot/","title":"JPA In SpringBoot","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JPA%20In%20Spring%20Boot/#jpa_in_springboot_projects","title":"JPA In SpringBoot Projects","text":"<ul> <li>In  SpringBoot projects, we usually use dependency libraries <code>spring-boot-starter-data-jpa</code> for <code>JPA</code>. We should note that these SpringBoot dependencies will wrap many others libraries, <code>JPA core</code> are just a part of them.</li> <li>For this reason, in <code>SpringBoot projects</code> you just need to import only one dependency  <code>spring-boot-starter-data-jpa</code> for SpringBoot projects then you will many other important dependencies like <code>spring-boot-starter-jdbc</code> and <code>hibernate-core</code>.</li> <li>See the dependencies tree of <code>spring-boot-starter-data-jpa</code> as below:</li> </ul> <pre><code>+- org.springframework.boot:spring-boot-starter-data-jpa:jar:2.4.4:compile\n|  +- org.springframework.boot:spring-boot-starter-aop:jar:2.4.4:compile\n|  |  +- org.springframework:spring-aop:jar:5.3.5:compile\n|  |  \\- org.aspectj:aspectjweaver:jar:1.9.6:compile\n|  +- org.springframework.boot:spring-boot-starter-jdbc:jar:2.4.4:compile\n|  |  +- com.zaxxer:HikariCP:jar:3.4.5:compile\n|  |  \\- org.springframework:spring-jdbc:jar:5.3.5:compile\n|  +- jakarta.transaction:jakarta.transaction-api:jar:1.3.3:compile\n|  +- jakarta.persistence:jakarta.persistence-api:jar:2.2.3:compile\n|  +- org.hibernate:hibernate-core:jar:5.4.29.Final:compile\n|  |  +- org.jboss.logging:jboss-logging:jar:3.4.1.Final:compile\n|  |  +- org.javassist:javassist:jar:3.27.0-GA:compile\n|  |  +- net.bytebuddy:byte-buddy:jar:1.10.21:compile\n|  |  +- antlr:antlr:jar:2.7.7:compile\n|  |  +- org.jboss:jandex:jar:2.2.3.Final:compile\n|  |  +- com.fasterxml:classmate:jar:1.5.1:compile\n|  |  +- org.dom4j:dom4j:jar:2.1.3:compile\n|  |  +- org.hibernate.common:hibernate-commons-annotations:jar:5.1.2.Final:compile\n|  |  \\- org.glassfish.jaxb:jaxb-runtime:jar:2.3.1:compile\n|  |     +- org.glassfish.jaxb:txw2:jar:2.3.1:compile\n|  |     +- com.sun.istack:istack-commons-runtime:jar:3.0.7:compile\n|  |     +- org.jvnet.staxex:stax-ex:jar:1.8:compile\n|  |     \\- com.sun.xml.fastinfoset:FastInfoset:jar:1.2.15:compile\n|  +- org.springframework.data:spring-data-jpa:jar:2.4.6:compile\n|  |  +- org.springframework.data:spring-data-commons:jar:2.4.6:compile\n|  |  +- org.springframework:spring-orm:jar:5.3.5:compile\n|  |  +- org.springframework:spring-context:jar:5.3.5:compile\n|  |  +- org.springframework:spring-tx:jar:5.3.5:compile\n|  |  +- org.springframework:spring-beans:jar:5.3.5:compile\n|  |  +- org.springframework:spring-core:jar:5.3.5:compile\n|  |  |  \\- org.springframework:spring-jcl:jar:5.3.5:compile\n|  |  \\- org.slf4j:slf4j-api:jar:1.7.26:compile\n|  \\- org.springframework:spring-aspects:jar:5.3.5:compile\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JPA%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Spring Boot Introduction</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/","title":"Multi Datasources","text":"","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#jpa_with_multi_datasource_introduction","title":"JPA With Multi Datasource Introduction","text":"<p>In some special cases, sometimes we have to connect to multi databases to handle the business logic. In this post I will show you step by step configuration for spring boot service.</p>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_1_add_dependencies_in_pomxml","title":"Step 1: Add Dependencies In Pom.xml","text":"<ul> <li>I'm using MySQL database so I need to add 2 dependencies are <code>mysql-connector-java</code> and <code>spring-boot-starter-data-jpa</code></li> </ul> pom.xml<pre><code>    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_2_project_structure_overview","title":"Step 2: Project Structure Overview","text":"<p> - As you can see in the picture above. We have two sub <code>packages</code> (<code>primary</code>, <code>secondary</code>) in <code>entity</code> and <code>repository</code> package respectively, one is <code>primary package</code> which contains all repositories and entities for the <code>primary</code> datasource. The second one is the <code>secondary package</code> which contains all repositories and entities for the <code>secondary</code> datasource.</p> <ul> <li>Then we also have <code>configurations package</code> which contains all datasource configuration.</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_3_applicationyml","title":"Step 3: Application.yml","text":"<ul> <li>to connect to two database schemas we need to add some configuration in the <code>application.yml</code> as below:</li> </ul> application.yml<pre><code>spring:\n  datasource:\n    driverClassName: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/primaryDb?useSSL=false  #This is the primary DB connection url\n    username: root\n    password: password\n  second-datasource:\n    driverClassName: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/secondaryDb?useSSL=false  #This is the secondary DB connection url\n    username: root\n    password: password\n  jpa:\n    hibernate.ddl-auto: update\n    hibernate.dialect: org.hibernate.dialect.MySQL5Dialect\n    generate-ddl: true\n    show-sql: true\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_4_create_and_config_configuration_file_for_primary_schema","title":"Step 4: Create And Config Configuration File For Primary Schema","text":"<ul> <li>To config for <code>primary schema</code> we need to create a configuration file named <code>PrimarySchemaConfiguration.java</code> in the package <code>configurations</code></li> <li>The configuration for the <code>primary datasource</code> is showed as below:</li> </ul> PrimarySchemaConfiguration.java<pre><code>package com.springboot.data.jpa.multi.datasource.configuration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.env.Environment;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Objects;\n\n@Configuration\n/**\n use this anotation to define the base package repository for primary data source,\n the EntityFactory and the transactionManager\n **/\n@EnableJpaRepositories(\n        basePackages = \"com.springboot.data.jpa.multi.datasource.repository.primary\",\n        entityManagerFactoryRef = \"primaryEntityManager\",\n        transactionManagerRef = \"primaryTransactionManager\")\npublic class PrimarySchemaConfiguration {\n\n  @Autowired\n  private Environment env;\n\n  @Bean(name = \"primaryDataSource\")\n  @Primary\n  public DataSource primaryDataSourceConfiguration() {\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\n    dataSource.setDriverClassName(Objects.requireNonNull(env.getProperty(\"spring.datasource.driverClassName\")));\n    dataSource.setUrl(env.getProperty(\"spring.datasource.url\"));\n    dataSource.setUsername(env.getProperty(\"spring.datasource.username\"));\n    dataSource.setPassword(env.getProperty(\"spring.datasource.password\"));\n    return dataSource;\n  }\n\n  @Bean(name = \"primaryEntityManager\")\n  @Primary\n  public LocalContainerEntityManagerFactoryBean primaryEntityManager() {\n    LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n    em.setDataSource(primaryDataSourceConfiguration());\n    /**\n      this is the package url which contains entities of primary datasource\n      **/\n    em.setPackagesToScan(\"com.springboot.data.jpa.multi.datasource.entity.primary\");\n\n    HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n    em.setJpaVendorAdapter(vendorAdapter);\n    HashMap&lt;String, Object&gt; properties = new HashMap&lt;String, Object&gt;();\n    properties.put(\"hibernate.hbm2ddl.auto\", env.getProperty(\"spring.jpa.hibernate.ddl-auto\"));\n    properties.put(\"hibernate.dialect\", env.getProperty(\"spring.jpa.hibernate.hibernate.dialect\"));\n    em.setJpaPropertyMap(properties);\n    return em;\n  }\n\n  @Bean(name = \"primaryTransactionManager\")\n  @Primary\n  public PlatformTransactionManager primaryTransactionManager() {\n    JpaTransactionManager jpaTransactionManager = new JpaTransactionManager();\n    jpaTransactionManager.setEntityManagerFactory(primaryEntityManager().getObject());\n    return jpaTransactionManager;\n  }\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_5_create_and_config_configuration_file_for_secondary_schema","title":"Step 5: Create And Config Configuration File For Secondary Schema","text":"<ul> <li>To config for <code>secondary schema</code> we need to create a configuration file named <code>secondaryDataSourceConfiguration.java</code> in the package <code>configurations</code></li> <li>The configuration for the <code>secondary datasource</code> is showed as below:</li> </ul> SecondarySchemaConfiguration.java<pre><code>package com.springboot.data.jpa.multi.datasource.configuration;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.transaction.PlatformTransactionManager;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Objects;\n\n@Configuration\n/**\n use this anotation to define the base package repository for secondary data source,\n the EntityFactory and the transactionManager\n **/\n@EnableJpaRepositories(basePackages = \"com.springboot.data.jpa.multi.datasource.repository.secondary\",\n        entityManagerFactoryRef = \"secondaryEntityManager\",\n        transactionManagerRef = \"secondaryTransactionManager\")\npublic class SecondarySchemaConfiguration {\n\n  @Autowired\n  private Environment env;\n\n  @Bean(name = \"secondaryDataSource\")\n  public DataSource secondaryDataSourceConfiguration() {\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\n    dataSource.setDriverClassName(Objects.requireNonNull(env.getProperty(\"spring.second-datasource.driverClassName\")));\n    dataSource.setUrl(env.getProperty(\"spring.second-datasource.url\"));\n    dataSource.setUsername(env.getProperty(\"spring.second-datasource.username\"));\n    dataSource.setPassword(env.getProperty(\"spring.second-datasource.password\"));\n    return dataSource;\n  }\n\n  @Bean(name = \"secondaryEntityManager\")\n  public LocalContainerEntityManagerFactoryBean secondaryEntityManager() {\n    LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n    em.setDataSource(secondaryDataSourceConfiguration());\n    /**\n      this is the package which contains entities of primary datasource\n      **/\n    em.setPackagesToScan(\"com.springboot.data.jpa.multi.datasource.entity.secondary\");\n    HibernateJpaVendorAdapter jpaVendorAdapter = new HibernateJpaVendorAdapter();\n    em.setJpaVendorAdapter(jpaVendorAdapter);\n    HashMap&lt;String, Object&gt; properties = new HashMap&lt;&gt;();\n    properties.put(\"hibernate.hbm2ddl.auto\", env.getProperty(\"spring.jpa.hibernate.ddl-auto\"));\n    properties.put(\"hibernate.dialect\", env.getProperty(\"spring.jpa.hibernate.hibernate.dialect\"));\n    em.setJpaPropertyMap(properties);\n    return em;\n  }\n\n  @Bean(name = \"secondaryTransactionManager\")\n  public PlatformTransactionManager secondaryTransactionManager() {\n    JpaTransactionManager transactionManager = new JpaTransactionManager();\n    transactionManager.setEntityManagerFactory(secondaryEntityManager().getObject());\n    return transactionManager;\n  }\n\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_6_create_and_config_configuration_file_for_transaction_chain","title":"Step 6: Create And Config Configuration File For Transaction Chain","text":"<ul> <li> <p>Sometime we will work with two/multiple databases in a single request, and if we have an error in any transaction of two schema while executing. We will need to revert all data which are saved in one of two databases. Thus we need to configure the <code>transaction chain</code> to handle this issue.</p> </li> <li> <p>Assume that we save a data into DB A successfully then we continous saving data to DB B. Unfortunally, saving data to DB B is failed and we want to revert the data which is saved into DB A.</p> </li> <li> <p>We need to create a configuration file named <code>TransactionChainConfiguration.java</code> in <code>configurations package</code>. The contents of file are showed as below:</p> </li> </ul> TransactionChainConfiguration.java<pre><code>package com.springboot.data.jpa.multi.datasource.configuration;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.transaction.ChainedTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n@Configuration\npublic class TransactionChainConfiguration {\n\n  /**\n    we will create ChainedTransactionManager by two PlatformTransactionManager\n    which are `primaryTransactionManager` and `secondaryTransactionManager`\n    because we want to revert transaction if one of them happens issue in saving data.\n    **/\n  @Bean(name = \"chainedTransactionManager\")\n  public ChainedTransactionManager transactionChainConfiguration(\n          @Qualifier(\"primaryTransactionManager\") PlatformTransactionManager primaryTransaction,\n          @Qualifier(\"secondaryTransactionManager\") PlatformTransactionManager secondaryTransaction) {\n    return new ChainedTransactionManager(primaryTransaction, secondaryTransaction);\n  }\n\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_7_declare_entity_in_using_with_multi_datasources","title":"Step 7: Declare Entity In Using With Multi Datasources","text":"<ul> <li>For delaration entities, please look at the examples belows:</li> </ul> PrimaryCustomerEntity.java<pre><code>package com.springboot.data.jpa.multi.datasource.entity.primary;\n\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport java.util.Date;\nimport java.util.UUID;\n\n@Entity\n/**\n This entity is used for primary DB with the schema = \"primaryDb\"\n **/\n@Table(schema = \"primaryDb\", name = \"customers\")\npublic class PrimaryCustomerEntity {\n\n  @Id\n  @GeneratedValue\n  @Type(type=\"uuid-char\")\n  private UUID id;\n  private String fullName;\n  private String email;\n  private String address;\n  private String phone;\n  private Date dob;\n\n  public UUID getId() {\n    return id;\n  }\n\n  public void setId(UUID id) {\n    this.id = id;\n  }\n\n  public String getFullName() {\n    return fullName;\n  }\n\n  public void setFullName(String fullName) {\n    this.fullName = fullName;\n  }\n\n  public String getEmail() {\n    return email;\n  }\n\n  public void setEmail(String email) {\n    this.email = email;\n  }\n\n  public String getAddress() {\n    return address;\n  }\n\n  public void setAddress(String address) {\n    this.address = address;\n  }\n\n  public String getPhone() {\n    return phone;\n  }\n\n  public void setPhone(String phone) {\n    this.phone = phone;\n  }\n\n  public Date getDob() {\n    return dob;\n  }\n\n  public void setDob(Date dob) {\n    this.dob = dob;\n  }\n}\n</code></pre> CustomerEntity.java<pre><code>package com.springboot.data.jpa.multi.datasource.entity.secondary;\n\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport java.util.Date;\nimport java.util.UUID;\n\n@Entity\n@Table(schema = \"secondaryDb\", name = \"customers\")\npublic class CustomerEntity {\n\n  @Id\n  @GeneratedValue\n  @Type(type=\"uuid-char\")\n  private UUID id;\n  private String fullName;\n  private String email;\n  private String address;\n  private String phone;\n  private Date dob;\n\n  public UUID getId() {\n    return id;\n  }\n\n  public void setId(UUID id) {\n    this.id = id;\n  }\n\n  public String getFullName() {\n    return fullName;\n  }\n\n  public void setFullName(String fullName) {\n    this.fullName = fullName;\n  }\n\n  public String getEmail() {\n    return email;\n  }\n\n  public void setEmail(String email) {\n    this.email = email;\n  }\n\n  public String getAddress() {\n    return address;\n  }\n\n  public void setAddress(String address) {\n    this.address = address;\n  }\n\n  public String getPhone() {\n    return phone;\n  }\n\n  public void setPhone(String phone) {\n    this.phone = phone;\n  }\n\n  public Date getDob() {\n    return dob;\n  }\n\n  public void setDob(Date dob) {\n    this.dob = dob;\n  }\n\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_8_using_transaction_of_primary_and_secondary_datasource_in_service_class","title":"Step 8: Using Transaction Of Primary And Secondary Datasource In Service Class","text":"<ul> <li> <p>To use <code>Transactional</code> for primary or secondary DB when we need to get/update data we need to declare which <code>Transactional (belong to which DB)</code> that we want to use. Let's see the example below</p> </li> <li> <p>We will create a service class named <code>GeneralService</code>. Then we Autowired two repositories, one for <code>primary datasource</code> and one for <code>secondary datasource</code>.</p> </li> </ul> GeneralService.java<pre><code>package com.springboot.data.jpa.multi.datasource.service;\n\nimport com.springboot.data.jpa.multi.datasource.entity.primary.PrimaryCustomerEntity;\nimport com.springboot.data.jpa.multi.datasource.entity.secondary.CustomerEntity;\nimport com.springboot.data.jpa.multi.datasource.model.Customer;\nimport com.springboot.data.jpa.multi.datasource.repository.primary.PrimaryCustomerRepository;\nimport com.springboot.data.jpa.multi.datasource.repository.secondary.CustomerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.UUID;\n\n@Service\n/**\n use  @EnableTransactionManagement to enable using Transactional Management\n **/\n@EnableTransactionManagement\npublic class GeneralService {\n\n  @Autowired\n  private PrimaryCustomerRepository primaryCustomerRepository;\n\n  @Autowired\n  private CustomerRepository customerRepository;\n\n  /**\n    use @Transactional with value (bean name of primaryTransactionManager)\n    so the Jpa will know which transaction that we want to use.\n    **/\n  @Transactional(value = \"primaryTransactionManager\")\n  public UUID saveDataToPrimaryCustomerSchema(Customer customer) {\n    PrimaryCustomerEntity primaryCustomerEntity = new PrimaryCustomerEntity();\n    primaryCustomerEntity.setAddress(customer.getAddress());\n    primaryCustomerEntity.setEmail(customer.getEmail());\n    primaryCustomerEntity.setFullName(customer.getFullName());\n    primaryCustomerEntity.setPhone(customer.getPhone());\n    primaryCustomerEntity.setDob(customer.getDob());\n    return primaryCustomerRepository.save(primaryCustomerEntity).getId();\n  }\n\n  /**\n    use @Transactional with value (bean name of secondaryTransactionManager)\n    so the Jpa will know which transaction that we want to use.\n    **/\n  @Transactional(value = \"secondaryTransactionManager\")\n  public UUID saveDataToSecondaryCustomerSchema(Customer customer) {\n    CustomerEntity customerEntity = new CustomerEntity();\n    customerEntity.setAddress(customer.getAddress());\n    customerEntity.setEmail(customer.getEmail());\n    customerEntity.setFullName(customer.getFullName());\n    customerEntity.setPhone(customer.getPhone());\n    customerEntity.setDob(customer.getDob());\n    return customerRepository.save(customerEntity).getId();\n  }\n\n  /**\n    use @Transactional with value (bean name of chainedTransactionManager)\n    so the Jpa will know which transaction that we want to use.\n    If saving data to secondary is failed, so the data\n    which is saved in primary DB will be reverted.\n    **/\n  @Transactional(value = \"chainedTransactionManager\")\n  public List&lt;UUID&gt; saveDataToAllSchemas(Customer customer) {\n    UUID primaryCustomerId = saveDataToPrimaryCustomerSchema(customer);\n    UUID customerId = saveDataToSecondaryCustomerSchema(customer);\n    /**\n      this comment function is used for revert all data in DB\n      when this function is executed successfully\n      **/\n    // TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n    return Arrays.asList(primaryCustomerId, customerId);\n  }\n\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#step_9_testing","title":"Step 9: Testing","text":"<ul> <li>Now, execute apis to primary datasource, secondary datasource and for all schemas, you can see the results as below</li> </ul> <ul> <li>After saving data into two databases, we can go to primary and secondary database to check the data as the images below:</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Multi%20Datasources/#references","title":"References","text":"<ul> <li>You can view all source code here</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/","title":"Pagination With JPA Introduction","text":"","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#dependencies","title":"Dependencies","text":"<ul> <li>First, you need to add some dependencies below into your <code>pom.xml</code>. In this example I will use <code>mysql database</code>. You can choose other databases if you like, Database Configuration In SpringBoot maybe is helpful for you.</li> </ul> pom.xml<pre><code>    &lt;dependencies&gt;\n\n        &lt;!-- ....other dependencies... --&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- ....other dependencies... --&gt;\n\n    &lt;/dependencies&gt;\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#implementation","title":"Implementation","text":"","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#entity_and_models","title":"Entity And Models","text":"<ul> <li>First, you need to create an <code>Entity</code> which will reflect with the table in your database and It will be the object for manipulation information between JPA and Database. Below is my example <code>Entity</code></li> </ul> PostEntity.java<pre><code>    package com.application.adapter.models.entities;\n\n    import javax.persistence.Column;\n    import javax.persistence.Entity;\n    import javax.persistence.Id;\n    import javax.persistence.Table;\n\n    @Entity\n    @Table(name = \"Post\")\n    public class PostEntity {\n\n\n        @Id\n        @Column(name = \"ID\", length = 36)\n        private String id;\n\n        @Column(name = \"CREATED_DATE\", length = 50)\n        private String createdDate;\n\n        @Column(name = \"LAST_MODIFIED_DATE\", length = 50)\n        private String lastModifiedDate;\n\n        @Column(name = \"AUTHOR\", length = 100, nullable = false)\n        private String author;\n\n        @Column(name = \"TITLE\", nullable = false)\n        private String title;\n\n        @Column(name = \"CONTENT\", nullable = false)\n        private String content;\n\n        @Column(name = \"SUMMARY\", nullable = false)\n        private String summary;\n\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getCreatedDate() {\n            return createdDate;\n        }\n\n        public void setCreatedDate(String createdDate) {\n            this.createdDate = createdDate;\n        }\n\n        public String getLastModifiedDate() {\n            return lastModifiedDate;\n        }\n\n        public void setLastModifiedDate(String lastModifiedDate) {\n            this.lastModifiedDate = lastModifiedDate;\n        }\n\n        public String getAuthor() {\n            return author;\n        }\n\n        public void setAuthor(String author) {\n            this.author = author;\n        }\n\n        public String getTitle() {\n            return title;\n        }\n\n        public void setTitle(String title) {\n            this.title = title;\n        }\n\n        public String getContent() {\n            return content;\n        }\n\n        public void setContent(String content) {\n            this.content = content;\n        }\n\n        public String getSummary() {\n            return summary;\n        }\n\n        public void setSummary(String summary) {\n            this.summary = summary;\n        }\n    }\n</code></pre> <ul> <li>Next, We will create a model for filter request which contains some information like <code>current page</code>,  <code>number of item in page</code>, <code>sort field</code> and <code>sort order</code>.</li> </ul> Filter.java<pre><code>    package com.application.adapter.models.request;\n\n\n    import javax.validation.constraints.NotNull;\n\n    public class Filter {\n\n        // current page\n        @NotNull\n        private Integer page;\n\n        // number of item in page\n        @NotNull\n        private Integer pageSize;\n\n        // sort field\n        private String sortField;\n\n        //sort order\n        private SortOrder sortOrder;\n\n        public Integer getPage() {\n            return page;\n        }\n\n        public void setPage(Integer page) {\n            this.page = page;\n        }\n\n        public Integer getPageSize() {\n            return pageSize;\n        }\n\n        public void setPageSize(Integer pageSize) {\n            this.pageSize = pageSize;\n        }\n\n        public String getSortField() {\n            return sortField;\n        }\n\n        public void setSortField(String sortField) {\n            this.sortField = sortField;\n        }\n\n        public SortOrder getSortOrder() {\n            return sortOrder;\n        }\n\n        public void setSortOrder(SortOrder sortOrder) {\n            this.sortOrder = sortOrder;\n        }\n    }\n</code></pre> <ul> <li>Then create a model for response result.</li> </ul> PostResponse.java<pre><code>    package com.application.adapter.models.response;\n\n    public class PostResponse {\n\n        private String id;\n\n        private String createdDate;\n\n        private String lastModifiedDate;\n\n        private String title;\n\n        private String summary;\n\n        private String author;\n\n        private String content;\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getCreatedDate() {\n            return createdDate;\n        }\n\n        public void setCreatedDate(String createdDate) {\n            this.createdDate = createdDate;\n        }\n\n        public String getLastModifiedDate() {\n            return lastModifiedDate;\n        }\n\n        public void setLastModifiedDate(String lastModifiedDate) {\n            this.lastModifiedDate = lastModifiedDate;\n        }\n\n        public String getTitle() {\n            return title;\n        }\n\n        public void setTitle(String title) {\n            this.title = title;\n        }\n\n        public String getSummary() {\n            return summary;\n        }\n\n        public void setSummary(String summary) {\n            this.summary = summary;\n        }\n\n        public String getAuthor() {\n            return author;\n        }\n\n        public void setAuthor(String author) {\n            this.author = author;\n        }\n\n        public String getContent() {\n            return content;\n        }\n\n        public void setContent(String content) {\n            this.content = content;\n        }\n    }\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#respository","title":"RESPOSITORY","text":"<ul> <li>Now, you need to create a <code>Respository</code> which will be the layer to help you do queries and get results from your database, because we are using JPA for paging and sorting so we will extend our repository from <code>PagingAndSortingRepository</code> that JPA provided.</li> </ul> PostPagingRepository.java<pre><code>    package com.application.adapter.repositories;\n\n    import com.application.adapter.models.entities.PostEntity;\n    import org.springframework.data.repository.PagingAndSortingRepository;\n    import org.springframework.stereotype.Repository;\n\n    @Repository\n    public interface PostPagingRepository extends PagingAndSortingRepository&lt;PostEntity, Long&gt; {\n    }\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#service","title":"Service","text":"<ul> <li>So now, you can create a <code>Service</code> and put some implementation code as below. Note that because we are extending our repository from <code>PagingAndSortingRepository</code> so we have to use <code>Pageable</code> and <code>Page</code> of JPA as the object for queries and response results from database, respectively.</li> </ul> TodoServiceImpl.java<pre><code>    package com.application.adapter.services;\n\n    import com.application.adapter.models.entities.PostEntity;\n    import com.application.adapter.models.request.Filter;\n    import com.application.adapter.models.request.Post;\n    import com.application.adapter.models.response.PostResponse;\n    import com.application.adapter.repositories.PostPagingRepository;\n    import com.application.adapter.utilities.MapperUtil;\n    import org.apache.commons.lang.StringUtils;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.beans.factory.annotation.Qualifier;\n    import org.springframework.beans.factory.annotation.Value;\n    import org.springframework.data.domain.Page;\n    import org.springframework.data.domain.PageRequest;\n    import org.springframework.data.domain.Pageable;\n    import org.springframework.data.domain.Sort;\n    import org.springframework.stereotype.Service;\n\n    import java.util.List;\n    import java.util.stream.Collectors;\n\n    @Service\n    public class TodoServiceImpl implements TodoService{\n\n        @Autowired\n        private PostPagingRepository pagingRepository;\n\n        @Value(\"${post.page.defaultKey}\")\n        private String defaultSortField;\n\n        @Override\n        public List&lt;PostResponse&gt; filterPosts(Filter filter) {\n            Pageable pageable;\n            if(StringUtils.isEmpty(filter.getSortField())) {\n                pageable = PageRequest.of(filter.getPage(), filter.getPageSize(), Sort.by(defaultSortField).descending());\n            } else if(!StringUtils.isEmpty(filter.getSortField()) &amp;&amp; filter.getSortOrder() == null) {\n                pageable = PageRequest.of(filter.getPage(), filter.getPageSize(), Sort.by(filter.getSortField()).descending());\n            } else {\n                pageable = PageRequest.of(filter.getPage(), filter.getPageSize(),Sort\n                .by(Sort.Direction.valueOf(filter.getSortOrder().name()), filter.getSortField()));\n            }\n            Page&lt;PostEntity&gt; page = pagingRepository.findAll(pageable);\n            List&lt;PostEntity&gt; entities = page.getContent();\n\n            //after got entities, then map them to response model.\n            return entities.stream().map(e -&gt; MapperUtil.mappingObject(e, new PostResponse())).collect(Collectors.toList());\n        }\n    }\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#controller","title":"Controller","text":"<ul> <li>Finally, let's create a simple controller with an filter api and inject your service for using.</li> </ul> ApiController.java<pre><code>    package com.application.adapter.controller;\n\n    import com.application.adapter.models.request.Filter;\n    import com.application.adapter.models.request.Post;\n    import com.application.adapter.models.response.PostResponse;\n    import com.application.adapter.services.TodoService;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.http.HttpStatus;\n    import org.springframework.http.ResponseEntity;\n    import org.springframework.lang.NonNull;\n    import org.springframework.lang.Nullable;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.*;\n\n    import javax.validation.Valid;\n    import javax.validation.constraints.NotNull;\n    import javax.websocket.server.PathParam;\n    import java.util.List;\n\n\n    @Controller\n    public class ApiController {\n\n        @Autowired\n        private TodoService todoService;\n\n        @RequestMapping(method = RequestMethod.POST, path = \"blog/posts/filter\")\n        public ResponseEntity&lt;List&lt;PostResponse&gt;&gt; filterPosts(@RequestBody @NotNull @Valid Filter filter) {\n            return new ResponseEntity&lt;&gt;(todoService.filterPosts(filter), HttpStatus.OK);\n        }\n    }\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#testing","title":"Testing","text":"<ul> <li>Using postman and call to your api with filter body as below</li> </ul> <pre><code>    //Filter body request\n\n    {\n        \"page\": 0,\n        \"pageSize\": 5,\n        \"sortField\": \"createdDate\",\n        \"sortOrder\": \"DESC\"\n    }\n</code></pre> <pre><code>    //Response body\n\n    [\n        {\n            \"id\": \"d182f776-615b-4d21-bd5e-3815c6b1e013\",\n            \"createdDate\": \"03-04-2021 18:56:22\",\n            \"lastModifiedDate\": \"03-04-2021 18:56:22\",\n            \"title\": \"How to master java\",\n            \"summary\": \"There are some tips to master java at home\",\n            \"author\": \"minh duc\",\n            \"content\": \"There are some tips to master java at home\"\n        },\n        {\n            \"id\": \"01f196dd-db86-4faa-afc8-208f5ae97069\",\n            \"createdDate\": \"03-04-2021 18:56:21\",\n            \"lastModifiedDate\": \"03-04-2021 18:56:21\",\n            \"title\": \"How to master java\",\n            \"summary\": \"There are some tips to master java at home\",\n            \"author\": \"minh duc\",\n            \"content\": \"There are some tips to master java at home\"\n        },\n        {\n            \"id\": \"3f89c7ff-d738-4caf-bc41-7d00ca09f6c5\",\n            \"createdDate\": \"03-04-2021 18:56:19\",\n            \"lastModifiedDate\": \"03-04-2021 18:56:19\",\n            \"title\": \"How to master java\",\n            \"summary\": \"There are some tips to master java at home\",\n            \"author\": \"minh duc\",\n            \"content\": \"There are some tips to master java at home\"\n        },\n        {\n            \"id\": \"b352cf2a-fc18-43de-aac0-9d5053a62d0c\",\n            \"createdDate\": \"03-04-2021 18:55:59\",\n            \"lastModifiedDate\": \"03-04-2021 18:55:59\",\n            \"title\": \"How to master java\",\n            \"summary\": \"There are some tips to master java at home\",\n            \"author\": \"minh duc\",\n            \"content\": \"There are some tips to master java at home\"\n        }\n    ]\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/JPA%20With%20Pagination/#see_also","title":"See Also","text":"<p>Database Configuration In SpringBoot</p>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Object%20Relational%20Mapping/","title":"Object Relational Mapping Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Object%20Relational%20Mapping/#what_is_the_object_relation_mapping_orm","title":"What is the Object Relation Mapping (ORM)?","text":"<ul> <li><code>Object-Relational Mapping (ORM)</code> is a programming technique for converting data between relational databases and object oriented programming languages such as Java, C#, etc.</li> <li>An <code>ORM</code> system has the following advantages over plain  JDBC.</li> </ul> No. Advantages 1 Let\u2019s business code access objects rather than DB tables. 2 Hides details of SQL queries from OO logic. 3 Based on  JDBC 4 No need to deal with the database implementation. 5 Entities based on business concepts rather than database structure. 6 Transaction management and automatic key generation. 7 Fast development of application. <p>An <code>ORM</code> solution consists of the following four entities</p> No. Solutions 1 An API to perform basic CRUD operations on objects of persistent classes. 2 A language or API to specify queries that refer to classes and properties of classes. 3 A configurable facility for specifying mapping metadata. 4 A technique to interact with transactional objects to perform dirty checking, lazy association fetching, and other optimization functions. <ul> <li>There are several persistent frameworks and ORM options in Java. A persistent framework is an ORM service that stores and retrieves objects into a relational database.<ul> <li>TopLink</li> <li>Hibernate</li> <li>And many more</li> </ul> </li> <li>We will mainly focus on <code>Hibernate</code> because it is the most popular one.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Object%20Relational%20Mapping/#see_also","title":"See Also","text":"<ul> <li>Hibernate</li> <li>Spring Data JDBC</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Object%20Relational%20Mapping/#references","title":"References","text":"<ul> <li>From Source Information</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Open%20Session%20In%20View%20Of%20JPA/","title":"Open Session In View Of JPA","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Open%20Session%20In%20View%20Of%20JPA/#what_is_the_open_session_in_view_of_jpa","title":"What Is The Open Session In View Of JPA","text":"<ul> <li>Session per request is a transactional pattern to tie the persistence session and request life-cycles together. Not surprisingly, Spring comes with its own implementation of this pattern, named OpenSessionInViewInterceptor, to facilitate working with lazy associations and therefore, improving developer productivity.</li> <li>By default In  SpringBoot Service, JPA use OSIV (Open session in view) parttern with <code>open-in-view=true</code> configuration which allow a session will be created when the a HTTP request come in the <code>SpringBoot</code> service and this session will be closed until the HTTP request has been end. This session is bound into the TransactionSynchronizationManager. So It means that there is a Transaction that will be opened from from the beginning to the end of the HTTP request. So that's the reason why although you put a lot of queries and do update to many tables in Database or get child entities from parent entities you just can see in the log just one <code>JDBC</code> connection is used (physical database connection) with many SQL statements. So, if your service is small and you don't call any request to another system, just work with your DB so it is okay for you, you can manipulate with data in DB anywhere in your service methods. But if you have to call to another system, so using this way is not too good, because the <code>transaction</code> and database connection will be hold for a long time and can make the connection pool become full if there are may request at the same time, you can see this issue happen when you run your springboot service on production.</li> <li>If we set <code>open-in-view=false</code>, then be careful when you use Lazy loading because now, every executed query will be made in a <code>transaction</code> and connection privately, you can image that if there are 3 queries in your service method, so every time the query is executed, then a <code>transaction</code> and connection will be created and executed into the database and closed, then 3 queries you will have 3 times to make connections to DB. So if you use lazy load, you get parent from the first query, then you get childs from parent the LazyInitializationException will be through because the <code>transaction</code> of getting parent has been closed. So using this way is better when your service is interacting with many systems, the DB connections in pool will not be hold for a long time and we can improve our service performance on production when we received many connections because connections are opened and closed instantly.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Open%20Session%20In%20View%20Of%20JPA/#see_also","title":"See Also","text":"<ul> <li>Spring Data JPA</li> <li>Transaction</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Open%20Session%20In%20View%20Of%20JPA/#references","title":"References","text":"<ul> <li>You can find more here</li> <li>You can find more here</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Context/","title":"Persistence Context Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Context/#what_is_the_persistence_context","title":"What Is The Persistence Context","text":"<ul> <li><code>Persistence context</code>: The <code>persistence context</code> defines the set of active instances that the application is handling. The <code>persistence context</code> can be created manually or through injection.<ul> <li>The <code>Persistence Context</code> is responsible for JPA entity management: When an application loads an Entity from the database, the <code>entity</code> is in fact stored in the <code>Persistence Context</code>, so the <code>entity</code> becomes managed by the <code>Persistence Context</code>. Any further change made over that same <code>entity</code> will be monitored by the <code>Persistence Context</code>.</li> <li>The <code>Persistence Context</code> will also flush changed <code>entities</code> to the database when appropriate. When a transaction commits, the associated <code>Persistence Context</code> will also flush any eventual pending changes to the Database.</li> <li>We can understand like the <code>persistence context</code> is the first-level cache where all the <code>entities</code> are fetched from the database or saved to the database.</li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Context/#persistence_context_types","title":"Persistence Context Types","text":"<ul> <li><code>Persistence Context</code> have two types:<ul> <li>Container Managed Persistence Context</li> <li>Application Managed Persistence Context</li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Context/#see_also","title":"See Also","text":"<ul> <li>Entity</li> <li>Container Managed Persistence Context</li> <li>Application Managed Persistence Context</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Unit/","title":"Persistence Unit Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Unit/#what_is_the_persistence_unit","title":"What Is The Persistence Unit?","text":"<ul> <li><code>Persistence Unit</code>:  Defines a complete  Object-Relational Model mapping (ORM) (entities + supporting structures) with a relational database. The EntityManagerFactory uses this data to create a EntityManager that is associated with a Persistence Context.</li> <li>A<code>persistence unit</code> specifies all entities, which are managed by the <code>EntityManagers</code> of the application. Each <code>persistence unit</code> contains all entities classes representing the data stored in a single database.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Persistence%20Unit/#see_also","title":"See Also","text":"<ul> <li>Object Relational Mapping</li> <li>EntityManagerFactory</li> <li>EntityManager</li> <li>Persistence Context</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20Hibernate%20Second%20Level%20Cache/","title":"Hibernate Second Level Cache","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/","title":"JPA Entity Lifecycle Events","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#what_are_entity_lifecycle_events","title":"What Are Entity Lifecycle Events?","text":"<ul> <li>In the context of Java Persistence API (JPA), entity lifecycle events refer to the various points during the existence of an entity when specific operations or events are triggered. JPA provides a set of standard lifecycle events that correspond to different phases in the life of an entity. These events allow developers to execute custom logic or actions in response to certain state transitions of the entity.</li> <li>Below are all supported events of JPA.</li> </ul> Event Annotation Description PrePersist <code>@PrePersist</code> Executed before a new entity is persisted. PostPersist <code>@PostPersist</code> Executed after a new entity has been persisted. PreRemove <code>@PreRemove</code> Executed before an entity is removed from the database. PostRemove <code>@PostRemove</code> Executed after an entity has been removed from the database. PreUpdate <code>@PreUpdate</code> Executed before an entity is updated in the database. PostUpdate <code>@PostUpdate</code> Executed after an entity has been updated in the database. PostLoad <code>@PostLoad</code> Executed after an entity has been loaded into the persistence context. <ul> <li>Example</li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Slf4j\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @PrePersist\n    public void logNewCustomerAttempt() {\n        log.info(\"@PrePersist Attempting to add new Customer with username: \" + this.fullName);\n    }\n\n    @PostPersist\n    public void logNewCustomerAdded() {\n        log.info(\"@PostPersist Added Customer '\" + this.fullName + \"' with ID: \" + this.id);\n    }\n\n    @PreRemove\n    public void logCustomerRemovalAttempt() {\n        log.info(\"@PreRemove Attempting to delete Customer: \" + this.fullName);\n    }\n\n    @PostRemove\n    public void logCustomerRemoval() {\n        log.info(\"@PostRemove Deleted Customer: \" + this.fullName);\n    }\n\n    @PreUpdate\n    public void logCustomerUpdateAttempt() {\n        log.info(\"@PreUpdate Attempting to update Customer: \" + this.fullName);\n    }\n\n    @PostUpdate\n    public void logCustomerUpdate() {\n        log.info(\"@PostUpdate Updated Customer: \" + this.fullName);\n    }\n\n    @PostLoad\n    public void logCustomerLoad() {\n        log.info(\"@PostLoad load customer: \" + this.fullName);\n    }\n\n}\n</code></pre> <ul> <li> <p>With the example above we are using the lifecycle event annotations directly in the entity through callback methods. Remember that these methods have to have a void return type.</p> </li> <li> <p>There is another way to use these annotations is creating an\u00a0<code>EntityListener</code> with annotated callback methods.</p> </li> </ul> CustomerListener.java<pre><code>package com.springboot.project.entity;\n\n\nimport jakarta.persistence.PostLoad;\nimport jakarta.persistence.PostPersist;\nimport jakarta.persistence.PostRemove;\nimport jakarta.persistence.PostUpdate;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.PreRemove;\nimport jakarta.persistence.PreUpdate;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\npublic class CustomerListener {\n\n    @PrePersist\n    public void logNewCustomerAttempt(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Attempting to add new Customer with username: \" + customerEntity.getFullName());\n    }\n\n    @PostPersist\n    public void logNewCustomerAdded(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Added Customer '\" + customerEntity.getFullName() + \"' with ID: \" + customerEntity.getId());\n    }\n\n    @PreRemove\n    public void logCustomerRemovalAttempt(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Attempting to delete Customer: \" + customerEntity.getFullName());\n    }\n\n    @PostRemove\n    public void logCustomerRemoval(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Deleted Customer: \" + customerEntity.getFullName());\n    }\n\n    @PreUpdate\n    public void logCustomerUpdateAttempt(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Attempting to update Customer: \" + customerEntity.getFullName());\n    }\n\n    @PostUpdate\n    public void logCustomerUpdate(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Updated Customer: \" + customerEntity.getFullName());\n    }\n\n    @PostLoad\n    public void logCustomerLoad(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener load customer: \" + customerEntity.getFullName());\n    }\n\n}\n</code></pre> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@EntityListeners(CustomerListener.class)\n@Entity\n@Slf4j\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n}\n</code></pre> <ul> <li> <p>As you can see we will create a <code>CustomerListener</code> and put callback methods with lifecycle annotations above. These callback methods have to have a void return type also.</p> </li> <li> <p>We can also use two approaches above at the same time in the same entity.</p> </li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@EntityListeners(CustomerListener.class)\n@Entity\n@Slf4j\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @PrePersist\n    public void logNewCustomerAttempt() {\n        log.info(\"@PrePersist Attempting to add new Customer with username: \" + this.fullName);\n    }\n\n    @PostPersist\n    public void logNewCustomerAdded() {\n        log.info(\"@PostPersist Added Customer '\" + this.fullName + \"' with ID: \" + this.id);\n    }\n\n    @PreRemove\n    public void logCustomerRemovalAttempt() {\n        log.info(\"@PreRemove Attempting to delete Customer: \" + this.fullName);\n    }\n\n    @PostRemove\n    public void logCustomerRemoval() {\n        log.info(\"@PostRemove Deleted Customer: \" + this.fullName);\n    }\n\n    @PreUpdate\n    public void logCustomerUpdateAttempt() {\n        log.info(\"@PreUpdate Attempting to update Customer: \" + this.fullName);\n    }\n\n    @PostUpdate\n    public void logCustomerUpdate() {\n        log.info(\"@PostUpdate Updated Customer: \" + this.fullName);\n    }\n\n    @PostLoad\n    public void logCustomerLoad() {\n        log.info(\"@PostLoad load customer: \" + this.fullName);\n    }\n\n}\n</code></pre> <ul> <li>Usually we will use <code>EntityListener</code> approach in cases that we want to apply some operations for multiple entities.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#example","title":"Example","text":"<ul> <li>Now, let's take an example for applying JPA lifecycle event annotations.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#dependency","title":"Dependency","text":"<ul> <li>Let's create an sample project and add these dependencies below.</li> </ul> pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- postgresql driver --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.6.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!-- lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.28&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Apache commons-lang3 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n            &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- slf4j --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n            &lt;version&gt;0.2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;jakarta.validation&lt;/groupId&gt;\n            &lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;\n            &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.swagger.core.v3&lt;/groupId&gt;\n            &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.2.16&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n            &lt;version&gt;8.0.1.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;\n            &lt;version&gt;1.5.5.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre> <ul> <li>Then let's apply the plugin below for OpenApi generator and Mapstruct</li> </ul> <pre><code> &lt;plugins&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n        &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;7.0.1&lt;/version&gt;\n        &lt;executions&gt;\n            &lt;execution&gt;\n                &lt;goals&gt;\n                    &lt;goal&gt;generate&lt;/goal&gt;\n                &lt;/goals&gt;\n                &lt;configuration&gt;\n                    &lt;!-- path to the openapi file spec `.yml` --&gt;\n                    &lt;inputSpec&gt;\n                        ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                    &lt;/inputSpec&gt;\n                    &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                    &lt;!-- generated package for api interface --&gt;\n                    &lt;apiPackage&gt;com.springboot.project.generated.api&lt;/apiPackage&gt;\n                    &lt;!-- generated package for models --&gt;\n                    &lt;modelPackage&gt;com.springboot.project.generated.model&lt;/modelPackage&gt;\n                    &lt;!-- using supportingFilesToGenerate --&gt;\n                    &lt;supportingFilesToGenerate&gt;\n                        ApiUtil.java\n                    &lt;/supportingFilesToGenerate&gt;\n                    &lt;configOptions&gt;\n                        &lt;useTags&gt;true&lt;/useTags&gt;\n                        &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                        &lt;java8&gt;false&lt;/java8&gt;\n                        &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                        &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                        &lt;performBeanValidation&gt;true&lt;/performBeanValidation&gt;\n                        &lt;useOptional&gt;false&lt;/useOptional&gt;\n                        &lt;useSpringBoot3&gt;true&lt;/useSpringBoot3&gt;\n                    &lt;/configOptions&gt;\n                &lt;/configuration&gt;\n            &lt;/execution&gt;\n        &lt;/executions&gt;\n    &lt;/plugin&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.11.0&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;source&gt;17&lt;/source&gt;\n            &lt;target&gt;17&lt;/target&gt;\n            &lt;annotationProcessorPaths&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n                    &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;\n                    &lt;version&gt;1.5.5.Final&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;version&gt;1.18.28&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok-mapstruct-binding&lt;/artifactId&gt;\n                    &lt;version&gt;0.2.0&lt;/version&gt;\n                &lt;/path&gt;\n            &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n        &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#openapi","title":"OpenApi","text":"<ul> <li>Now,  in the folder <code>resource</code>, we will create a folder <code>openapi</code> and a <code>openapi-server.yaml</code> inside it. The content of this file will look like below with some apis.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Customer - OpenAPI 3.0\n  description: Everything about sample hibernate second level cache\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.11\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v1\ntags:\n  - name: customer\n    description: Everything about your Customer\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: order\n    description: Everything about your Order\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\npaths:\n  /v1/customers:\n    get:\n      tags:\n        - customer\n      summary: get an existing customer info\n      description: get an existing customer info by Email\n      operationId: getCustomerInfoByEmail\n      parameters:\n        - name: email\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerDetail'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    post:\n      tags:\n        - customer\n      summary: Add a Customer to database\n      description: Add a Customer to database\n      operationId: addCustomer\n      requestBody:\n        description: Create a Customer to database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerDetail'\n        '405':\n          description: Invalid input\n  /v1/customers/{customerId}:\n    get:\n      tags:\n        - customer\n      summary: get an existing customer info\n      description: get an existing customer info by Id\n      operationId: getCustomer\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerDetail'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    put:\n      tags:\n        - customer\n      summary: Update an existing customer\n      description: Update an existing customer by Id\n      operationId: updateCustomer\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Update an existent customer in the database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerDetail'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerDetail'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    delete:\n      tags:\n        - customer\n      summary: delete an existing customer\n      description: delete an existing customer by Id\n      operationId: deleteCustomer\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Successful operation\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n  /v1/customers/action-filter:\n    post:\n      tags:\n        - customer\n      summary: filter customers\n      description: filter customers\n      operationId: filterCustomers\n      requestBody:\n        description: Update an existent customer in the database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerFilterRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomerDetail'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n\ncomponents:\n  schemas:\n    CustomerDetail:\n      allOf:\n        - $ref: '#/components/schemas/CustomerRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n\n    CustomerRequest:\n      type: object\n      required:\n        - email\n        - phone\n      properties:\n        fullName:\n          type: string\n        email:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum:\n            - M\n            - F\n        dob:\n          type: string\n          format: date\n\n    CustomerFilterRequest:\n      type: object\n      properties:\n        fullName:\n          type: string\n        email:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n</code></pre> <ul> <li>Now, we can use command <code>mvn clean install</code> to build and generate apis and model from <code>openapi-server.yaml</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#entity","title":"Entity","text":"<ul> <li>Then let's define  a <code>CustomerEnitty</code> as below.</li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@EntityListeners(CustomerListener.class)\n@Entity\n@Slf4j\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @PrePersist\n    public void logNewCustomerAttempt() {\n        log.info(\"@PrePersist Attempting to add new Customer with username: \" + this.fullName);\n    }\n\n    @PostPersist\n    public void logNewCustomerAdded() {\n        log.info(\"@PostPersist Added Customer '\" + this.fullName + \"' with ID: \" + this.id);\n    }\n\n    @PreRemove\n    public void logCustomerRemovalAttempt() {\n        log.info(\"@PreRemove Attempting to delete Customer: \" + this.fullName);\n    }\n\n    @PostRemove\n    public void logCustomerRemoval() {\n        log.info(\"@PostRemove Deleted Customer: \" + this.fullName);\n    }\n\n    @PreUpdate\n    public void logCustomerUpdateAttempt() {\n        log.info(\"@PreUpdate Attempting to update Customer: \" + this.fullName);\n    }\n\n    @PostUpdate\n    public void logCustomerUpdate() {\n        log.info(\"@PostUpdate Updated Customer: \" + this.fullName);\n    }\n\n    @PostLoad\n    public void logCustomerLoad() {\n        log.info(\"@PostLoad load customer: \" + this.fullName);\n    }\n\n}\n</code></pre> Gender.java<pre><code>package com.springboot.project.entity;  \n\npublic enum Gender {  \n\nM, F  \n\n}\n</code></pre> CustomerListener.java<pre><code>package com.springboot.project.entity;\n\n\nimport jakarta.persistence.PostLoad;\nimport jakarta.persistence.PostPersist;\nimport jakarta.persistence.PostRemove;\nimport jakarta.persistence.PostUpdate;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.PreRemove;\nimport jakarta.persistence.PreUpdate;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\npublic class CustomerListener {\n\n    @PrePersist\n    public void logNewCustomerAttempt(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Attempting to add new Customer with username: \" + customerEntity.getFullName());\n    }\n\n    @PostPersist\n    public void logNewCustomerAdded(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Added Customer '\" + customerEntity.getFullName() + \"' with ID: \" + customerEntity.getId());\n    }\n\n    @PreRemove\n    public void logCustomerRemovalAttempt(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Attempting to delete Customer: \" + customerEntity.getFullName());\n    }\n\n    @PostRemove\n    public void logCustomerRemoval(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Deleted Customer: \" + customerEntity.getFullName());\n    }\n\n    @PreUpdate\n    public void logCustomerUpdateAttempt(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Attempting to update Customer: \" + customerEntity.getFullName());\n    }\n\n    @PostUpdate\n    public void logCustomerUpdate(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener Updated Customer: \" + customerEntity.getFullName());\n    }\n\n    @PostLoad\n    public void logCustomerLoad(CustomerEntity customerEntity) {\n        log.info(\"CustomerListener load customer: \" + customerEntity.getFullName());\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will use two approaches for using lifecycle event annotations at the same time in <code>CustomerEntity</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#repository","title":"Repository","text":"<ul> <li>Now, lets create the Repository for the <code>CustomerEntity</code> above.</li> </ul> <pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt; {\n\n    Optional&lt;CustomerEntity&gt; findCustomerByEmail(String email);\n\n    @Query(\n            value = \"  SELECT * FROM customers c                                                      \"  +  /*1*/\n                    \"  WHERE (:full_name is null or c.full_name = :full_name)                         \"  +  /*2*/\n                    \"  AND   (:email is null or c.email = :email)                                     \"  +  /*3*/\n                    \"  AND   (:address is null or c.address = :address)                               \"  +  /*4*/\n                    \"  AND   (:phone is null or c.phone = :phone);                                    \",    /*5*/\n            nativeQuery = true\n    )\n    List&lt;CustomerEntity&gt; filterCustomers(@Param(\"full_name\") String fullName,\n                                         @Param(\"email\") String email,\n                                         @Param(\"address\") String address,\n                                         @Param(\"phone\") String phone);\n\n}\n</code></pre> <ul> <li>As you can see in this Repository we will define a method to filter customers using native query with optional params.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#dto","title":"Dto","text":"<ul> <li>Next, let's create DTOs for CustomerEntity and <code>CustomerFilterRequest</code> as below.</li> </ul> Customer.java<pre><code>package com.springboot.project.model;\n\nimport com.springboot.project.entity.Gender;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@NoArgsConstructor\npublic class Customer {\n\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    private Gender gender;\n    private Date dob;\n\n}\n</code></pre> CustomerFilter.java<pre><code>package com.springboot.project.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class CustomerFilter {\n\n    private String fullName;\n    private String address;\n    private String email;\n    private String phone;\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#mapper","title":"Mapper","text":"<ul> <li>Next, let's create a mapper interface for mapping Customer DTO, Entity and CustomerFilterRequest models using MapStruct.</li> </ul> AutoCustomerMapper.java<pre><code>package com.springboot.project.mapper;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.generated.model.CustomerDetail;\nimport com.springboot.project.generated.model.CustomerFilterRequest;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilter;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.List;\n\n@Mapper\npublic interface AutoCustomerMapper {\n\n    AutoCustomerMapper MAPPER = Mappers.getMapper(AutoCustomerMapper.class);\n\n    Customer mapToCustomerFromRequest(CustomerRequest customerRequest);\n\n    Customer mapToCustomerFromDetail(CustomerDetail customerDetail);\n\n    Customer mapToCustomer(CustomerEntity customerEntity);\n\n    CustomerEntity mapToCustomerEntity(Customer customer);\n\n    CustomerDetail mapToCustomerDetail(Customer customer);\n\n    void updateCustomerEntity(@MappingTarget CustomerEntity customerEntityTarget, CustomerEntity updateEntity);\n\n    List&lt;CustomerEntity&gt; mapToCustomerEntities(List&lt;Customer&gt; customers);\n\n    List&lt;Customer&gt; mapToCustomers(List&lt;CustomerEntity&gt; customerEntities);\n\n    List&lt;CustomerDetail&gt; mapToCustomerDetails(List&lt;Customer&gt; customers);\n\n    CustomerFilter mapToCustomerFilter(CustomerFilterRequest customerFilterRequest);\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#service","title":"Service","text":"<ul> <li>Now, with these classes that we defined above, we can create service class for handling logics for CRUD entities.</li> </ul> CustomerService.java<pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilter;\nimport com.springboot.project.repository.CustomerRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerService {\n\n    private final CustomerRepository customerRepository;\n\n    public Customer createCustomer(Customer customer) {\n        CustomerEntity customerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n        customerEntity = this.customerRepository.save(customerEntity);\n        return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity);\n    }\n\n    public Customer getCustomer(UUID customerId) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public List&lt;Customer&gt; filterCustomers(CustomerFilter customerFilter) {\n        List&lt;CustomerEntity&gt; foundCustomers = this.customerRepository\n                .filterCustomers(\n                        customerFilter.getFullName(),\n                        customerFilter.getEmail(),\n                        customerFilter.getAddress(),\n                        customerFilter.getPhone());\n        return AutoCustomerMapper.MAPPER.mapToCustomers(foundCustomers);\n    }\n\n    public Customer updateCustomer(UUID customerId, Customer customer) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            CustomerEntity existedCustomerEntity = customerEntity.get();\n            CustomerEntity updateCustomerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n            AutoCustomerMapper.MAPPER.updateCustomerEntity(existedCustomerEntity, updateCustomerEntity);\n            existedCustomerEntity = this.customerRepository.save(existedCustomerEntity);\n            return AutoCustomerMapper.MAPPER.mapToCustomer(existedCustomerEntity);\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void deleteCustomer(UUID customerId) {\n        this.customerRepository.deleteById(customerId);\n    }\n\n    public Customer findCustomerByEmail(String email) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findCustomerByEmail(email);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found! with email: \" + email);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#controller","title":"Controller","text":"<ul> <li>Now, we can create some basic controllers and implement the generated apis.</li> </ul> CustomerController.java<pre><code>package com.springboot.project.controller;\n\nimport com.springboot.project.generated.api.CustomerApi;\nimport com.springboot.project.generated.model.CustomerDetail;\nimport com.springboot.project.generated.model.CustomerFilterRequest;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilter;\nimport com.springboot.project.service.CustomerService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerController implements CustomerApi {\n\n    private final CustomerService customerService;\n\n    @Override\n    public ResponseEntity&lt;CustomerDetail&gt; addCustomer(CustomerRequest customerRequest) {\n        Customer customer = AutoCustomerMapper.MAPPER.mapToCustomerFromRequest(customerRequest);\n        customer = this.customerService.createCustomer(customer);\n        CustomerDetail customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerDetail(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerDetail&gt; getCustomer(UUID customerId) {\n        Customer customer = this.customerService.getCustomer(customerId);\n        CustomerDetail customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerDetail(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerDetail&gt; getCustomerInfoByEmail(String email) {\n        Customer customer = this.customerService.findCustomerByEmail(email);\n        CustomerDetail customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerDetail(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;CustomerDetail&gt;&gt; filterCustomers(CustomerFilterRequest customerFilterRequest) {\n        CustomerFilter customerFilter = AutoCustomerMapper.MAPPER.mapToCustomerFilter(customerFilterRequest);\n        List&lt;Customer&gt; customers = this.customerService.filterCustomers(customerFilter);\n        List&lt;CustomerDetail&gt; customerResponses = AutoCustomerMapper.MAPPER.mapToCustomerDetails(customers);\n        return new ResponseEntity&lt;&gt;(customerResponses, HttpStatus.OK);\n    }\n\n    @Override\n    public ResponseEntity&lt;Void&gt; deleteCustomer(UUID customerId) {\n        this.customerService.deleteCustomer(customerId);\n        return new ResponseEntity&lt;&gt;(HttpStatus.OK);\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerDetail&gt; updateCustomer(UUID customerId, CustomerDetail customerDetail) {\n        Customer customer = AutoCustomerMapper.MAPPER.mapToCustomerFromDetail(customerDetail);\n        customer = this.customerService.updateCustomer(customerId, customer);\n        return new ResponseEntity&lt;&gt;(AutoCustomerMapper.MAPPER.mapToCustomerDetail(customer), HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#testing","title":"Testing","text":"<ul> <li>Now, let's start the application then use the postman and with the request body as below.</li> </ul> <pre><code>{\n    \"fullName\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"address\": \"{{$randomStreetAddress}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\"\n}\n</code></pre> <ul> <li>Postman supports us to random some common fields every time we send the request body.</li> <li>Now, let's run the api CreateCustomer. Then we will have the log below.</li> </ul> <ul> <li>We can see <code>PrePersist</code> and <code>PostPersist</code> events are caught for both <code>CustomerListener</code>  and callback methods.</li> <li>Then if we update the entity then we will see the log below.</li> </ul> <ul> <li>The <code>PostLoad</code>, <code>PreUpdate</code> and <code>PostUpdate</code> are caught for both <code>CustomerListener</code>  and callback methods.</li> <li>Then if we get the entity then we will see the log below.</li> </ul> <p> - The <code>PostLoad</code> is caught for both <code>CustomerListener</code>  and callback methods. - Finally if we delete the entity then we will see the log below.</p> <p></p> <ul> <li>The <code>PostLoad</code>, <code>PreRemove</code> and <code>PostRemove</code> are caught for both <code>CustomerListener</code>  and callback methods.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#see_also","title":"See Also","text":"<ul> <li>SB 3x JPA Native Query Postgres Optional Params</li> <li>SB 3x JPA With Indexing</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Entity%20Lifecycle%20Events/#references","title":"References","text":"<ul> <li>Full Source Code</li> <li>Baeldung.com</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/","title":"JPA Native Query Postgres Full Text Search","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#what_is_the_full_text_search","title":"What Is The Full Text Search?","text":"<ul> <li> <p><code>Full Text Searching</code> (or just text search) provides the capability to identify natural-language documents that satisfy a query, and optionally to sort them by relevance to the query. The most common type of search is to find all documents containing given query terms and return them in order of their similarity to the query. Notions of query and similarity are very flexible and depend on the specific application. The simplest search considers query as a set of words and similarity as the frequency of query words in the document.</p> </li> <li> <p>Textual search operators have existed in databases for years.\u00a0PostgreSQL\u00a0has\u00a0<code>~</code>,\u00a0<code>~*</code>,\u00a0<code>LIKE</code>, and\u00a0<code>ILIKE</code>\u00a0operators for textual data types, but they lack many essential properties required by modern information systems:</p> <ul> <li> <p>There is no linguistic support, even for English. Regular expressions are not sufficient because they cannot easily handle derived words, e.g.,\u00a0<code>satisfies</code>\u00a0and\u00a0<code>satisfy</code>. You might miss documents that contain\u00a0<code>satisfies</code>, although you probably would like to find them when searching for\u00a0<code>satisfy</code>. It is possible to use\u00a0<code>OR</code>\u00a0to search for multiple derived forms, but this is tedious and error-prone (some words can have several thousand derivatives).</p> </li> <li> <p>They provide no ordering (ranking) of search results, which makes them ineffective when thousands of matching documents are found.</p> </li> <li> <p>They tend to be slow because there is no index support, so they must process all documents for every search.</p> </li> </ul> </li> <li> <p>Full text indexing allows documents to be preprocessed and an index saved for later rapid searching. Preprocessing includes:</p> <ul> <li> <p>Parsing documents into tokens. It is useful to identify various classes of tokens, e.g., numbers, words, complex words, email addresses, so that they can be processed differently. In principle token classes depend on the specific application, but for most purposes it is adequate to use a predefined set of classes. PostgreSQL uses a parser to perform this step. A standard parser is provided, and custom parsers can be created for specific needs.</p> </li> <li> <p>Converting tokens into lexemes. A lexeme is a string, just like a token, but it has been normalized so that different forms of the same word are made alike. For example, normalization almost always includes folding upper-case letters to lower-case, and often involves removal of suffixes (such as s or es in English). This allows searches to find variant forms of the same word, without tediously entering all the possible variants. Also, this step typically eliminates stop words, which are words that are so common that they are useless for searching. (In short, then, tokens are raw fragments of the document text, while lexemes are words that are believed useful for indexing and searching.) PostgreSQL uses dictionaries to perform this step. Various standard dictionaries are provided, and custom ones can be created for specific needs.</p> </li> <li> <p>Storing preprocessed documents optimized for searching. For example, each document can be represented as a sorted array of normalized lexemes. Along with the lexemes it is often desirable to store positional information to use for proximity ranking, so that a document that contains a more \u201cdense\u201d region of query words is assigned a higher rank than one with scattered query words.</p> </li> </ul> </li> <li> <p>Dictionaries allow fine-grained control over how tokens are normalized. With appropriate dictionaries, you can:</p> <ul> <li>Define stop words that should not be indexed.</li> <li>Map synonyms to a single word using Ispell.</li> <li>Map phrases to a single word using a thesaurus.</li> <li>Map different variations of a word to a canonical form using an Ispell dictionary.</li> <li>Map different variations of a word to a canonical form using Snowball stemmer rules.</li> </ul> </li> <li> <p>A data type <code>tsvector</code> is provided for storing preprocessed documents, along with a type <code>tsquery</code> for representing processed queries. There are many functions and operators available for these data types, the most important of which is the match operator <code>@@,</code> which we introduce in. <code>Full text searches</code> can be accelerated using indexes.</p> </li> <li> <p>Document Source</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#what_is_a_document","title":"What Is A Document?","text":"<ul> <li> <p><code>A document</code> is the unit of searching in a full text search system; for example, a magazine article or email message. The text search engine must be able to parse documents and store associations of lexemes (key words) with their parent document. Later, these associations are used to search for documents that contain query words.</p> </li> <li> <p>For searches within PostgreSQL, a document is normally a textual field within a row of a database table, or possibly a combination (concatenation) of such fields, perhaps stored in several tables or obtained dynamically. In other words, a document can be constructed from different parts for indexing and it might not be stored anywhere as a whole.</p> </li> <li> <p>For example: we have a table <code>customers</code> which contains some column as below.</p> </li> </ul> id address dob email full_name gender phone b94d2cb0-2b55-4191-b946-12dbd117cfa2 893 Bogisich Row 1995-10-10 07:00:00.000 Maximilian.Renner68@example.net Abel Rath IV M 377-802-6499 305920c6-102b-4592-a33d-15657d7ee515 57786 Selmer Squares 1995-10-10 07:00:00.000 Henri.Schowalter8@example.net Katrina Schulist M 417-341-8058 59f3a54c-5bde-4790-952a-3be66bc3f94e 7668 Schowalter Streets 1995-10-10 07:00:00.000 Chadrick_Beier@example.net Elbert Kris M 647-843-2866 6f623a35-f4b9-4a51-ad50-91c3206e41f6 3805 Estevan Radial 1995-10-10 07:00:00.000 Daniela.Quitzon20@example.com June Rowe M 841-709-3392 9f686134-e286-47b3-bb61-60bb56f5bad2 76029 Lloyd Points 1995-10-10 07:00:00.000 Reid_McDermott15@example.com Sammy King M 908-596-0825 <ul> <li>Then we will use the PostgresSQL below to create documents which contains combinations values of text columns as <code>address</code>, <code>email</code>, <code>full_nanme</code> and <code>phone</code> .</li> </ul> <pre><code>SELECT address || ' ' ||  email || ' ' ||  full_name  || ' ' || phone AS document\nFROM customers c\nlimit 5\n</code></pre> <ul> <li>After execute the query we have the result.</li> </ul> document 893 Bogisich Row Maximilian.Renner68@example.net Abel Rath IV 377-802-6499 57786 Selmer Squares Henri.Schowalter8@example.net Katrina Schulist 417-341-8058 7668 Schowalter Streets Chadrick_Beier@example.net Elbert Kris 647-843-2866 3805 Estevan Radial Daniela.Quitzon20@example.com June Rowe 841-709-3392 76029 Lloyd Points Reid_McDermott15@example.com Sammy King 908-596-0825 <ul> <li> <p>Now with these documents we can use them for creating <code>tsvector</code>.</p> </li> <li> <p>Document Source</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#what_is_the_tsvector_datatype","title":"What Is The <code>tsvector</code> Datatype?","text":"<ul> <li><code>PostgreSQL</code>\u00a0provides two data types that are designed to support full text search, which is the activity of searching through a collection of natural-language\u00a0documents\u00a0to locate those that best match a\u00a0query. The\u00a0<code>tsvector</code>\u00a0type represents a document in a form optimized for text search; the\u00a0<code>tsquery</code>\u00a0type similarly represents a text query.</li> <li>A <code>tsvector</code> value is a sorted list of distinct lexemes, which are words that have been normalized to merge different variants of the same word (see Chapter 12 for details). Sorting and duplicate-elimination are done automatically during input, as shown in this example:</li> </ul> <pre><code>SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;\n</code></pre> tsvector 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat' <ul> <li> <p>It is important to understand that the\u00a0<code>tsvector</code>\u00a0type itself does not perform any word normalization; it assumes the words it is given are normalized appropriately for the application.</p> </li> <li> <p>For most English-text-searching applications the above words would be considered non-normalized, but\u00a0<code>tsvector</code>\u00a0doesn't care. Raw document text should usually be passed through\u00a0<code>to_tsvector</code>\u00a0to normalize the words appropriately for searching.</p> </li> <li> <p>Document Source</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#what_is_the_to_tsvector_function","title":"What Is The <code>to_tsvector</code> function?","text":"<ul> <li>To implement full text searching there must be a function to create a tsvector from a document and a tsquery from a user query. Also, we need to return results in a useful order, so we need a function that compares documents with respect to their relevance to the query. It's also important to be able to display the results nicely. PostgreSQL provides support for all of these functions.</li> <li><code>PostgreSQL</code> provides the function <code>to_tsvector</code> for converting a <code>document</code> to the <code>tsvector</code> data type.</li> </ul> <pre><code>to_tsvector([ config regconfig, ] document text) returns tsvector\n</code></pre> <ul> <li><code>to_tsvector</code> parses a textual document into tokens, reduces the tokens to lexemes, and returns a <code>tsvector</code> which lists the lexemes together with their positions in the document. The document is processed according to the specified or default text search configuration. Here is a simple example:</li> </ul> <pre><code>SELECT to_tsvector('english','a fat cat sat on a mat - and ate a fat rat');\n</code></pre> to_tsvector 'ate':9 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 <ul> <li> <p>In the example above we see that the resulting <code>tsvector</code> does not contain the words <code>a</code>, <code>on</code> and <code>and</code> the word <code>rats</code> became <code>rat</code> and the punctuation sign\u00a0<code>-</code>\u00a0was ignored.</p> </li> <li> <p>The <code>to_tsvector</code> function internally calls a parser which breaks the <code>document</code> text into <code>tokens</code> and assigns a type to each token. For each <code>token</code>, a list of <code>dictionaries</code> is consulted, where the list can vary depending on the <code>token</code> type. The first dictionary that recognizes the <code>token</code> emits one or more normalized lexemes to represent the <code>token</code>. For example, <code>rats</code> became <code>rat</code> because one of the dictionaries recognized that the word <code>rats</code> is a plural form of <code>rat</code>. Some words are recognized as stop words, which causes them to be ignored since they occur too frequently to be useful in searching. In our example these are <code>a</code>, <code>on</code>, and <code>and</code>. If no dictionary in the list recognizes the token then it is also ignored. In this example that happened to the punctuation sign <code>-</code> because there are in fact no dictionaries assigned for its token type (Space symbols), meaning space tokens will never be indexed. The choices of parser, dictionaries and which types of tokens to index are determined by the selected text search configuration. It is possible to have many different configurations in the same database, and predefined configurations are available for various languages. In our example we used the default configuration <code>english</code> for the <code>English</code> language.</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#what_is_the_tsquery_datatype","title":"What Is The <code>tsquery</code> Datatype?","text":"<ul> <li>A\u00a0<code>tsquery</code>\u00a0value stores lexemes that are to be searched for, and can combine them using the Boolean operators\u00a0<code>&amp;</code>\u00a0(AND),\u00a0<code>|</code>\u00a0(OR), and\u00a0<code>!</code>\u00a0(NOT), as well as the phrase search operator\u00a0<code>&lt;-&gt;</code>\u00a0(FOLLOWED BY). There is also a variant\u00a0<code>&lt;N&gt;</code>\u00a0of the FOLLOWED BY operator, where\u00a0<code>N</code>\u00a0is an integer constant that specifies the distance between the two lexemes being searched for.\u00a0<code>&lt;-&gt;</code>\u00a0is equivalent to\u00a0<code>&lt;1&gt;</code>.</li> <li>Parentheses can be used to enforce grouping of these operators. In the absence of parentheses,\u00a0<code>!</code>\u00a0(NOT) binds most tightly,\u00a0<code>&lt;-&gt;</code>\u00a0(FOLLOWED BY) next most tightly, then\u00a0<code>&amp;</code>\u00a0(AND), with\u00a0<code>|</code>\u00a0(OR) binding the least tightly.</li> </ul> <pre><code>SELECT 'fat &amp; rat'::tsquery;\n</code></pre> tsquery 'fat' &amp; 'rat' <pre><code>SELECT 'fat &amp; (rat | cat)'::tsquery;\n</code></pre> <pre><code>| tsquery                  |\n+--------------------------+\n| 'fat' &amp; ( 'rat' | 'cat' )|\n</code></pre> <pre><code>SELECT 'fat &amp; rat &amp; ! cat'::tsquery;\n</code></pre> tsquery 'fat' &amp; 'rat' &amp; !'cat' <ul> <li>Searching for phrases is possible with the help of the\u00a0<code>&lt;-&gt;</code>\u00a0(FOLLOWED BY)\u00a0<code>tsquery</code>\u00a0operator, which matches only if its arguments have matches that are adjacent and in the given order. For example:</li> </ul> <pre><code>SELECT 'fatal &lt;-&gt; error'::tsquery;\n</code></pre> tsquery 'fatal' &lt;-&gt; 'error' <ul> <li>Also, lexemes in a\u00a0<code>tsquery</code>\u00a0can be labeled with\u00a0<code>*</code>\u00a0to specify prefix matching:</li> </ul> <pre><code>SELECT 'super:*'::tsquery;\n</code></pre> tsquery 'super':*","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#what_are_supported_functions_for_tsquery","title":"What Are Supported Functions For <code>tsquery</code>?","text":"<ul> <li> <p>In PostgreSQL, <code>to_tsquery</code>, <code>plainto_tsquery</code>, and <code>phraseto_tsquery</code> are functions related to full-text search. These functions are used to construct query strings in the tsquery format, which is then used in conjunction with the <code>@@</code> operator to perform full-text searches using the <code>tsvector</code> data type.</p> </li> <li> <p><code>to_tsquery</code> Function:</p> <ul> <li>Syntax: <code>to_tsquery(config_name, query_text)</code></li> <li>Description: Converts a query string into a <code>tsquery</code> data type, which is used for full-text searching. The <code>config_name</code> parameter specifies the text search configuration to use, and <code>query_text</code> is the actual query string.</li> </ul> </li> <li> <p>Example:</p> </li> </ul> <pre><code>SELECT to_tsquery('fat &amp; rat');\n</code></pre> to_tsquery 'fat' &amp; 'rat' <ul> <li> <p><code>plainto_tsquery</code> Function:</p> <ul> <li>Syntax: <code>plainto_tsquery(config_name, query_text)</code></li> <li>Description: Converts a plain text query string into a <code>tsquery</code>. It is similar to <code>to_tsquery</code>, but it processes the query text in a simpler way.</li> </ul> </li> <li> <p>Example:</p> </li> </ul> <pre><code>SELECT plainto_tsquery('cats ate rats');\n</code></pre> plainto_tsquery 'cat' &amp; 'ate' &amp; 'rat' <ul> <li> <p><code>phraseto_tsquery</code> Function:</p> <ul> <li>Syntax: <code>phraseto_tsquery(config_name, query_text)</code></li> <li>Description: Similar to <code>plainto_tsquery</code>, but it processes the query text as a phrase, considering the order of the words in the input.</li> </ul> </li> <li> <p>Example:</p> </li> </ul> <pre><code>SELECT to_tsquery('fatal &lt;-&gt; error');\n</code></pre> to_tsquery 'fatal' &lt;-&gt; 'error' <ul> <li>There is a more general version of the FOLLOWED BY operator having the form\u00a0<code>&lt;N&gt;</code>, where\u00a0<code>N</code>\u00a0 is an integer standing for the difference between the positions of the matching lexemes.\u00a0<code>&lt;1&gt;</code>\u00a0is the same as\u00a0<code>&lt;-&gt;</code>, while\u00a0<code>&lt;2&gt;</code>\u00a0allows exactly one other lexeme to appear between the matches, and so on. The\u00a0<code>phraseto_tsquery</code>\u00a0function makes use of this operator to construct a\u00a0<code>tsquery</code>\u00a0that can match a multi-word phrase when some of the words are stop words. For example:</li> </ul> <pre><code>SELECT phraseto_tsquery('the cats ate the rats');\n</code></pre> phraseto_tsquery 'cat' &lt;-&gt; 'ate' &lt;2&gt; 'rat'","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#basic_text_matching","title":"Basic Text Matching","text":"<ul> <li><code>Full text searching</code> in\u00a0PostgreSQL\u00a0is based on the match operator\u00a0<code>@@</code>, which returns\u00a0<code>true</code>\u00a0if a\u00a0<code>tsvector</code>\u00a0(document) matches a\u00a0<code>tsquery</code>\u00a0(query). It doesn't matter which data type is written first.</li> </ul> <pre><code>SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat &amp; rat'::tsquery;\n</code></pre> ?column? true <ul> <li>As the above example suggests, a <code>tsquery</code> is not just raw text, any more than a <code>tsvector</code> is. A <code>tsquery</code> contains search terms, which must be already-normalized lexemes, and may combine multiple terms using AND, OR, NOT, and FOLLOWED BY operators. There are functions <code>to_tsquery</code>, <code>plainto_tsquery</code>, and <code>phraseto_tsquery</code> that are helpful in converting user-written text into a proper <code>tsquery</code>, primarily by normalizing words appearing in the text. Similarly, <code>to_tsvector</code> is used to parse and normalize a document string. So in practice a text search match would look more like this:</li> </ul> <pre><code>SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat &amp; rat');\n</code></pre> ?column? true <ul> <li>The\u00a0<code>@@</code>\u00a0operator also supports\u00a0<code>text</code>\u00a0input, allowing explicit conversion of a text string to\u00a0<code>tsvector</code>\u00a0or\u00a0<code>tsquery</code>\u00a0to be skipped in simple cases. The variants available are:</li> </ul> <pre><code>tsvector @@ tsquery\ntsquery  @@ tsvector\ntext @@ tsquery\ntext @@ text\n</code></pre> <ul> <li> <p>The first two of these we saw already. The form\u00a0<code>text</code> <code>@@</code> <code>tsquery</code>\u00a0is equivalent to\u00a0<code>to_tsvector(x) @@ y</code>. The form\u00a0<code>text</code> <code>@@</code> <code>text</code>\u00a0is equivalent to\u00a0<code>to_tsvector(x) @@ plainto_tsquery(y)</code>.</p> </li> <li> <p>Within a\u00a0<code>tsquery</code>, the\u00a0<code>&amp;</code>\u00a0(AND) operator specifies that both its arguments must appear in the document to have a match. Similarly, the\u00a0<code>|</code>\u00a0(OR) operator specifies that at least one of its arguments must appear, while the\u00a0<code>!</code>\u00a0(NOT) operator specifies that its argument must\u00a0not\u00a0appear in order to have a match. For example, the query\u00a0<code>fat &amp; ! rat</code>\u00a0matches documents that contain\u00a0<code>fat</code>\u00a0but not\u00a0<code>rat</code>.</p> </li> <li> <p>Document Source</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#example_with_jpa","title":"Example With JPA","text":"<ul> <li>Now, let's take an example for applying PosgresSQL full text search with JPA.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#dependency","title":"Dependency","text":"<ul> <li>Let's create an sample project and add these dependencies below.</li> </ul> pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- postgresql driver --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.6.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!-- lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.28&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Apache commons-lang3 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n            &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- slf4j --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n            &lt;version&gt;0.2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;jakarta.validation&lt;/groupId&gt;\n            &lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;\n            &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.swagger.core.v3&lt;/groupId&gt;\n            &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.2.16&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n            &lt;version&gt;8.0.1.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;\n            &lt;version&gt;1.5.5.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre> <ul> <li>Then let's apply the plugin below for OpenApi generator and Mapstruct</li> </ul> <pre><code> &lt;plugins&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n        &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;7.0.1&lt;/version&gt;\n        &lt;executions&gt;\n            &lt;execution&gt;\n                &lt;goals&gt;\n                    &lt;goal&gt;generate&lt;/goal&gt;\n                &lt;/goals&gt;\n                &lt;configuration&gt;\n                    &lt;!-- path to the openapi file spec `.yml` --&gt;\n                    &lt;inputSpec&gt;\n                        ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                    &lt;/inputSpec&gt;\n                    &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                    &lt;!-- generated package for api interface --&gt;\n                    &lt;apiPackage&gt;com.springboot.project.generated.api&lt;/apiPackage&gt;\n                    &lt;!-- generated package for models --&gt;\n                    &lt;modelPackage&gt;com.springboot.project.generated.model&lt;/modelPackage&gt;\n                    &lt;!-- using supportingFilesToGenerate --&gt;\n                    &lt;supportingFilesToGenerate&gt;\n                        ApiUtil.java\n                    &lt;/supportingFilesToGenerate&gt;\n                    &lt;configOptions&gt;\n                        &lt;useTags&gt;true&lt;/useTags&gt;\n                        &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                        &lt;java8&gt;false&lt;/java8&gt;\n                        &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                        &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                        &lt;performBeanValidation&gt;true&lt;/performBeanValidation&gt;\n                        &lt;useOptional&gt;false&lt;/useOptional&gt;\n                        &lt;useSpringBoot3&gt;true&lt;/useSpringBoot3&gt;\n                    &lt;/configOptions&gt;\n                &lt;/configuration&gt;\n            &lt;/execution&gt;\n        &lt;/executions&gt;\n    &lt;/plugin&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.11.0&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;source&gt;17&lt;/source&gt;\n            &lt;target&gt;17&lt;/target&gt;\n            &lt;annotationProcessorPaths&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n                    &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;\n                    &lt;version&gt;1.5.5.Final&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;version&gt;1.18.28&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok-mapstruct-binding&lt;/artifactId&gt;\n                    &lt;version&gt;0.2.0&lt;/version&gt;\n                &lt;/path&gt;\n            &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n        &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#openapi","title":"OpenApi","text":"<ul> <li>Now,  in the folder <code>resource</code>, we will create a folder <code>openapi</code> and a <code>openapi-server.yaml</code> inside it. The content of this file will look like below with some apis.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3  \ninfo:  \n  title: Swagger Customer - OpenAPI 3.0  \n  description: Everything about sample hibernate second level cache  \n  termsOfService: http://swagger.io/terms/  \n  contact:  \n    email: apiteam@swagger.io  \n  license:  \n    name: Apache 2.0  \n    url: http://www.apache.org/licenses/LICENSE-2.0.html  \n  version: 1.0.11  \nexternalDocs:  \n  description: Find out more about Swagger  \n  url: http://swagger.io  \nservers:  \n  - url: https://petstore3.swagger.io/api/v1  \ntags:  \n  - name: customer  \n    description: Everything about your Customer  \n    externalDocs:  \n      description: Find out more  \n      url: http://swagger.io  \n  - name: order  \n    description: Everything about your Order  \n    externalDocs:  \n      description: Find out more  \n      url: http://swagger.io  \npaths:  \n  /v1/customers:  \n    get:  \n      tags:  \n        - customer  \n      summary: get an existing customer info  \n      description: get an existing customer info by Email  \n      operationId: getCustomerInfoByEmail  \n      parameters:  \n        - name: email  \n          in: query  \n          required: true  \n          schema:  \n            type: string  \n      responses:  \n        '200':  \n          description: Successful operation  \n          content:  \n            application/json:  \n              schema:  \n                $ref: '#/components/schemas/CustomerResponse'  \n        '400':  \n          description: Invalid ID supplied  \n        '404':  \n          description: Pet not found  \n        '405':  \n          description: Validation exception  \n    post:  \n      tags:  \n        - customer  \n      summary: Add a Customer to database  \n      description: Add a Customer to database  \n      operationId: addCustomer  \n      requestBody:  \n        description: Create a Customer to database  \n        content:  \n          application/json:  \n            schema:  \n              $ref: '#/components/schemas/CustomerRequest'  \n        required: true  \n      responses:  \n        '200':  \n          description: Successful operation  \n          content:  \n            application/json:  \n              schema:  \n                $ref: '#/components/schemas/CustomerResponse'  \n        '405':  \n          description: Invalid input  \n  /v1/customers/{customerId}/info:  \n    get:  \n      tags:  \n        - customer  \n      summary: get an existing customer info  \n      description: get an existing customer info by Id  \n      operationId: getCustomerInfo  \n      parameters:  \n        - name: customerId  \n          in: path  \n          required: true  \n          schema:  \n            type: string  \n            format: uuid  \n      responses:  \n        '200':  \n          description: Successful operation  \n          content:  \n            application/json:  \n              schema:  \n                $ref: '#/components/schemas/CustomerResponse'  \n        '400':  \n          description: Invalid ID supplied  \n        '404':  \n          description: Pet not found  \n        '405':  \n          description: Validation exception  \n    put:  \n      tags:  \n        - customer  \n      summary: Update an existing customer  \n      description: Update an existing customer by Id  \n      operationId: updateCustomers  \n      parameters:  \n        - name: customerId  \n          in: path  \n          required: true  \n          schema:  \n            type: string  \n            format: uuid  \n      requestBody:  \n        description: Update an existent customer in the database  \n        content:  \n          application/json:  \n            schema:  \n              $ref: '#/components/schemas/CustomerResponse'  \n        required: true  \n      responses:  \n        '200':  \n          description: Successful operation  \n          content:  \n            application/json:  \n              schema:  \n                $ref: '#/components/schemas/CustomerResponse'  \n        '400':  \n          description: Invalid ID supplied  \n        '404':  \n          description: Pet not found  \n        '405':  \n          description: Validation exception  \n  /v1/customers/action-search:  \n    get:  \n      tags:  \n        - customer  \n      summary: search existing customers  \n      description: search existing customers info by keyword  \n      operationId: searchCustomers  \n      parameters:  \n        - name: keyword  \n          in: query  \n          required: true  \n          schema:  \n            type: string  \n        - name: pageSize  \n          in: query  \n          required: false  \n          schema:  \n            type: integer  \n        - name: pageNumber  \n          in: query  \n          required: false  \n          schema:  \n            type: integer  \n      responses:  \n        '200':  \n          description: Successful operation  \n          content:  \n            application/json:  \n              schema:  \n                $ref: '#/components/schemas/CustomerFilterResponse'  \n        '400':  \n          description: Invalid ID supplied  \n        '404':  \n          description: Pet not found  \n        '405':  \n          description: Validation exception  \ncomponents:  \n  schemas:  \n    CustomerFilterResponse:  \n      type: object  \n      properties:  \n        filteredCustomers:  \n          type: array  \n          items:  \n            $ref: '#/components/schemas/CustomerResponse'  \n        foundNumber:  \n          type: integer  \n          format: int64  \n        total:  \n          type: integer  \n          format: int64  \n    CustomerResponse:  \n      allOf:  \n        - $ref: '#/components/schemas/CustomerRequest'  \n        - type: object  \n          properties:  \n            id:  \n              type: string  \n              format: uuid  \n\n    CustomerRequest:  \n      type: object  \n      required:  \n        - email  \n        - phone  \n      properties:  \n        fullName:  \n          type: string  \n        email:  \n          type: string  \n        address:  \n          type: string  \n        phone:  \n          type: string  \n        gender:  \n          type: string  \n          enum:  \n            - M  \n            - F  \n        dob:  \n          type: string  \n          format: date\n</code></pre> <ul> <li>Now, we can use command <code>mvn clean install</code> to build and generate apis and model from <code>openapi-server.yaml</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#entity","title":"Entity","text":"<ul> <li>Then let's define  a <code>CustomerEnitty</code> as below.</li> </ul> CustomerEntity<pre><code>package com.springboot.project.entity;  \n\nimport jakarta.persistence.Entity;  \nimport jakarta.persistence.EnumType;  \nimport jakarta.persistence.Enumerated;  \nimport jakarta.persistence.GeneratedValue;  \nimport jakarta.persistence.GenerationType;  \nimport jakarta.persistence.Id;  \nimport jakarta.persistence.Index;  \nimport jakarta.persistence.Table;  \nimport lombok.Getter;  \nimport lombok.Setter;  \n\nimport java.util.Date;  \nimport java.util.UUID;  \n\n@Getter  \n@Setter  \n@Entity  \n@Table(name = \"customers\", indexes = {  \n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),  \n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),  \n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)  \n})  \npublic class CustomerEntity {  \n\n    @Id  \n    @GeneratedValue(strategy = GenerationType.UUID)  \n    private UUID id;  \n    private String fullName;  \n    private String email;  \n    private String address;  \n    private String phone;  \n    @Enumerated(EnumType.STRING)  \n    private Gender gender;  \n    private Date dob;  \n\n}\n</code></pre> Gender.java<pre><code>package com.springboot.project.entity;\n\npublic enum Gender {\n\n    M, F\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#repository","title":"Repository","text":"<ul> <li>Now, lets create the Repository for the CustomerEntity above.</li> </ul> CustomerRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt; {\n\n    Optional&lt;CustomerEntity&gt; findCustomerByEmail(String email);\n\n    @Query(\n            value = \"       SELECT * FROM customers c                                                                                                                                                                                  \" +\n                    \"       WHERE to_tsvector('english', full_name || ' ' || email || ' ' || address || ' ' || regexp_replace(phone, '-', '', 'g') || ' ' || regexp_replace(CAST(dob AS TEXT), '-', '', 'g') || ' ' || gender)         \" +\n                    \"       @@ plainto_tsquery('english', :keyword)                                                                                                                                                                    \" +\n                    \"       LIMIT :pageSize                                                                                                                                                                                            \" +\n                    \"       OFFSET :pageNumber                                                                                                                                                                                         \",\n            nativeQuery = true\n    )\n    List&lt;CustomerEntity&gt; searchCustomerByKeyword(@Param(\"keyword\") String keyword,\n                                                 @Param(\"pageSize\") Integer pageSize,\n                                                 @Param(\"pageNumber\") Integer pageNumber);\n\n}\n</code></pre> <ul> <li>As you can see in this Repository we will define a method to search customers using native query with some params such as <code>keyword</code>, <code>pageSize</code> and <code>pageNumber</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#dto","title":"Dto","text":"<ul> <li>Next, let's create DTOs for CustomerEntity and <code>CustomerFilterResult</code> as below.</li> </ul> Customer.java<pre><code>package com.springboot.project.model;  \n\nimport com.springboot.project.entity.Gender;  \nimport lombok.Getter;  \nimport lombok.NoArgsConstructor;  \nimport lombok.Setter;  \n\nimport java.util.Date;  \nimport java.util.UUID;  \n\n@Getter  \n@Setter  \n@NoArgsConstructor  \npublic class Customer {  \n\n    private UUID id;  \n    private String fullName;  \n    private String email;  \n    private String address;  \n    private String phone;  \n    private Gender gender;  \n    private Date dob;  \n\n}\n</code></pre> CustomerFilterResult.java<pre><code>package com.springboot.project.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter\n@Setter\npublic class CustomerFilterResult {\n\n    List&lt;Customer&gt; filteredCustomers;\n    Long foundNumber;\n    Long total;\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#mapper","title":"Mapper","text":"<ul> <li>Next, let's create a mapper interface for mapping Customer DTO, Entity and CustomerFilterResult models using MapStruct.</li> </ul> AutoCustomerMapper.java<pre><code>package com.springboot.project.mapper;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.generated.model.CustomerFilterResponse;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.generated.model.CustomerResponse;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilterResult;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.List;\n\n@Mapper\npublic interface AutoCustomerMapper {\n\n    AutoCustomerMapper MAPPER = Mappers.getMapper(AutoCustomerMapper.class);\n\n    Customer mapToCustomerFromRequest(CustomerRequest customerRequest);\n\n    Customer mapToCustomer(CustomerEntity customerEntity);\n\n    CustomerEntity mapToCustomerEntity(Customer customer);\n\n    CustomerResponse mapToCustomerResponse(Customer customer);\n\n    void updateCustomerEntity(@MappingTarget CustomerEntity customerEntityTarget, CustomerEntity updateEntity);\n\n    List&lt;CustomerEntity&gt; mapToCustomerEntities(List&lt;Customer&gt; customers);\n\n    List&lt;Customer&gt; mapToCustomers(List&lt;CustomerEntity&gt; customerEntities);\n\n    List&lt;CustomerResponse&gt; mapToCustomerResponses(List&lt;Customer&gt; customers);\n\n    CustomerFilterResponse mapToCustomerFilterResponse(CustomerFilterResult customerFilterResult);\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#service","title":"Service","text":"<ul> <li>Now, with these classes that we defined above, we can create service class for handling logics for CRUD entities.</li> </ul> <pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilterResult;\nimport com.springboot.project.repository.CustomerRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerService {\n\n    private final CustomerRepository customerRepository;\n\n    public Customer createCustomer(Customer customer) {\n        CustomerEntity customerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n        customerEntity = this.customerRepository.save(customerEntity);\n        return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity);\n    }\n\n    public Customer getCustomer(UUID customerId) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public CustomerFilterResult searchCustomer(String keyword, Integer pageSize, Integer pageNumber) {\n        int defaultPageSize = 10;\n        int defaultPageNumber = 0;\n        if (Objects.isNull(pageSize) || Objects.isNull(pageNumber) || pageSize &lt; 10 || pageNumber &lt; 0) {\n            pageSize = defaultPageSize;\n            pageNumber = defaultPageNumber;\n        }\n        List&lt;CustomerEntity&gt; foundCustomers = this.customerRepository.searchCustomerByKeyword(keyword, pageSize, pageNumber);\n        List&lt;Customer&gt; customers = AutoCustomerMapper.MAPPER.mapToCustomers(foundCustomers);\n        CustomerFilterResult customerFilterResult = new CustomerFilterResult();\n        customerFilterResult.setFilteredCustomers(customers);\n        customerFilterResult.setFoundNumber((long) customers.size());\n        customerFilterResult.setTotal(this.customerRepository.count());\n        return customerFilterResult;\n    }\n\n    public void updateCustomer(UUID customerId, Customer customer) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            CustomerEntity existedCustomerEntity = customerEntity.get();\n            CustomerEntity updateCustomerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n            AutoCustomerMapper.MAPPER.updateCustomerEntity(existedCustomerEntity, updateCustomerEntity);\n            this.customerRepository.save(existedCustomerEntity);\n            return;\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void deleteCustomer(UUID customerId) {\n        this.customerRepository.deleteById(customerId);\n    }\n\n    public Customer findCustomerByEmail(String email) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findCustomerByEmail(email);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found! with email: \" + email);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#controller","title":"Controller","text":"<ul> <li>Now, we can create some basic controllers and implement the generated apis.</li> </ul> <pre><code>package com.springboot.project.controller;\n\nimport com.springboot.project.generated.api.CustomerApi;\nimport com.springboot.project.generated.model.CustomerFilterResponse;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.generated.model.CustomerResponse;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilterResult;\nimport com.springboot.project.service.CustomerService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerController implements CustomerApi {\n\n    private final CustomerService customerService;\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; addCustomer(CustomerRequest customerRequest) {\n        Customer customer = AutoCustomerMapper.MAPPER.mapToCustomerFromRequest(customerRequest);\n        customer = this.customerService.createCustomer(customer);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerInfo(UUID customerId) {\n        Customer customer = this.customerService.getCustomer(customerId);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerInfoByEmail(String email) {\n        Customer customer = this.customerService.findCustomerByEmail(email);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerFilterResponse&gt; searchCustomers(String keyword, Integer pageSize, Integer pageNumber) {\n        CustomerFilterResult customerFilterResult = this.customerService.searchCustomer(keyword, pageSize, pageNumber);\n        CustomerFilterResponse customerFilterResponse = AutoCustomerMapper.MAPPER.mapToCustomerFilterResponse(customerFilterResult);\n        return new ResponseEntity&lt;&gt;(customerFilterResponse, HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#testing","title":"Testing","text":"<ul> <li>Now, let's start the application then use the postman and with the request body as below.</li> </ul> <pre><code>{\n    \"fullName\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"address\": \"{{$randomStreetAddress}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\"\n}\n</code></pre> <ul> <li>Postman supports us to random some common fields every time we send the request body.</li> <li>Now, let's run the api CreateCustomer for 10000 times. Then we will have 10000 records in the <code>customers</code> table.</li> </ul> <ul> <li>Next, let's continue use postman for searching customer api as below.</li> </ul> <ul> <li>As you can see the search query will look up the keyword <code>Knolls</code> or <code>Knoll</code> in columns <code>full_name</code>, <code>email</code>, <code>address</code>, <code>dob</code>, <code>phone</code> and <code>gender</code>. If any column contains this keyword then it will be return. Currently we have 10 records in 9994 records contains this keyword.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#see_also","title":"See Also","text":"<ul> <li>SB 3x JPA With Indexing</li> <li>SB 3x JPA Native Query Postgres Optional Params</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Full%20Text%20Search/#references","title":"References","text":"<ul> <li>postgresql.org</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/","title":"JPA Native Query Postgres Optional Params","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#common_problems","title":"Common Problems","text":"<ul> <li>In some Spring Boot projects with JPA we usually have some apis for filtering data from database base on values of some columns. </li> <li>For example, In an entity contains columns as below.</li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n}\n</code></pre> <ul> <li>We want to expose an api for getting customers base on <code>fullName</code>, <code>email</code>, <code>address</code> and <code>phone</code> columns and those input values for filtering customers are optional. It means, the query input can contain only <code>fullName</code> and others can be null etc...</li> <li>If we use the query like we usually use as below with the input is only <code>full_name</code>.</li> </ul> <pre><code>select * from customers c \nwhere c.full_name = :full_name\nand c.email = :email\nand c.address = :address\nand c.phone = regexp_replace(:phone , '-', '', 'g');\n</code></pre> <ul> <li>Then we will receive the result with the data like this.</li> </ul> Name Value id 2b7b468d-4d15-4a62-bbd2-0f7712488471 address dob 1995-10-10 07:00:00.000 email full_name Katrina Kerluke gender M phone <ul> <li>It will try to get the record with <code>fullName</code> is as the input and other fields have to contain <code>null</code> values.</li> <li>Of course, this is not what we are expecting, we are expecting that the query will execute base on input params that contain values, for null values we will skip them. In this post we will handle this case by using native query in JPA.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#native_query_with_optional_params","title":"Native Query With Optional Params","text":"<ul> <li>Jpa supports us to use the native query through using <code>@Query</code> annotation with param <code>nativeQuery=true</code>. </li> <li>For example:</li> </ul> <pre><code>@Query(value = \"select * from customers c where c.email = :email\", \n             nativeQuery = true)\nOptional&lt;CustomerEntity&gt; getCustomerByEmail(@Param(\"email\") String fullName);\n</code></pre> <ul> <li>Then in SQL we have a way to avoid null input value in query as below.</li> </ul> <pre><code>SELECT * FROM customers c  \nWHERE (:full_name is null or c.full_name = :full_name);\n</code></pre> <ul> <li>So before the <code>or</code> we have <code>:full_name is null</code>, it means if we don't input any value for <code>:full_name</code> then we have <code>null is null</code> and this statement is <code>true</code> . So the query will become.</li> </ul> <pre><code>SELECT * FROM customers c  \nWHERE true;\n</code></pre> <ul> <li>The Sql statement above is correct and it is not broken with the <code>WHERE</code> clause.</li> <li>Go back to the example that we discussed before, so to to expose an api for getting customers base on <code>fullName</code>, <code>email</code>, <code>address</code> and <code>phone</code> columns. We will have the native query statement below.</li> </ul> <pre><code>SELECT * FROM customers c  \nWHERE (:full_name is null or c.full_name = :full_name)  \nAND (:email is null or c.email = :email)  \nAND (:address is null or c.address = :address)  \nAND (:phone is null or c.phone = :phone);\n</code></pre> <ul> <li>So if we only input the value for email then we have the sql statement.</li> </ul> <pre><code>SELECT * FROM customers c  \nWHERE true  \nAND c.email = 'abcxyz@example.com')  \nAND true\nAND true;\n</code></pre> <ul> <li>Then now, the database will execute the query for filtering with only <code>email</code> other null values will be ignore.</li> <li>Or if we only input <code>email</code> and <code>full_name</code> then we have.</li> </ul> <pre><code>SELECT * FROM customers c  \nWHERE c.full_name = 'Duc Nguyen'\nAND c.email = 'abcxyz@example.com'\nAND true\nAND true;\n</code></pre> <p>the database will execute the query for filtering with only <code>full_name</code> and <code>email</code>, other null values will be ignore.</p>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#example_project","title":"Example Project","text":"<ul> <li>Now, let's take an example for applying Indexing with JPA.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#dependency","title":"Dependency","text":"<ul> <li>Let's create an sample project and add these dependencies below.</li> </ul> pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- postgresql driver --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.6.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!-- lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.28&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Apache commons-lang3 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n            &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- slf4j --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n            &lt;version&gt;0.2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;jakarta.validation&lt;/groupId&gt;\n            &lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;\n            &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.swagger.core.v3&lt;/groupId&gt;\n            &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.2.16&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n            &lt;version&gt;8.0.1.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;\n            &lt;version&gt;1.5.5.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre> <ul> <li>Then let's apply the plugin below for OpenApi generator and Mapstruct</li> </ul> <pre><code> &lt;plugins&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n        &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;7.0.1&lt;/version&gt;\n        &lt;executions&gt;\n            &lt;execution&gt;\n                &lt;goals&gt;\n                    &lt;goal&gt;generate&lt;/goal&gt;\n                &lt;/goals&gt;\n                &lt;configuration&gt;\n                    &lt;!-- path to the openapi file spec `.yml` --&gt;\n                    &lt;inputSpec&gt;\n                        ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                    &lt;/inputSpec&gt;\n                    &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                    &lt;!-- generated package for api interface --&gt;\n                    &lt;apiPackage&gt;com.springboot.project.generated.api&lt;/apiPackage&gt;\n                    &lt;!-- generated package for models --&gt;\n                    &lt;modelPackage&gt;com.springboot.project.generated.model&lt;/modelPackage&gt;\n                    &lt;!-- using supportingFilesToGenerate --&gt;\n                    &lt;supportingFilesToGenerate&gt;\n                        ApiUtil.java\n                    &lt;/supportingFilesToGenerate&gt;\n                    &lt;configOptions&gt;\n                        &lt;useTags&gt;true&lt;/useTags&gt;\n                        &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                        &lt;java8&gt;false&lt;/java8&gt;\n                        &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                        &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                        &lt;performBeanValidation&gt;true&lt;/performBeanValidation&gt;\n                        &lt;useOptional&gt;false&lt;/useOptional&gt;\n                        &lt;useSpringBoot3&gt;true&lt;/useSpringBoot3&gt;\n                    &lt;/configOptions&gt;\n                &lt;/configuration&gt;\n            &lt;/execution&gt;\n        &lt;/executions&gt;\n    &lt;/plugin&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.11.0&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;source&gt;17&lt;/source&gt;\n            &lt;target&gt;17&lt;/target&gt;\n            &lt;annotationProcessorPaths&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n                    &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;\n                    &lt;version&gt;1.5.5.Final&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;version&gt;1.18.28&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok-mapstruct-binding&lt;/artifactId&gt;\n                    &lt;version&gt;0.2.0&lt;/version&gt;\n                &lt;/path&gt;\n            &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n        &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#openapi","title":"OpenApi","text":"<ul> <li>Now,  in the folder <code>resource</code>, we will create a folder <code>openapi</code> and a <code>openapi-server.yaml</code> inside it. The content of this file will look like below with some apis.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Customer - OpenAPI 3.0\n  description: Everything about sample hibernate second level cache\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.11\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v1\ntags:\n  - name: customer\n    description: Everything about your Customer\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: order\n    description: Everything about your Order\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\npaths:\n  /v1/customers:\n    get:\n      tags:\n        - customer\n      summary: get an existing customer info\n      description: get an existing customer info by Email\n      operationId: getCustomerInfoByEmail\n      parameters:\n        - name: email\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    post:\n      tags:\n        - customer\n      summary: Add a Customer to database\n      description: Add a Customer to database\n      operationId: addCustomer\n      requestBody:\n        description: Create a Customer to database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '405':\n          description: Invalid input\n  /v1/customers/{customerId}/info:\n    get:\n      tags:\n        - customer\n      summary: get an existing customer info\n      description: get an existing customer info by Id\n      operationId: getCustomerInfo\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    put:\n      tags:\n        - customer\n      summary: Update an existing customer\n      description: Update an existing customer by Id\n      operationId: updateCustomers\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Update an existent customer in the database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerResponse'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n  /v1/customers/action-filter:\n    post:\n      tags:\n        - customer\n      summary: filter customers\n      description: filter customers\n      operationId: filterCustomers\n      requestBody:\n        description: Update an existent customer in the database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerFilterRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n\ncomponents:\n  schemas:\n    CustomerResponse:\n      allOf:\n        - $ref: '#/components/schemas/CustomerRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n\n    CustomerRequest:\n      type: object\n      required:\n        - email\n        - phone\n      properties:\n        fullName:\n          type: string\n        email:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum:\n            - M\n            - F\n        dob:\n          type: string\n          format: date\n\n    CustomerFilterRequest:\n      type: object\n      properties:\n        fullName:\n          type: string\n        email:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n</code></pre> <ul> <li>Now, we can use command <code>mvn clean install</code> to build and generate apis and model from <code>openapi-server.yaml</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#entity","title":"Entity","text":"<ul> <li>Then let's define  a <code>CustomerEnitty</code> as below.</li> </ul> CustomerEntity<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n}\n</code></pre> Gender.java<pre><code>package com.springboot.project.entity;\n\npublic enum Gender {\n\n    M, F\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#repository","title":"Repository","text":"<ul> <li>Now, lets create the Repository for the CustomerEntity above.</li> </ul> CustomerRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt; {\n\n    Optional&lt;CustomerEntity&gt; findCustomerByEmail(String email);\n\n    @Query(\n            value = \"  SELECT * FROM customers c                                                      \"  +  /*1*/\n                    \"  WHERE (:full_name is null or c.full_name = :full_name)                         \"  +  /*2*/\n                    \"  AND   (:email is null or c.email = :email)                                     \"  +  /*3*/\n                    \"  AND   (:address is null or c.address = :address)                               \"  +  /*4*/\n                    \"  AND   (:phone is null or c.phone = :phone);                                    \",    /*5*/\n            nativeQuery = true\n    )\n    List&lt;CustomerEntity&gt; filterCustomers(@Param(\"full_name\") String fullName,\n                                         @Param(\"email\") String email,\n                                         @Param(\"address\") String address,\n                                         @Param(\"phone\") String phone);\n\n}\n</code></pre> <ul> <li>As you can see in this Repository we will define a method to filter customers using native query with optional params.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#dto","title":"Dto","text":"<ul> <li>Next, let's create DTOs for CustomerEntity and <code>CustomerFilterRequest</code> as below.</li> </ul> Customer.java<pre><code>package com.springboot.project.model;  \n\nimport com.springboot.project.entity.Gender;  \nimport lombok.Getter;  \nimport lombok.NoArgsConstructor;  \nimport lombok.Setter;  \n\nimport java.util.Date;  \nimport java.util.UUID;  \n\n@Getter  \n@Setter  \n@NoArgsConstructor  \npublic class Customer {  \n\n    private UUID id;  \n    private String fullName;  \n    private String email;  \n    private String address;  \n    private String phone;  \n    private Gender gender;  \n    private Date dob;  \n\n}\n</code></pre> CustomerFilter.java<pre><code>package com.springboot.project.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class CustomerFilter {\n\n    private String fullName;\n    private String address;\n    private String email;\n    private String phone;\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#mapper","title":"Mapper","text":"<ul> <li>Next, let's create a mapper interface for mapping Customer DTO, Entity and CustomerFilterRequest models using MapStruct.</li> </ul> AutoCustomerMapper.java<pre><code>package com.springboot.project.mapper;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.generated.model.CustomerFilterRequest;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.generated.model.CustomerResponse;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilter;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.factory.Mappers;\n\nimport java.util.List;\n\n@Mapper\npublic interface AutoCustomerMapper {\n\n    AutoCustomerMapper MAPPER = Mappers.getMapper(AutoCustomerMapper.class);\n\n    Customer mapToCustomerFromRequest(CustomerRequest customerRequest);\n\n    Customer mapToCustomer(CustomerEntity customerEntity);\n\n    CustomerEntity mapToCustomerEntity(Customer customer);\n\n    CustomerResponse mapToCustomerResponse(Customer customer);\n\n    void updateCustomerEntity(@MappingTarget CustomerEntity customerEntityTarget, CustomerEntity updateEntity);\n\n    List&lt;CustomerEntity&gt; mapToCustomerEntities(List&lt;Customer&gt; customers);\n\n    List&lt;Customer&gt; mapToCustomers(List&lt;CustomerEntity&gt; customerEntities);\n\n    List&lt;CustomerResponse&gt; mapToCustomerResponses(List&lt;Customer&gt; customers);\n\n    CustomerFilter mapToCustomerFilter(CustomerFilterRequest customerFilterRequest);\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#service","title":"Service","text":"<ul> <li>Now, with these classes that we defined above, we can create service class for handling logics for CRUD entities.</li> </ul> CustomerService.java<pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilter;\nimport com.springboot.project.repository.CustomerRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerService {\n\n    private final CustomerRepository customerRepository;\n\n    public Customer createCustomer(Customer customer) {\n        CustomerEntity customerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n        customerEntity = this.customerRepository.save(customerEntity);\n        return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity);\n    }\n\n    public Customer getCustomer(UUID customerId) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public List&lt;Customer&gt; filterCustomers(CustomerFilter customerFilter) {\n        List&lt;CustomerEntity&gt; foundCustomers = this.customerRepository\n                .filterCustomers(\n                        customerFilter.getFullName(),\n                        customerFilter.getEmail(),\n                        customerFilter.getAddress(),\n                        customerFilter.getPhone());\n        return AutoCustomerMapper.MAPPER.mapToCustomers(foundCustomers);\n    }\n\n    public void updateCustomer(UUID customerId, Customer customer) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            CustomerEntity existedCustomerEntity = customerEntity.get();\n            CustomerEntity updateCustomerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n            AutoCustomerMapper.MAPPER.updateCustomerEntity(existedCustomerEntity, updateCustomerEntity);\n            this.customerRepository.save(existedCustomerEntity);\n            return;\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void deleteCustomer(UUID customerId) {\n        this.customerRepository.deleteById(customerId);\n    }\n\n    public Customer findCustomerByEmail(String email) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findCustomerByEmail(email);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found! with email: \" + email);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#controller","title":"Controller","text":"<ul> <li>Now, we can create some basic controllers and implement the generated apis.</li> </ul> CustomerController.java<pre><code>package com.springboot.project.controller;\n\nimport com.springboot.project.generated.api.CustomerApi;\nimport com.springboot.project.generated.model.CustomerFilterRequest;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.generated.model.CustomerResponse;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.model.CustomerFilter;\nimport com.springboot.project.service.CustomerService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerController implements CustomerApi {\n\n    private final CustomerService customerService;\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; addCustomer(CustomerRequest customerRequest) {\n        Customer customer = AutoCustomerMapper.MAPPER.mapToCustomerFromRequest(customerRequest);\n        customer = this.customerService.createCustomer(customer);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerInfo(UUID customerId) {\n        Customer customer = this.customerService.getCustomer(customerId);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerInfoByEmail(String email) {\n        Customer customer = this.customerService.findCustomerByEmail(email);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;CustomerResponse&gt;&gt; filterCustomers(CustomerFilterRequest customerFilterRequest) {\n        CustomerFilter customerFilter = AutoCustomerMapper.MAPPER.mapToCustomerFilter(customerFilterRequest);\n        List&lt;Customer&gt; customers = this.customerService.filterCustomers(customerFilter);\n        List&lt;CustomerResponse&gt; customerResponses = AutoCustomerMapper.MAPPER.mapToCustomerResponses(customers);\n        return new ResponseEntity&lt;&gt;(customerResponses, HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#testing","title":"Testing","text":"<ul> <li>Now, let's start the application then use the postman and with the request body as below.</li> </ul> <pre><code>{\n    \"fullName\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"address\": \"{{$randomStreetAddress}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\"\n}\n</code></pre> <ul> <li>Postman supports us to random some common fields every time we send the request body.</li> <li>Now, let's run the api CreateCustomer for 10000 times. Then we will have 10000 records in the <code>customers</code> table.</li> </ul> <ul> <li>Next, let's continue use postman for filterCustomers api contain the body as below.</li> </ul> <pre><code>{\n    \"fullName\": \"Katrina Kerluke\",\n    \"address\": null,\n    \"email\": null,\n    \"phone\": null\n}\n</code></pre> <ul> <li>We will filter customers base on <code>fullName</code> only. Then we will have the result as below.</li> </ul> <ul> <li>Now, let's try with pushing more address into the filter.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#see_also","title":"See Also","text":"<ul> <li>SB 3x JPA With Indexing</li> <li>SB 3x JPA Native Query Postgres Full Text Search</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20Native%20Query%20Postgres%20Optional%20Params/#references","title":"References","text":"<ul> <li>Baeldung.com</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/","title":"Indexing With JPA","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#what_is_the_indexing","title":"What Is The Indexing?","text":"<ul> <li><code>Indexing in a database</code> is a technique that improves the speed of data retrieval operations. It works by creating a data structure known as an index, which allows for faster searching and accessing of data from the database.</li> <li>An index is a small table with two columns. The first column contains a copy of the primary or candidate key of a table, and the second column contains a set of pointers, each of which holds the address of the disk block where the specific key value is stored</li> <li>When a query needs to access a table that has an index, the database can use the index to retrieve records faster. The database finds the key value in the index, and each key value is stored with a pointer to the record in the table associated with this key value.</li> <li> <p>Indexes are not required for a database to function, but they can significantly improve query response time. However, they do require additional space to store the index records.</p> </li> <li> <p>There are different types of indexing methods such as Primary Indexing and Secondary Indexing. In Primary Indexing, there is a one-to-one relationship between entries in the index table. This type of indexing can be further divided into Dense Index, where a record is created for every search key value in the database, and Sparse Index, where an index record appears only for some of the values in the file.</p> </li> <li>Secondary Indexing can be generated by a field which has a unique value for each record, and it should be a candidate key. This type of indexing is used to reduce the mapping size of the first level.</li> <li> <p>In summary, indexing is a powerful technique that can greatly enhance the performance of a database by enabling faster retrieval of data.</p> </li> <li> <p>More information at learnsql.com and guru99.com</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#indexing_with_jpa_1","title":"Indexing With JPA","text":"<ul> <li>In JPA, we can create indexes for tables using the <code>@Index</code> annotation. Let's see the example below.</li> </ul> CustomerEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders = new ArrayList&lt;&gt;();\n\n}\n</code></pre> <ul> <li>So the we can see <code>@Index</code> annotations are used to define database indexes for <code>CustomerEntity</code>. Then in every <code>@Index</code> annotation we define some parameter as <code>name</code>, <code>columnList</code> and <code>unique</code>. For example <code>@Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true)</code><ul> <li><code>name</code>: we define the name of the index.</li> <li><code>columnList</code>: we specify the column of the table that we will create an index.</li> <li><code>unique</code>: specifies that the values in the column must be unique, meaning that no two rows in the table can have the same value. This enforces data integrity and prevents duplicate in the table.</li> </ul> </li> <li>We can also create a composite index for multi column in a table by defining columns name in the <code>columnList</code> parameter. Then in this case if we define the <code>unique = true</code> then it means no two rows in the table can have both the same email and phone values simultaneously.</li> <li>Note: In JPA, if we use annotation <code>@Column(name = \"email\", unique = true)</code> then JPA also will create for us an index for that column automatically. However, the index name will have a random name.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#example_project","title":"Example Project","text":"<ul> <li>Now, let's take an example for applying Indexing with JPA.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#dependency","title":"Dependency","text":"<ul> <li>Let's create an sample project and add these dependencies below.</li> </ul> pom.xml<pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;3.1.4&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- postgresql driver --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.6.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;!-- lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.28&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Apache commons-lang3 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n            &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- slf4j --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n            &lt;version&gt;2.0.9&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n            &lt;version&gt;0.2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;jakarta.validation&lt;/groupId&gt;\n            &lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;\n            &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.swagger.core.v3&lt;/groupId&gt;\n            &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.2.16&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n            &lt;version&gt;8.0.1.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;\n            &lt;version&gt;1.5.5.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre> <ul> <li>Then let's apply the plugin below for OpenApi generator and Mapstruct</li> </ul> <pre><code> &lt;plugins&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n        &lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;7.0.1&lt;/version&gt;\n        &lt;executions&gt;\n            &lt;execution&gt;\n                &lt;goals&gt;\n                    &lt;goal&gt;generate&lt;/goal&gt;\n                &lt;/goals&gt;\n                &lt;configuration&gt;\n                    &lt;!-- path to the openapi file spec `.yml` --&gt;\n                    &lt;inputSpec&gt;\n                        ${project.basedir}/src/main/resources/openapi/openapi-server.yml\n                    &lt;/inputSpec&gt;\n                    &lt;generatorName&gt;spring&lt;/generatorName&gt;\n                    &lt;!-- generated package for api interface --&gt;\n                    &lt;apiPackage&gt;com.springboot.project.generated.api&lt;/apiPackage&gt;\n                    &lt;!-- generated package for models --&gt;\n                    &lt;modelPackage&gt;com.springboot.project.generated.model&lt;/modelPackage&gt;\n                    &lt;!-- using supportingFilesToGenerate --&gt;\n                    &lt;supportingFilesToGenerate&gt;\n                        ApiUtil.java\n                    &lt;/supportingFilesToGenerate&gt;\n                    &lt;configOptions&gt;\n                        &lt;useTags&gt;true&lt;/useTags&gt;\n                        &lt;delegatePattern&gt;true&lt;/delegatePattern&gt;\n                        &lt;dateLibrary&gt;java8&lt;/dateLibrary&gt;\n                        &lt;java8&gt;false&lt;/java8&gt;\n                        &lt;interfaceOnly&gt;true&lt;/interfaceOnly&gt;\n                        &lt;useBeanValidation&gt;true&lt;/useBeanValidation&gt;\n                        &lt;performBeanValidation&gt;true&lt;/performBeanValidation&gt;\n                        &lt;useOptional&gt;false&lt;/useOptional&gt;\n                        &lt;useSpringBoot3&gt;true&lt;/useSpringBoot3&gt;\n                    &lt;/configOptions&gt;\n                &lt;/configuration&gt;\n            &lt;/execution&gt;\n        &lt;/executions&gt;\n    &lt;/plugin&gt;\n    &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.11.0&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;source&gt;17&lt;/source&gt;\n            &lt;target&gt;17&lt;/target&gt;\n            &lt;annotationProcessorPaths&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;\n                    &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;\n                    &lt;version&gt;1.5.5.Final&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;version&gt;1.18.28&lt;/version&gt;\n                &lt;/path&gt;\n                &lt;path&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok-mapstruct-binding&lt;/artifactId&gt;\n                    &lt;version&gt;0.2.0&lt;/version&gt;\n                &lt;/path&gt;\n            &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n        &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#openapi","title":"OpenApi","text":"<ul> <li>Now,  in the folder <code>resource</code>, we will create a folder <code>openapi</code> and a <code>openapi-server.yaml</code> inside it. The content of this file will look like below with some apis.</li> </ul> openapi-server.yml<pre><code>openapi: 3.0.3\ninfo:\n  title: Swagger Customer - OpenAPI 3.0\n  description: Everything about sample hibernate second level cache\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.11\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v1\ntags:\n  - name: customer\n    description: Everything about your Customer\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: order\n    description: Everything about your Order\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\npaths:\n  /v1/customers:\n    get:\n      tags:\n        - customer\n      summary: get an existing customer info\n      description: get an existing customer info by Email\n      operationId: getCustomerInfoByEmail\n      parameters:\n        - name: email\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    post:\n      tags:\n        - customer\n      summary: Add a Customer to database\n      description: Add a Customer to database\n      operationId: addCustomer\n      requestBody:\n        description: Create a Customer to database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '405':\n          description: Invalid input\n  /v1/customers/{customerId}/info:\n    get:\n      tags:\n        - customer\n      summary: get an existing customer info\n      description: get an existing customer info by Id\n      operationId: getCustomerInfo\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n    put:\n      tags:\n        - customer\n      summary: Update an existing customer\n      description: Update an existing customer by Id\n      operationId: updateCustomers\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Update an existent customer in the database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerResponse'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerResponse'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n  /v1/customers/{customerId}/orders:\n    post:\n      tags:\n        - order\n      summary: Add an order to database\n      description: Add an order to database\n      operationId: addOrder\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Create an Order to database\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n        '405':\n          description: Invalid input\n  /v1/customers/{customerId}/orders/{orderId}:\n    get:\n      tags:\n        - order\n      summary: Get an order from database\n      description: Get an order from database\n      operationId: getOrderDetail\n      parameters:\n        - name: customerId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: orderId\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n        '405':\n          description: Invalid input\ncomponents:\n  schemas:\n    CustomerResponse:\n      allOf:\n        - $ref: '#/components/schemas/CustomerRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n    OrderResponse:\n      allOf:\n        - $ref: '#/components/schemas/OrderRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n\n    ItemResponse:\n      allOf:\n        - $ref: '#/components/schemas/ItemRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n\n\n\n    CustomerRequest:\n      type: object\n      required:\n        - email\n        - phone\n      properties:\n        fullName:\n          type: string\n        email:\n          type: string\n        address:\n          type: string\n        phone:\n          type: string\n        gender:\n          type: string\n          enum:\n            - M\n            - F\n        dob:\n          type: string\n          format: date\n\n    OrderRequest:\n      type: object\n      required:\n        - orderName\n        - orderStatus\n      properties:\n        orderName:\n          type: string\n        orderStatus:\n          type: string\n          enum:\n            - CREATED\n            - SHIPPING\n            - FINISHED\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ItemRequest'\n\n    ItemRequest:\n      type: object\n      required:\n        - itemName\n        - quantity\n        - price\n      properties:\n        itemName:\n          type: string\n        quantity:\n          type: integer\n          format: int64\n        price:\n          type: number\n          format: double\n</code></pre> <ul> <li>Now, we can use command <code>mvn clean install</code> to build and generate apis and model from <code>openapi-server.yaml</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#entity","title":"Entity","text":"<ul> <li>Then let's define Entities as below. In this example a <code>CustomerEnitty</code> will contain many <code>OrderEntity</code>, then in an <code>OrderEntity</code> will contain many <code>ItemEntity</code>.</li> <li>In <code>CustomerEntity</code> we will put index for <code>email</code>, <code>phone</code> and a composite index for <code>email</code> and <code>phone</code>.</li> </ul> CustomerEntity<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Index;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"customers\", indexes = {\n        @Index(name = \"uniqueEmailIndex\", columnList = \"email\", unique = true),\n        @Index(name = \"uniquePhoneIndex\", columnList = \"phone\", unique = true),\n        @Index(name = \"uniqueMultiIndex\", columnList = \"email, phone\", unique = true)\n})\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders = new ArrayList&lt;&gt;();\n\n}\n</code></pre> Gender.java<pre><code>package com.springboot.project.entity;\n\npublic enum Gender {\n\n    M, F\n\n}\n</code></pre> <ul> <li>Then in the <code>OrderEntity</code> we have no index setting there.</li> </ul> OrderEntity<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.PreUpdate;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\n@Table(name = \"orders\")\npublic class OrderEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n\n    private String orderName;\n\n    private LocalDateTime createdDate;\n\n    private LocalDateTime lastUpdatedDate;\n\n    @Enumerated(value = EnumType.STRING)\n    private OrderStatus orderStatus;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List&lt;ItemEntity&gt; items = new ArrayList&lt;&gt;();\n\n    @PrePersist\n    private void setCreatedDate() {\n        LocalDateTime localDateTime = LocalDateTime.now();\n        this.createdDate = localDateTime;\n        this.lastUpdatedDate = localDateTime;\n    }\n\n    @PreUpdate\n    private void setLastUpdatedDate() {\n        this.lastUpdatedDate = LocalDateTime.now();\n    }\n\n}\n</code></pre> <ul> <li>Finally, In the <code>ItemEntity</code>, we will use the annotation <code>@Column(name = \"item_name\", unique = true)</code> to create an index for column <code>item_name</code>.</li> </ul> ItemEntity.java<pre><code>package com.springboot.project.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.UUID;\n\n@Getter\n@Setter\n@Entity\npublic class ItemEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n\n    @Column(name = \"item_name\", unique = true)\n    private String itemName;\n\n    private Long quantity;\n\n    private Float price;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\")\n    private OrderEntity order;\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#repository","title":"Repository","text":"<ul> <li>Now, lets create 3 Repositories for 3 Entities above.</li> </ul> CustomerRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt; {\n    Optional&lt;CustomerEntity&gt; findCustomerByEmail(String email);\n}\n</code></pre> OrderRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.OrderEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface OrderRepository extends JpaRepository&lt;OrderEntity, UUID&gt; {\n}\n</code></pre> ItemRepository.java<pre><code>package com.springboot.project.repository;\n\n\nimport com.springboot.project.entity.ItemEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface ItemRepository extends JpaRepository&lt;ItemEntity, UUID&gt; {\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#dto","title":"Dto","text":"<ul> <li>Next, let's create some DTOs for these 3 Entities</li> </ul> Customer.java<pre><code>package com.springboot.project.model;\n\nimport com.springboot.project.entity.Gender;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@NoArgsConstructor\npublic class Customer {\n\n    private UUID id;\n    private String fullName;\n    private String email;\n    private String address;\n    private String phone;\n    private Gender gender;\n    private Date dob;\n    private List&lt;Order&gt; orders;\n\n}\n</code></pre> Order.java<pre><code>package com.springboot.project.model;\n\nimport com.springboot.project.entity.OrderStatus;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@Getter\n@Setter\n@NoArgsConstructor\npublic class Order {\n\n    private UUID id;\n    private String orderName;\n    private OrderStatus orderStatus;\n    private List&lt;Item&gt; items;\n\n}\n</code></pre> Item.java<pre><code>package com.springboot.project.model;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.UUID;\n\n@Getter\n@Setter\n@NoArgsConstructor\npublic class Item {\n\n    private UUID id;\n    private UUID orderId;\n    private String itemName;\n    private Long quantity;\n    private Float price;\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#mapper","title":"Mapper","text":"<ul> <li>Next, let's create some mapper interfaces for mapping DTOs, Entities and request models using MapStruct.</li> </ul> AutoCustomerMapper.java<pre><code>package com.springboot.project.mapper;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.generated.model.CustomerResponse;\nimport com.springboot.project.model.Customer;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface AutoCustomerMapper {\n\n    AutoCustomerMapper MAPPER = Mappers.getMapper(AutoCustomerMapper.class);\n\n    Customer mapToCustomerFromRequest(CustomerRequest customerRequest);\n\n    Customer mapToCustomer(CustomerEntity customerEntity);\n\n    CustomerEntity mapToCustomerEntity(Customer customer);\n\n    CustomerResponse mapToCustomerResponse(Customer customer);\n\n    void updateCustomerEntity(@MappingTarget CustomerEntity customerEntityTarget, CustomerEntity updateEntity);\n\n}\n</code></pre> AutoOrderMapper.java<pre><code>package com.springboot.project.mapper;\n\nimport com.springboot.project.entity.OrderEntity;\nimport com.springboot.project.generated.model.OrderRequest;\nimport com.springboot.project.generated.model.OrderResponse;\nimport com.springboot.project.model.Order;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface AutoOrderMapper {\n\n    AutoOrderMapper MAPPER = Mappers.getMapper(AutoOrderMapper.class);\n\n    Order mapToOrderFromRequest(OrderRequest orderRequest);\n\n    OrderEntity mapToEntity(Order order);\n\n    OrderResponse mapToOrderResponse(Order order);\n\n    Order mapToOrderFromEntity(OrderEntity orderEntity);\n\n}\n</code></pre> AutoItemMapper.java<pre><code>package com.springboot.project.mapper;\n\nimport com.springboot.project.entity.ItemEntity;\nimport com.springboot.project.generated.model.ItemRequest;\nimport com.springboot.project.generated.model.ItemResponse;\nimport com.springboot.project.model.Item;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface AutoItemMapper {\n\n    AutoItemMapper MAPPER = Mappers.getMapper(AutoItemMapper.class);\n\n    Item toItemFromRequest(ItemRequest itemRequest);\n\n    Item toItemFromEntity(ItemEntity itemEntity);\n\n    ItemEntity toItemEntity(Item item);\n\n    ItemResponse toItemResponse(Item item);\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#service","title":"Service","text":"<ul> <li>Now, with these classes that we defined above, we can create service class for handling logics for CRUD entities.</li> </ul> CustomerService.java<pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.repository.CustomerRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerService {\n\n    private final CustomerRepository customerRepository;\n\n    public Customer createCustomer(Customer customer) {\n        CustomerEntity customerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n        customerEntity = this.customerRepository.save(customerEntity);\n        return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity);\n    }\n\n    public Customer getCustomer(UUID customerId) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void updateCustomer(UUID customerId, Customer customer) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            CustomerEntity existedCustomerEntity = customerEntity.get();\n            CustomerEntity updateCustomerEntity = AutoCustomerMapper.MAPPER.mapToCustomerEntity(customer);\n            AutoCustomerMapper.MAPPER.updateCustomerEntity(existedCustomerEntity, updateCustomerEntity);\n            this.customerRepository.save(existedCustomerEntity);\n            return;\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void deleteCustomer(UUID customerId) {\n        this.customerRepository.deleteById(customerId);\n    }\n\n    public Customer findCustomerByEmail(String email) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findCustomerByEmail(email);\n        if (customerEntity.isPresent()) {\n            return AutoCustomerMapper.MAPPER.mapToCustomer(customerEntity.get());\n        }\n        throw new RuntimeException(\"Customer Not Found! with email: \" + email);\n    }\n\n}\n</code></pre> OrderService.java<pre><code>package com.springboot.project.service;\n\n\nimport com.springboot.project.entity.CustomerEntity;\nimport com.springboot.project.entity.ItemEntity;\nimport com.springboot.project.entity.OrderEntity;\nimport com.springboot.project.mapper.AutoItemMapper;\nimport com.springboot.project.mapper.AutoOrderMapper;\nimport com.springboot.project.model.Item;\nimport com.springboot.project.model.Order;\nimport com.springboot.project.repository.CustomerRepository;\nimport com.springboot.project.repository.OrderRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class OrderService {\n\n    private final CustomerRepository customerRepository;\n    private final OrderRepository orderRepository;\n\n    public Order createOrder(UUID customerId, Order order) {\n        if (CollectionUtils.isEmpty(order.getItems())) {\n            throw new RuntimeException(\"Can not create Order without any Item!\");\n        }\n        CustomerEntity customerEntity = this.getCustomer(customerId);\n        OrderEntity orderEntity = AutoOrderMapper.MAPPER.mapToEntity(order);\n        List&lt;ItemEntity&gt; itemEntities = this.mapToItemEntities(order.getItems(), orderEntity);\n        orderEntity.setCustomer(customerEntity);\n        orderEntity.setItems(itemEntities);\n        orderEntity = this.orderRepository.save(orderEntity);\n        return AutoOrderMapper.MAPPER.mapToOrderFromEntity(orderEntity);\n    }\n\n    public Order getOrderDetail(UUID customerId, UUID orderId) {\n        Optional&lt;OrderEntity&gt; orderEntityOpt = this.orderRepository.findById(orderId);\n        if (orderEntityOpt.isPresent()) {\n            OrderEntity orderEntity = orderEntityOpt.get();\n            if(orderEntity.getCustomer().getId().equals(customerId)) {\n                return AutoOrderMapper.MAPPER.mapToOrderFromEntity(orderEntity);\n            }\n        }\n        throw new RuntimeException(\"customerId or orderId is not correct or relative!\");\n    }\n\n    private CustomerEntity getCustomer(UUID customerId) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            return customerEntity.get();\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    private List&lt;ItemEntity&gt; mapToItemEntities(List&lt;Item&gt; items, OrderEntity orderEntity) {\n        return items.stream()\n                .map(AutoItemMapper.MAPPER::toItemEntity)\n                .peek(i -&gt; i.setOrder(orderEntity))\n                .collect(Collectors.toList());\n    }\n\n}\n</code></pre> ItemService.java<pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.entity.ItemEntity;\nimport com.springboot.project.entity.OrderEntity;\nimport com.springboot.project.mapper.AutoItemMapper;\nimport com.springboot.project.model.Item;\nimport com.springboot.project.repository.CustomerRepository;\nimport com.springboot.project.repository.ItemRepository;\nimport com.springboot.project.repository.OrderRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class ItemService {\n\n    private final ItemRepository itemRepository;\n    private final CustomerRepository customerRepository;\n    private final OrderRepository orderRepository;\n\n    private List&lt;Item&gt; addItemToOrder(UUID orderId, List&lt;Item&gt; items) {\n        OrderEntity orderEntity = this.getOrderEntity(orderId);\n        List&lt;ItemEntity&gt; itemEntities = this.toItemEntities(items);\n        itemEntities.forEach(i -&gt; i.setOrder(orderEntity));\n        List&lt;ItemEntity&gt; itemEntityResults = this.itemRepository.saveAll(itemEntities);\n        return this.toItems(itemEntityResults);\n    }\n\n    private List&lt;ItemEntity&gt; toItemEntities(List&lt;Item&gt; items) {\n        return items.stream().map(AutoItemMapper.MAPPER::toItemEntity).collect(Collectors.toList());\n    }\n\n    private List&lt;Item&gt; toItems(List&lt;ItemEntity&gt; itemEntities) {\n        return itemEntities.stream().map(AutoItemMapper.MAPPER::toItemFromEntity).collect(Collectors.toList());\n    }\n\n    private OrderEntity getOrderEntity(UUID orderId) {\n        Optional&lt;OrderEntity&gt; orderEntity = this.orderRepository.findById(orderId);\n        if (orderEntity.isPresent()) {\n            return orderEntity.get();\n        }\n        throw new RuntimeException(\"Order Not Found!\");\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#controller","title":"Controller","text":"<ul> <li>Now, we can create some basic controllers and implement the generated apis.</li> </ul> CustomerController.java<pre><code>package com.springboot.project.controller;\n\n\nimport com.springboot.project.generated.api.CustomerApi;\nimport com.springboot.project.generated.model.CustomerRequest;\nimport com.springboot.project.generated.model.CustomerResponse;\nimport com.springboot.project.mapper.AutoCustomerMapper;\nimport com.springboot.project.model.Customer;\nimport com.springboot.project.service.CustomerService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class CustomerController implements CustomerApi {\n\n    private final CustomerService customerService;\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; addCustomer(CustomerRequest customerRequest) {\n        Customer customer = AutoCustomerMapper.MAPPER.mapToCustomerFromRequest(customerRequest);\n        customer = this.customerService.createCustomer(customer);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerInfo(UUID customerId) {\n        Customer customer = this.customerService.getCustomer(customerId);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n\n    }\n\n    @Override\n    public ResponseEntity&lt;CustomerResponse&gt; getCustomerInfoByEmail(String email) {\n        Customer customer = this.customerService.findCustomerByEmail(email);\n        CustomerResponse customerResponse = AutoCustomerMapper.MAPPER.mapToCustomerResponse(customer);\n        return new ResponseEntity&lt;&gt;(customerResponse, HttpStatus.OK);\n    }\n\n}\n</code></pre> OrderController.java<pre><code>package com.springboot.project.controller;\n\n\nimport com.springboot.project.generated.api.OrderApi;\nimport com.springboot.project.generated.model.OrderRequest;\nimport com.springboot.project.generated.model.OrderResponse;\nimport com.springboot.project.mapper.AutoOrderMapper;\nimport com.springboot.project.model.Order;\nimport com.springboot.project.service.OrderService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.UUID;\n\n@RestController\n@AllArgsConstructor(onConstructor = @__(@Autowired))\npublic class OrderController implements OrderApi {\n\n    private final OrderService orderService;\n\n    @Override\n    public ResponseEntity&lt;OrderResponse&gt; addOrder(UUID customerId, OrderRequest orderRequest) {\n        Order order = AutoOrderMapper.MAPPER.mapToOrderFromRequest(orderRequest);\n        order = this.orderService.createOrder(customerId, order);\n        OrderResponse orderResponse = AutoOrderMapper.MAPPER.mapToOrderResponse(order);\n        return new ResponseEntity&lt;&gt;(orderResponse, HttpStatus.CREATED);\n    }\n\n    @Override\n    public ResponseEntity&lt;OrderResponse&gt; getOrderDetail(UUID customerId, UUID orderId) {\n        Order order = this.orderService.getOrderDetail(customerId, orderId);\n        OrderResponse orderResponse = AutoOrderMapper.MAPPER.mapToOrderResponse(order);\n        return new ResponseEntity&lt;&gt;(orderResponse, HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#testing","title":"Testing","text":"<ul> <li>Now, let's start the application and use a Database tool to check the tables.</li> </ul> <ul> <li>As we can see, Indexes in <code>customers</code> table are created with the <code>name</code> and  <code>unique</code> is true as we configured in the <code>CustomerEntity</code>.</li> </ul> <ul> <li> <p>Next, we can also see the index of column <code>item_name</code> is created when we use <code>@Column(name = \"item_name\", unique = true)</code> but the <code>Index Name</code> is a random name.</p> </li> <li> <p>Now, we will test how do the indexing help us in querying in database.</p> </li> <li>Firstly, let's use the postman and with the request body as below.</li> </ul> <pre><code>{\n    \"fullName\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"address\": \"{{$randomStreetAddress}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\"\n}\n</code></pre> <ul> <li>Postman supports us to random some common fields every time we send the request body.</li> <li>Now, let's run the api CreateCustomer for 10000 times. Then we will have 10000 records in the <code>customers</code> table.</li> </ul> <p></p> <p></p> <ul> <li>Now, let's run an sql command below to analyze the select query using an indexed column <code>email</code> as below.</li> </ul> <pre><code>explain ANALYZE select * from customers c where c.email = 'Greyson_McClure41@example.net';\n</code></pre> <ul> <li>Then we can see the result as below.</li> </ul> <pre><code>Index Scan using uniquemultiindex on customers c  (cost=0.29..8.30 rows=1 width=97) (actual time=0.016..0.017 rows=1 loops=1)\n  Index Cond: ((email)::text = 'Greyson_McClure41@example.net'::text)\nPlanning Time: 0.054 ms\nExecution Time: 0.029 ms\n</code></pre> <p></p> <ul> <li>As you can see, finding a record in 10000 rows just took 0.029ms, it is so fast.</li> <li>Now, let's use the sql command below to to analyze the select query using no indexed column <code>full_name</code> as below.</li> </ul> <pre><code>explain ANALYZE select * from customers c where c.full_name = 'Katrina Kerluke';\n</code></pre> <ul> <li>Then we can see the result as below.</li> </ul> <pre><code>Seq Scan on customers c  (cost=0.00..319.50 rows=1 width=97) (actual time=1.739..3.679 rows=1 loops=1)\n  Filter: ((full_name)::text = 'Katrina Kerluke'::text)\n  Rows Removed by Filter: 10994\nPlanning Time: 0.057 ms\nExecution Time: 3.696 ms\n</code></pre> <p></p> <ul> <li>So, we can see querying without indexing will take 3.696ms, it is slower than 0.029ms  using indexing very much.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#conclusion","title":"Conclusion","text":"<ul> <li>We have just known about what is index and how to apply indexing with Jpa.</li> <li>We also do some tests with indexing in database and see the different between indexed and no indexed.</li> <li>However, we also need to consider applying indexing:<ul> <li>Pros: Indexing improve performance for querying in the database.</li> <li>Cons: Indexing will take more space of the table in database and it also can slow down the <code>INSERT</code> statements in database because:<ul> <li>When we <code>INSERT</code> new row, we are not also updating the table but also the indexes in that table.</li> <li>Most indexes use some form of a tree data structure. When a new entry is inserted, this tree needs to be rebalanced. Depending on the type of the index and the distribution of data, The rebalancing operation can be costly.</li> <li>If there are concurrent transactions happening on the same table, having an index can increase the chances of lock contention, which can also slow down\u00a0<code>INSERT</code>\u00a0operations.</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#see_also","title":"See Also","text":"<ul> <li>SB 3x JPA Native Query Postgres Optional Params</li> <li>SB 3x JPA Native Query Postgres Full Text Search</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Indexing/#references","title":"References","text":"<ul> <li>learnsql.com</li> <li>guru99.com</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Postgres%20View%20Table/","title":"JPA With Postgres View Table","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Postgres%20View%20Table/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Specification%20Query/","title":"JPA With Specification Query","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20JPA%20With%20Specification%20Query/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/SB%203x%20Spring%20Data%20MongoDB/","title":"Spring Data MongoDB","text":"","tags":["Spring","SpringData","MongoDB"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/","title":"Spring Data Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#what_is_the_spring_data","title":"What Is The Spring Data?","text":"<ul> <li><code>Spring Data\u2019s mission</code> is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store.</li> <li>It makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database. The projects are developed by working together with many of the companies and developers that are behind these exciting technologies.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#features","title":"Features","text":"<ul> <li>Powerful repository and custom object-mapping abstractions.</li> <li>Dynamic query derivation from repository method names.</li> <li>Implementation domain base classes providing basic properties.</li> <li>Support for transparent auditing (created, last changed).</li> <li>Possibility to integrate custom repository code.</li> <li>Easy Spring integration via JavaConfig and custom XML namespaces.</li> <li>Advanced integration with Spring MVC controllers.</li> <li>Experimental support for cross-store persistence.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#main_modules","title":"Main Modules","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#spring_data_jdbc","title":"Spring Data JDBC","text":"<ul> <li>Spring Data JDBC</li> <li>JDBC In Spring Boot</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#spring_dada_jpa","title":"Spring Dada JPA","text":"<ul> <li>Spring Data JPA<ul> <li>JPA Core<ul> <li>Persistence Unit</li> <li>EntityManagerFactory</li> <li>Persistence Context<ul> <li>Container Managed Persistence Context</li> <li>Application Managed Persistence Context</li> </ul> </li> <li>EntityManager</li> <li>Entity</li> </ul> </li> <li>JPA In SpringBoot<ul> <li>JPA In Spring Boot</li> <li>Object Relational Mapping<ul> <li>Hibernate</li> </ul> </li> <li>Open Session In View Of JPA<ul> <li>Transaction</li> </ul> </li> <li>Database Configuration In SpringBoot</li> <li>JPA With Pagination</li> <li>JPA With Multi Datasources</li> <li>SB 3x JPA Native Query Postgres Optional Params</li> <li>SB 3x JPA Entity Lifecycle Events</li> </ul> </li> <li>Auditing<ul> <li>Auditing With Hibernate Envers</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#database_migration","title":"Database Migration","text":"<ul> <li>Database Migrations with Flyway<ul> <li>Flyway Migrations<ul> <li>Flyway Versioned Migrations</li> <li>Flyway Repeatable Migrations</li> <li>Flyway SQL-based Migrations</li> <li>Flyway Regular Versioned Migration Example</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20Introduction/#references","title":"References","text":"<ul> <li>Spring IO</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/","title":"Spring Data JDBC Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#what_is_the_jdbc","title":"What Is The JDBC?","text":"<ul> <li><code>JDBC</code> stands for <code>Java Database Connectivity</code>. JDBC is a Java API to connect and execute the query with the database. It is a part of JavaSE (Java Standard Edition). JDBC API uses JDBC drivers to connect with the database.</li> <li>We can use JDBC API to access tabular data stored in any relational database. By the help of JDBC API, we can save, update, delete and fetch data from the database.</li> <li>The JDBC interface consists of two layers:<ul> <li>The JDBC API supports communication between the Java application and the JDBC manager.</li> <li>The JDBC driver supports communication between the JDBC manager and the database driver.</li> </ul> </li> <li>JDBC is the common API that your application code interacts with. Beneath that is the JDBC-compliant driver for the database you are using.</li> <li>More information</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#jdbc_in_springboot","title":"JDBC In SpringBoot","text":"<ul> <li>In  SpringBoot projects, we usually use dependency libraries <code>spring-boot-starter-jdbc</code> for <code>JDBC</code>. We should note that these SpringBoot dependencies will wrap many others libraries and <code>JDBC core</code> are just a part of them.</li> <li>For this reason, If you use the <code>spring-jdbc</code> on SpringFramework project, you will not see the dependency <code>HikariCP</code> and you have to import this dependency manually. For <code>SpringBoot projects</code> you just need to import only one dependency <code>spring-boot-starter-jdbc</code> then you will have <code>spring-jdbc</code> and  <code>HikariCP</code> also. </li> <li>Let's see the dependency tree of <code>spring-boot-starter-jdbc</code> as below.</li> </ul> <pre><code>+- org.springframework.boot:spring-boot-starter-jdbc:jar:2.4.4:compile\n|  +- org.springframework.boot:spring-boot-starter:jar:2.4.4:compile\n|  |  +- org.springframework.boot:spring-boot:jar:2.4.4:compile\n|  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.4.4:compile\n|  |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.4.4:compile\n|  |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile\n|  |  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile\n|  |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile\n|  |  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.13.3:compile\n|  |  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.30:compile\n|  |  +- jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile\n|  |  +- org.springframework:spring-core:jar:5.3.5:compile\n|  |  |  \\- org.springframework:spring-jcl:jar:5.3.5:compile\n|  |  \\- org.yaml:snakeyaml:jar:1.27:compile\n|  +- com.zaxxer:HikariCP:jar:3.4.5:compile\n|  |  \\- org.slf4j:slf4j-api:jar:1.7.25:compile\n|  \\- org.springframework:spring-jdbc:jar:5.3.5:compile\n|     +- org.springframework:spring-beans:jar:5.3.5:compile\n|     \\- org.springframework:spring-tx:jar:5.3.5:compile\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#example_project_with_spring_jdbc_core","title":"Example Project With Spring JDBC Core","text":"<ul> <li>We will make an example with JDBC core in  SpringBoot projects. So for <code>JDPC</code> core and managing connection pool we will add those dependencies manually and in this example we will not use <code>HikariCP</code> instead we will use <code>commons-dbcp</code> from Apache.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#dependencies","title":"Dependencies","text":"<ul> <li>So in this example we need to imports dependencies as <code>spring-jdbc</code> and <code>commons-dbcp</code> as below. In which <code>commons-dbcp</code> (dbcp - Database Connection Pool) from Apache will help us to manage database connections pool.</li> </ul> pom.xml<pre><code>  &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n      &lt;version&gt;5.3.14&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\n      &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\n      &lt;version&gt;1.4&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;8.0.27&lt;/version&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#dao","title":"DAO","text":"<ul> <li>In Database we will have some tables with One to Many relationships as the image below</li> </ul> <ul> <li>Note: you need to go to Database and create these tables manually before running this Spring Boot application. Please use the scripts below.</li> </ul> <pre><code>CREATE TABLE `customers` (\n  `id` CHAR(36) PRIMARY KEY NOT NULL,\n  `address` VARCHAR(255) DEFAULT NULL,\n  `dob` DATE DEFAULT NULL,\n  `email` VARCHAR(255) DEFAULT NULL,\n  `gender` VARCHAR(255) DEFAULT NULL,\n  `full_name` VARCHAR(255) DEFAULT NULL,\n  `phone` VARCHAR(255) DEFAULT NULL\n);\n\nCREATE TABLE `orders` (\n  `id` CHAR(36) PRIMARY KEY NOT NULL,\n  `created_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  `last_updated_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `order_name` VARCHAR(255),\n  `order_status` VARCHAR(255),\n  `customer_id` CHAR(36),\n  FOREIGN KEY (`customer_id`) REFERENCES `customers`(`id`) ON DELETE CASCADE\n);\n\nCREATE TABLE `items` (\n  `id` CHAR(36) PRIMARY KEY NOT NULL,\n  `item_name` VARCHAR(225),\n  `price` DECIMAL(10, 2),\n  `quantity` BIGINT,\n  `order_id` CHAR(36),\n  FOREIGN KEY (`order_id`) REFERENCES `orders`(`id`) ON DELETE CASCADE\n);\n</code></pre> <ul> <li>Then we will create a DAO (Data Access Object) java class which will contain queries for Create a customer with orders and items in database. The code in <code>CustomerDao</code> will look like as below</li> </ul> CustomerDao.java<pre><code>package com.springboot.data.jdbc.app.dao;\n\nimport com.springboot.data.jdbc.app.model.OrderStatus;\nimport com.springboot.data.jdbc.app.model.request.CustomerRequest;\nimport com.springboot.data.jdbc.app.model.request.ItemRequest;\nimport com.springboot.data.jdbc.app.model.request.OrderRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\nimport org.springframework.jdbc.core.namedparam.SqlParameterSource;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Repository\npublic class CustomerDao {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    @Autowired\n    private NamedParameterJdbcOperations namedParameterJdbcOperations;\n\n\n    public UUID createCustomer(CustomerRequest customerRequest) {\n        String sqlCustomerQuery =\n                           \"INSERT INTO customers(                          \"\n                +          \"id,                                             \"   /*1*/\n                +          \"address,                                        \"   /*2*/\n                +          \"dob,                                            \"   /*3*/\n                +          \"email,                                          \"   /*4*/\n                +          \"full_name,                                      \"   /*5*/\n                +          \"gender,                                         \"   /*6*/\n                +          \"phone)                                          \"   /*7*/\n                +          \"VALUES (?, ?, ?, ?, ?, ?, ?)                    \"\n                ;\n        UUID uuid = this.getRandomUUID();\n        this.jdbcTemplate.update(sqlCustomerQuery,\n                uuid.toString(),\n                customerRequest.getAddress(),\n                customerRequest.getDob(),\n                customerRequest.getEmail(),\n                customerRequest.getFullName(),\n                customerRequest.getGender().toString(),\n                customerRequest.getPhone());\n        return uuid;\n    }\n\n    public Map&lt;UUID, OrderRequest&gt; createOrders(UUID customerId, List&lt;OrderRequest&gt; orderRequestList) {\n        Map&lt;UUID, OrderRequest&gt; map = new HashMap&lt;&gt;();\n        final int size = orderRequestList.size();\n        String sqlOrderQuery =\n                         \"INSERT INTO orders(                                \"\n                 +       \"id,                                                \" /*1*/\n                 +       \"created_date,                                      \" /*2*/\n                 +       \"last_updated_date,                                 \" /*3*/\n                 +       \"order_name,                                        \" /*4*/\n                 +       \"order_status,                                      \" /*5*/\n                 +       \"customer_id)                                       \" /*6*/\n                 +       \"VALUES(                                            \"\n                 +       \":id,                                               \" /*1*/\n                 +       \":created_date,                                     \" /*2*/\n                 +       \":last_updated_date,                                \" /*3*/\n                 +       \":order_name,                                       \" /*4*/\n                 +       \":order_status,                                     \" /*5*/\n                 +       \":customer_id)                                      \" /*6*/\n                ;\n        List&lt;SqlParameterSource&gt; sqlParameterSources = new ArrayList&lt;&gt;(size);\n        for (OrderRequest orderRequest: orderRequestList) {\n            UUID uuid = this.getRandomUUID();\n            MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n            LocalDateTime now = LocalDateTime.now();\n            mapSqlParameterSource.addValue(\"id\", uuid.toString());\n            mapSqlParameterSource.addValue(\"created_date\",now);\n            mapSqlParameterSource.addValue(\"last_updated_date\", now);\n            mapSqlParameterSource.addValue(\"order_name\", orderRequest.getOrderName());\n            mapSqlParameterSource.addValue(\"order_status\", OrderStatus.CREATED.toString());\n            mapSqlParameterSource.addValue(\"customer_id\", customerId.toString());\n            sqlParameterSources.add(mapSqlParameterSource);\n            map.put(uuid, orderRequest);\n        }\n        this.namedParameterJdbcOperations.batchUpdate(sqlOrderQuery, sqlParameterSources.toArray(new SqlParameterSource[size]));\n        return map;\n    }\n\n    public void createItems(UUID orderId, List&lt;ItemRequest&gt; itemRequests) {\n        final int size = itemRequests.size();\n        String itemSqlQuery =\n                                \"INSERT INTO items(                                 \"\n                        +       \"id,                                                \" /*1*/\n                        +       \"item_name,                                         \" /*2*/\n                        +       \"price,                                             \" /*3*/\n                        +       \"quantity,                                          \" /*4*/\n                        +       \"order_id)                                          \" /*5*/\n                        +       \"VALUES(                                            \"\n                        +       \":id,                                               \" /*1*/\n                        +       \":item_name,                                        \" /*2*/\n                        +       \":price,                                            \" /*3*/\n                        +       \":quantity,                                         \" /*4*/\n                        +       \":order_id)                                         \" /*5*/\n                        ;\n        UUID uuid = this.getRandomUUID();\n        List&lt;SqlParameterSource&gt; sqlParameterSources = new ArrayList&lt;&gt;(size);\n        for (ItemRequest itemRequest: itemRequests) {\n            MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n            mapSqlParameterSource.addValue(\"id\", uuid.toString());\n            mapSqlParameterSource.addValue(\"item_name\", itemRequest.getItemName());\n            mapSqlParameterSource.addValue(\"price\", itemRequest.getPrice());\n            mapSqlParameterSource.addValue(\"quantity\", itemRequest.getQuantity());\n            mapSqlParameterSource.addValue(\"order_id\", orderId.toString());\n            sqlParameterSources.add(mapSqlParameterSource);\n        }\n        this.namedParameterJdbcOperations.batchUpdate(itemSqlQuery, sqlParameterSources.toArray(new SqlParameterSource[size]));\n    }\n\n    private UUID getRandomUUID() {\n        return UUID.randomUUID();\n    }\n}\n</code></pre>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#service","title":"Service","text":"<ul> <li>Next we need to create a service named <code>CustomerJdbcService</code> to handle logics for create a Customer with many orders and items. The Customer will be created first, then if the Customer contains orders so orders will be created and if in every order which contains items then items will be also created. See example code below:</li> </ul> CustomerJdbcService.java<pre><code>package com.springboot.data.jdbc.app.service;\n\nimport com.springboot.data.jdbc.app.dao.CustomerDao;\nimport com.springboot.data.jdbc.app.model.request.CustomerRequest;\nimport com.springboot.data.jdbc.app.model.request.OrderRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Service\npublic class CustomerJdbcService {\n\n\n    @Autowired\n    private CustomerDao customerDao;\n\n    public UUID createCustomer(CustomerRequest customerRequest) {\n        UUID customerId = this.customerDao.createCustomer(customerRequest);\n        List&lt;OrderRequest&gt; orders = customerRequest.getOrders();\n        if (orders != null &amp;&amp; !orders.isEmpty()) {\n            Map&lt;UUID, OrderRequest&gt; orderRequestMap = this.customerDao.createOrders(customerId, customerRequest.getOrders());\n            for (Map.Entry&lt;UUID, OrderRequest&gt; map : orderRequestMap.entrySet()) {\n                if (map.getValue().getItems() != null &amp;&amp; !map.getValue().getItems().isEmpty()) {\n                    this.customerDao.createItems(map.getKey(), map.getValue().getItems());\n                }\n            }\n        }\n        return customerId;\n    }\n\n}\n</code></pre> <ul> <li>Then we can this service into any controller that we want to test. In this example, we assume that we will call this service from the Api <code>/v1/jdbc/customers</code>.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#configuration","title":"Configuration","text":"<ul> <li>Now we will go to connection pool configuration with <code>commons-dbcp</code> from Apache. To do this, firstly you need to add these environment variables below into application.yml.</li> </ul> application.yml<pre><code>spring:\n  datasource:\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/sample?useUnicode=true&amp;characterEncoding=UTF-8\n    username: root\n    password: password\n    # config dbcp pool for jdbc\n    maxWait: 10000\n    maxActive: -1\n    maxIdle: 20\n    minIdle: 10\n    initialSize: 10\n</code></pre> <ul> <li>Then we will create an <code>ApplicationConfig</code> java class for DataSource and JdbcTemplate configurations as below</li> </ul> ApplicationConfig.java<pre><code>package com.springboot.data.jdbc.app.config;\n\nimport org.apache.commons.dbcp.BasicDataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport javax.sql.DataSource;\nimport java.util.Objects;\n\n@Configuration\npublic class ApplicationConfig {\n\n    @Autowired\n    private Environment env;\n\n    @Bean(\"dataSource\")\n    public DataSource getDataSource() {\n\n        final String sqlInitQuery = \"SHOW PROCESSLIST;\";\n\n        BasicDataSource basicDataSource = new BasicDataSource();\n        basicDataSource.setDriverClassName(Objects.requireNonNull(env.getProperty(\"spring.datasource.driverClassName\")));\n        basicDataSource.setUrl(env.getProperty(\"spring.datasource.url\"));\n        basicDataSource.setUsername(env.getProperty(\"spring.datasource.username\"));\n        basicDataSource.setPassword(env.getProperty(\"spring.datasource.password\"));\n        basicDataSource.setInitialSize(Integer.parseInt(Objects.requireNonNull(env.getProperty(\"spring.datasource.initialSize\"))));\n        basicDataSource.setMinIdle(Integer.parseInt(Objects.requireNonNull(env.getProperty(\"spring.datasource.minIdle\"))));\n        basicDataSource.setMaxIdle(Integer.parseInt(Objects.requireNonNull(env.getProperty(\"spring.datasource.maxIdle\"))));\n        basicDataSource.setMaxWait(Long.parseLong(Objects.requireNonNull(env.getProperty(\"spring.datasource.maxWait\"))));\n        basicDataSource.setMaxActive(Integer.parseInt(Objects.requireNonNull(env.getProperty(\"spring.datasource.maxActive\"))));\n        return basicDataSource;\n    }\n\n    @Bean(\"jdbcTemplate\")\n    public JdbcTemplate getJdbcTemplate() {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.setDataSource(getDataSource());\n        jdbcTemplate.setLazyInit(false);\n        return jdbcTemplate;\n    }\n}\n</code></pre> <ul> <li>For DataSource configuration, we will create a BasicDataSource with some parameters that we will load from the application.yml.</li> <li>To configure BasicDataSource to make conntections to DB we just need to focus on those parameters in table below.</li> </ul> Prameter Description Set Method Sample Configuration Value username The connection user name to be passed to our JDBC driver to establish a connection. setUsername() root password The connection password to be passed to our JDBC driver to establish a connection. setPassword() password url The connection URL to be passed to our JDBC driver to establish a connection. setUrl() jdbc:mysql://localhost:3306/sample?useUnicode=true&amp;characterEncoding=UTF-8 driverClassName The fully qualified Java class name of the JDBC driver to be used. setDriverClassName() com.mysql.cj.jdbc.Driver <ul> <li>To configure BasicDataSource with DBCP (Database Connection Pool) we will focus on some parameters below</li> </ul> Prameter Description Set Method Default Value Sample Configuration Value initialSize The initial number of connections that are created when the pool is started. Since: 1.2 setInitialSize() 0 10 maxTotal The maximum number of active connections that can be allocated from this pool at the same time, or negative for no limit. setMaxActive() 8 -1 maxIdle The maximum number of connections that can remain idle in the pool, without extra ones being released, or negative for no limit. setMaxIdle() 8 20 minIdle The minimum number of connections that can remain idle in the pool, without extra ones being created, or zero to create none. setMinIdle() 0 10 maxWaitMillis The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or -1 to wait indefinitely. setMaxWait() indefinitely 10000 <ul> <li> <p>You can find more here.</p> </li> <li> <p>So after we have configured BasicDataSource then we will use it to create JdbcTemplate bean. As you can see in the code we will set <code>setLazyInit(false)</code>, So this mean when our application is started, all connections in pool will conntect to database.</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#testing","title":"Testing","text":"<ul> <li>So now, let's start your Spring Boot service then login into mysql and use command <code>show processlist;</code> you will see the result as below</li> </ul> Id User Host db Command Time State Info 5 event_scheduler localhost NULL Daemon 6356 Waiting on empty queue NULL 12 root 172.18.0.1:43650 sample Sleep 156 NULL 13 root 172.18.0.1:43652 sample Sleep 156 NULL 14 root 172.18.0.1:43656 sample Sleep 156 NULL 15 root 172.18.0.1:43658 sample Sleep 156 NULL 16 root 172.18.0.1:43660 sample Sleep 156 NULL 17 root 172.18.0.1:43662 sample Sleep 156 NULL 18 root 172.18.0.1:43664 sample Sleep 156 NULL 19 root 172.18.0.1:43666 sample Sleep 156 NULL 20 root 172.18.0.1:43668 sample Sleep 156 NULL 21 root 172.18.0.1:43670 sample Sleep 155 NULL 24 root localhost NULL Query 0 init show processlist <ul> <li>As you can see, 10 database connections have been created (from Id 12 to Id 21) by our Spring Boot service to MySQL Database, It mean our database connection pool configuration has worked.</li> <li> <p>Now when we execute a query from our Spring Boot service a transaction will be created then a database connection will be taken from the pool to run the query, when the query is committed a transaction will close and the connection will be available in pool again. So using connection pool will help us get connections to Database quickly and save time for create new connections for every executed query.</p> </li> <li> <p>Now, let's use the postman and call the test the Api <code>/v1/jdbc/customers</code> then we can see the successful result as below.</p> </li> </ul> <p></p>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#see_also","title":"See Also","text":"<ul> <li>Spring Boot Introduction</li> <li>JDBC In Spring Boot</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JDBC/#references","title":"References","text":"<ul> <li>You can find the source code here</li> <li>INFO WORLD</li> <li>GEEKS FOR GEEKS</li> <li>COMMONS DBCP APACHE.</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Spring%20Data%20JPA/","title":"Spring JPA","text":"","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#what_is_the_jpa","title":"What Is The JPA?","text":"<ul> <li>The <code>Java Persistence API (JPA)</code> represents a simplification of the persistence programming model.</li> <li>Data persistence, the ability to maintain data between application sessions in some form of nonvolatile storage (such as a relational database), is crucial to enterprise applications. Applications that are developed for this environment must either manage data persistence themselves or make use of third-party solutions to handle database updates and retrievals. <code>JPA</code> provides a mechanism for managing data persistence and object-relational mapping and functions.</li> <li><code>JPA</code> is based on the Java programming model that applies to Java EE environments, but JPA can also function within the Java SE environment. The JPA specification defines the  object-relational mapping (ORM) internally, rather than relying on vendor-specific mapping implementations, and uses either annotations or XML to map objects into database tables. By default, <code>JPA</code> use Hibernate as the implementation for it's <code>ORM</code>. So we can say that, <code>JPA</code> defines interfaces for <code>ORM</code> and <code>Hibernate</code> is the implementation of these interfaces.</li> <li><code>JPA</code> is designed to operate both inside and outside of a Java Enterprise Edition (Java EE) container. When you run JPA inside a container, applications can use the container to manage the persistence. If there is no container to manage JPA, the application must handle the persistence management itself. Applications that are designed for container managed persistence cannot be used outside a container, while applications that manage their own persistence can function either in a container environment or a Java SE environment.</li> <li><code>JPA</code> also provides a query language - JPQL - that you can use to retrieve objects without writing SQL queries specific to the database you are working with.</li> <li>Java EE containers that support JPA must supply a persistence provider. A JPA persistence provider uses the following elements to persist data in an EJB 3.0 environment:</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#jpa_elements","title":"JPA Elements","text":"<ul> <li>Persistence Unit</li> <li>EntityManagerFactory</li> <li>Persistence Context</li> <li>EntityManager</li> <li>Entity</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#jpa_in_springboot","title":"JPA In SpringBoot","text":"<ul> <li>JPA In Spring Boot</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#open_session_in_view_of_jpa","title":"Open Session In View Of JPA","text":"<ul> <li>Open Session In View Of JPA</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#example_with_jpa","title":"Example With JPA","text":"<ul> <li>In this example, we will use JPA in a SpringBoot project to understand, how strong JPA support us to handle data from database.</li> <li>So, I advise to read JPA In Spring Boot before getting start with the example.</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#dependencies","title":"Dependencies","text":"<ul> <li>So to use JPA you just simple import some dependencies as below</li> </ul> pom.xml<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;version&gt;2.4.4&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n        &lt;version&gt;8.0.27&lt;/version&gt;\n        &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#entity","title":"Entity","text":"<ul> <li>We will create entities which represent for 3 tables in the database.</li> </ul> <ul> <li>Note: You don't need to create these 3 tables in the database because JPA will create for you automatically when the Spring Boot application has started.</li> <li>So in Entity classes we will use a lot of mapping annotations from JPA, so you can review these annotations in the table below:</li> </ul> Annotation Description @Entity The @Entity annotation is used to specify that the currently annotated class represents an entity type. Unlike basic and embeddable types, entity types have an identity and their state is managed by the underlying Persistence Context. @Table The @Table annotation is used to specify the primary table of the currently annotated entity. @Id The @Id annotation specifies the entity identifier. An entity must always have an identifier attribute which is used when loading the entity in a given Persistence Context. @GeneratedValue The @GeneratedValue annotation specifies that the entity identifier value is automatically generated using an identity column, a database sequence, or a table generator. Hibernate supports the @GeneratedValue mapping even for UUID identifiers. @Type The @Type annotation is used to specify the Hibernate @Type used by the currently annotated basic attribute. @Column The @Column annotation is used to specify the mapping between a basic entity attribute and the database table column. @Enumerated The @Enumerated annotation is used to specify that an entity attribute represents an enumerated type. In which, ORDINAL: stored according to the enum value\u2019s ordinal position within the enum class, as indicated by java.lang.Enum#ordinal STRING: stored according to the enum value\u2019s name, as indicated by java.lang.Enum#name @OneToMany The @OneToMany annotation is used to specify a one-to-many database relationship. @ManyToOne The @ManyToOne annotation is used to specify a many-to-one database relationship. @JoinColumn The @JoinColumn annotation is used to specify the FOREIGN KEY column used when joining an entity association or an embeddable collection. @PrePersist The @PrePersist annotation is used to specify a callback method that fires before an entity is persisted. @PreUpdate The @PreUpdate annotation is used to specify a callback method that fires before an entity is updated. <ul> <li> <p>You can find more here.</p> </li> <li> <p>The fist Entity is <code>CustomerEntity</code>, this Entity will be the parent of <code>OrderEntity</code> and one <code>CustomerEntity</code> will have many <code>OrderEntity</code>. The <code>CustomerEntity</code> java class will look like the code below.</p> </li> </ul> CustomerEntity.java<pre><code>package com.springboot.data.jpa.app.entity;\n\nimport com.springboot.data.jpa.app.model.response.CustomerResponse;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\n\n//The @Entity annotation is used to specify that the currently annotated class represents an entity type. Unlike basic and embeddable types, entity types have an identity and their state is managed by the underlying Persistence Context.\n@Entity\n//The @Table annotation is used to specify the primary table of the currently annotated entity.\n@Table(name = \"customers\")\npublic class CustomerEntity {\n\n    //The @Id annotation specifies the entity identifier. An entity must always have an identifier attribute which is used when loading the entity in a given Persistence Context.\n    @Id\n    //The @GeneratedValue annotation specifies that the entity identifier value is automatically generated using an identity column, a database sequence, or a table generator. Hibernate supports the @GeneratedValue mapping even for UUID identifiers.\n    @GeneratedValue\n    //The @Type annotation is used to specify the Hibernate @Type used by the currently annotated basic attribute.\n    @Type(type=\"uuid-char\")\n    private UUID id;\n    private String fullName;\n    //The @Column annotation is used to specify the mapping between a basic entity attribute and the database table column.\n    @Column(unique = true)\n    private String email;\n    private String address;\n    private String phone;\n    //The @Enumerated annotation is used to specify that an entity attribute represents an enumerated type.\n    @Enumerated(EnumType.STRING)\n    private Gender gender;\n    private Date dob;\n\n    //The @OneToMany annotation is used to specify a one-to-many database relationship.\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;OrderEntity&gt; orders = new ArrayList&lt;&gt;();\n\n    public UUID getId() {\n        return id;\n    }\n\n    public void setId(UUID id) {\n        this.id = id;\n    }\n\n    public String getFullName() {\n        return fullName;\n    }\n\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public Gender getGender() {\n        return gender;\n    }\n\n    public void setGender(Gender gender) {\n        this.gender = gender;\n    }\n\n    public Date getDob() {\n        return dob;\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob;\n    }\n\n    public List&lt;OrderEntity&gt; getOrders() {\n        return orders;\n    }\n\n    public void setOrders(List&lt;OrderEntity&gt; orders) {\n        this.orders = orders;\n    }\n}\n</code></pre> <ul> <li>Next we will create <code>OrderEntity</code>, so this Entity will be the parent of <code>ItemEntity</code> and One <code>OrderEntity</code> will have many <code>ItemEntity</code>. The <code>OrderEntity</code> java class will be look like as below</li> </ul> OrderEntity.java<pre><code>package com.springboot.data.jpa.app.entity;\n\nimport com.springboot.data.jpa.app.model.response.OrderResponse;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.PrePersist;\nimport javax.persistence.PreUpdate;\nimport javax.persistence.Table;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"orders\")\npublic class OrderEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String orderName;\n\n    private LocalDateTime createdDate;\n\n    private LocalDateTime lastUpdatedDate;\n\n    @Enumerated(value = EnumType.STRING)\n    private OrderStatus orderStatus;\n\n    //The @ManyToOne annotation is used to specify a many-to-one database relationship.\n    @ManyToOne(fetch = FetchType.LAZY)\n    //The @JoinColumn annotation is used to specify the FOREIGN KEY column used when joining an entity association or an embeddable collection.\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List&lt;ItemEntity&gt; items = new ArrayList&lt;&gt;();\n\n\n    public UUID getId() {\n        return id;\n    }\n\n    public void setId(UUID id) {\n        this.id = id;\n    }\n\n    public String getOrderName() {\n        return orderName;\n    }\n\n    public void setOrderName(String orderName) {\n        this.orderName = orderName;\n    }\n\n    public CustomerEntity getCustomer() {\n        return customer;\n    }\n\n    public void setCustomer(CustomerEntity customer) {\n        this.customer = customer;\n    }\n\n    public LocalDateTime getCreatedDate() {\n        return createdDate;\n    }\n\n    @PrePersist\n    private void setCreatedDate() {\n        LocalDateTime localDateTime = LocalDateTime.now();\n        this.createdDate = localDateTime;\n        this.lastUpdatedDate = localDateTime;\n    }\n\n    public LocalDateTime getLastUpdatedDate() {\n        return lastUpdatedDate;\n    }\n\n    @PreUpdate\n    private void setLastUpdatedDate() {\n        this.lastUpdatedDate = LocalDateTime.now();\n    }\n\n    public OrderStatus getOrderStatus() {\n        return orderStatus;\n    }\n\n    public void setOrderStatus(OrderStatus orderStatus) {\n        this.orderStatus = orderStatus;\n    }\n\n    public List&lt;ItemEntity&gt; getItems() {\n        return items;\n    }\n\n    public void setItems(List&lt;ItemEntity&gt; items) {\n        this.items = items;\n    }\n\n}\n</code></pre> <ul> <li>Next we will create <code>ItemEntity</code>. The <code>OrderEntity</code> java class will be look like as below</li> </ul> ItemEntity.java<pre><code>package com.springboot.data.jpa.app.entity;\n\nimport com.springboot.data.jpa.app.model.response.ItemResponse;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"items\")\npublic class ItemEntity {\n\n    @Id\n    @GeneratedValue\n    @Type(type=\"uuid-char\")\n    private UUID id;\n\n    private String itemName;\n\n    private Long quantity;\n\n    private Float price;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\")\n    private OrderEntity order;\n\n    public UUID getId() {\n        return id;\n    }\n\n    public void setId(UUID id) {\n        this.id = id;\n    }\n\n    public String getItemName() {\n        return itemName;\n    }\n\n    public void setItemName(String itemName) {\n        this.itemName = itemName;\n    }\n\n    public Long getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(Long quantity) {\n        this.quantity = quantity;\n    }\n\n    public Float getPrice() {\n        return price;\n    }\n\n    public void setPrice(Float price) {\n        this.price = price;\n    }\n\n    public OrderEntity getOrder() {\n        return order;\n    }\n\n    public void setOrder(OrderEntity order) {\n        this.order = order;\n    }\n}\n</code></pre> <ul> <li>So that's all for creating Entities and relationships.</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#repository","title":"Repository","text":"<ul> <li>Now we will create the <code>CustomerRepository</code> which will look like as below</li> </ul> CustomerRepository.java<pre><code>package com.springboot.data.jpa.app.repository;\n\nimport com.springboot.data.jpa.app.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, UUID&gt; {\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#service","title":"Service","text":"<ul> <li>Finally, we will create <code>CustomerJpaService</code> which will help us to handle logics for creating customer, orders and items.</li> </ul> CustomerJpaService.java<pre><code>package com.springboot.data.jpa.app.service;\n\nimport com.springboot.data.jpa.app.entity.CustomerEntity;\nimport com.springboot.data.jpa.app.entity.OrderEntity;\nimport com.springboot.data.jpa.app.entity.OrderStatus;\nimport com.springboot.data.jpa.app.model.request.CustomerRequest;\nimport com.springboot.data.jpa.app.model.request.ItemRequest;\nimport com.springboot.data.jpa.app.model.request.OrderRequest;\nimport com.springboot.data.jpa.app.model.response.CustomerResponse;\nimport com.springboot.data.jpa.app.repository.CustomerRepository;\nimport com.springboot.data.jpa.app.entity.ItemEntity;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CustomerJpaService {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    public UUID createCustomer(CustomerRequest customerRequest) {\n        CustomerEntity customerEntity = this.toCustomerEntity(new CustomerEntity(), customerRequest);\n        if (customerRequest.getOrders() != null &amp;&amp; !customerRequest.getOrders().isEmpty()) {\n            List&lt;OrderRequest&gt; orderRequests = customerRequest.getOrders();\n            List&lt;OrderEntity&gt; orderEntities = this.toOrderEntities(orderRequests);\n            orderEntities.forEach(o -&gt; o.setCustomer(customerEntity));\n            customerEntity.setOrders(orderEntities);\n        }\n        return this.customerRepository.save(customerEntity).getId();\n    }\n\n    public CustomerResponse getCustomer(UUID customerId) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n            return customerEntity.get().toCustomerResponse();\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void updateCustomer(UUID customerId, CustomerRequest customerRequest) {\n        Optional&lt;CustomerEntity&gt; customerEntity = this.customerRepository.findById(customerId);\n        if (customerEntity.isPresent()) {\n           CustomerEntity updatedCustomerEntity = this.toCustomerEntity(customerEntity.get(), customerRequest);\n            this.customerRepository.save(updatedCustomerEntity);\n            return;\n        }\n        throw new RuntimeException(\"Customer Not Found!\");\n    }\n\n    public void deleteCustomer(UUID customerId) {\n        this.customerRepository.deleteById(customerId);\n    }\n\n    private List&lt;OrderEntity&gt; toOrderEntities(List&lt;OrderRequest&gt; orderRequests) {\n        return orderRequests.stream().map(o -&gt; this.toOrderEntity(new OrderEntity(), o)).collect(Collectors.toList());\n    }\n\n    private OrderEntity toOrderEntity(OrderEntity orderEntity, OrderRequest orderRequest) {\n        orderEntity.setOrderName(orderRequest.getOrderName());\n        orderEntity.setOrderStatus(OrderStatus.CREATED);\n        if (orderRequest.getItems() != null &amp;&amp; !orderRequest.getItems().isEmpty()) {\n            List&lt;ItemEntity&gt; itemEntities = this.toItemEntities(orderRequest.getItems());\n            itemEntities.forEach(i -&gt; i.setOrder(orderEntity));\n            orderEntity.setItems(itemEntities);\n        }\n        return orderEntity;\n    }\n\n    private List&lt;ItemEntity&gt; toItemEntities(List&lt;ItemRequest&gt; itemRequests) {\n        return itemRequests.stream().map(i -&gt; this.toItemEntity(new ItemEntity(), i)).collect(Collectors.toList());\n    }\n\n    private ItemEntity toItemEntity(ItemEntity itemEntity, ItemRequest item) {\n        itemEntity.setItemName(item.getItemName());\n        itemEntity.setQuantity(item.getQuantity());\n        itemEntity.setPrice(item.getPrice());\n        return itemEntity;\n    }\n\n    private CustomerEntity toCustomerEntity(CustomerEntity customerEntity, CustomerRequest customerRequest) {\n        customerEntity.setAddress(customerRequest.getAddress());\n        customerEntity.setDob(customerRequest.getDob());\n        customerEntity.setEmail(customerRequest.getEmail());\n        customerEntity.setGender(customerRequest.getGender());\n        customerEntity.setFullName(customerRequest.getFullName());\n        customerEntity.setPhone(customerRequest.getPhone());\n        return customerEntity;\n    }\n}\n</code></pre>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#configuration","title":"Configuration","text":"<ul> <li>Now, we will add some configurations into <code>application.yml</code> for Datasource and Connection Pool, because In <code>spring-boot-starter-data-jpa</code> dependency, we have <code>spring-boot-starter-jdbc</code> dependency and in JDBC dependency we have <code>HikariCP</code> dependency. So we can configure <code>HikariCP</code> from the <code>application.yml</code> as below</li> </ul> application.yml<pre><code>spring:\n  datasource:\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/sample?useUnicode=true&amp;characterEncoding=UTF-8\n    username: root\n    password: password\n\n    #config hikari pool for jpa\n    hikari:\n      connection-timeout: 30000\n      maximum-pool-size: 20\n      minimumIdle: 15\n      idleTimeout: 30000\n      maxLifetime: 180000\n  jpa:\n    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect\n    hibernate.ddl-auto: update\n    generate-ddl: true\n    show-sql: true\n    open-in-view: true\n    properties:\n      hibernate:\n        generate_statistics: true\n\nlogging:\n  level:\n    org:\n      hibernate:\n        stat: DEBUG\n</code></pre> <ul> <li>For configure DataSource we will focus on properties as below</li> </ul> Configuretion Properties Description spring.datasource.driver-class-name Fully qualified name of the JDBC driver. Auto-detected based on the URL by default. spring.datasource.url JDBC URL of the database. spring.datasource.username Login username of the database. spring.datasource.password Login password of the database. <ul> <li>So for congiure <code>HikariCP</code> we will focus on some properties as below</li> </ul> Configuretion Properties Description Default Value Sample Configuration Value connection-timeout This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown. Lowest acceptable connection timeout is 250 ms. 30000 30000 maximum-pool-size This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend. A reasonable value for this is best determined by your execution environment. When the pool reaches this size, and no idle connections are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out 10 20 minimumIdle This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool. If the idle connections dip below this value and total connections in the pool are less than maximumPoolSize, HikariCP will make a best effort to add additional connections quickly and efficiently. However, for maximum performance and responsiveness to spike demands, we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool. same as maximumPoolSize 15 idleTimeout This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. This setting only applies when minimumIdle is defined to be less than maximumPoolSize. Idle connections will not be retired once the pool reaches minimumIdle connections. Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections are never removed from the pool. The minimum allowed value is 10000ms (10 seconds) 600000 (10 minutes) 30000 maxLifetime This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed will it then be removed. On a connection-by-connection basis, minor negative attenuation is applied to avoid mass-extinction in the pool. We strongly recommend setting this value, and it should be several seconds shorter than any database or infrastructure imposed connection time limit. A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the idleTimeout setting. The minimum allowed value is 30000ms (30 seconds) 1800000 (30 minutes) 180000 <ul> <li> <p>You can find more here.</p> </li> <li> <p>For  JPA configuration properties, you can view the table below for more details.</p> </li> </ul> Configuration Properties Description Default Value Sample Configuration Value spring.jpa.database-platform Name of the target database to operate on, auto-detected by default. Can be alternatively set using the \"Database\" enum. org.hibernate.dialect.MySQL5InnoDBDialect spring.jpa.generate-ddl Whether to initialize the schema on startup. false true spring.jpa.hibernate.ddl-auto DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property. Defaults to \"create-drop\" when using an embedded database and no schema manager was detected. Otherwise, defaults to \"none\". \"none\" update spring.jpa.show-sql Whether to enable logging of SQL statements false true spring.jpa.open-in-view Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request. true true spring.jpa.properties.* Additional native properties to set on the JPA provider.","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#testing","title":"Testing","text":"<ul> <li>Now, let's start your Spring Boot service then login into mysql and use command <code>show processlist;</code> you will see the result as below</li> </ul> Id User Host db Command Time State Info 5 event_scheduler localhost NULL Daemon 531 Waiting on empty queue NULL 28 root localhost NULL Query 0 init show processlist 29 root 172.18.0.1:49390 sample Sleep 5 NULL 30 root 172.18.0.1:49392 sample Sleep 5 NULL 31 root 172.18.0.1:49394 sample Sleep 5 NULL 32 root 172.18.0.1:49396 sample Sleep 5 NULL 33 root 172.18.0.1:49398 sample Sleep 5 NULL 34 root 172.18.0.1:49400 sample Sleep 4 NULL 35 root 172.18.0.1:49404 sample Sleep 4 NULL 36 root 172.18.0.1:49406 sample Sleep 4 NULL 37 root 172.18.0.1:49408 sample Sleep 3 NULL 38 root 172.18.0.1:49410 sample Sleep 3 NULL 39 root 172.18.0.1:49414 sample Sleep 3 NULL 40 root 172.18.0.1:49416 sample Sleep 3 NULL 41 root 172.18.0.1:49418 sample Sleep 2 NULL 42 root 172.18.0.1:49420 sample Sleep 2 NULL 43 root 172.18.0.1:49424 sample Sleep 1 NULL <ul> <li>As you can see, the <code>HikariCP</code> configuration has worked, it created 15 connections in the pool of Spring Boot service to database (from Id 29 to Id 43). </li> <li>Then, if you use command <code>show tables from &lt;database name&gt;;</code> (show table in your database), then you can see JPA has created all tables based on entities for you.</li> </ul> <pre><code>mysql&gt; show tables from sample;\n+------------------+\n| Tables_in_sample |\n+------------------+\n| customers        |\n| items            |\n| orders           |\n+------------------+\n3 rows in set (0.01 sec)\n</code></pre> <ul> <li>Moreover, if you use command <code>select * from INFORMATION_SCHEMA.TABLE_CONSTRAINTS c where c.constraint_schema = 'sample';</code> to check your tables relationships, then you also see JPA craeted all for you.</li> </ul> <pre><code>select * from INFORMATION_SCHEMA.TABLE_CONSTRAINTS c where c.constraint_schema = 'sample';\n</code></pre> CONSTRAINT_CATALOG CONSTRAINT_SCHEMA CONSTRAINT_NAME TABLE_SCHEMA TABLE_NAME CONSTRAINT_TYPE ENFORCED def sample PRIMARY sample customers PRIMARY KEY YES def sample UK_rfbvkrffamfql7cjmen8v976v sample customers UNIQUE YES def sample PRIMARY sample items PRIMARY KEY YES def sample FKirjef006njdi706iiqdfkgk9d sample items FOREIGN KEY YES def sample PRIMARY sample orders PRIMARY KEY YES def sample FKpxtb8awmi0dk6smoh2vp1litg sample orders FOREIGN KEY YES <ul> <li>Next, Try to add a new customer and call update customer api with orders and items as the requests below and then you will recieve a successful status.</li> </ul> <pre><code>//create new customer\ncurl --location --request POST 'http://localhost:8080/v1/jpa/customers' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"fullName\": \"Nguyen Minh Duc\",\n    \"email\": \"abc1@gmail.com\",\n    \"address\": \"Binh Duong Province\",\n    \"phone\": \"0123456789\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\",\n    \"orders\": [\n        {\n            \"orderName\": \"PC\",\n            \"items\": [\n                {\n                    \"itemName\": \"Monitor\",\n                    \"quantity\": 1,\n                    \"price\": 100.0\n                }\n            ]\n        }   \n    ]\n}'\n\n//update customer\ncurl --location --request PUT 'http://localhost:8080/v1/jpa/customers/9c107c20-d989-4628-83e1-e728b3d4a5e5' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"fullName\": \"Nguyen Minh Duc\",\n    \"email\": \"abc4@gmail.com\",\n    \"address\": \"Binh Duong Province\",\n    \"phone\": \"0123456789\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\"\n}'\n</code></pre> <ul> <li>If you check the Spring Boot application log, you will see for creating new customer, there are 3 SQL statements have been executed and inserted into <code>customers</code>, <code>orders</code> and <code>items</code> tables. For updating customer, it will take 2 SQL statements. Then you can see creating or updating customer took only 1 JDBC connection. It is because by default, JPA is using <code>open-in-view=true</code>, so a transaction will be opened from from the beginning to the end of the HTTP request, if you do many sql statements in a request, so there is only one transaction and the transaction will be committed into database when the request is going to close, so that's why it takes only 1 JDBC connection from the connection pool.</li> </ul> <pre><code>Hibernate: insert into customers (address, dob, email, full_name, gender, phone, id) values (?, ?, ?, ?, ?, ?, ?)\nHibernate: insert into orders (created_date, customer_id, last_updated_date, order_name, order_status, id) values (?, ?, ?, ?, ?, ?)\nHibernate: insert into items (item_name, order_id, price, quantity, id) values (?, ?, ?, ?, ?)\n2022-01-29 10:14:24.377  INFO 31073 --- [nio-8080-exec-2] i.StatisticalLoggingSessionEventListener : Session Metrics {\n    1096712 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    4879830 nanoseconds spent preparing 3 JDBC statements;\n    6299283 nanoseconds spent executing 3 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    40854489 nanoseconds spent executing 1 flushes (flushing a total of 3 entities and 2 collections);\n    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\nHibernate: select customeren0_.id as id1_0_0_, customeren0_.address as address2_0_0_, customeren0_.dob as dob3_0_0_, customeren0_.email as email4_0_0_, customeren0_.full_name as full_nam5_0_0_, customeren0_.gender as gender6_0_0_, customeren0_.phone as phone7_0_0_ from customers customeren0_ where customeren0_.id=?\nHibernate: update customers set address=?, dob=?, email=?, full_name=?, gender=?, phone=? where id=?\n2022-01-29 10:14:39.224  INFO 31073 --- [nio-8080-exec-3] i.StatisticalLoggingSessionEventListener : Session Metrics {\n    616086 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    344811 nanoseconds spent preparing 2 JDBC statements;\n    1715262 nanoseconds spent executing 2 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    3348529 nanoseconds spent executing 1 flushes (flushing a total of 1 entities and 1 collections);\n    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\n</code></pre> <ul> <li>Then, check your tables in database, you will there all information have been inserted correctly</li> </ul> <pre><code>select * from customers;\n</code></pre> id address dob email full_name gender phone 9c107c20-d989-4628-83e1-e728b3d4a5e5 Binh Duong Province 1995-10-10 07:00:00 abc4@gmail.com Nguyen Minh Duc M 0123456789 <pre><code>select * from orders;\n</code></pre> id created_date last_updated_date order_name order_status customer_id ea8cc0ce-6232-4ff3-ac91-e8146b6e57ad 2022-01-29 10:14:24 2022-01-29 10:14:24 PC CREATED 9c107c20-d989-4628-83e1-e728b3d4a5e5 <pre><code>select * from items;\n</code></pre> id item_name price quantity order_id 5bd4fb0b-a1b0-4e21-becb-5bd2df4982bd Monitor 100 1 ea8cc0ce-6232-4ff3-ac91-e8146b6e57ad <ul> <li>As you can see, JPA helps you to reduce the workload, you can insert data without writing any SQL native queries.</li> <li>Next, we will set <code>open-in-view=false</code> then call the <code>update customer api</code> to see what will happen when we update the customer as above. </li> </ul> <pre><code>curl --location --request PUT 'http://localhost:8080/v1/jpa/customers/9c107c20-d989-4628-83e1-e728b3d4a5e5' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"fullName\": \"Nguyen Minh Duc\",\n    \"email\": \"abc5@gmail.com\",\n    \"address\": \"Binh Duong Province\",\n    \"phone\": \"0123456789\",\n    \"gender\": \"M\",\n    \"dob\": \"1995-10-10\"\n}'\n</code></pre> <ul> <li>Then you check the Spring Boot application log (see the log below), you will see that there are 2 JDBC connections for updating customer api. The first one is used for getting the customer, then the second one is used to update customer. Because <code>open-in-view=false</code> so everytime we interact with entity as get or update, so a transaction will be created, commited and closed immediately, In the update customer api, we do two actions: getting a customer and updating it, so JPA made 2 separated transactions and every transaction will took a JDBC connection.</li> </ul> <pre><code>Hibernate: select customeren0_.id as id1_0_0_, customeren0_.address as address2_0_0_, customeren0_.dob as dob3_0_0_, customeren0_.email as email4_0_0_, customeren0_.full_name as full_nam5_0_0_, customeren0_.gender as gender6_0_0_, customeren0_.phone as phone7_0_0_ from customers customeren0_ where customeren0_.id=?\n2022-01-29 11:11:05.318  INFO 32771 --- [nio-8080-exec-2] i.StatisticalLoggingSessionEventListener : Session Metrics {\n    804921 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    3316634 nanoseconds spent preparing 1 JDBC statements;\n    1267260 nanoseconds spent executing 1 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);\n    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\nHibernate: select customeren0_.id as id1_0_1_, customeren0_.address as address2_0_1_, customeren0_.dob as dob3_0_1_, customeren0_.email as email4_0_1_, customeren0_.full_name as full_nam5_0_1_, customeren0_.gender as gender6_0_1_, customeren0_.phone as phone7_0_1_, orders1_.customer_id as customer6_2_3_, orders1_.id as id1_2_3_, orders1_.id as id1_2_0_, orders1_.created_date as created_2_2_0_, orders1_.customer_id as customer6_2_0_, orders1_.last_updated_date as last_upd3_2_0_, orders1_.order_name as order_na4_2_0_, orders1_.order_status as order_st5_2_0_ from customers customeren0_ left outer join orders orders1_ on customeren0_.id=orders1_.customer_id where customeren0_.id=?\nHibernate: update customers set address=?, dob=?, email=?, full_name=?, gender=?, phone=? where id=?\n2022-01-29 11:11:05.402  INFO 32771 --- [nio-8080-exec-2] i.StatisticalLoggingSessionEventListener : Session Metrics {\n    22940 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    439798 nanoseconds spent preparing 2 JDBC statements;\n    2776004 nanoseconds spent executing 2 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    28010362 nanoseconds spent executing 1 flushes (flushing a total of 2 entities and 2 collections);\n    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)\n}\n</code></pre> <ul> <li>Then, check your tables in database, you will there all information have been updated correctly</li> </ul> <pre><code>select * from customers;\n</code></pre> id address dob email full_name gender phone 9c107c20-d989-4628-83e1-e728b3d4a5e5 Binh Duong Province 1995-10-10 07:00:00 abc5@gmail.com Nguyen Minh Duc M 0123456789","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#see_also","title":"See Also","text":"<ul> <li>Object Relational Mapping</li> <li>Hibernate</li> <li>JPA In Spring Boot</li> <li>Transaction</li> <li>Spring Boot Introduction</li> <li>Database Configuration In SpringBoot</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20JPA/#references","title":"References","text":"<ul> <li>IBM</li> <li>Byteslounge</li> <li>Vincenzoracca</li> <li>Stack Overflow</li> <li>Baeldung</li> <li>Jboss.</li> </ul>","tags":["Spring","SpringData","SpringBoot"]},{"location":"Spring%20Data/Spring%20Data%20MongoDB/","title":"Spring Data MongoDB","text":"","tags":["Spring","SpringData","MongoDB"]},{"location":"Spring%20Data/Transaction/","title":"Transaction Introduction","text":"","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Transaction/#what_is_the_transaction","title":"What Is The Transaction?","text":"<ul> <li> <p>A <code>transaction</code> is a set of operations that either fail or succeed as a unit. <code>Transactions</code> are a fundamental part of persistence. A database <code>transaction</code> consists of a set of SQL DML (Data Manipulation Language) operations that are committed or rolled back as a single unit. An object level <code>transaction</code> is one in which a set of changes made to a set of objects are committed to the database as a single unit.</p> </li> <li> <p> JPA provides two mechanisms for <code>transactions</code>. When used in Java EE JPA provides integration with JTA (Java Transaction API). JPA also provides its own EntityTransaction implementation to Java SE and for use in a non-managed mode in Java EE. <code>Transactions</code> in JPA are always at the object level, this means that all changes made to all persistent objects in the persistence context are part of the transaction.</p> </li> <li> <p>More information</p> </li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Transaction/#see_also","title":"See Also","text":"<ul> <li>Spring Data JPA</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Data/Transaction/#references","title":"References","text":"<ul> <li>Wikibooks</li> </ul>","tags":["Spring","SpringData"]},{"location":"Spring%20Security/Asymmetric%20Encryption/","title":"Asymmetric Encryption","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#what_is_the_asymmetric_encryption","title":"What Is The Asymmetric Encryption?","text":"<ul> <li> <p>Asymmetric encryption, also known as Public-Private-Key Cryptography, encrypts and decrypts the data using two separate cryptographic asymmetric keys. These two keys are known as a public key and a private key. As their names suggest. the private key must be kept secret, whereas the public can be know to everyone. When applying encryption, the public key is used, whereas descrypting requires the private key. Anyone should be able to send us encrypted data, but only we should be able to descrypt and read it! We have some common asymmetric encryption methods as RSA (named after computer scientists Ron Rivest, Adi Shamir, and Leonard Adleman), PKI (Public key infrastructure). More information</p> <p> - Asymmetric encryption is used in TLS, VPN, SSH</p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#generate_asymmetric_encryption_key_pair_in_java_17","title":"Generate Asymmetric Encryption Key Pair In Java 17","text":"<ul> <li>In Java 17, we don't need to add  any more dependency to generate the asymmetric encryption key pair.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#model","title":"Model","text":"<ul> <li>Let's create a model for the response body which will contain the key pair as below.</li> </ul> <pre><code>package com.springboot.project.model;  \n\nimport lombok.Getter;  \nimport lombok.Setter;  \n\n@Getter  \n@Setter  \npublic class KeyPairResponse {  \n\n    private String publicKey;  \n    private String privateKey;  \n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#configuration","title":"Configuration","text":"<ul> <li>Then let's create a configuration property file for loading the length of the <code>RSA</code> key pair because the key pair can have value as <code>1024</code> or <code>2048</code>.</li> </ul> <pre><code>package com.springboot.project.config;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\n@ConfigurationProperties(prefix = \"encryption.asymmetric\")\npublic class ApplicationProperty {\n\n    private int keySize;\n\n}\n</code></pre> <ul> <li>Then we configure the <code>application.yaml</code> as below.</li> </ul> <pre><code>encryption:\n  asymmetric:\n    key-size: 2048\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#service","title":"Service","text":"<ul> <li>So to generate the asymmetric key pair let's create a service as below.</li> </ul> KeyPairGeneratorService.java<pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.config.ApplicationProperty;\nimport com.springboot.project.model.KeyPairResponse;\nimport org.apache.tomcat.util.codec.binary.Base64;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\n@Service\npublic class KeyPairGeneratorService {\n\n    private static final String RSA_ALGORITHM = \"RSA\";\n\n    private final ApplicationProperty applicationProperty;\n\n    @Autowired\n    public KeyPairGeneratorService(ApplicationProperty applicationProperty) {\n        this.applicationProperty = applicationProperty;\n    }\n\n    public KeyPairResponse generateKeyPair() {\n        SecureRandom secureRandom = new SecureRandom();\n        try {\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(RSA_ALGORITHM);\n            keyPairGenerator.initialize(this.applicationProperty.getKeySize(), secureRandom);\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\n            KeyPairResponse keyPairResponse = new KeyPairResponse();\n\n            keyPairResponse.setPrivateKey(Base64.encodeBase64String(keyPair.getPrivate().getEncoded()));\n            keyPairResponse.setPublicKey(Base64.encodeBase64String((keyPair.getPublic().getEncoded())));\n\n            return keyPairResponse;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n</code></pre> <ul> <li>We will use the <code>RSA</code> algorithm for generating the key pair. Then to generate the key pair we also need to provide the key length. RSA keys tend to be 1024 or 2048 bits in length, making them extremely difficult to factorize, though 1024 bit keys are believed to breakable soon.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#controller","title":"Controller","text":"<ul> <li>Now, we just simply create a controller to below.</li> </ul> <pre><code>package com.springboot.project.controller;  \n\nimport com.springboot.project.model.KeyPairResponse;  \nimport com.springboot.project.service.KeyPairGeneratorService;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.http.HttpStatus;  \nimport org.springframework.http.MediaType;  \nimport org.springframework.http.ResponseEntity;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \nimport org.springframework.web.bind.annotation.RequestMethod;  \nimport org.springframework.web.bind.annotation.RestController;  \n\n@RestController  \npublic class KeyPairController {  \n\n\n    private final KeyPairGeneratorService keyPairGeneratorService;  \n\n    @Autowired  \n    public KeyPairController(KeyPairGeneratorService keyPairGeneratorService) {  \n        this.keyPairGeneratorService = keyPairGeneratorService;  \n    }  \n\n    @RequestMapping(method = RequestMethod.POST, value = \"/v1/asymmetric-encryption/actions/generate-keypair\", produces = MediaType.APPLICATION_JSON_VALUE)  \n    public ResponseEntity&lt;KeyPairResponse&gt; getKeyPair() {  \n        return new ResponseEntity&lt;&gt;(this.keyPairGeneratorService.generateKeyPair(), HttpStatus.CREATED);  \n    }  \n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#testing","title":"Testing","text":"<ul> <li>Now, let's open <code>postman</code> and call the api then we will see the <code>RSA</code> key pair as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#using_asymmetric_encryption_key_pair_in_java_17","title":"Using Asymmetric Encryption Key Pair In Java 17","text":"<ul> <li>In Java 17, we don't need to add  any more dependency to generate the asymmetric encryption key pair.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#model_1","title":"Model","text":"<ul> <li>Let's create a model for the encryption and decryption request body which will contain the key pair as below.</li> </ul> EncryptionDataRequest.java<pre><code>package com.springboot.project.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class EncryptionDataRequest {\n\n    private String data;\n\n}\n</code></pre> DecryptionDataRequest.java<pre><code>package com.springboot.project.model;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class DecryptionDataRequest {\n\n    private String encryptionData;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#configuration_1","title":"Configuration","text":"<ul> <li>Then let's create a configuration property file for loading the private key and public key of the <code>RSA</code> key pair.</li> </ul> ApplicationProperty.java<pre><code>package com.springboot.project.config;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\n@ConfigurationProperties(prefix = \"encryption.asymmetric\")\npublic class ApplicationProperty {\n\n    private int keySize;\n    private String privateKey;\n    private String publicKey;\n\n}\n</code></pre> <ul> <li>Then we configure the <code>application.yaml</code> as below.</li> </ul> application.yaml<pre><code>encryption:\n  asymmetric:\n    key-size: 2048\n    private-key: \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCSJGYIsw485Op8CG6To0uWyv4Dj8rqUbwknFjJL6g+ue7YiPwVDscB02zVoLYK6+/VBOr1kNxP3USu2lyp/4i4J8VkQl9+Lz7lF3gsO2wfaIRXWiiX6zYUm0544vNbDHmqYtHl0w9hlsa0yRxzYDpmrQbZnwOjAQpJLHl5wGYjtSD8+BYq4HDk5+xSGeIAgtcPMsyeQqJ8kJdFnPV4xmA3sy2n7DNIsettEZmGeW0rHtqt5Vsa5Ffw6V6pbxatt9WIDTvGG1/O5/sHZJeIJvXFJ29Pu6MXHvwoeLIFXdTHzfNnxfHZuPJqJKr3DjWTELIiBiQ+SjGhXYQmAt6lRKYtAgMBAAECggEAAbhSncZDDqMVwhafUTbaIZDguHitcgs65FDAGBjAKYIqtiW2lyYwtWwgRctkbnB5xs9jVzc4leq2xOVmXcyCIW4REVhZTgo5pUdHb3iA50W6+QQ4ohZvRoLQGPV4Lm7RJ8ON+4nRDob7GQ7yOhwR0+TexcTsrV3KbzNfd/gJu7XWJchXdSuX0QabbPPuepDrSWTo3ewNWOw+eUakS3tLMeO9CrMB9wg01slJUfYcmUZe5q81ndN8C3JTJB0aNcMsJKgwXznZMXmr7ERMdvtAjAPoeKWsQ9pK0/LdcZK//JHPXXx+z0eBkp3Kp/NQBr0PcujSjM07M4AOp5wrJNn7gQKBgQC93a/Ok27wdjr8NhyOt9hfN/idC++fcjaYewgEk1PAQj5RRS0N4YRa2P80Ei3yyAitX1VNEj72ebHooQ2jhk9S3nSTwo9UPGiSVtc/RRz+IR1+Bt1IHIoXkIpK1j66mb7QvNt/JZBKqQL2ShZM4ATYYLIFgLkBO3DitrYczIax8QKBgQDFC97ExDtoVKW1La6+pubr5jU7PmHbjbIJWZbaggQ2PtOxwhgYHTg6ZjqhcdQIMsBE2l0QkQU64NtxPZ+8/Voo4wOgdsBYWnPhvYh0md4XvuG7jhNgclIRNVmyC+Bo9CfwO3I0YfdAmxB3sWduxGL3MWsW5loYCa7Y3FR47yh7/QKBgGjPggeVV76iZblo3abjUixuJ236ctMgJ4dRE4IDGk6dwuz2NQLepUPJWkgSaQ8G4dNjNyGOmvdRAqcakP7eW9exOcV/t8OWfVubWMNykaiv+yng/DKcnpaXkd/yGTrFOJLeToUH5Xlxh1MSXvEdEU+pQVzMTFSjzZM5rZqERS7hAoGAPeBwYBHPJgAO2UozKaN3uHReGvCIAk4Irm73tD5H3FD2YUe2ETx7v7sChlgcYUauofCAcQdZQRgDURgs5UgZ2+UN6oHf/N7KrQS7qQH4gDRs5lzDMPI1WzoJpKOeINcrA4FnZ5Or9Rm8nhmThXEeMsnN+y7y88F2qprl2+QeLnECgYEAi7kiKU6l1iheMGw1NkopyEcymJGsoTF9wIDhP9izX8Fz46V29dccRVSVN3DmaXWnTHcCCRlDqLYU/k2XrRvQ4Y0ZTXezmbC2VDoBm49pFBq0FTUSDagZsOoTfVQNWj92JrgHaQ58bO+P39r6iRtNX2fICiDxBaRtHOy9RYQUwLg=\"\n    public-key: \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkiRmCLMOPOTqfAhuk6NLlsr+A4/K6lG8JJxYyS+oPrnu2Ij8FQ7HAdNs1aC2Cuvv1QTq9ZDcT91Ertpcqf+IuCfFZEJffi8+5Rd4LDtsH2iEV1ool+s2FJtOeOLzWwx5qmLR5dMPYZbGtMkcc2A6Zq0G2Z8DowEKSSx5ecBmI7Ug/PgWKuBw5OfsUhniAILXDzLMnkKifJCXRZz1eMZgN7Mtp+wzSLHrbRGZhnltKx7areVbGuRX8OleqW8WrbfViA07xhtfzuf7B2SXiCb1xSdvT7ujFx78KHiyBV3Ux83zZ8Xx2bjyaiSq9w41kxCyIgYkPkoxoV2EJgLepUSmLQIDAQAB\"\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#service_1","title":"Service","text":"<ul> <li>So to use the asymmetric key pair let's create a service as below.</li> </ul> AsymmetricEncryptionService.java<pre><code>package com.springboot.project.service;\n\nimport com.springboot.project.config.ApplicationProperty;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.crypto.Cipher;\nimport java.nio.charset.StandardCharsets;\nimport java.security.KeyFactory;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\nimport java.util.Base64;\n\n@Service\npublic class AsymmetricEncryptionService {\n\n    private static final String RSA_ALGORITHM = \"RSA\";\n\n    private final ApplicationProperty applicationProperty;\n\n    @Autowired\n    public AsymmetricEncryptionService(ApplicationProperty applicationProperty) {\n        this.applicationProperty = applicationProperty;\n    }\n\n    public String encryptDataWithPublicKey(String data) {\n        try {\n            Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);\n            byte[] x509EncodedBytes = Base64\n                    .getDecoder()\n                    .decode(this.applicationProperty.getPublicKey().getBytes(StandardCharsets.UTF_8));\n            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(x509EncodedBytes);\n            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);\n            PublicKey publicKey = keyFactory.generatePublic(keySpec);\n\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n            byte[] cipherBytes = cipher.doFinal(data.getBytes());\n\n            return Base64\n                    .getEncoder()\n                    .encodeToString(cipherBytes);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    public String decryptDataWithPrivateKey(String encryptedData) {\n        try {\n            Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);\n            byte[] pkcs8EncodedBytes = Base64\n                    .getDecoder()\n                    .decode(this.applicationProperty.getPrivateKey());\n            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\n            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);\n            PrivateKey privateKey = keyFactory.generatePrivate(keySpec);\n\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n            byte[] cipherBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData.getBytes()));\n\n            return new String(cipherBytes);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n}\n</code></pre> <ul> <li> <p>As we can see that we will create 2 methods, one is used for encrypt the data by using the public key and the other one is used for decrypt data using the private key. Also, we can use private key for encrypt data and the public key for decrypt data but this way is not common and recommended.</p> </li> <li> <p>So for the method <code>encryptDataWithPublicKey</code> method, we will do some steps as below.</p> <ul> <li>Firstly, we will create a <code>Cipher</code> instance for the RSA algorithm, which will be used to perform the encryption.</li> <li>Then the public key, stored as a base64 encoded string, is decoded into its raw byte array representation. This assumes that the public key is stored in X.509 format.</li> <li>Then an <code>X509EncodedKeySpec</code> is created from the decoded public key bytes. This specification is used to reconstruct the public key.</li> <li>Then a KeyFactory for the RSA algorithm is used to generate a PublicKey object from the key specification.</li> <li>Then the cipher is initialized in encryption mode with the public key.</li> <li>Then the input data is converted to a byte array and encrypted using the cipher. The result is a byte array of encrypted data.</li> <li>Then the encrypted byte array is encoded to a base64 string, which is returned as the result.</li> </ul> </li> <li> <p>For the method <code>decryptDataWithPrivateKey</code> method, we will have some steps.</p> <ul> <li>Firstly, we will create a <code>Cipher</code> instance for the RSA algorithm, which will be used to perform the encryption.</li> <li>Then we will decode the Base64 encoded private key to a byte array.</li> <li>Then the<code>PKCS8EncodedKeySpec</code> is used to specify the key material in the PKCS8 format.</li> <li><code>KeyFactory.getInstance(RSA_ALGORITHM)</code> gets a <code>KeyFactory</code> object for the RSA algorithm.</li> <li><code>keyFactory.generatePrivate(keySpec)</code> generates a <code>PrivateKey</code> object from the key specification.</li> <li><code>cipher.init(Cipher.DECRYPT_MODE, privateKey)</code> initializes the <code>Cipher</code> object in decryption mode with the private key.</li> <li><code>Base64.getDecoder().decode(encryptedData)</code> decodes the Base64 encoded encrypted data to a byte array.</li> <li><code>cipher.doFinal(encryptedBytes)</code> decrypts the byte array and returns the decrypted byte array.</li> <li><code>new String(decryptedBytes)</code> converts the decrypted byte array to a string and returns it.</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#controller_1","title":"Controller","text":"<ul> <li>Now, we just simply create a controller to below.</li> </ul> AsymmetricEncryptionController.java<pre><code>package com.springboot.project.controller;\n\nimport com.springboot.project.model.DecryptionDataRequest;\nimport com.springboot.project.model.EncryptionDataRequest;\nimport com.springboot.project.service.AsymmetricEncryptionService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\npublic class AsymmetricEncryptionController {\n\n    private final AsymmetricEncryptionService asymmetricEncryptionService;\n\n    @Autowired\n    public AsymmetricEncryptionController(AsymmetricEncryptionService asymmetricEncryptionService) {\n        this.asymmetricEncryptionService = asymmetricEncryptionService;\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/asymmetric-encryption/actions/encrypt\")\n    public ResponseEntity&lt;String&gt; encryptDataWithPrivateKey(@RequestBody EncryptionDataRequest encryptionDataRequest) {\n        return new ResponseEntity&lt;&gt;(this.asymmetricEncryptionService\n                .encryptDataWithPublicKey(encryptionDataRequest.getData()), HttpStatus.OK);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/asymmetric-encryption/actions/decrypt\")\n    public ResponseEntity&lt;String&gt; encryptDataWithPrivateKey(@RequestBody DecryptionDataRequest decryptionDataRequest) {\n        return new ResponseEntity&lt;&gt;(this.asymmetricEncryptionService\n                .decryptDataWithPrivateKey(decryptionDataRequest.getEncryptionData()), HttpStatus.OK);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#testing_1","title":"Testing","text":"<ul> <li> <p>Now, let's open <code>postman</code> and call the api for encrypting the data with public key as below.</p> <p></p> </li> <li> <p>Then now, let use the response encrypted data and call the api for decrypting the data by private key as below.</p> </li> </ul> <p></p> <ul> <li>So the message has been encrypted and decrypted successfully.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#see_also","title":"See Also","text":"<ul> <li>Encrypt Decrypt In Spring Boot</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Asymmetric%20Encryption/#references","title":"References","text":"<ul> <li>IBM</li> <li>Full Source Code - Generate Asymmetric Key Pair</li> <li>Full Source Code - Using Asymmetric Key Pair</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Authorization%20Internal%20Flow/","title":"Authentication And Authorization Internal Flow","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Authorization%20Internal%20Flow/#authentication_and_authorization_filter_flow","title":"Authentication And Authorization Filter Flow","text":"<ul> <li>When the Client makes a request with the credentials, the <code>authentication filter</code> will intercept the request and validate. If the user is valid then at the post authentication, the filter will store the <code>UserDetails</code> in the <code>SecurityContext</code>. The <code>UserDetails</code> will have username, authorities etc. Now the <code>authorization filter</code> will intercept and decide whether the user has access to the given path based on this authorities stored in the <code>SecurityContext</code>. If authorized the request will be forwarded to the applicable controllers. See the image below:</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Authorization%20Internal%20Flow/#see_also","title":"See Also","text":"<ul> <li>Spring Security With Authorization</li> <li>How Authorities Stored</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Authorization%20Internal%20Flow/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Principal%20Interfaces/","title":"Authentication And Principal Interfaces","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Principal%20Interfaces/#authentication_and_principal_interfaces_1","title":"Authentication And Principal Interfaces","text":"<ul> <li>If we have just read about the Authentication Provider and Authentication Manager, then we can see that in the method <code>authenticate()</code> it will received an authentication object and also response it too. So if we look into the Spring Security framework, you can see <code>Authentication</code> is an interface which is extended from the <code>Principle</code> interface. See the image below:</li> </ul> <ul> <li>So in the <code>Principle</code> interface it contains some methods as <code>equals</code>, <code>toString</code>, <code>hashCode</code>, <code>getName()</code> and <code>implies()</code>. In which the method <code>getName()</code> is the most important method that Spring Security will use to get the <code>username</code>.</li> </ul> Principal.java<pre><code>/*\n * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n */\n\npackage java.security;\n\nimport javax.security.auth.Subject;\n\n/**\n * This interface represents the abstract notion of a principal, which\n * can be used to represent any entity, such as an individual, a\n * corporation, and a login id.\n *\n * @see java.security.cert.X509Certificate\n *\n * @author Li Gong\n */\npublic interface Principal {\n\n    /**\n     * Compares this principal to the specified object.  Returns true\n     * if the object passed in matches the principal represented by\n     * the implementation of this interface.\n     *\n     * @param another principal to compare with.\n     *\n     * @return true if the principal passed in is the same as that\n     * encapsulated by this principal, and false otherwise.\n     */\n    public boolean equals(Object another);\n\n    /**\n     * Returns a string representation of this principal.\n     *\n     * @return a string representation of this principal.\n     */\n    public String toString();\n\n    /**\n     * Returns a hashcode for this principal.\n     *\n     * @return a hashcode for this principal.\n     */\n    public int hashCode();\n\n    /**\n     * Returns the name of this principal.\n     *\n     * @return the name of this principal.\n     */\n    public String getName();\n\n    /**\n     * Returns true if the specified subject is implied by this principal.\n     *\n     * &lt;p&gt;The default implementation of this method returns true if\n     * {@code subject} is non-null and contains at least one principal that\n     * is equal to this principal.\n     *\n     * &lt;p&gt;Subclasses may override this with a different implementation, if\n     * necessary.\n     *\n     * @param subject the {@code Subject}\n     * @return true if {@code subject} is non-null and is\n     *              implied by this principal, or false otherwise.\n     * @since 1.8\n     */\n    public default boolean implies(Subject subject) {\n        if (subject == null)\n            return false;\n        return subject.getPrincipals().contains(this);\n    }\n}\n</code></pre> <ul> <li>Then if we look into the <code>Authentication</code> interface there will be more methods as:<ul> <li><code>getAuthorities()</code>: Get Authorities that associated with a specific user.</li> <li><code>getCredentials()</code>: Get Password of the user.</li> <li><code>getDetails()</code>: Get additional details that we want to maintain the associated with the user, as the IP address.</li> <li><code>getPrincipal()</code>: Get the <code>Principle</code> that extended from <code>Principle</code> interface, then we can get the username by method <code>getName()</code>.</li> <li><code>isAuthenticated()</code>: this \u00a0is the one which maintained by the framework for the user is authenticated. So by default, this value is false. But of the successful authentication this <code>isAuthenticated()</code> will be changed to true, and this continuously maintained by the framework at various stages of the authentication.</li> <li><code>setAuthenticated()</code>: This is the method that we use when we want to change the authentication of the user is true or false.</li> </ul> </li> </ul> Authentication.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.core;\n\nimport java.io.Serializable;\nimport java.security.Principal;\nimport java.util.Collection;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\n/**\n * Represents the token for an authentication request or for an authenticated principal\n * once the request has been processed by the\n * {@link AuthenticationManager#authenticate(Authentication)} method.\n * &lt;p&gt;\n * Once the request has been authenticated, the &lt;tt&gt;Authentication&lt;/tt&gt; will usually be\n * stored in a thread-local &lt;tt&gt;SecurityContext&lt;/tt&gt; managed by the\n * {@link SecurityContextHolder} by the authentication mechanism which is being used. An\n * explicit authentication can be achieved, without using one of Spring Security's\n * authentication mechanisms, by creating an &lt;tt&gt;Authentication&lt;/tt&gt; instance and using\n * the code:\n *\n * &lt;pre&gt;\n * SecurityContext context = SecurityContextHolder.createEmptyContext();\n * context.setAuthentication(anAuthentication);\n * SecurityContextHolder.setContext(context);\n * &lt;/pre&gt;\n *\n * Note that unless the &lt;tt&gt;Authentication&lt;/tt&gt; has the &lt;tt&gt;authenticated&lt;/tt&gt; property\n * set to &lt;tt&gt;true&lt;/tt&gt;, it will still be authenticated by any security interceptor (for\n * method or web invocations) which encounters it.\n * &lt;p&gt;\n * In most cases, the framework transparently takes care of managing the security context\n * and authentication objects for you.\n *\n * @author Ben Alex\n */\npublic interface Authentication extends Principal, Serializable {\n\n    /**\n     * Set by an &lt;code&gt;AuthenticationManager&lt;/code&gt; to indicate the authorities that the\n     * principal has been granted. Note that classes should not rely on this value as\n     * being valid unless it has been set by a trusted &lt;code&gt;AuthenticationManager&lt;/code&gt;.\n     * &lt;p&gt;\n     * Implementations should ensure that modifications to the returned collection array\n     * do not affect the state of the Authentication object, or use an unmodifiable\n     * instance.\n     * &lt;/p&gt;\n     * @return the authorities granted to the principal, or an empty collection if the\n     * token has not been authenticated. Never null.\n     */\n    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();\n\n    /**\n     * The credentials that prove the principal is correct. This is usually a password,\n     * but could be anything relevant to the &lt;code&gt;AuthenticationManager&lt;/code&gt;. Callers\n     * are expected to populate the credentials.\n     * @return the credentials that prove the identity of the &lt;code&gt;Principal&lt;/code&gt;\n     */\n    Object getCredentials();\n\n    /**\n     * Stores additional details about the authentication request. These might be an IP\n     * address, certificate serial number etc.\n     * @return additional details about the authentication request, or &lt;code&gt;null&lt;/code&gt;\n     * if not used\n     */\n    Object getDetails();\n\n    /**\n     * The identity of the principal being authenticated. In the case of an authentication\n     * request with username and password, this would be the username. Callers are\n     * expected to populate the principal for an authentication request.\n     * &lt;p&gt;\n     * The &lt;tt&gt;AuthenticationManager&lt;/tt&gt; implementation will often return an\n     * &lt;tt&gt;Authentication&lt;/tt&gt; containing richer information as the principal for use by\n     * the application. Many of the authentication providers will create a\n     * {@code UserDetails} object as the principal.\n     * @return the &lt;code&gt;Principal&lt;/code&gt; being authenticated or the authenticated\n     * principal after authentication.\n     */\n    Object getPrincipal();\n\n    /**\n     * Used to indicate to {@code AbstractSecurityInterceptor} whether it should present\n     * the authentication token to the &lt;code&gt;AuthenticationManager&lt;/code&gt;. Typically an\n     * &lt;code&gt;AuthenticationManager&lt;/code&gt; (or, more often, one of its\n     * &lt;code&gt;AuthenticationProvider&lt;/code&gt;s) will return an immutable authentication token\n     * after successful authentication, in which case that token can safely return\n     * &lt;code&gt;true&lt;/code&gt; to this method. Returning &lt;code&gt;true&lt;/code&gt; will improve\n     * performance, as calling the &lt;code&gt;AuthenticationManager&lt;/code&gt; for every request\n     * will no longer be necessary.\n     * &lt;p&gt;\n     * For security reasons, implementations of this interface should be very careful\n     * about returning &lt;code&gt;true&lt;/code&gt; from this method unless they are either\n     * immutable, or have some way of ensuring the properties have not been changed since\n     * original creation.\n     * @return true if the token has been authenticated and the\n     * &lt;code&gt;AbstractSecurityInterceptor&lt;/code&gt; does not need to present the token to the\n     * &lt;code&gt;AuthenticationManager&lt;/code&gt; again for re-authentication.\n     */\n    boolean isAuthenticated();\n\n    /**\n     * See {@link #isAuthenticated()} for a full description.\n     * &lt;p&gt;\n     * Implementations should &lt;b&gt;always&lt;/b&gt; allow this method to be called with a\n     * &lt;code&gt;false&lt;/code&gt; parameter, as this is used by various classes to specify the\n     * authentication token should not be trusted. If an implementation wishes to reject\n     * an invocation with a &lt;code&gt;true&lt;/code&gt; parameter (which would indicate the\n     * authentication token is trusted - a potential security risk) the implementation\n     * should throw an {@link IllegalArgumentException}.\n     * @param isAuthenticated &lt;code&gt;true&lt;/code&gt; if the token should be trusted (which may\n     * result in an exception) or &lt;code&gt;false&lt;/code&gt; if the token should not be trusted\n     * @throws IllegalArgumentException if an attempt to make the authentication token\n     * trusted (by passing &lt;code&gt;true&lt;/code&gt; as the argument) is rejected due to the\n     * implementation being immutable or implementing its own alternative approach to\n     * {@link #isAuthenticated()}\n     */\n    void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;\n\n}\n</code></pre> <ul> <li>Then if you go deeper into the <code>Authentication</code>, you can see the <code>AbstractAuthenticationToken</code>class  is the implementation of it. But in many of our cases we usually  use the <code>UsernamePasswordAuthenticationToken</code> class which is extended from the <code>AbstractAuthenticationToken</code> for creating <code>Authentication</code> object.</li> <li>To build <code>UsernamePasswordAuthenticationToken</code> we will need some information from the input <code>Authentication</code> such as username(principle), credentials(password) and authorities (which is got from the <code>UserDetails</code>).</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Principal%20Interfaces/#see_also","title":"See Also","text":"<ul> <li>Authentication Provider</li> <li>Authentication Manager</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20And%20Principal%20Interfaces/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Manager/","title":"Authentication Manager","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Manager/#authentication_manager_definition","title":"Authentication Manager Definition","text":"<ul> <li><code>AuthenticationManager</code> is the place where it will identify what is correspondent Authentication Provider that the request has to go.  In simple words, we can say that <code>Authentication manager</code> will identify what is the most appropriate <code>authentication provider</code> that the request has to be sent. So we can have many <code>AuthenticationProvider</code> with many types of authentication but we only have one <code>AuthentictionManager</code>.</li> </ul> <ul> <li>Let check the <code>AuthentictionManager</code> interface which is available in the Spring Security framework as below:</li> </ul> AuthenticationManager.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.authentication;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\n/**\n * Processes an {@link Authentication} request.\n *\n * @author Ben Alex\n */\npublic interface AuthenticationManager {\n\n    /**\n     * Attempts to authenticate the passed {@link Authentication} object, returning a\n     * fully populated &lt;code&gt;Authentication&lt;/code&gt; object (including granted authorities)\n     * if successful.\n     * &lt;p&gt;\n     * An &lt;code&gt;AuthenticationManager&lt;/code&gt; must honour the following contract concerning\n     * exceptions:\n     * &lt;ul&gt;\n     * &lt;li&gt;A {@link DisabledException} must be thrown if an account is disabled and the\n     * &lt;code&gt;AuthenticationManager&lt;/code&gt; can test for this state.&lt;/li&gt;\n     * &lt;li&gt;A {@link LockedException} must be thrown if an account is locked and the\n     * &lt;code&gt;AuthenticationManager&lt;/code&gt; can test for account locking.&lt;/li&gt;\n     * &lt;li&gt;A {@link BadCredentialsException} must be thrown if incorrect credentials are\n     * presented. Whilst the above exceptions are optional, an\n     * &lt;code&gt;AuthenticationManager&lt;/code&gt; must &lt;B&gt;always&lt;/B&gt; test credentials.&lt;/li&gt;\n     * &lt;/ul&gt;\n     * Exceptions should be tested for and if applicable thrown in the order expressed\n     * above (i.e. if an account is disabled or locked, the authentication request is\n     * immediately rejected and the credentials testing process is not performed). This\n     * prevents credentials being tested against disabled or locked accounts.\n     * @param authentication the authentication request object\n     * @return a fully authenticated object including credentials\n     * @throws AuthenticationException if authentication fails\n     */\n    Authentication authenticate(Authentication authentication) throws AuthenticationException;\n\n}\n</code></pre> <ul> <li>As you can see there is only one method <code>authenticate()</code> in the <code>AuthenticationManager</code> and this method is the same as the method in the Authentication Provider. It is because the <code>AuthenticationManager</code> has to pass the same authentication object from the filter to the <code>AuthenticationProvider</code> which will actually validate the user. So the <code>AuthenticationManager</code> job is only to identify and call all the providers present inside our application one by one, till the user is authenticated successfully or once it tries to all the providers, then throw an exception. So that is the only responsibility of <code>AuthenticationManager</code>.</li> <li>Now let's continue to check the implementation of <code>AuthenticationManager</code> class, it is the <code>ProviderManager</code>.</li> </ul> ProviderManager.java<pre><code>/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.authentication;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.MessageSourceAware;\nimport org.springframework.context.support.MessageSourceAccessor;\nimport org.springframework.core.log.LogMessage;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.CredentialsContainer;\nimport org.springframework.security.core.SpringSecurityMessageSource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Iterates an {@link Authentication} request through a list of\n * {@link AuthenticationProvider}s.\n *\n * &lt;p&gt;\n * &lt;tt&gt;AuthenticationProvider&lt;/tt&gt;s are usually tried in order until one provides a\n * non-null response. A non-null response indicates the provider had authority to decide\n * on the authentication request and no further providers are tried. If a subsequent\n * provider successfully authenticates the request, the earlier authentication exception\n * is disregarded and the successful authentication will be used. If no subsequent\n * provider provides a non-null response, or a new &lt;code&gt;AuthenticationException&lt;/code&gt;,\n * the last &lt;code&gt;AuthenticationException&lt;/code&gt; received will be used. If no provider\n * returns a non-null response, or indicates it can even process an\n * &lt;code&gt;Authentication&lt;/code&gt;, the &lt;code&gt;ProviderManager&lt;/code&gt; will throw a\n * &lt;code&gt;ProviderNotFoundException&lt;/code&gt;. A parent {@code AuthenticationManager} can also\n * be set, and this will also be tried if none of the configured providers can perform the\n * authentication. This is intended to support namespace configuration options though and\n * is not a feature that should normally be required.\n * &lt;p&gt;\n * The exception to this process is when a provider throws an\n * {@link AccountStatusException}, in which case no further providers in the list will be\n * queried.\n *\n * Post-authentication, the credentials will be cleared from the returned\n * {@code Authentication} object, if it implements the {@link CredentialsContainer}\n * interface. This behaviour can be controlled by modifying the\n * {@link #setEraseCredentialsAfterAuthentication(boolean)\n * eraseCredentialsAfterAuthentication} property.\n *\n * &lt;h2&gt;Event Publishing&lt;/h2&gt;\n * &lt;p&gt;\n * Authentication event publishing is delegated to the configured\n * {@link AuthenticationEventPublisher} which defaults to a null implementation which\n * doesn't publish events, so if you are configuring the bean yourself you must inject a\n * publisher bean if you want to receive events. The standard implementation is\n * {@link DefaultAuthenticationEventPublisher} which maps common exceptions to events (in\n * the case of authentication failure) and publishes an\n * {@link org.springframework.security.authentication.event.AuthenticationSuccessEvent\n * AuthenticationSuccessEvent} if authentication succeeds. If you are using the namespace\n * then an instance of this bean will be used automatically by the &lt;tt&gt;&amp;lt;http&amp;gt;&lt;/tt&gt;\n * configuration, so you will receive events from the web part of your application\n * automatically.\n * &lt;p&gt;\n * Note that the implementation also publishes authentication failure events when it\n * obtains an authentication result (or an exception) from the \"parent\"\n * {@code AuthenticationManager} if one has been set. So in this situation, the parent\n * should not generally be configured to publish events or there will be duplicates.\n *\n * @author Ben Alex\n * @author Luke Taylor\n * @see DefaultAuthenticationEventPublisher\n */\npublic class ProviderManager implements AuthenticationManager, MessageSourceAware, InitializingBean {\n\n    private static final Log logger = LogFactory.getLog(ProviderManager.class);\n\n    private AuthenticationEventPublisher eventPublisher = new NullEventPublisher();\n\n    private List&lt;AuthenticationProvider&gt; providers = Collections.emptyList();\n\n    protected MessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();\n\n    private AuthenticationManager parent;\n\n    private boolean eraseCredentialsAfterAuthentication = true;\n\n    /**\n     * Construct a {@link ProviderManager} using the given {@link AuthenticationProvider}s\n     * @param providers the {@link AuthenticationProvider}s to use\n     */\n    public ProviderManager(AuthenticationProvider... providers) {\n        this(Arrays.asList(providers), null);\n    }\n\n    /**\n     * Construct a {@link ProviderManager} using the given {@link AuthenticationProvider}s\n     * @param providers the {@link AuthenticationProvider}s to use\n     */\n    public ProviderManager(List&lt;AuthenticationProvider&gt; providers) {\n        this(providers, null);\n    }\n\n    /**\n     * Construct a {@link ProviderManager} using the provided parameters\n     * @param providers the {@link AuthenticationProvider}s to use\n     * @param parent a parent {@link AuthenticationManager} to fall back to\n     */\n    public ProviderManager(List&lt;AuthenticationProvider&gt; providers, AuthenticationManager parent) {\n        Assert.notNull(providers, \"providers list cannot be null\");\n        this.providers = providers;\n        this.parent = parent;\n        checkState();\n    }\n\n    @Override\n    public void afterPropertiesSet() {\n        checkState();\n    }\n\n    private void checkState() {\n        Assert.isTrue(this.parent != null || !this.providers.isEmpty(),\n                \"A parent AuthenticationManager or a list of AuthenticationProviders is required\");\n        Assert.isTrue(!CollectionUtils.contains(this.providers.iterator(), null),\n                \"providers list cannot contain null values\");\n    }\n\n    /**\n     * Attempts to authenticate the passed {@link Authentication} object.\n     * &lt;p&gt;\n     * The list of {@link AuthenticationProvider}s will be successively tried until an\n     * &lt;code&gt;AuthenticationProvider&lt;/code&gt; indicates it is capable of authenticating the\n     * type of &lt;code&gt;Authentication&lt;/code&gt; object passed. Authentication will then be\n     * attempted with that &lt;code&gt;AuthenticationProvider&lt;/code&gt;.\n     * &lt;p&gt;\n     * If more than one &lt;code&gt;AuthenticationProvider&lt;/code&gt; supports the passed\n     * &lt;code&gt;Authentication&lt;/code&gt; object, the first one able to successfully authenticate\n     * the &lt;code&gt;Authentication&lt;/code&gt; object determines the &lt;code&gt;result&lt;/code&gt;,\n     * overriding any possible &lt;code&gt;AuthenticationException&lt;/code&gt; thrown by earlier\n     * supporting &lt;code&gt;AuthenticationProvider&lt;/code&gt;s. On successful authentication, no\n     * subsequent &lt;code&gt;AuthenticationProvider&lt;/code&gt;s will be tried. If authentication\n     * was not successful by any supporting &lt;code&gt;AuthenticationProvider&lt;/code&gt; the last\n     * thrown &lt;code&gt;AuthenticationException&lt;/code&gt; will be rethrown.\n     * @param authentication the authentication request object.\n     * @return a fully authenticated object including credentials.\n     * @throws AuthenticationException if authentication fails.\n     */\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        Class&lt;? extends Authentication&gt; toTest = authentication.getClass();\n        AuthenticationException lastException = null;\n        AuthenticationException parentException = null;\n        Authentication result = null;\n        Authentication parentResult = null;\n        int currentPosition = 0;\n        int size = this.providers.size();\n        for (AuthenticationProvider provider : getProviders()) {\n            if (!provider.supports(toTest)) {\n                continue;\n            }\n            if (logger.isTraceEnabled()) {\n                logger.trace(LogMessage.format(\"Authenticating request with %s (%d/%d)\",\n                        provider.getClass().getSimpleName(), ++currentPosition, size));\n            }\n            try {\n                result = provider.authenticate(authentication);\n                if (result != null) {\n                    copyDetails(authentication, result);\n                    break;\n                }\n            }\n            catch (AccountStatusException | InternalAuthenticationServiceException ex) {\n                prepareException(ex, authentication);\n                // SEC-546: Avoid polling additional providers if auth failure is due to\n                // invalid account status\n                throw ex;\n            }\n            catch (AuthenticationException ex) {\n                lastException = ex;\n            }\n        }\n        if (result == null &amp;&amp; this.parent != null) {\n            // Allow the parent to try.\n            try {\n                parentResult = this.parent.authenticate(authentication);\n                result = parentResult;\n            }\n            catch (ProviderNotFoundException ex) {\n                // ignore as we will throw below if no other exception occurred prior to\n                // calling parent and the parent\n                // may throw ProviderNotFound even though a provider in the child already\n                // handled the request\n            }\n            catch (AuthenticationException ex) {\n                parentException = ex;\n                lastException = ex;\n            }\n        }\n        if (result != null) {\n            if (this.eraseCredentialsAfterAuthentication &amp;&amp; (result instanceof CredentialsContainer)) {\n                // Authentication is complete. Remove credentials and other secret data\n                // from authentication\n                ((CredentialsContainer) result).eraseCredentials();\n            }\n            // If the parent AuthenticationManager was attempted and successful then it\n            // will publish an AuthenticationSuccessEvent\n            // This check prevents a duplicate AuthenticationSuccessEvent if the parent\n            // AuthenticationManager already published it\n            if (parentResult == null) {\n                this.eventPublisher.publishAuthenticationSuccess(result);\n            }\n\n            return result;\n        }\n\n        // Parent was null, or didn't authenticate (or throw an exception).\n        if (lastException == null) {\n            lastException = new ProviderNotFoundException(this.messages.getMessage(\"ProviderManager.providerNotFound\",\n                    new Object[] { toTest.getName() }, \"No AuthenticationProvider found for {0}\"));\n        }\n        // If the parent AuthenticationManager was attempted and failed then it will\n        // publish an AbstractAuthenticationFailureEvent\n        // This check prevents a duplicate AbstractAuthenticationFailureEvent if the\n        // parent AuthenticationManager already published it\n        if (parentException == null) {\n            prepareException(lastException, authentication);\n        }\n        throw lastException;\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    private void prepareException(AuthenticationException ex, Authentication auth) {\n        this.eventPublisher.publishAuthenticationFailure(ex, auth);\n    }\n\n    /**\n     * Copies the authentication details from a source Authentication object to a\n     * destination one, provided the latter does not already have one set.\n     * @param source source authentication\n     * @param dest the destination authentication object\n     */\n    private void copyDetails(Authentication source, Authentication dest) {\n        if ((dest instanceof AbstractAuthenticationToken) &amp;&amp; (dest.getDetails() == null)) {\n            AbstractAuthenticationToken token = (AbstractAuthenticationToken) dest;\n            token.setDetails(source.getDetails());\n        }\n    }\n\n    public List&lt;AuthenticationProvider&gt; getProviders() {\n        return this.providers;\n    }\n\n    @Override\n    public void setMessageSource(MessageSource messageSource) {\n        this.messages = new MessageSourceAccessor(messageSource);\n    }\n\n    public void setAuthenticationEventPublisher(AuthenticationEventPublisher eventPublisher) {\n        Assert.notNull(eventPublisher, \"AuthenticationEventPublisher cannot be null\");\n        this.eventPublisher = eventPublisher;\n    }\n\n    /**\n     * If set to, a resulting {@code Authentication} which implements the\n     * {@code CredentialsContainer} interface will have its\n     * {@link CredentialsContainer#eraseCredentials() eraseCredentials} method called\n     * before it is returned from the {@code authenticate()} method.\n     * @param eraseSecretData set to {@literal false} to retain the credentials data in\n     * memory. Defaults to {@literal true}.\n     */\n    public void setEraseCredentialsAfterAuthentication(boolean eraseSecretData) {\n        this.eraseCredentialsAfterAuthentication = eraseSecretData;\n    }\n\n    public boolean isEraseCredentialsAfterAuthentication() {\n        return this.eraseCredentialsAfterAuthentication;\n    }\n\n    private static final class NullEventPublisher implements AuthenticationEventPublisher {\n\n        @Override\n        public void publishAuthenticationFailure(AuthenticationException exception, Authentication authentication) {\n        }\n\n        @Override\n        public void publishAuthenticationSuccess(Authentication authentication) {\n        }\n\n    }\n\n}\n</code></pre> <ul> <li>So if you look into the method <code>authenticate()</code> of <code>ProviderManager</code> class then you can see, It will loop through all <code>AuthenticationProvider</code> and find the appropriate one by using the method <code>supports()</code> of the <code>AuthenticationProvider</code> which will return the boolean true/false. If the result is false then the <code>ProviderManager</code> will check the next <code>AuthenticationProvider</code> and if it is true then the <code>ProviderManager</code> will use this <code>AuthenticationProvider</code> to authenticate.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Manager/#see_also","title":"See Also","text":"<ul> <li>Authentication Provider</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Manager/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Provider/","title":"Authentication Provider","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Provider/#authentication_provider_introduction","title":"Authentication Provider Introduction","text":"<ul> <li><code>Authentication Provider</code> is the component that leverages the  UserDetailsService and  PasswordEncoder to perform the authentication. This is a place where all your business logic will be implemented. The logic related to your security like how do you validate username and password.</li> </ul> <ul> <li>The <code>AuthenticationProvider</code> in Spring Security takes care of the authentication logic. By default, the responsibility of <code>AuthenticationProvider</code> is finding the user in the system by using  <code>UserDetailsService</code> and validate the password with the support of <code>PasswordEncoder</code>. However, if we have a custom authentication requirement that is not fulfilled by Spring Security framework then we can build our own authentication logic by implementing the <code>AuthenticationProvider</code> interface.</li> <li>In some special case, you will need to create a custom <code>AuthenticationProvider</code> such as you have a spring application service for your back-end(BE) side, but there are many client applications which is using your BE application and they they are using many different type of authentication. Ex: some of them are using username/password authentication with BCrypt, other are using JWT Authentication or you have an application that is using FaceId and the <code>AuthenticationProvider</code> by default can't support you. So we have to create custom <code>AuthenticationProvider</code> for supporting these types of user authentication.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Provider/#authentication_provider_definition","title":"Authentication Provider Definition","text":"<ul> <li>If you the class <code>AuthenticationProvider</code> in the Spring Security then you can see it is an interface which contains 2 methods: <code>authenticate</code> and <code>support</code>.</li> </ul> AuthenticationProvider.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.authentication;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\n/**\n * Indicates a class can process a specific\n * {@link org.springframework.security.core.Authentication} implementation.\n *\n * @author Ben Alex\n */\npublic interface AuthenticationProvider {\n\n    /**\n     * Performs authentication with the same contract as\n     * {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)}\n     * .\n     * @param authentication the authentication request object.\n     * @return a fully authenticated object including credentials. May return\n     * &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;AuthenticationProvider&lt;/code&gt; is unable to support\n     * authentication of the passed &lt;code&gt;Authentication&lt;/code&gt; object. In such a case,\n     * the next &lt;code&gt;AuthenticationProvider&lt;/code&gt; that supports the presented\n     * &lt;code&gt;Authentication&lt;/code&gt; class will be tried.\n     * @throws AuthenticationException if authentication fails.\n     */\n    Authentication authenticate(Authentication authentication) throws AuthenticationException;\n\n    /**\n     * Returns &lt;code&gt;true&lt;/code&gt; if this &lt;Code&gt;AuthenticationProvider&lt;/code&gt; supports the\n     * indicated &lt;Code&gt;Authentication&lt;/code&gt; object.\n     * &lt;p&gt;\n     * Returning &lt;code&gt;true&lt;/code&gt; does not guarantee an\n     * &lt;code&gt;AuthenticationProvider&lt;/code&gt; will be able to authenticate the presented\n     * instance of the &lt;code&gt;Authentication&lt;/code&gt; class. It simply indicates it can\n     * support closer evaluation of it. An &lt;code&gt;AuthenticationProvider&lt;/code&gt; can still\n     * return &lt;code&gt;null&lt;/code&gt; from the {@link #authenticate(Authentication)} method to\n     * indicate another &lt;code&gt;AuthenticationProvider&lt;/code&gt; should be tried.\n     * &lt;/p&gt;\n     * &lt;p&gt;\n     * Selection of an &lt;code&gt;AuthenticationProvider&lt;/code&gt; capable of performing\n     * authentication is conducted at runtime the &lt;code&gt;ProviderManager&lt;/code&gt;.\n     * &lt;/p&gt;\n     * @param authentication\n     * @return &lt;code&gt;true&lt;/code&gt; if the implementation can more closely evaluate the\n     * &lt;code&gt;Authentication&lt;/code&gt; class presented\n     */\n    boolean supports(Class&lt;?&gt; authentication);\n\n}\n</code></pre> <ul> <li>The <code>authenticate()</code> method received an <code>Authentication</code> object as a parameter and returns and  Authentication object as well. We implement the <code>authenticate()</code> method to define the authentication logic.</li> <li>The second method in the <code>AuthenticationProvider</code> interface is <code>supports(Class&lt;?&gt; authentication)</code>. You will implement this method to return true if the current <code>AuthenticationProvider</code> supports the type provided as the <code>Authentication</code> object. This method will be used when you have many type of authentication in your application like username/password authentication with BCrypt, JWT authentication or FaceId authentication.</li> <li>Spring Security framework provide a default implementation of the <code>AuthenticationProvider</code>. It is the <code>DaoAuthenticationProvider</code> which extends the <code>AbstractUserDetailsAuthenticationProvider</code>.</li> </ul> DaoAuthenticationProvider.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.authentication.dao;\n\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.InternalAuthenticationServiceException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsPasswordService;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.factory.PasswordEncoderFactories;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.util.Assert;\n\n/**\n * An {@link AuthenticationProvider} implementation that retrieves user details from a\n * {@link UserDetailsService}.\n *\n * @author Ben Alex\n * @author Rob Winch\n */\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n\n    /**\n     * The plaintext password used to perform PasswordEncoder#matches(CharSequence,\n     * String)} on when the user is not found to avoid SEC-2056.\n     */\n    private static final String USER_NOT_FOUND_PASSWORD = \"userNotFoundPassword\";\n\n    private PasswordEncoder passwordEncoder;\n\n    /**\n     * The password used to perform {@link PasswordEncoder#matches(CharSequence, String)}\n     * on when the user is not found to avoid SEC-2056. This is necessary, because some\n     * {@link PasswordEncoder} implementations will short circuit if the password is not\n     * in a valid format.\n     */\n    private volatile String userNotFoundEncodedPassword;\n\n    private UserDetailsService userDetailsService;\n\n    private UserDetailsPasswordService userDetailsPasswordService;\n\n    public DaoAuthenticationProvider() {\n        setPasswordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder());\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    protected void additionalAuthenticationChecks(UserDetails userDetails,\n            UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {\n        if (authentication.getCredentials() == null) {\n            this.logger.debug(\"Failed to authenticate since no credentials provided\");\n            throw new BadCredentialsException(this.messages\n                    .getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\", \"Bad credentials\"));\n        }\n        String presentedPassword = authentication.getCredentials().toString();\n        if (!this.passwordEncoder.matches(presentedPassword, userDetails.getPassword())) {\n            this.logger.debug(\"Failed to authenticate since password does not match stored value\");\n            throw new BadCredentialsException(this.messages\n                    .getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\", \"Bad credentials\"));\n        }\n    }\n\n    @Override\n    protected void doAfterPropertiesSet() {\n        Assert.notNull(this.userDetailsService, \"A UserDetailsService must be set\");\n    }\n\n    @Override\n    protected final UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)\n            throws AuthenticationException {\n        prepareTimingAttackProtection();\n        try {\n            UserDetails loadedUser = this.getUserDetailsService().loadUserByUsername(username);\n            if (loadedUser == null) {\n                throw new InternalAuthenticationServiceException(\n                        \"UserDetailsService returned null, which is an interface contract violation\");\n            }\n            return loadedUser;\n        }\n        catch (UsernameNotFoundException ex) {\n            mitigateAgainstTimingAttack(authentication);\n            throw ex;\n        }\n        catch (InternalAuthenticationServiceException ex) {\n            throw ex;\n        }\n        catch (Exception ex) {\n            throw new InternalAuthenticationServiceException(ex.getMessage(), ex);\n        }\n    }\n\n    @Override\n    protected Authentication createSuccessAuthentication(Object principal, Authentication authentication,\n            UserDetails user) {\n        boolean upgradeEncoding = this.userDetailsPasswordService != null\n                &amp;&amp; this.passwordEncoder.upgradeEncoding(user.getPassword());\n        if (upgradeEncoding) {\n            String presentedPassword = authentication.getCredentials().toString();\n            String newPassword = this.passwordEncoder.encode(presentedPassword);\n            user = this.userDetailsPasswordService.updatePassword(user, newPassword);\n        }\n        return super.createSuccessAuthentication(principal, authentication, user);\n    }\n\n    private void prepareTimingAttackProtection() {\n        if (this.userNotFoundEncodedPassword == null) {\n            this.userNotFoundEncodedPassword = this.passwordEncoder.encode(USER_NOT_FOUND_PASSWORD);\n        }\n    }\n\n    private void mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken authentication) {\n        if (authentication.getCredentials() != null) {\n            String presentedPassword = authentication.getCredentials().toString();\n            this.passwordEncoder.matches(presentedPassword, this.userNotFoundEncodedPassword);\n        }\n    }\n\n    /**\n     * Sets the PasswordEncoder instance to be used to encode and validate passwords. If\n     * not set, the password will be compared using\n     * {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n     * @param passwordEncoder must be an instance of one of the {@code PasswordEncoder}\n     * types.\n     */\n    public void setPasswordEncoder(PasswordEncoder passwordEncoder) {\n        Assert.notNull(passwordEncoder, \"passwordEncoder cannot be null\");\n        this.passwordEncoder = passwordEncoder;\n        this.userNotFoundEncodedPassword = null;\n    }\n\n    protected PasswordEncoder getPasswordEncoder() {\n        return this.passwordEncoder;\n    }\n\n    public void setUserDetailsService(UserDetailsService userDetailsService) {\n        this.userDetailsService = userDetailsService;\n    }\n\n    protected UserDetailsService getUserDetailsService() {\n        return this.userDetailsService;\n    }\n\n    public void setUserDetailsPasswordService(UserDetailsPasswordService userDetailsPasswordService) {\n        this.userDetailsPasswordService = userDetailsPasswordService;\n    }\n\n}\n</code></pre> <ul> <li>In the <code>AbstractUserDetailsAuthenticationProvider</code> you can see the method <code>authenticate()</code> this is the method that Authentication Manager will call to authenticate.</li> </ul> AbstractUserDetailsAuthenticationProvider.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.authentication.dao;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.MessageSourceAware;\nimport org.springframework.context.support.MessageSourceAccessor;\nimport org.springframework.security.authentication.AccountExpiredException;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.CredentialsExpiredException;\nimport org.springframework.security.authentication.DisabledException;\nimport org.springframework.security.authentication.LockedException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.SpringSecurityMessageSource;\nimport org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\nimport org.springframework.security.core.authority.mapping.NullAuthoritiesMapper;\nimport org.springframework.security.core.userdetails.UserCache;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsChecker;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.core.userdetails.cache.NullUserCache;\nimport org.springframework.util.Assert;\n\n/**\n * A base {@link AuthenticationProvider} that allows subclasses to override and work with\n * {@link org.springframework.security.core.userdetails.UserDetails} objects. The class is\n * designed to respond to {@link UsernamePasswordAuthenticationToken} authentication\n * requests.\n *\n * &lt;p&gt;\n * Upon successful validation, a &lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt; will be\n * created and returned to the caller. The token will include as its principal either a\n * &lt;code&gt;String&lt;/code&gt; representation of the username, or the {@link UserDetails} that was\n * returned from the authentication repository. Using &lt;code&gt;String&lt;/code&gt; is appropriate\n * if a container adapter is being used, as it expects &lt;code&gt;String&lt;/code&gt; representations\n * of the username. Using &lt;code&gt;UserDetails&lt;/code&gt; is appropriate if you require access to\n * additional properties of the authenticated user, such as email addresses,\n * human-friendly names etc. As container adapters are not recommended to be used, and\n * &lt;code&gt;UserDetails&lt;/code&gt; implementations provide additional flexibility, by default a\n * &lt;code&gt;UserDetails&lt;/code&gt; is returned. To override this default, set the\n * {@link #setForcePrincipalAsString} to &lt;code&gt;true&lt;/code&gt;.\n * &lt;p&gt;\n * Caching is handled by storing the &lt;code&gt;UserDetails&lt;/code&gt; object being placed in the\n * {@link UserCache}. This ensures that subsequent requests with the same username can be\n * validated without needing to query the {@link UserDetailsService}. It should be noted\n * that if a user appears to present an incorrect password, the {@link UserDetailsService}\n * will be queried to confirm the most up-to-date password was used for comparison.\n * Caching is only likely to be required for stateless applications. In a normal web\n * application, for example, the &lt;tt&gt;SecurityContext&lt;/tt&gt; is stored in the user's session\n * and the user isn't reauthenticated on each request. The default cache implementation is\n * therefore {@link NullUserCache}.\n *\n * @author Ben Alex\n */\npublic abstract class AbstractUserDetailsAuthenticationProvider\n        implements AuthenticationProvider, InitializingBean, MessageSourceAware {\n\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    protected MessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();\n\n    private UserCache userCache = new NullUserCache();\n\n    private boolean forcePrincipalAsString = false;\n\n    protected boolean hideUserNotFoundExceptions = true;\n\n    private UserDetailsChecker preAuthenticationChecks = new DefaultPreAuthenticationChecks();\n\n    private UserDetailsChecker postAuthenticationChecks = new DefaultPostAuthenticationChecks();\n\n    private GrantedAuthoritiesMapper authoritiesMapper = new NullAuthoritiesMapper();\n\n    /**\n     * Allows subclasses to perform any additional checks of a returned (or cached)\n     * &lt;code&gt;UserDetails&lt;/code&gt; for a given authentication request. Generally a subclass\n     * will at least compare the {@link Authentication#getCredentials()} with a\n     * {@link UserDetails#getPassword()}. If custom logic is needed to compare additional\n     * properties of &lt;code&gt;UserDetails&lt;/code&gt; and/or\n     * &lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;, these should also appear in this\n     * method.\n     * @param userDetails as retrieved from the\n     * {@link #retrieveUser(String, UsernamePasswordAuthenticationToken)} or\n     * &lt;code&gt;UserCache&lt;/code&gt;\n     * @param authentication the current request that needs to be authenticated\n     * @throws AuthenticationException AuthenticationException if the credentials could\n     * not be validated (generally a &lt;code&gt;BadCredentialsException&lt;/code&gt;, an\n     * &lt;code&gt;AuthenticationServiceException&lt;/code&gt;)\n     */\n    protected abstract void additionalAuthenticationChecks(UserDetails userDetails,\n            UsernamePasswordAuthenticationToken authentication) throws AuthenticationException;\n\n    @Override\n    public final void afterPropertiesSet() throws Exception {\n        Assert.notNull(this.userCache, \"A user cache must be set\");\n        Assert.notNull(this.messages, \"A message source must be set\");\n        doAfterPropertiesSet();\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,\n                () -&gt; this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.onlySupports\",\n                        \"Only UsernamePasswordAuthenticationToken is supported\"));\n        String username = determineUsername(authentication);\n        boolean cacheWasUsed = true;\n        UserDetails user = this.userCache.getUserFromCache(username);\n        if (user == null) {\n            cacheWasUsed = false;\n            try {\n                user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);\n            }\n            catch (UsernameNotFoundException ex) {\n                this.logger.debug(\"Failed to find user '\" + username + \"'\");\n                if (!this.hideUserNotFoundExceptions) {\n                    throw ex;\n                }\n                throw new BadCredentialsException(this.messages\n                        .getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\", \"Bad credentials\"));\n            }\n            Assert.notNull(user, \"retrieveUser returned null - a violation of the interface contract\");\n        }\n        try {\n            this.preAuthenticationChecks.check(user);\n            additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);\n        }\n        catch (AuthenticationException ex) {\n            if (!cacheWasUsed) {\n                throw ex;\n            }\n            // There was a problem, so try again after checking\n            // we're using latest data (i.e. not from the cache)\n            cacheWasUsed = false;\n            user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);\n            this.preAuthenticationChecks.check(user);\n            additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);\n        }\n        this.postAuthenticationChecks.check(user);\n        if (!cacheWasUsed) {\n            this.userCache.putUserInCache(user);\n        }\n        Object principalToReturn = user;\n        if (this.forcePrincipalAsString) {\n            principalToReturn = user.getUsername();\n        }\n        return createSuccessAuthentication(principalToReturn, authentication, user);\n    }\n\n    private String determineUsername(Authentication authentication) {\n        return (authentication.getPrincipal() == null) ? \"NONE_PROVIDED\" : authentication.getName();\n    }\n\n    /**\n     * Creates a successful {@link Authentication} object.\n     * &lt;p&gt;\n     * Protected so subclasses can override.\n     * &lt;/p&gt;\n     * &lt;p&gt;\n     * Subclasses will usually store the original credentials the user supplied (not\n     * salted or encoded passwords) in the returned &lt;code&gt;Authentication&lt;/code&gt; object.\n     * &lt;/p&gt;\n     * @param principal that should be the principal in the returned object (defined by\n     * the {@link #isForcePrincipalAsString()} method)\n     * @param authentication that was presented to the provider for validation\n     * @param user that was loaded by the implementation\n     * @return the successful authentication token\n     */\n    protected Authentication createSuccessAuthentication(Object principal, Authentication authentication,\n            UserDetails user) {\n        // Ensure we return the original credentials the user supplied,\n        // so subsequent attempts are successful even with encoded passwords.\n        // Also ensure we return the original getDetails(), so that future\n        // authentication events after cache expiry contain the details\n        UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(principal,\n                authentication.getCredentials(), this.authoritiesMapper.mapAuthorities(user.getAuthorities()));\n        result.setDetails(authentication.getDetails());\n        this.logger.debug(\"Authenticated user\");\n        return result;\n    }\n\n    protected void doAfterPropertiesSet() throws Exception {\n    }\n\n    public UserCache getUserCache() {\n        return this.userCache;\n    }\n\n    public boolean isForcePrincipalAsString() {\n        return this.forcePrincipalAsString;\n    }\n\n    public boolean isHideUserNotFoundExceptions() {\n        return this.hideUserNotFoundExceptions;\n    }\n\n    /**\n     * Allows subclasses to actually retrieve the &lt;code&gt;UserDetails&lt;/code&gt; from an\n     * implementation-specific location, with the option of throwing an\n     * &lt;code&gt;AuthenticationException&lt;/code&gt; immediately if the presented credentials are\n     * incorrect (this is especially useful if it is necessary to bind to a resource as\n     * the user in order to obtain or generate a &lt;code&gt;UserDetails&lt;/code&gt;).\n     * &lt;p&gt;\n     * Subclasses are not required to perform any caching, as the\n     * &lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt; will by default cache the\n     * &lt;code&gt;UserDetails&lt;/code&gt;. The caching of &lt;code&gt;UserDetails&lt;/code&gt; does present\n     * additional complexity as this means subsequent requests that rely on the cache will\n     * need to still have their credentials validated, even if the correctness of\n     * credentials was assured by subclasses adopting a binding-based strategy in this\n     * method. Accordingly it is important that subclasses either disable caching (if they\n     * want to ensure that this method is the only method that is capable of\n     * authenticating a request, as no &lt;code&gt;UserDetails&lt;/code&gt; will ever be cached) or\n     * ensure subclasses implement\n     * {@link #additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)}\n     * to compare the credentials of a cached &lt;code&gt;UserDetails&lt;/code&gt; with subsequent\n     * authentication requests.\n     * &lt;/p&gt;\n     * &lt;p&gt;\n     * Most of the time subclasses will not perform credentials inspection in this method,\n     * instead performing it in\n     * {@link #additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)}\n     * so that code related to credentials validation need not be duplicated across two\n     * methods.\n     * &lt;/p&gt;\n     * @param username The username to retrieve\n     * @param authentication The authentication request, which subclasses &lt;em&gt;may&lt;/em&gt;\n     * need to perform a binding-based retrieval of the &lt;code&gt;UserDetails&lt;/code&gt;\n     * @return the user information (never &lt;code&gt;null&lt;/code&gt; - instead an exception should\n     * the thrown)\n     * @throws AuthenticationException if the credentials could not be validated\n     * (generally a &lt;code&gt;BadCredentialsException&lt;/code&gt;, an\n     * &lt;code&gt;AuthenticationServiceException&lt;/code&gt; or\n     * &lt;code&gt;UsernameNotFoundException&lt;/code&gt;)\n     */\n    protected abstract UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)\n            throws AuthenticationException;\n\n    public void setForcePrincipalAsString(boolean forcePrincipalAsString) {\n        this.forcePrincipalAsString = forcePrincipalAsString;\n    }\n\n    /**\n     * By default the &lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt; throws a\n     * &lt;code&gt;BadCredentialsException&lt;/code&gt; if a username is not found or the password is\n     * incorrect. Setting this property to &lt;code&gt;false&lt;/code&gt; will cause\n     * &lt;code&gt;UsernameNotFoundException&lt;/code&gt;s to be thrown instead for the former. Note\n     * this is considered less secure than throwing &lt;code&gt;BadCredentialsException&lt;/code&gt;\n     * for both exceptions.\n     * @param hideUserNotFoundExceptions set to &lt;code&gt;false&lt;/code&gt; if you wish\n     * &lt;code&gt;UsernameNotFoundException&lt;/code&gt;s to be thrown instead of the non-specific\n     * &lt;code&gt;BadCredentialsException&lt;/code&gt; (defaults to &lt;code&gt;true&lt;/code&gt;)\n     */\n    public void setHideUserNotFoundExceptions(boolean hideUserNotFoundExceptions) {\n        this.hideUserNotFoundExceptions = hideUserNotFoundExceptions;\n    }\n\n    @Override\n    public void setMessageSource(MessageSource messageSource) {\n        this.messages = new MessageSourceAccessor(messageSource);\n    }\n\n    public void setUserCache(UserCache userCache) {\n        this.userCache = userCache;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; authentication) {\n        return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));\n    }\n\n    protected UserDetailsChecker getPreAuthenticationChecks() {\n        return this.preAuthenticationChecks;\n    }\n\n    /**\n     * Sets the policy will be used to verify the status of the loaded\n     * &lt;tt&gt;UserDetails&lt;/tt&gt; &lt;em&gt;before&lt;/em&gt; validation of the credentials takes place.\n     * @param preAuthenticationChecks strategy to be invoked prior to authentication.\n     */\n    public void setPreAuthenticationChecks(UserDetailsChecker preAuthenticationChecks) {\n        this.preAuthenticationChecks = preAuthenticationChecks;\n    }\n\n    protected UserDetailsChecker getPostAuthenticationChecks() {\n        return this.postAuthenticationChecks;\n    }\n\n    public void setPostAuthenticationChecks(UserDetailsChecker postAuthenticationChecks) {\n        this.postAuthenticationChecks = postAuthenticationChecks;\n    }\n\n    public void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n        this.authoritiesMapper = authoritiesMapper;\n    }\n\n    private class DefaultPreAuthenticationChecks implements UserDetailsChecker {\n\n        @Override\n        public void check(UserDetails user) {\n            if (!user.isAccountNonLocked()) {\n                AbstractUserDetailsAuthenticationProvider.this.logger\n                        .debug(\"Failed to authenticate since user account is locked\");\n                throw new LockedException(AbstractUserDetailsAuthenticationProvider.this.messages\n                        .getMessage(\"AbstractUserDetailsAuthenticationProvider.locked\", \"User account is locked\"));\n            }\n            if (!user.isEnabled()) {\n                AbstractUserDetailsAuthenticationProvider.this.logger\n                        .debug(\"Failed to authenticate since user account is disabled\");\n                throw new DisabledException(AbstractUserDetailsAuthenticationProvider.this.messages\n                        .getMessage(\"AbstractUserDetailsAuthenticationProvider.disabled\", \"User is disabled\"));\n            }\n            if (!user.isAccountNonExpired()) {\n                AbstractUserDetailsAuthenticationProvider.this.logger\n                        .debug(\"Failed to authenticate since user account has expired\");\n                throw new AccountExpiredException(AbstractUserDetailsAuthenticationProvider.this.messages\n                        .getMessage(\"AbstractUserDetailsAuthenticationProvider.expired\", \"User account has expired\"));\n            }\n        }\n\n    }\n\n    private class DefaultPostAuthenticationChecks implements UserDetailsChecker {\n\n        @Override\n        public void check(UserDetails user) {\n            if (!user.isCredentialsNonExpired()) {\n                AbstractUserDetailsAuthenticationProvider.this.logger\n                        .debug(\"Failed to authenticate since user account credentials have expired\");\n                throw new CredentialsExpiredException(AbstractUserDetailsAuthenticationProvider.this.messages\n                        .getMessage(\"AbstractUserDetailsAuthenticationProvider.credentialsExpired\",\n                                \"User credentials have expired\"));\n            }\n        }\n\n    }\n\n}\n</code></pre> <ul> <li>Then if you look more deeply in the <code>authenticate()</code> method, you can see it will build a success authentication object which is <code>UsernamePasswordAuthenticationToken</code> by collecting information from input <code>authentication</code> object and <code>UserDetails</code>. </li> <li>Next, if you look into the <code>support()</code> or some first lines of method <code>authenticate()</code> method you would see that this provider is only support for <code>Authentication</code> type <code>UsernamePasswordAuthenticationToken</code>. So with other <code>Authentication</code> types, the Authentication Manager will ignore this provider and move next to other provider so find the suitable one.</li> <li>For now, you would see some references to Authentication Manager,  UserDetails and  Authentication. So let's check them in next sessions.</li> <li>Let's see an in example in Custom Authentication Provider.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Provider/#summary","title":"Summary","text":"<ul> <li>We look tat what is the importance of <code>AuthenticationProvider</code> inside Spring Security and scenarios where we can implement it to define our own custom authentication logic without adhering to the <code>UserDetails</code>,  <code>UserDetailsService</code> and <code>UserDetailsManager</code> contract.</li> <li>Definition of <code>AuthenticationProvider</code> which has 2 methods <code>authenticate()</code> and <code>supports()</code>.</li> <li>Definition of Authentication Manager which has 1 method <code>authenticate()</code></li> <li>Definition of Authentication And Principal Interfaces and how <code>UserDetails</code> will be converted to <code>Authentication</code> object with the default <code>DaoAuthenticateionProvider</code> provided by Spring Security.</li> <li>Finally we enhanced our application to have a custom <code>AuthenticationProvider</code> and perform authentication without any issues.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Provider/#see_also","title":"See Also","text":"<ul> <li>Authentication Manager</li> <li>Authentication And Principal Interfaces</li> <li>Defining And Managing Users</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authentication%20Provider/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authority%20And%20Role%20In%20Spring%20Security/","title":"Authority And Role In Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authority%20And%20Role%20In%20Spring%20Security/#authority_and_role_differences","title":"Authority And Role Differences","text":"Authority Role Authority is like an individual privilege Role is a group of privileges Restricting access in a fine-grained manner Restricting access in a coarse-grained manner Ex: READ, UPDATE, DELETE Ex: ROLE_ADMIN, ROLE_USER <ul> <li>Names of <code>authorities/roles</code> are arbitrary in nature and these names can be customized as per the business requirement.</li> <li>In Spring Security, there is no difference on how we configure authorities and rules except the method names to differentiate whether these are an authority or role.</li> <li><code>Roles</code> are also represented using the same contract <code>GrantedAuthority</code> in Spring Security</li> <li>When defining a role, its name should start with the <code>ROLE_prefix</code>. This <code>prefix</code> specifies the difference between a <code>role</code> and an <code>authority</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authority%20And%20Role%20In%20Spring%20Security/#see_also","title":"See Also","text":"<ul> <li>Spring Security With Authorization</li> <li>Configure Authorities</li> <li>Configure Roles</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Authority%20And%20Role%20In%20Spring%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/BCryptPasswordEncoder/","title":"BCryptPasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/BCryptPasswordEncoder/#bcryptpasswordencoder_1","title":"BCryptPasswordEncoder","text":"<ul> <li><code>BCriptPasswordEncoder</code> uses a <code>BCrypt</code> strong hashing function to encode the password. You could instantiate the <code>BCriptPasswordEncoder</code> by calling the no-arguments constructor. But you can also have the option to specify a strength coefficient representing the log roughs used in the encoding process. Moreover, you can as well alter the <code>SecureRandom</code> instance used for encoding.</li> </ul> <p><pre><code>PasswordEncoder p = new BCryptPasswordEncoder();\nPasswordEncoder p = new BCryptPasswordEncoder(4);\nSecureRandom s = SecureRandom.getInstanceStrong();\nPasswordEncoder p = new BCryptPasswordEncoder(4, s);\n</code></pre> - So If we look into the <code>BCriptPasswordEncoder</code> at method <code>encode</code> we will see that it use a random salt. So It means every time the password is encoded so we will received a different hash string, because the salt is always change. This will make hackers can not determine the data which is hashed behind, because they always see different hash string with a same data.  - Then in the method <code>matches</code>, the <code>BCriptPasswordEncoder</code> will compare the raw password (plain text) with the hashed password which is loaded from the database. So at this step, you will think that how they can compare a plain text password with a hashed password right, you don't know where is the salt, and it is the random salt also. - So actually when you use the <code>BCriptPasswordEncoder</code> to encode a password and received a hashed string. Actually, this hashed string also contains the random salt in the  prefix of the hash. Then when the <code>BCriptPasswordEncoder</code> does the comparison, the raw password will be hashed again with the salt that is extracted from the existed hash string from the database.  - A BCript hash will contain components as below:</p> <pre><code>$2&lt;a/b/x/y&gt;$[cost]$[22 character salt][31 character hash]\n</code></pre> <ul> <li>For the example:</li> </ul> <pre><code>$2a$12$R9h/cIPz0gi.URNNX3kh2OPST9/PgBkqquzi.Ss7KIUgO2t0jWMUW\n\\__/\\/ \\____________________/\\_____________________________/\nAlg Cost      Salt                        Hash\n</code></pre> <ul> <li>In which: <ul> <li><code>Alg</code>: The hash algorithm identifier (bcrypt). <code>$2a$</code> Blowfish-based crypt ('bcrypt')</li> <li><code>Cost</code>: Input cost (2^12 i.e. 4096 rounds). Cost min 4, Cost max 31.</li> <li><code>Salt</code>: <code>R9h/cIPz0gi.URNNX3kh2O</code> A radix-64 encoding of the input salt</li> <li><code>Hash</code>: <code>PST9/PgBkqquzi.Ss7KIUgO2t0jWMUW</code> A radix-64 encoding of the first 23 bytes of the computed 24 byte hash</li> </ul> </li> </ul> <p>Note: The radix-64 encoding in bcrypt uses the table\u00a0<code>./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code>,\u00a0which is different than\u00a0RFC 4648 Base64\u00a0encoding.</p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/BCryptPasswordEncoder/#see_also","title":"See Also","text":"<ul> <li>SCryptPasswordEncoder</li> <li>Definition Of PasswordEncoder</li> <li>Example With BCryptPasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/BCryptPasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/","title":"CORS - Cross Origin Resource Sharing","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/#what_is_the_cors","title":"What Is The CORS?","text":"<ul> <li><code>CORS - Cross Origin Resource Sharing</code> is a protocol that enables scripts running on a browser client to interact with resources from a different origin.</li> <li>For example, if an UI app wishes to make an API call running on a different domain, it would be blocked from doing so by default due to the <code>CORS</code>. So <code>CORS</code> is not a security issue/attack but the default protection provided by Web Browser to stop sharing the data/communication between different origins.</li> <li><code>Other origins</code> mean the URL being accessed differs from the location that the JavaScript is running from by having:<ul> <li>A different schema (HTTP or HTTPS)</li> <li>A different domain</li> <li>A different port</li> </ul> </li> </ul> <ul> <li>However, when a server has been configured correctly to allow cross-origin resource sharing, some special headers will be included. Their presence can be used to determine that a request supports CORS. Web browsers can use these headers to determine whether a request should continue or fail.</li> <li>First the browser sends a pre-flight request to the backend server to determine whether it supports CORS or not. The server can then respond to the pre-flight request with a collection of headers.</li> </ul> Header Discription Example Access-Control-Allow-Origin Defines which origins may have access to the resource. <code>\"*\"</code> represent any origin <code>Access-Control-Allow-Origin: *</code> Access-Control-Allow-Methods Indicates the allowed HTTP methods for cross-origin requests Access-Control-Allow-Methods: GET, POST, PUT Access-Control-Allow-Headers response header is used in response to a\u00a0preflight request which includes the\u00a0<code>Access-Control-Request-Headers</code>\u00a0to indicate which HTTP headers can be used during the actual request. <code>\"*\"</code> represent any origin <code>Access-Control-Allow-Headers: *</code> Access-Control-Allow-Credentials Indicates whether or not the response to the request can be exposed when the credentials flag is true. Access-Control-Allow-Credentials: true Access-Control-Max-Age Defines the expiration time (second) of the result of the cached preflight request Access-Control-Max-Age: 600 (10 minutes)","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/#cors_configuration_in_spring_security","title":"CORS Configuration In Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/#configure_global_cors","title":"Configure Global CORS","text":"<ul> <li>Base on the current implementation of spring security example that implemented in Custom Authentication Provider. So now, we will continue to add CORS configuration for our spring security application.</li> <li>Full source code here</li> <li>So let's add the <code>corsConfigurationSource</code> bean in the class <code>ProjectSecurityConfig</code> as below.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.custom.cors.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.cors()\n                .and().authorizeRequests()\n                .antMatchers(\"/v1/user\").authenticated()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>So firstly we will create the <code>CorsConfiguration</code> and set some parameters as the table below.</li> </ul> Method Corresponding Header Example Value setAllowedHeaders() <code>Access-Control-Allow-Headers</code> <code>*</code> setAllowedOriginPatterns() <code>Access-Control-Allow-Origin</code> <code>*</code> setAllowedMethods() <code>Access-Control-Allow-Methods</code> <code>*</code> setAllowCredentials() <code>Access-Control-Allow-Credentials</code> true <ul> <li>Then we will create <code>corsConfigurationSource</code> bean by creating <code>UrlBasedCorsConfigurationSource</code> and set the <code>CorsConfiguration</code> with the path pattern that we want to apply. In this example we will apply this <code>CorsConfiguration</code> for all path, so we will use <code>registerCorsConfiguration()</code> method with <code>/**</code>.</li> <li>If you just define the bean for CORS configuration, so it will not work, you have to edit the method in the  <code>configure()</code> by adding the method <code>cors()...</code> to apply your new CORS configuration in Spring Security.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/#testing","title":"Testing","text":"<ul> <li>Now, let's create a simple html file which contain a javascript to call api of our spring security application and this html will be served by another http web server.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;script&gt;\n        get();\n        async function get() {\n            try {\n                const res = await fetch('http://localhost:8080/v1/contact',\n                    {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept': 'application/json'\n                        }\n                    });\n                const json = await res.json();\n                console.log(json);\n            } catch (err) {\n                console.info('err', err);\n            }\n        } \n    &lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <ul> <li>Then if you are using python on your machine, then use the command below to start a simple http web server. By default it will run at port <code>8000</code>.</li> </ul> <pre><code>python3 -m http.server\n</code></pre> <ul> <li>Now, we will try starting our spring security application without CORS configuration first, so we will remove the CORS configuration as below. Then start the application, it will run at port <code>8080</code>.</li> </ul> ProjectSecurityConfig.java<pre><code>//...........\n\n    protected void configure(HttpSecurity http) throws Exception {\n                http.authorizeRequests()\n                                .antMatchers(\"/v1/user\").authenticated()\n                                .antMatchers(\"/v1/accounts/**\").authenticated()\n                                .antMatchers(\"/v1/balance\").authenticated()\n                                .antMatchers(\"/v1/loan\").authenticated()\n                                .antMatchers(\"/v1/card\").authenticated()\n                                .antMatchers(\"/v1/contact\").permitAll()\n                                .antMatchers(\"/v1/notice\").permitAll()\n                                .and().formLogin()\n                                .and().httpBasic();\n        }\n\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n            UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n            CorsConfiguration corsConfiguration = new CorsConfiguration();\n            corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n            corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n            corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n            corsConfiguration.setAllowCredentials(true);\n            source.registerCorsConfiguration(\"/**\", corsConfiguration);\n            return source;\n    }\n\n//...........\n</code></pre> <ul> <li>Now, go to the browser with address <code>http://localhost:8000</code> then open network tool and console  on your browser, you will see the error as below.</li> </ul> <pre><code>Access to fetch at 'http://localhost:8080/v1/contact' from origin\n'http://localhost:8000' has been blocked by CORS policy: Response to preflight \nrequest doesn't pass access control check: No 'Access-Control-Allow-Origin' header \nis present on the requested resource. If an opaque response serves your needs, set \nthe request's mode to 'no-cors' to fetch the resource with CORS disabled.\n</code></pre> <ul> <li>Then, if you look into the response of the preflight request, you will see there are no headers for CORS.</li> </ul> <pre><code>HTTP/1.1 403\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nTransfer-Encoding: chunked\nDate: Sun, 26 Jun 2022 09:20:51 GMT\nKeep-Alive: timeout=60\nConnection: keep-alive\n</code></pre> <ul> <li>So, it means that when the browser execute a script to call to another domain (http://localhost:8080) and the server of this domain has not been configured to response some required headers of CORS in the preflight request so the browser has blocked this request by default CORS policy.</li> <li>Now, let's go back to our spring security application and apply the CORS configuration and start the spring security application again.</li> </ul> ProjectSecurityConfig.java<pre><code>//...........\n\n    protected void configure(HttpSecurity http) throws Exception {\n        http.cors()\n                .and().authorizeRequests()\n                .antMatchers(\"/v1/user\").authenticated()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n//...........\n</code></pre> <ul> <li>Now, let's refresh <code>http://localhost:8000</code> on your browser, you will see the error has been disappear and you can call the api successfully.</li> <li>Then, if you look into the response headers from spring security application in the preflight request, you will see there are some headers of CORS configuration.</li> </ul> <pre><code>HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nAccess-Control-Allow-Origin: http://localhost:8000\nAccess-Control-Allow-Methods: GET\nAccess-Control-Allow-Headers: content-type\nAccess-Control-Allow-Credentials: true\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Length: 0\nDate: Sun, 26 Jun 2022 09:06:16 GMT\nKeep-Alive: timeout=60\nConnection: keep-alive\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/#see_also","title":"See Also","text":"<ul> <li>Web Browser</li> <li>Custom Authentication Provider</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CORS%20-%20Cross%20Origin%20Resource%20Sharing/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Full source code here</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/","title":"CSRF - Cross-Site Request Forgery","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/#what_is_the_csrf","title":"What Is The CSRF?","text":"<ul> <li>Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they\u2019re currently authenticated. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker\u2019s choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application.</li> <li>Consider there are two websites, a victim is using the wedsite <code>abc.com</code> and the attacker's website is <code>xyz.com</code>. Also assume that the victim is logged in and his session is being maintained by Cookie. The attacker will:<ul> <li>Assume that the attacker knows the api for changing password of <code>abc.com</code> website with a POST request which contains the new password as a parameter.</li> <li>Then the attacker will place the request with change password in the HTML code on his website <code>xyz.com</code>. So that, It will imitate a legal request to <code>abc.com</code> (for example, a form with method as post and a hidden input field that contains the new password).</li> <li>So the attacker will make sure that the form is submitted by either using \"autosubmit\" when the HTML page of <code>xyz.com</code> is loaded or luring the victim to click on a submit button.</li> <li>When the victim visits <code>xyz.com</code> and that form is submitted, the victim's Web Browser makes a request to <code>abc.com</code> for a password change. Also the browser appends the session cookie automatically with the request. The server treats it as a genuine request and reset the victim's password to the attacker's supplied value. This way the victim's account gets taken over by the attacker.</li> </ul> </li> <li>There are many proposed way to implement CSRF protection on server side, among which the use of <code>CSRF tokens</code> is most popular. <code>A CSRF token</code> is a string that is tied to a user's Session but is not submitted automatically. </li> <li>For details, the server will generate a <code>CSRF token</code> and put in the response cookie for user's browser, so when the user on the <code>abc.com</code> makes a request to the server, the token will be added into the request header by <code>abc.com</code> and the server will check this token is valid or not to continue. Then if the user loads the <code>xyz.com</code> or click the submit button on <code>xyz.com</code> the request will also go to the server, however there is no the <code>CSRF token</code> in the request header because the browser is only add the session cookie automatically into the request header so the server will check this request and there is no <code>CSRF token</code> and the request will be rejected. If the attacker try to add the <code>CSRF token</code> header into the request so there is no way for him to know what is the valid token value that the user is using on <code>abc.com</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/#csrf_in_spring_security","title":"CSRF In Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/#disable_default_csrf_protection","title":"Disable Default CSRF Protection","text":"<ul> <li>By default, any web application or web framework will stop the communication if someone is using POST, PUT and DELETE Http methods which will potentially alter the data using causative issue.</li> <li>So, if you start your spring security application and try calling apis with POST, PUT and DELETE methods, you would see the error code 403 although you put the correct credentials for calling those apis.</li> </ul> <ul> <li>In case your spring boot application is running in the internal network behind firewalls and the outside hackers can not access your links. Then you can simply disable CSRF inside your spring security framework.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.custom.csrf.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf().disable()\n                .cors()\n                .and().authorizeRequests()\n                .antMatchers(\"/v1/user\").authenticated()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>We can use <code>http.csrf().disable()</code> to disable default CSRF in spring security.</li> <li>Now, let's start your spring security application and call POST api again, you should see the 200 status as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/#generate_csrf_token","title":"Generate CSRF Token","text":"<ul> <li>As discussed above, using <code>CSRF tokens</code> is most popular way that we can protect our users from CSRF attacks, so we will configure our spring security application to generate a <code>CSRF tokens</code> which will be added into the response cookies.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.custom.csrf.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().authorizeRequests()\n                .antMatchers(\"/v1/user\").authenticated()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>If you look into the <code>configure()</code> method, you can see we will firstly configure ignoring CSRF protection for specific apis by <code>http.csrf().ignoringAntMatchers(&lt;path pattern&gt;)</code> so we can use POST, PUT and DELETE methods with <code>CSRF token</code> for those apis.</li> <li>Then to generate <code>CSRF token</code> and put it in the response cookies we will use <code>.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</code> method. So our spring security application will generate a <code>CSRF token</code> string and put it into a cookie with <code>HttpOnly</code> is <code>false</code>. The <code>HttpOnly: false</code> means that the FE side can use script to access and get the value of the cookie, if the <code>HttpOnly: true</code> the FE side can't use script to access and get value of the cookie, if the developer try to use script to get this cookie value, he will be received an empty string by default. However, the browser in some case, can still send the value of cookie to the server although the cookie with parameter <code>HttpOnly: true</code>. This is the reason why you can see the session cookie with <code>HttpOnly: true</code> but you still see it is appended in the request to server, this is the feature of the browser.</li> <li>Go back to the <code>CSRF token</code>, we have the  <code>HttpOnly: false</code> so it means the FE side have to use script to collect the <code>CSRF token</code> cookie and add it's value into request's header, this is not the session cookie so the browser will not do it automatically for you.</li> <li>Now, let's start your spring security application and call the post api again, you will received the status 200 and one more cookie with name <code>XSRF-TOKEN</code>, so it is the <code>CSRF token</code> cookie.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/#see_also","title":"See Also","text":"<ul> <li>Cookie</li> <li>Session</li> <li>Web Browser</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/CSRF%20-%20Cross-Site%20Request%20Forgery/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Stackoverflow</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/","title":"Client Credentials Client Server","text":"<ul> <li>In the Client Credentials Resource Server, we learned how to config Spring Boot Resource Server with Keycloak  authorization server for <code>Client Credentials Grant Type</code> using <code>Token Signature</code>\u00a0Resource Server and we used Postman as the a client to get access token and use it to call to the Spring Boot resource server manually.</li> <li>In this section, we will continue to configure a Spring Boot client server which will connect to Keycloak authorization server to get token and call to Resource server automatically when the user call to client server to get the data.</li> <li>If you haven't know about <code>Token Signature</code> Resource Server, you can view this post: OAUTH2 Resource Server Token Validation.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#prepare","title":"Prepare","text":"<ul> <li>So firstly, we need to overview the simple diagram that we are going to do as in the image below.</li> </ul> <ul> <li>So as you can see, when the user use <code>Postman</code> to call to the Spring Boot Client application then it will automatically call to the Keycloak authorization server with the client credentials to get the access token and then call to the Spring Boot Resource Server application to get the data and return to the Postman.</li> <li>For setting up Keycloak authorization server please view Keycloak Setup with Client Credentials Grant Type.</li> <li>For setting up Spring Boot Resource server with Keycloak please view Client Credentials Resource Server.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#understand_oauth2_client_dependencies","title":"Understand OAuth2 Client Dependencies","text":"<ul> <li>Before going the implementation details, we should take a look through the core interfaces/classes of the <code>spring-security-oauth2-client</code> dependencies which we will use in the Spring Boot service to create Spring Boot client server with Keycloak. Then later, we will know what are we configuring and why do we need to configure them.</li> <li>The dependency for Spring Boot service will look like as below:</li> </ul> pom.xml<pre><code>.....\n\n&lt;!-- Spring Boot oauth2 client --&gt;\n&lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-oauth2-client&lt;/artifactId&gt;\n        &lt;version&gt;5.6.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n.....\n</code></pre> <ul> <li>So in the <code>spring-security-oauth2-client</code> dependencies there are 6 main interfaces/classes.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#clientregistration","title":"ClientRegistration","text":"<ul> <li><code>ClientRegistration</code>\u00a0is a representation of a client registered with an OAuth 2.0 or OpenID Connect 1.0 Provider.</li> <li>A client registration holds information, such as client id, client secret, authorization grant type, redirect URI, scope(s), authorization URI, token URI, and other details.</li> <li><code>ClientRegistration</code>\u00a0and its properties are defined as follows:</li> </ul> ClientRegistration.java<pre><code>public final class ClientRegistration {\n    private String registrationId;  \n    private String clientId;    \n    private String clientSecret;    \n    private ClientAuthenticationMethod clientAuthenticationMethod;  \n    private AuthorizationGrantType authorizationGrantType;  \n    private String redirectUri; \n    private Set&lt;String&gt; scopes; \n    private ProviderDetails providerDetails;\n    private String clientName;  \n\n    public class ProviderDetails {\n        private String authorizationUri;    \n        private String tokenUri;    \n        private UserInfoEndpoint userInfoEndpoint;\n        private String jwkSetUri;   \n        private String issuerUri;   \n        private Map&lt;String, Object&gt; configurationMetadata;  \n\n        public class UserInfoEndpoint {\n            private String uri; \n            private AuthenticationMethod authenticationMethod;  \n            private String userNameAttributeName;   \n\n        }\n    }\n}\n</code></pre> Configuration Properties Descriptions registrationId The ID that uniquely identifies the ClientRegistration. Ex: keycloak, okta .etc.. clientId The client identifier. clientSecret The client secret. clientAuthenticationMethod The method used to authenticate the Client with the Provider. The supported values are basic, post and none (public clients). authorizationGrantType The OAuth 2.0 Authorization Framework defines four Authorization Grant types. The supported values are authorization_code, client_credentials and password. redirectUri The client\u2019s registered redirect URI that the Authorization Server redirects the end-user\u2019s user-agent to after the end-user has authenticated and authorized access to the client. scopes The scope(s) requested by the client during the Authorization Request flow, such as openid, email, or profile. clientName A descriptive name used for the client. The name may be used in certain scenarios, such as when displaying the name of the client in the auto-generated login page. authorizationUri The Authorization Endpoint URI for the Authorization Server. tokenUri The Token Endpoint URI for the Authorization Server. jwkSetUri The URI used to retrieve the JSON Web Key (JWK) Set from the Authorization Server, which contains the cryptographic key(s) used to verify the JSON Web Signature (JWS) of the ID Token and optionally the UserInfo Response. issuerUri Returns the issuer identifier uri for the OpenID Connect 1.0 provider or the OAuth 2.0 Authorization Server. configurationMetadata The OpenID Provider Configuration Information. This information will only be available if the Spring Boot 2.x property spring.security.oauth2.client.provider.{{providerId}}.issuerUri is configured. (userInfoEndpoint)uri The UserInfo Endpoint URI used to access the claims/attributes of the authenticated end-user. (userInfoEndpoint)authenticationMethod The authentication method used when sending the access token to the UserInfo Endpoint. The supported values are header, form and query. userNameAttributeName The name of the attribute returned in the UserInfo Response that references the Name or Identifier of the end-user. <ul> <li>Client registrations are typically loaded automatically from an\u00a0<code>application.yml/application.properties</code>\u00a0file. Spring auto-configuration looks for properties with the schema\u00a0<code>spring.security.oauth2.client.registration.[registrationId]</code>\u00a0and creates a\u00a0<code>ClientRegistration</code>\u00a0instance within a\u00a0<code>ClientRegistrationRepository.</code> See the example configuration in <code>application.yml</code>  below.</li> </ul> application.yml<pre><code>spring:\n  security:\n    oauth2:\n      client:\n        registration:\n          keycloak: # &lt;--- It's your custom client. I am using keycloak\n            client-id: myclient\n            client-secret: 80YlNd6qwz84hnisibF8QHVAtjUkVj0p\n            authorization-grant-type: client_credentials\n            scope: # your scopes\n              - openid\n              - address\n              - email\n              - profile\n</code></pre> <ul> <li>Below is the table that contains all configuration that we can apply in to <code>application.yml/application.properties</code> for <code>ClientRegistration</code> configurations.</li> </ul> Spring Boot 2.x ClientRegistration spring.security.oauth2.client.registration.[registrationId] registrationId spring.security.oauth2.client.registration.[registrationId].client-id clientId spring.security.oauth2.client.registration.[registrationId].client-secret clientSecret spring.security.oauth2.client.registration.[registrationId].client-authentication-method clientAuthenticationMethod spring.security.oauth2.client.registration.[registrationId].authorization-grant-type authorizationGrantType spring.security.oauth2.client.registration.[registrationId].redirect-uri redirectUri spring.security.oauth2.client.registration.[registrationId].scope scopes spring.security.oauth2.client.registration.[registrationId].client-name clientName spring.security.oauth2.client.provider.[providerId].authorization-uri providerDetails.authorizationUri spring.security.oauth2.client.provider.[providerId].token-uri providerDetails.tokenUri spring.security.oauth2.client.provider.[providerId].jwk-set-uri providerDetails.jwkSetUri spring.security.oauth2.client.provider.[providerId].issuer-uri providerDetails.issuerUri spring.security.oauth2.client.provider.[providerId].user-info-uri providerDetails.userInfoEndpoint.uri spring.security.oauth2.client.provider.[providerId].user-info-authentication-method providerDetails.userInfoEndpoint.authenticationMethod spring.security.oauth2.client.provider.[providerId].user-name-attribute providerDetails.userInfoEndpoint.userNameAttributeName","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#clientregistrationrepository","title":"ClientRegistrationRepository","text":"<ul> <li>The\u00a0<code>ClientRegistrationRepository</code>\u00a0serves as a repository for OAuth 2.0 / OpenID Connect 1.0\u00a0<code>ClientRegistration</code>(s). <code>ClientRegistrationRepository</code> is a container class that holds\u00a0<code>ClientRegistrations</code>. <p>Client registration information is ultimately stored and owned by the associated Authorization Server. This repository provides the ability to retrieve a sub-set of the primary client registration information, which is stored with the Authorization Server.</p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#oauth2authorizedclient","title":"OAuth2AuthorizedClient","text":"<ul> <li><code>OAuth2AuthorizedClient</code>: Represents an authorized client. This is a composed class that contains a client registration but adds authentication information. Take a look at the code excerpt below. You\u2019ll see that the\u00a0<code>OAuth2AuthorizedClient</code>\u00a0adds three properties composed on top of the client registration: a principal name, an access token, and a refresh token.</li> </ul> OAuth2AuthorizedClient.java<pre><code>public class OAuth2AuthorizedClient implements Serializable {\n    ...\n    private final ClientRegistration clientRegistration;\n    private final String principalName;\n    private final OAuth2AccessToken accessToken;\n    private final OAuth2RefreshToken refreshToken;\n    ...\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#oauth2authorizedclientrepository","title":"OAuth2AuthorizedClientRepository","text":"<ul> <li><code>OAuth2AuthorizedClientRepository</code>: is a container class that holds and persists authorized clients between requests. The default implementation,\u00a0<code>InMemoryOAuth2AuthorizedClientService</code>, simply stores the clients in memory.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#oauth2authorizedclientmanager","title":"OAuth2AuthorizedClientManager","text":"<ul> <li><code>OAuth2AuthorizedClientManager</code>: is the manager class that contains the logic to handle the authorization flow. Most importantly, it authorizes and re-authorizes OAuth 2.0 clients using an\u00a0<code>OAuth2AuthorizedClientProvider</code>. It also delegates persistence of the authorized clients and calls success or failure handlers when client authorization succeeds or fails.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#oauth2authorizedclientprovider","title":"OAuth2AuthorizedClientProvider","text":"<ul> <li><code>OAuth2AuthorizedClientProvider</code>: represents an OAuth 2.0 provider and handles the actual request logic for different grant types and OAuth 2.0 providers. They can be auto-configured based on property values (<code>spring.security.oauth2.client.provider.[provider name]</code>). In the case of this tutorial, we will be using Keycloak as our provider, so we\u2019ll see properties with the prefix\u00a0<code>spring.security.oauth2.client.provider.keycloak.</code>\u00a0that are auto-configuring an associated\u00a0<code>OAuth2AuthorizedClientProvider</code>.</li> </ul> application.yml<pre><code>spring:  \n  security:  \n    oauth2:  \n      client:  \n        registration:  \n          keycloak: # &lt;--- It's your custom client. I am using keycloak  \n            client-id: myclient  \n            client-secret: 80YlNd6qwz84hnisibF8QHVAtjUkVj0p  \n            authorization-grant-type: client_credentials  \n            scope: # your scopes  \n              - openid  \n              - address  \n              - email  \n              - profile  \n        provider:  \n          keycloak: # &lt;--- Here Registered my custom provider  \n            authorization-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/auth  \n            token-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/token\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#client_server_setup","title":"Client Server Setup","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#dependencies","title":"Dependencies","text":"<ul> <li>Now, let's create a Spring Boot application and add some dependencies as below.</li> </ul> pom.xml<pre><code> &lt;dependencyManagement&gt;\n            &lt;dependencies&gt;\n                    &lt;dependency&gt;\n                            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                            &lt;version&gt;2021.0.0&lt;/version&gt;\n                            &lt;type&gt;pom&lt;/type&gt;\n                            &lt;scope&gt;import&lt;/scope&gt;\n                    &lt;/dependency&gt;\n            &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;dependencies&gt;\n            &lt;!--spring boot starter--&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n                    &lt;version&gt;2.6.3&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;!--lombok--&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;version&gt;1.18.22&lt;/version&gt;\n                    &lt;scope&gt;provided&lt;/scope&gt;\n            &lt;/dependency&gt;\n\n            &lt;!--Spring cloud openfeign--&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n                    &lt;version&gt;3.1.0&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n                    &lt;version&gt;3.1.0&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;!-- Spring security --&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n                    &lt;version&gt;2.6.1&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;!-- Spring Boot oauth2 client --&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-security-oauth2-client&lt;/artifactId&gt;\n                    &lt;version&gt;5.6.0&lt;/version&gt;\n            &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n</code></pre> <ul> <li>To make Spring Boot application become client server we need to apply <code>spring-boot-starter-security</code> and <code>spring-security-oauth2-client</code> dependencies and also <code>spring-cloud-starter-openfeign</code> to make the call with the access token from the client to the resource server, this is the service to service communication.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#oauth2_client_configuration","title":"OAuth2 Client Configuration","text":"<ul> <li>Firstly, let's create the class <code>OAuth2Config.java</code> to create the bean <code>OAuth2AuthorizedClientManager</code> bean as below:</li> </ul> OAuth2Config.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor.config.oauth2.v1;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n\n@Configuration\npublic class OAuth2Config {\n\n    @Bean\n    public OAuth2AuthorizedClientManager authorizedClientManager(\n            final ClientRegistrationRepository clientRegistrationRepository,\n            final OAuth2AuthorizedClientService authorizedClientService) {\n        return new AuthorizedClientServiceOAuth2AuthorizedClientManager(\n                clientRegistrationRepository, authorizedClientService);\n    }\n\n}\n</code></pre> <ul> <li> <p>We will create the <code>OAuth2AuthorizedClientManager</code> bean by new <code>AuthorizedClientServiceOAuth2AuthorizedClientManager</code> and we need to inject 2 beans which are <code>ClientRegistrationRepository</code> and <code>OAuth2AuthorizedClientService</code>.</p> </li> <li> <p>Next, let's create a service class <code>OAuth2ClientService.java</code> with a method for getting the access token from the Keycloak authorization server as below.</p> </li> </ul> OAuth2ClientService.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor.config.oauth2.v1;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\nimport org.springframework.stereotype.Service;\n\nimport static java.util.Objects.isNull;\n\n\n@Slf4j\n@Service\npublic class OAuth2ClientService {\n\n    private final OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager;\n\n    private static final Authentication ANONYMOUS_USER_AUTHENTICATION =\n            new AnonymousAuthenticationToken(\"key\", \"anonymous\", AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\"));\n\n\n    @Autowired\n    public OAuth2ClientService(OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager) {\n        this.oAuth2AuthorizedClientManager = oAuth2AuthorizedClientManager;\n    }\n\n    public String getAccessToken(String clientRegistrationId) {\n        OAuth2AuthorizeRequest oAuth2AuthorizeRequest = OAuth2AuthorizeRequest\n                .withClientRegistrationId(clientRegistrationId)\n                .principal(ANONYMOUS_USER_AUTHENTICATION)\n                .build();\n        OAuth2AuthorizedClient client = oAuth2AuthorizedClientManager.authorize(oAuth2AuthorizeRequest);\n        if (isNull(client)) {\n            throw new IllegalStateException(\"client credentials flow on \" + clientRegistrationId + \" failed, client is null\");\n        }\n        return \"Bearer \" + client.getAccessToken().getTokenValue();\n    }\n\n}\n</code></pre> <ul> <li> <p>So, in this <code>OAuth2ClientService</code>, we will use the <code>OAuth2AuthorizedClientManager</code> to authorize with the Keycloak authorization server with an <code>OAuth2AuthorizeRequest</code> and receive the <code>OAuth2AuthorizedClient</code>, then from this <code>OAuth2AuthorizedClient</code> we can extract the access token.</p> </li> <li> <p>Finally, we also need to put some configurations in the <code>application.yml</code> for the spring security oauth2 client.</p> </li> </ul> application.yml<pre><code>server:\n  port: 8086\n\nspring:\n  security:\n    oauth2:\n      url: http://localhost:8085\n      client:\n        registration:\n          keycloak: # &lt;--- It's your custom client. I am using keycloak\n            client-id: myclient\n            client-secret: 80YlNd6qwz84hnisibF8QHVAtjUkVj0p\n            authorization-grant-type: client_credentials\n            scope: openid, address, email, profile # your scopes\n        provider:\n          keycloak: # &lt;--- Here Registered my custom provider\n            authorization-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/auth\n            token-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/token\n\n\nlogging:\n  level:\n    com.springboot.cloud.openfeign.client.credentials.interceptor.api: DEBUG\n\nfeign:\n  client:\n    config:\n      default:\n        loggerLevel: full\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#feign_configuration","title":"Feign Configuration","text":"<ul> <li>Next, to use the access token and call to the Spring Boot Resource Server for every request, we need to create a feign interceptor config as below.</li> </ul> OAuth2FeignConfig.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor.config.oauth2.v1;\n\n\nimport feign.RequestInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.http.HttpHeaders;\n\npublic class OAuth2FeignConfig {\n\n    public static final String CLIENT_REGISTRATION_ID = \"keycloak\";\n\n    private final OAuth2ClientService oAuth2ClientService;\n\n    public OAuth2FeignConfig(OAuth2ClientService oAuth2ClientService) {\n        this.oAuth2ClientService = oAuth2ClientService;\n    }\n\n    @Bean\n    public RequestInterceptor requestInterceptor() {\n        return requestTemplate -&gt; {\n            requestTemplate.header(HttpHeaders.AUTHORIZATION, this.oAuth2ClientService.getAccessToken(CLIENT_REGISTRATION_ID));\n        };\n    }\n\n}\n</code></pre> <ul> <li> <p>So in this config we will use the <code>OAuth2ClientService</code> to get the access token and put it into the <code>Authorization</code> header of requests to Spring Boot Resource Server.</p> </li> <li> <p>Next, we also need to create an adapter interface name\u00a0<code>SpringOAuth2ResourceClient</code>\u00a0to configure FeignClient with target api as below:</p> </li> </ul> SpringOAuth2ResourceClient.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor.api;\n\nimport com.springboot.cloud.openfeign.client.credentials.interceptor.config.oauth2.v1.OAuth2FeignConfig;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = \"springOAuth2ResourceClient\", url = \"${spring.security.oauth2.url}\", configuration = {OAuth2FeignConfig.class})\npublic interface SpringOAuth2ResourceClient {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/card\")\n    String getCardDetail();\n\n}\n</code></pre> <ul> <li> <p>We will put the FeignClient configuration class that we created in the step above into this FeignClient by using param <code>configuration</code>. So now, every request of the api <code>/v1/card</code> to the Spring Boot resource server will have the access token which is fetched from the Keycloak authorization server.</p> </li> <li> <p>Finally, in the main class, we just need to put annotation <code>@EnableFeignClients</code> as below.</p> </li> </ul> OpenFeignClientCredentialsInterceptorApplication.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients\n@SpringBootApplication\npublic class OpenFeignClientCredentialsInterceptorApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(OpenFeignClientCredentialsInterceptorApplication.class, args);\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#controller","title":"Controller","text":"<ul> <li>Let's create a simple controller in the Spring Boot client application which will be called by the Postman as below.</li> </ul> OpenFeignInterceptorController.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor.controller;\n\nimport com.springboot.cloud.openfeign.client.credentials.interceptor.api.SpringOAuth2ResourceClient;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OpenFeignInterceptorController {\n\n    @Autowired\n    private SpringOAuth2ResourceClient springOAuth2ResourceClient;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/oauth2/auth/interceptor/card\")\n    public ResponseEntity&lt;String&gt; getCardMessage() {\n        return ResponseEntity.ok(this.springOAuth2ResourceClient.getCardDetail());\n    }\n\n}\n</code></pre> <ul> <li>So when this api is called by postman then it will use the <code>SpringOAuth2ResourceClient</code> to call to the Spring Boot resource server to get the data.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#basic_security_configuration","title":"Basic Security Configuration","text":"<ul> <li>We will increase the security for our Spring Boot client service a little bit. In detail, to call the api in the controller of the step above, the user from Postman must put a basic authentication with username and password.</li> <li>So let's create a <code>SecurityConfig.java</code> class and put some basic authentication configuration as below.</li> </ul> SecurityConfig.java<pre><code>package com.springboot.cloud.openfeign.client.credentials.interceptor.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and().cors().configurationSource(this.corsConfigurationSource())\n                .and().csrf().disable()\n                .authorizeRequests()\n                .anyRequest()\n                .authenticated()\n                .and().formLogin()\n                .and().httpBasic();\n        return http.build();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        corsConfiguration.setExposedHeaders(Collections.singletonList(\"AUTHORIZATION\"));\n        corsConfiguration.setMaxAge(3600L);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public UserDetailsService inMemoryUserDetailsService() {\n        UserDetails demo = User.withUsername(\"user\").password(\"12345\").roles(\"POSTMAN\").build();\n        return new InMemoryUserDetailsManager(demo);\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n}\n</code></pre> <p>Note: The properties under\u00a0<code>spring.security.user</code>\u00a0won't work because Spring Boot will back off creating the\u00a0<code>UserDetailService</code>\u00a0bean. So, we will have to define the\u00a0<code>UserDetailsService</code>\u00a0bean by our self.</p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#testing","title":"Testing","text":"<ul> <li>Now, let's use Postman to call to api <code>/v1/oauth2/auth/interceptor/card</code> of our Spring Boot Client server, then you can receive the data of Sping Boot Resource server successfully as below.</li> </ul> <ul> <li>If you look into the our Spring Boot Client service then you can see the access token is added into the Authorization header of the request to the Spring Boot Resource server as below.</li> </ul> <ul> <li>It means, our implementation is successful.</li> <li>Now, if you make more calls from Postman, you can see the access token has not changed, so our Spring Boot Client server had reused the access token because it is still not expired.</li> </ul> <ul> <li>Then if you wait a little bit and make a call from Postman again, then you can see in the log we will have a new access token. So it means the old access token has been expired so our Spring Boot Client server will call to Keycloak authorization server to get the access token again.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#see_also","title":"See Also","text":"<ul> <li>OAUTH2 Flow</li> <li>Keycloak Setup</li> <li>Client Credentials Resource Server</li> <li>OAUTH2 Resource Server Token Validation</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Client%20Server/#references","title":"References","text":"<ul> <li>FullSourceCode</li> <li>baeldung</li> <li>stackoverflow</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/","title":"Client Credentials Resource Server","text":"<ul> <li>In the Keycloak Setup, we learned how to set up <code>Keycloak</code> authorization server for <code>Client Credentials Grant Type</code> . Now, in this section, we will continue to configure a  Spring Boot <code>Token Signature</code> Resource Server to verify in coming token with <code>Keycloak</code> before accessing the data.</li> <li>If you haven't know about <code>Token Signature</code> Resource Server, you can view this post: OAUTH2 Resource Server Token Validation.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#prepare","title":"Prepare","text":"<ul> <li>So firstly, we need to overview the simple diagram that we are going to do as in the image below.</li> </ul> <ul> <li>So as you can see, when the <code>Resource Server</code> is starting up, then it will call to the Keycloak authorization server to get the public key. </li> <li>Then if the <code>Client</code> calls to Keycloak authorization server to get the access token, the the Keycloak authorization server will generate and use it's private key to sign the access token and send back to client.</li> <li>Then when the client call to <code>Resource Server</code> with the access token. So the <code>Resource Server</code> will use the public key which is downloaded from Keycloak authorization server in the start up time to verify the token and check it is valid of not to make sure the token is no tampered.</li> </ul> <p>As the authorization server makes available new public keys, Spring Security will automatically rotate the public keys used to validate access tokens.</p> <ul> <li> <p>So with the <code>Token Signature</code> Resource Server. Whenever the\u00a0<code>Client</code>\u00a0sends the same access token to the\u00a0<code>Resource Server</code>, it\u00a0doesn't have to make a call to\u00a0<code>Auth Server</code>\u00a0or doesn't have to look into the database. It can simply check the signature or hash value of the token generated with the encryption algorithm that it maintains to understand the token is valid or not.</p> </li> <li> <p>For setting up Keycloak authorization server please view Keycloak Setup with Client Credentials Grant Type.</p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#resource_server_setup","title":"Resource Server Setup","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#dependencies","title":"Dependencies","text":"<ul> <li>Now, let's create a Spring Boot application and add some dependencies as below.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n        &lt;!-- lombok --&gt;\n        &lt;dependency&gt;\n                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                &lt;version&gt;1.18.22&lt;/version&gt;\n                &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot Starter --&gt;\n        &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n                &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring security --&gt;\n        &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n                &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring Boot oauth2 resource server --&gt;\n        &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;/artifactId&gt;\n                &lt;version&gt;2.6.3&lt;/version&gt;\n        &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>To make Spring Boot application become resource service we need to apply <code>spring-boot-starter-security</code> and <code>spring-boot-starter-oauth2-resource-server</code> dependencies.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#controller","title":"Controller","text":"<ul> <li>Let's create a simple controller for the Spring Boot Resource server which will be protected and need the access token which is issued from Keycloak authorization server to access.</li> </ul> CardController.java<pre><code>package com.springboot.sprint.security.oauth.client.credentials.grant.type.controller;  \n\nimport org.springframework.http.ResponseEntity;  \nimport org.springframework.web.bind.annotation.RequestMapping;  \nimport org.springframework.web.bind.annotation.RequestMethod;  \nimport org.springframework.web.bind.annotation.RestController;  \n\n@RestController  \npublic class CardController {  \n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/card\")  \n    public ResponseEntity&lt;String&gt; getCardDetail() {  \n        return ResponseEntity.ok(\"This is your card details\");  \n    }  \n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#configuration","title":"Configuration","text":"<ul> <li>Firstly, we need to create a <code>KeycloakRoleConverter.java</code> as below.</li> </ul> KeycloakRoleConverter.java<pre><code>package com.springboot.sprint.security.oauth.client.credentials.grant.type.config;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class KeycloakRoleConverter implements Converter&lt;Jwt, Collection&lt;GrantedAuthority&gt;&gt; {\n\n    @Override\n    public Collection&lt;GrantedAuthority&gt; convert(Jwt jwt) {\n        Map&lt;String, Object&gt; realmAccess = (Map&lt;String, Object&gt;) jwt.getClaims().get(\"realm_access\");\n        if (Objects.isNull(realmAccess) || realmAccess.isEmpty()) {\n            return new ArrayList&lt;&gt;();\n        }\n\n        Collection&lt;GrantedAuthority&gt; returnValue = ((List&lt;String&gt;) realmAccess.get(\"roles\"))\n                .stream()\n                .map(\"ROLE_\"::concat) // prefix to map to a Spring Security \"ROLE\"\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toList());\n        return returnValue;\n    }\n}\n</code></pre> <ul> <li>This converter class is used to extract the <code>roles</code> from the jwt access token. The roles field is a part of the claim\u00a0<code>realm_access</code>.  Each role will be converted to a\u00a0<code>SimpleGrantedAuthority</code>\u00a0object.</li> <li>Let's take a look into the access token that we got in the Keycloak Setup, then we can see where the roles field of access token is stored.</li> </ul> <ul> <li>Now, let's continue to create the <code>ProjectSecurityConfig.java</code> class to configure the security for <code>Resource Server</code> apis as below.</li> </ul> <pre><code>package com.springboot.sprint.security.oauth.client.credentials.grant.type.config;  \n\nimport com.springboot.sprint.security.oauth.client.credentials.grant.type.constant.SecurityConstant;  \nimport org.springframework.context.annotation.Bean;  \nimport org.springframework.context.annotation.Configuration;  \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;  \nimport org.springframework.security.config.http.SessionCreationPolicy;  \nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;  \nimport org.springframework.security.crypto.password.PasswordEncoder;  \nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;  \nimport org.springframework.security.web.SecurityFilterChain;  \nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;  \nimport org.springframework.web.cors.CorsConfiguration;  \nimport org.springframework.web.cors.CorsConfigurationSource;  \nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;  \n\nimport java.util.Collections;  \n\n@Configuration  \npublic class ProjectSecurityConfig {  \n\n    @Bean  \n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {  \n        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();  \n        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(new KeycloakRoleConverter());  \n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)  \n                .and().cors().configurationSource(this.corsConfigurationSource())  \n                .and().csrf().ignoringAntMatchers(\"/v1/user\")  \n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  \n                .and().authorizeRequests()  \n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")  \n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")  \n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")  \n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")  \n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")  \n                .antMatchers(\"/v1/contact\").permitAll()  \n                .antMatchers(\"/v1/notice\").permitAll()  \n                .and().oauth2ResourceServer()  \n                .jwt().jwtAuthenticationConverter(jwtAuthenticationConverter);  \n        return http.build();  \n    }  \n\n    @Bean  \n    protected CorsConfigurationSource corsConfigurationSource() {  \n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();  \n        CorsConfiguration corsConfiguration = new CorsConfiguration();  \n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));  \n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));  \n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));  \n        corsConfiguration.setAllowCredentials(true);  \n        corsConfiguration.setExposedHeaders(Collections.singletonList(SecurityConstant.AUTHORIZATION_HEADER));  \n        corsConfiguration.setMaxAge(3600L);  \n        source.registerCorsConfiguration(\"/**\", corsConfiguration);  \n        return source;  \n    }  \n\n    @Bean  \n    public PasswordEncoder passwordEncoder() {  \n        return new BCryptPasswordEncoder();  \n    }  \n\n}\n</code></pre> <ul> <li>So we will need to create a <code>PasswordEncoder</code> with <code>BCryptPasswordEncoder</code> because the  access token is a jwt. </li> <li>Next, Then for the api security configuration, we will use <code>hasRole</code> and <code>hasAnyRole</code> with the value is the role that we got from the access token (USER, ADMIN).</li> <li>Finally the most important to make Spring Boot Resource Server security configuration works is the config below:</li> </ul> <p><code>.oauth2ResourceServer().jwt().jwtAuthenticationConverter(jwtAuthenticationConverter);</code></p> <ul> <li> <p>In which we will config the jwt authentication conveter for the <code>oauth2ResourceServer</code> with the <code>KeycloakRoleConverter</code> that we created on the step above. So base on this configuration the our Resource Server can read the jwt access token and extract the roles correctly and compare with the roles that we configured in the <code>ProjectSecurityConfig.java</code>.</p> </li> <li> <p>Finally, we need to put the configuration as below into the <code>application.yml</code> to make the Resource Server can know where to download the public key from the authorization server when the Resource Server starts up.</p> </li> </ul> application.yml<pre><code>server:  \n  port: 8085  \n\nspring:  \n  security:  \n    oauth2:  \n      resourceserver:  \n        jwt:  \n          jwk-set-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/certs  \n\nlogging:  \n  level:  \n    org.springframework.security.web.FilterChainProxy: DEBUG\n</code></pre> <ul> <li>The Url for downloading the public key from the authorization server can be found in the  <code>discovery endpoint</code> of Keycloak with the parttern as below:</li> </ul> <pre><code>{{KEY_CLOAK_DOMAIN}}/auth/realms/{{REALM_ID}}/protocol/openid-connect/certs  \n\nExample: \n\nhttp://localhost:8080/auth/realms/myrealm/protocol/openid-connect/certs  \n</code></pre> <p></p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#testing","title":"Testing","text":"<ul> <li>Let's start the Keycloak authorization server first then start the Spring Boot Resource Server application later.</li> </ul> <p>If the authorization server is down when Resource Server queries it (given appropriate timeouts), then startup will fail.</p> <ul> <li>Then, we can start testing following steps below:</li> <li>Firstly, we need to use Postman to call to the Keycloak authorization server to get the access token with the information that we created in the Keycloak Setup Client Credentials Grant Type as in the image below.</li> </ul> <p></p> <ul> <li>Then we will try to call to the <code>/v1/card</code> api that we created from the beginning, then you should received a successful result as below.</li> </ul> <p></p> <ul> <li>Now, if you wait a little bit about 5 minutes, the token will be expired or you can change a single character in the access token and you call again you will get the 401 error.</li> </ul> <p></p> <ul> <li>Because the api <code>/v1/card</code> need the role <code>ADMIN</code> to access, so if we go to the Keycloak authorization server and unassign the role <code>ADMIN</code> out of the <code>myclient</code> and get access token and try again, then you will get the 403 error as below.</li> </ul> <p></p> <p></p> <p></p> <ul> <li>It means the <code>v1/card</code> api require the access token with <code>ADMIN</code> role, but the access token only has <code>USER</code> role, so we will get 403 error code.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#see_also","title":"See Also","text":"<ul> <li>OAUTH2 Resource Server Token Validation</li> <li>Keycloak Setup</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Client%20Credentials%20Resource%20Server/#references","title":"References","text":"<ul> <li>FullSourceCode</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/","title":"Code Grant Type With Github","text":"<p>In this section we will try to make an example for using OAUTH2 in Spring Security application. To be simple we will use Github as an <code>Authorization Server</code>, our Spring Security application will be the <code>Resource Server</code>. </p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#register_client_details_with_github","title":"Register Client Details With Github","text":"<ul> <li>So, the first thing you have to do is creating a Github account following this link.</li> <li>Now, if you already have a Github account, so you can register a client details and use it's OAUTH2 authorization server following steps below.</li> <li>Step 1: You can click on your account at the top right corner and choose <code>Setting</code>.</li> </ul> <ul> <li>Step 2: You continue to scroll down and choose <code>Developer Setting</code></li> </ul> <ul> <li>Step 3: You continue to choose <code>OAuth App</code> and choose <code>New OAuth App</code></li> </ul> <ul> <li>Step 4: Now you have to input some required information as in the image below</li> </ul> <ul> <li>In which the <code>Homepage Url</code> is the homepage of your application url. The <code>Authorization Callback URL</code> is the url that you want the Github authorization server to call back after the authorization is successful.</li> <li>After input required information, then click button <code>Register Application</code> to finish registering.</li> <li>Step 6: After successfully register, you will see there is a <code>Client Id</code>. Then you have to click on the button <code>Generate a new client secret</code> to get the <code>Client Secret</code> as the image below,</li> </ul> <ul> <li>Now, you have the <code>Client Id</code> and <code>Client Secret</code> so you can copy them and you can use them for the Spring Security configuration later.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#configure_spring_security_with_github_oauth2_server","title":"Configure Spring Security With Github OAUTH2 Server","text":"<ul> <li>Let create a new project and import these dependencies into <code>pom.xml</code> as below for <code>Spring Boot</code>, <code>Spring Security</code> and <code>Oauth2 Client</code>.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.3&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.3&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-oauth2-client&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.3&lt;/version&gt;  \n&lt;/dependency&gt;\n</code></pre> <ul> <li>Then create the main class as below to enable Spring Boot application.</li> </ul> SpringSecurityOauthGithubApplication.java<pre><code>package com.springboot.security.oauth.github;  \n\n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \n\n@SpringBootApplication  \npublic class SpringSecurityOauthGithubApplication {  \n\n    public static void main(String[] args) {  \n        SpringApplication.run(SpringSecurityOauthGithubApplication.class, args);  \n    }  \n\n}\n</code></pre> <ul> <li>Next, Let's create a simple controller as below for mocking the resource that the client want to access. So this api just simply response a text, but we will print out the Authentication details from Github Auth Server for checking. </li> </ul> ResourceController.java<pre><code>package com.springboot.security.oauth.github.controller;  \n\nimport org.springframework.http.ResponseEntity;  \nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;  \nimport org.springframework.stereotype.Controller;  \nimport org.springframework.web.bind.annotation.GetMapping;  \n\n@Controller  \npublic class ResourceController {  \n\n    @GetMapping(\"/\")  \n    public ResponseEntity&lt;String&gt; getResource(OAuth2AuthenticationToken oAuth2AuthenticationToken) {  \n        System.out.printf(String.valueOf(oAuth2AuthenticationToken.getPrincipal()));  \n        return ResponseEntity.ok(\"Hello! this is the secret resources!\");  \n    }  \n\n}\n</code></pre> <ul> <li>Then, in the <code>application.yml</code>, we will add the <code>clientId</code> and <code>clientSecret</code> that we got from the register client details with Github as below.</li> </ul> application.yml<pre><code>github:  \n  oauth2:  \n    client:  \n      id: c224cc2eb828c3ba811c  \n      secret: 7515f35ceb176a13911efa24f85238ff2d8e1d4c\n</code></pre> <ul> <li>Now, we will move to configuration steps. Basically, there are three ways for you to config OAUTH2 in Spring Security and base on the business use cases, you will chose the most appropriate one.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#configure_oauth2_using_commonoauth2provider","title":"Configure OAUTH2 Using CommonOAuth2Provider","text":"<ul> <li><code>CommonOAuth2Provider</code> is a provider class from <code>spring-boot-starter-oauth2-client</code>. This class provides some default configuration parameters for common Authorization Server such as <code>Facebook</code>, <code>Google</code>, <code>Github</code> and <code>OKTA</code>.</li> <li>Because we using <code>Github</code> in this example, so using <code>CommonOAuth2Provider</code> will boot up our configuration very fast and we also can add our custom configuration easily.</li> <li>Firstly, we need to create a configuration class with the content as below.</li> </ul> SpringSecurityOauthGithubConfig.java<pre><code>package com.springboot.security.oauth.github.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.oauth2.client.CommonOAuth2Provider;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SpringSecurityOauthGithubConfig {\n\n    @Value(\"${github.oauth2.client.id}\")\n    private String clientId;\n\n    @Value(\"${github.oauth2.client.secret}\")\n    private String clientSecret;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        return http.authorizeRequests().anyRequest().authenticated().and().oauth2Login().and().build();\n    }\n\n    @Bean\n    public ClientRegistrationRepository clientRepository() {\n        ClientRegistration clientRegistration = this.clientRegistration();\n        return new InMemoryClientRegistrationRepository(clientRegistration);\n    }\n\n    private ClientRegistration clientRegistration() {\n        return CommonOAuth2Provider.GITHUB\n                .getBuilder(\"github\")\n                .clientId(this.clientId)\n                .clientSecret(this.clientSecret)\n                .build();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, firstly, we will configure the <code>filterChain bean</code>  for protecting all apis and every request come into our Spring Security application has been validated and authenticated. The authentication will be supported by <code>OAUTH2</code> authorization framework by adding <code>.oauth2Login()</code>.</li> <li>To using <code>OAUTH</code>, we must register a client with a provider. The client registration information may than be used for configuring a <code>ClientRegistration</code> using <code>CommonOAuth2Provider</code>. Because we are using <code>Github</code> so we will use builder with <code>github</code> value and add some more information such as <code>clientId</code> and <code>clientSecret</code> which are got from the <code>application.yml</code>.</li> <li>After building a <code>ClientRegistration</code> object, we will use it to create <code>ClientRegistrationRepository</code> bean which will be used by the <code>ApplicationContext</code> or configured via <code>oauth2Login().clientRegistrationRepository(..)</code>.</li> <li>In this example, we are defining a bean <code>ClientRegistrationRepository</code> for <code>ApplicationContext</code> using <code>new InMemoryClientRegistrationRepository(clientRegistration)</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#configure_oauth2_manually","title":"Configure OAUTH2 Manually","text":"<ul> <li>In special cases, The authorization server is belong to an organization or a company and it's not supported in the  <code>CommonOAuth2Provider</code>, so you have to configure <code>OAUTH2</code> manually. </li> <li>Let's create a configuration class as below.</li> </ul> SpringSecurityOauthGithubConfig2.java<pre><code>package com.springboot.security.oauth.github.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.ClientAuthenticationMethod;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SpringSecurityOauthGithubConfig2 {\n\n    @Value(\"${github.oauth2.client.id}\")\n    private String clientId;\n\n    @Value(\"${github.oauth2.client.secret}\")\n    private String clientSecret;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        return http.authorizeRequests().anyRequest().authenticated().and().oauth2Login().and().build();\n    }\n\n    @Bean\n    public ClientRegistrationRepository clientRepository() {\n        ClientRegistration clientRegistration = this.clientRegistration();\n        return new InMemoryClientRegistrationRepository(clientRegistration);\n    }\n\n    private ClientRegistration clientRegistration() {\n        return ClientRegistration.withRegistrationId(\"github\")\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n                .clientId(this.clientId)\n                .clientSecret(this.clientSecret)\n                .scope(\"read:user\")\n                .authorizationUri(\"https://github.com/login/oauth/authorize\")\n                .tokenUri(\"https://github.com/login/oauth/access_token\")\n                .userInfoUri(\"https://api.github.com/user\")\n                .userNameAttributeName(\"id\")\n                .clientName(\"GitHub\")\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .registrationId(\"{baseUrl}/{action}/oauth2/code/{registrationId}\")\n                .build();\n    }\n\n}\n</code></pre> <ul> <li>Like the configuration in <code>CommonOAuth2Provider</code>, firstly, we will configure the <code>filterChain bean</code>  for protecting all apis and every request come into our Spring Security application has been validated and authenticated. The authentication will be supported by <code>OAUTH2</code> authorization framework by adding <code>.oauth2Login()</code>.</li> <li>Then we have to build the <code>ClientRegistration</code> object manually by full fill information like.</li> </ul> <ul> <li>registrationId</li> <li>clientId</li> <li>clientSecret</li> <li>scope</li> <li>authorizationUri</li> <li>tokenUri</li> <li>userInfoUri</li> <li>userNameAttributeName</li> <li>clientName</li> <li>authorizationGrantType</li> <li>redirectUri</li> </ul> <ul> <li>After building a <code>ClientRegistration</code> object, we will use it to create <code>ClientRegistrationRepository</code> bean which will be used by the <code>ApplicationContext</code> or configured via <code>oauth2Login().clientRegistrationRepository(..)</code>.</li> <li>In this example, we are defining a bean <code>ClientRegistrationRepository</code> for <code>ApplicationContext</code> using <code>new InMemoryClientRegistrationRepository(clientRegistration)</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#configure_oauth2_using_auto_configuration","title":"Configure OAUTH2 Using Auto Configuration","text":"<ul> <li>In case you are using <code>CommonOAuth2Provider</code> with common Authorization Server such as <code>Facebook</code>, <code>Google</code>, <code>Github</code> and <code>OKTA</code>. However, you don't have many custom information that you want to input, you just need to add <code>ClientId</code> and <code>ClientSecret</code>. So you can use auto configuration to configure <code>OAUTH2</code> quickly.</li> <li>Let's create a configuration class as below.</li> </ul> SpringSecurityOauthGithubConfig3.java<pre><code>package com.springboot.security.oauth.github.config;  \n\nimport org.springframework.context.annotation.Bean;  \nimport org.springframework.context.annotation.Configuration;  \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;  \nimport org.springframework.security.web.SecurityFilterChain;  \n\n@Configuration  \npublic class SpringSecurityOauthGithubConfig3 {  \n\n    @Bean  \n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {  \n        return http.authorizeRequests().anyRequest().authenticated().and().oauth2Login().and().build();  \n    }  \n\n}\n</code></pre> <ul> <li>As you can see, firstly, we only need to configure the <code>filterChain bean</code>  for protecting all apis and every request come into our Spring Security application has been validated and authenticated. The authentication will be supported by <code>OAUTH2</code> authorization framework by adding <code>.oauth2Login()</code>.</li> <li>Then in the <code>application.yml</code>, you will put the configuration as below</li> </ul> application.yml<pre><code>spring:\n  security:\n    oauth2:\n      client:\n        registration:\n          github:\n            client-id: c224cc2eb828c3ba811c\n            client-secret: 7515f35ceb176a13911efa24f85238ff2d8e1d4c\n</code></pre> <ul> <li>The configuration will have the format </li> </ul> <ul> <li><code>spring.security.oauth2.client.registration.[registrationId]</code></li> </ul> <ul> <li>In which the <code>registrationId</code> can have values like <code>github</code>, <code>facebook</code>, <code>google</code> and <code>okta</code> which are supported by <code>spring-boot-starter-oauth2-client</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#testing","title":"Testing","text":"<ul> <li>Now, let's start your Spring Security application. Then open the web browser and go to <code>http://localhost:8080</code>. Then you will be redirect to the Github login page to prove your identity by input the username and password of your Github account.</li> </ul> <ul> <li>Then after you input your Github account credentials and your Github account is valid, you will be redirected to your Spring Security application and you will see the response content of the api that you created before.</li> </ul> <ul> <li>If you look into the log of your Spring Security application, you will see there are many information about the <code>OAuth2AuthenticationToken</code> which is received from the <code>Github</code> Authorization Server.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#see_also","title":"See Also","text":"<ul> <li>OAUTH2</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Code%20Grant%20Type%20With%20Github/#references","title":"References","text":"<ul> <li>Github</li> <li>doc.spring.io</li> <li>Spring Security Zero To Master</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/","title":"Configure Authorities","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#supported_methods","title":"Supported Methods","text":"<ul> <li>In Spring Security the <code>authorities</code> of the user can be configured and validated using the following methods:</li> </ul> Method Description hasAuthority() Accepts a single authority for which the endpoint will be configured and user will be validated against the single authority mentioned. Only users having the same authority configured can call the endpoint. hasAnyAuthority() Accepts multiple authorities for which the endpoint will be configured and user will be validated against the authorities mentioned. Only users having any of the authority configured can call the endpoint. access() Using Spring Expression Language (SpEL) it provides you unlimited possibilities for configuring authorities which are not possible which the above methods. We can use operators like OR, AND inside access() method.","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#example_configurations","title":"Example Configurations","text":"<ul> <li>So base on the spring security application that we used in the CSRF - Cross-Site Request Forgery configuration, we will continue configuring authority. </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#database_tables","title":"Database Tables","text":"<ul> <li>We will create the <code>authorities</code> table which will contain <code>authorities</code> name such as <code>READ</code>, <code>WRITE</code>, <code>DELETE</code>.</li> <li>Next, we will extend the <code>customers</code> table which will link to the <code>authorities</code> table. So every customer will have one or many authorities.</li> <li>User the SQL statement below to create <code>authorities</code> table.</li> </ul> <pre><code>-- authorities definition\n\nCREATE TABLE `authorities` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `authority` varchar(255) NOT NULL,\n  `customer_id` int DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `customer_id` (`customer_id`),\n  CONSTRAINT `authorities_customer_constraint` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n</code></pre> <ul> <li>Now for the current customer with email <code>han.do@example.com</code> in the <code>customers</code> table we will use the SQL statements below to set some <code>authorities</code> such as <code>READ</code>, <code>WRITE</code> and <code>DELETE</code>. So this customer will have 3 authorities.</li> </ul> <pre><code>INSERT INTO worldbank.authorities (authority, customer_id) VALUES('READ', 2);\nINSERT INTO worldbank.authorities (authority, customer_id) VALUES('WRITE', 2);\nINSERT INTO worldbank.authorities (authority, customer_id) VALUES('DELETE', 2);\n</code></pre> <ul> <li>Next, we will use the SQL statements below to create a new customer and only set one authority <code>READ</code> for it.  </li> </ul> <pre><code>INSERT INTO worldbank.customers\n(id, email, password, `role`)\nVALUES(3, 'john.wick@example.com', '$2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO', 'user');\n\nINSERT INTO worldbank.authorities (authority, customer_id) VALUES('READ', 3);\n</code></pre> <ul> <li>So, after all our table will have data as below:</li> <li><code>customers table</code>:</li> </ul> id email password role 1 duc.nguyen@example.com 12345 admin 2 han.do@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO admin 3 john.wick@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO user <ul> <li><code>authorities table</code>:</li> </ul> id authority customer_id 6 READ 2 7 WRITE 2 8 DELETE 2 9 READ 3","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#entity","title":"Entity","text":"<ul> <li>So after updating database, we will also extend our <code>CustomerEntity</code> with <code>AuthorityEntity</code>. So in <code>CustomerEntity</code> we will have a set of <code>AuthorityEntity</code> with <code>@OneToMany</code> relationship.</li> </ul> CustomerEntity.java<pre><code>package com.spring.security.spring.security.configure.authorities.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"customers\")\n@Getter\n@Setter\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    private String email;\n    private String password;\n    private String role;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.EAGER)\n    private Set&lt;AuthorityEntity&gt; authorities;\n\n}\n</code></pre> <ul> <li>Then in we create the <code>AuthorityEntity</code> class as below:</li> </ul> AuthorityEntity.java<pre><code>package com.spring.security.spring.security.configure.authorities.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"authorities\")\n@Getter\n@Setter\npublic class AuthorityEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    private String authority;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#edit_authentication_provider","title":"Edit Authentication Provider","text":"<ul> <li>Now, we are changing our database and Entities which are used for <code>Authentication</code>. In the Custom Authentication Provider, we create the list of <code>GrantedAuthority</code> as empty mean mean there are no <code>Authority</code>. Thus, we will update this code by getting the set of <code>Authorities</code> from the database through <code>CustomerEntity</code> and map them to <code>List&lt;GrantedAuthority&gt;</code>.</li> <li>The <code>CustomerAuthenticationProvider</code> will be changed as below:</li> </ul> CustomerAuthenticationProvider.java<pre><code>package com.spring.security.spring.security.configure.authorities.config;\n\nimport com.spring.security.spring.security.configure.authorities.entity.AuthorityEntity;\nimport com.spring.security.spring.security.configure.authorities.entity.CustomerEntity;\nimport com.spring.security.spring.security.configure.authorities.repository.CustomerRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\n@Component\npublic class CustomerAuthenticationProvider implements AuthenticationProvider {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerAuthenticationProvider.class);\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        LOGGER.info(\"CustomerAuthenticationProvider is triggered\");\n        String username = authentication.getName();\n        String password = authentication.getCredentials().toString();\n        List&lt;CustomerEntity&gt; customerEntities = this.customerRepository.findByEmail(username);\n        if (customerEntities.size() &gt; 0) {\n            if (passwordEncoder.matches(password, customerEntities.get(0).getPassword())) {\n                return new UsernamePasswordAuthenticationToken(username, password,\n                        this.getGrantedAuthorities(customerEntities.get(0).getAuthorities()));\n            } else {\n                throw new BadCredentialsException(\"Invalid Password\");\n            }\n        }\n        throw new BadCredentialsException(\"No user registered with this details\");\n    }\n\n    private List&lt;GrantedAuthority&gt; getGrantedAuthorities(Set&lt;AuthorityEntity&gt; authorityEntities) {\n        List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();\n        authorityEntities.forEach(a -&gt; authorities.add(new SimpleGrantedAuthority(a.getAuthority())));\n        return authorities;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; authentication) {\n        return authentication.equals(UsernamePasswordAuthenticationToken.class);\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#authorization_configuration","title":"Authorization Configuration","text":"<ul> <li>In the <code>ProjectSecurityConfig</code>, we will update <code>configure()</code> method for applying <code>Authorities</code>. We will use <code>hasAnyAuthority()</code> or <code>hasAuthority()</code>  method after <code>antMatchers()</code> methods. In details, every <code>antMatchers()</code>(api path pattern) will need  <code>Authorities</code> which is matched as defined in <code>hasAuthority()</code> or <code>hasAnyAuthority()</code> to access.</li> <li>Our configurations will look like below:</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.configure.authorities.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyAuthority(\"READ\", \"WRITE\", \"DELETE\")\n                .antMatchers(\"/v1/accounts/**\").hasAnyAuthority(\"WRITE\", \"DELETE\")\n                .antMatchers(\"/v1/balance\").hasAuthority(\"READ\")\n                .antMatchers(\"/v1/loan\").hasAuthority(\"WRITE\")\n                .antMatchers(\"/v1/card\").hasAuthority(\"DELETE\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>So now, only customer user with <code>DELETE</code> authority can access the <code>/v1/card</code> api, then for <code>/v1/user</code> any customer user which has one in 3 authorities <code>READ</code>, <code>WRITE</code>, <code>DELETE</code> can access this api.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#testing","title":"Testing","text":"<ul> <li>So, let's start our spring security application and call api <code>v1/loan</code> for testing, so this api will need the user with <code>READ</code> authorization to access, so the user with email <code>han.do@example.com</code> can access this api because it has 3 authorities <code>READ</code>, <code>WRITE</code> and <code>DELETE</code> in database. The user with email <code>john.wick@example.com</code> can not access this api because it has only <code>READ</code> authority.</li> <li>Using email <code>han.do@example.com</code> we can access <code>v1/loan</code> successfully.</li> </ul> <ul> <li>Then using <code>john.wick@example.com</code> we will get the error code 403 forbidden.</li> </ul> <ul> <li>Now, let's try to call api <code>/v1/user</code>, we expect that 2 users above can access this api because this api requires one of 3 authorities, <code>READ</code>, <code>WRITE</code> and <code>DELETE</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#see_also","title":"See Also","text":"<ul> <li>Spring Security With Authorization</li> <li>Configure Roles</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Authorities/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/","title":"Configure Roles","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#supported_methods","title":"Supported Methods","text":"<ul> <li>In Spring Security the <code>roles</code> of the user can be configured and validated using the following methods.</li> </ul> Method Description hasRole() Accepts a single role name for which the endpoint will be configured and the user will be validated against the single role mentioned. Only users having the same role configured can call the endpoint hasAnyRole() Accepts multiple roles for which the endpoint will be configured and user will be validated against the roles mentioned. Only users having any of the role configured can call the endpoint access() Using Spring Expression Language (SpEL) it provides you unlimited possibilities for configuring roles which are not possible with the above methods. We can use operators like OR, AND inside access() method <ul> <li><code>ROLE_prefix</code> only to be used while configuring the role in database. But when we configure the <code>roles</code>, we do it only by its name.</li> <li><code>access()</code> method can be used not only for configuring <code>authorization</code> based on authority or role but also with any special requirements. For example, we can confgiure access based on the country of the user or current time/date.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#example_configuration","title":"Example Configuration","text":"<ul> <li>Base on the spring security application that we used in the  Authorities Configuration, we will continue configuring role.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#database_table","title":"Database Table","text":"<ul> <li>We will create the <code>roles</code> table which will contain <code>roles</code> name such as <code>ROLE_USER</code>, <code>ROLE_ADMIN</code>.</li> <li>Next, we will extend the <code>customers</code> table which will link to the <code>authorities</code> table. So every customer will have one or many authorities.</li> <li>User the SQL statement below to create <code>authorities</code> table.</li> </ul> <pre><code>-- roles definition\n\nCREATE TABLE `roles` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `role` varchar(255) DEFAULT NULL,\n  `customer_id` int DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FKsxov1oh17vqdkhuxdiwpspo8i` (`customer_id`),\n  CONSTRAINT `FKsxov1oh17vqdkhuxdiwpspo8i` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n</code></pre> <ul> <li>Now for the current customer with email <code>han.do@example.com</code> in the <code>customers</code> table we will use the SQL statements below to set some <code>authorities</code> such as <code>ROLE_USER</code> and <code>ROLE_ADMIN</code>. So this customer will have 2 roles.</li> </ul> <pre><code>INSERT INTO worldbank.roles (role, customer_id) VALUES('ROLE_USER', 2);\nINSERT INTO worldbank.roles (role, customer_id) VALUES('ROLE_ADMIN', 2);\n</code></pre> <ul> <li>Next, we will use the SQL statements below to insert  a <code>ROLE_USER</code> for the customer with email <code>john.wick@example.com</code>.</li> </ul> <pre><code>INSERT INTO worldbank.roles (role, customer_id) VALUES('ROLE_USER', 3);\n</code></pre> <ul> <li>So, after all our table will have data as below:</li> <li><code>customers table</code></li> </ul> id email password role 1 duc.nguyen@example.com 12345 admin 2 han.do@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO admin 3 john.wick@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO user <ul> <li><code>roles table</code></li> </ul> id role customer_id 1 ROLE_ADMIN 2 3 ROLE_USER 2 2 ROLE_USER 3","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#entity","title":"Entity","text":"<ul> <li>So after updating database, we will also extend our <code>CustomerEntity</code> with <code>RoleEntity</code>. So in <code>CustomerEntity</code> we will have a set of <code>RoleEntity</code> with <code>@OneToMany</code> relationship.</li> </ul> CustomerEntity.java<pre><code>package com.spring.security.spring.security.configure.roles.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"customers\")\n@Getter\n@Setter\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    private String email;\n    private String password;\n    private String role;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.EAGER)\n    private Set&lt;AuthorityEntity&gt; authorities;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.EAGER)\n    private Set&lt;RoleEntity&gt; roles;\n\n}\n</code></pre> <ul> <li>Then in we create the <code>RoleEntity</code> class as below:</li> </ul> RoleEntity.java<pre><code>package com.spring.security.spring.security.roles.authorities.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"roles\")\n@Getter\n@Setter\npublic class RoleEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n    private String role;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#edit_authentication_provider","title":"Edit Authentication Provider","text":"<ul> <li>In the Configure Authorities, we create the list of <code>GrantedAuthority</code> from <code>Authorities</code> which are loaded from <code>authorities</code> table in the database. Thus, we will update this code by getting the set of <code>Roles</code> from the table <code>roles</code> in database through <code>CustomerEntity</code> and map them to <code>List&lt;GrantedAuthority&gt;</code>.</li> <li>The <code>CustomerAuthenticationProvider</code> will be changed as below:</li> </ul> CustomerAuthenticationProvider.java<pre><code>package com.spring.security.spring.security.configure.roles.config;\n\nimport com.spring.security.spring.security.configure.authorities.entity.CustomerEntity;\nimport com.spring.security.spring.security.configure.authorities.entity.RoleEntity;\nimport com.spring.security.spring.security.configure.authorities.repository.CustomerRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\n@Component\npublic class CustomerAuthenticationProvider implements AuthenticationProvider {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerAuthenticationProvider.class);\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        LOGGER.info(\"CustomerAuthenticationProvider is triggered\");\n        String username = authentication.getName();\n        String password = authentication.getCredentials().toString();\n        List&lt;CustomerEntity&gt; customerEntities = this.customerRepository.findByEmail(username);\n        if (customerEntities.size() &gt; 0) {\n            if (passwordEncoder.matches(password, customerEntities.get(0).getPassword())) {\n                return new UsernamePasswordAuthenticationToken(username, password,\n                        this.getGrantedAuthorities(customerEntities.get(0).getRoles()));\n            } else {\n                throw new BadCredentialsException(\"Invalid Password\");\n            }\n        }\n        throw new BadCredentialsException(\"No user registered with this details\");\n    }\n\n    private List&lt;GrantedAuthority&gt; getGrantedAuthorities(Set&lt;RoleEntity&gt; roleEntities) {\n        List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();\n        roleEntities.forEach(a -&gt; authorities.add(new SimpleGrantedAuthority(a.getRole())));\n        return authorities;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; authentication) {\n        return authentication.equals(UsernamePasswordAuthenticationToken.class);\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#authorization_configuration","title":"Authorization Configuration","text":"<ul> <li>In the <code>ProjectSecurityConfig</code>, we will update <code>configure()</code> method for applying <code>Roles</code>. We will use <code>hasAnyRole()</code> or <code>hasRole()</code>  method after <code>antMatchers()</code> methods. In details, every <code>antMatchers()</code>(api path pattern) will need  <code>Roles</code> which is matched as defined in <code>hasRole()</code> or <code>hasAnyRole()</code> to access.</li> <li>Our configurations will look like below:</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.configure.roles.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")\n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")\n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")\n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>So now, only customer user with <code>ROLE_ADMIN</code> role can access the <code>/v1/loan</code> api, then for <code>/v1/user</code> any customer user which has one in 2 roles <code>ROLE_ADMIN</code>, <code>ROLE_USER</code>, can access this api.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#testing","title":"Testing","text":"<ul> <li>So, let's start our spring security application and call api <code>v1/loan</code> for testing, so this api will need the user with <code>ROLE_ADMIN</code> authorization to access, so the user with email <code>han.do@example.com</code> can access this api because it has 2 roles <code>ROLE_ADMIN</code> and <code>ROLE_USER</code> in database. The user with email <code>john.wick@example.com</code> can not access this api because it has only <code>ROLE_READ</code> role.</li> <li>Using email <code>han.do@example.com</code> we can access <code>v1/loan</code> successfully.</li> </ul> <ul> <li>Then using <code>john.wick@example.com</code> we will get the error code 403 forbidden.</li> </ul> <ul> <li>Now, let's try to call api <code>/v1/user</code>, we expect that 2 users above can access this api because this api requires one of 2 roles, <code>ROLE_ADMIN</code>, <code>ROLE_USER</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#see_also","title":"See Also","text":"<ul> <li>Spring Security With Authorization</li> <li>Configure Authorities</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Roles/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/","title":"Configure Users With JdbcUserDetailsManager","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#configure_users_with_jdbcuserdetailsmanager_1","title":"Configure Users With JdbcUserDetailsManager","text":"<ul> <li>As we learned in the Understanding User Management interfaces and Classes, so we will take an example for using <code>JdbcUserDetailsManager</code> to manage our users which are defined in the database.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#dependencies","title":"Dependencies","text":"<ul> <li>To do this example we will need to add some dependencies as below into <code>pom.xml</code></li> </ul> pom.xml<pre><code>...\n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.4&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.4&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.6&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;mysql&lt;/groupId&gt;  \n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  \n    &lt;version&gt;8.0.28&lt;/version&gt;  \n&lt;/dependency&gt;\n\n...\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#prepare_tables_in_database","title":"Prepare Tables In Database","text":"<ul> <li>Then in the database we will create 2 tables named <code>users</code> and <code>authorities</code> which are the same table names and attributes columns as put in queries of the class <code>JdbcUserDetailsManager</code> in spring security. Let's use the SQL scripts below to create tables and insert a sample user and authority.</li> </ul> <pre><code>CREATE TABLE users (\nid INT NOT NULL AUTO_INCREMENT,\nusername VARCHAR(255) NOT NULL,\npassword VARCHAR(255) NOT NULL,\nenabled INT NOT NULL,\nPRIMARY KEY (id));\n\nCREATE TABLE authorities (\nid INT NOT NULL AUTO_INCREMENT,\nusername VARCHAR(255) NOT NULL,\nauthority VARCHAR(255) NOT NULL,\nPRIMARY KEY (id));\n\nINSERT INTO worldbank.users\n(username, password, enabled)\nVALUES('duc', '12345', 1);\n\nINSERT INTO worldbank.authorities\n(username, authority)\nVALUES('duc', 'write');\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#configure_jdbcuserdetailsmanager","title":"Configure JdbcUserDetailsManager","text":"<ul> <li>Now, go back to the our spring boot application. We need to add the configuration for <code>JdbcUserDetailsManager</code>. See the code below</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.JdbcUserDetailsManager.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.JdbcUserDetailsManager;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService(DataSource dataSource) {\n        return new JdbcUserDetailsManager(dataSource);\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n}\n</code></pre> <ul> <li>We will create a bean <code>userDetailsService</code> which has the type of <code>JdbcUserDetailsManager</code>.</li> <li>Now, let add the datasource configuration in the <code>application.yml</code>. Then start the application up to test. application.yml<pre><code>#spring:\n#  security:\n#    user:\n#      name: user\n#      password: 12345\n\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/worldbank?useUnicode=true&amp;characterEncoding=UTF-8\n    username: root\n    password: password\n</code></pre></li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#testing","title":"Testing","text":"<ul> <li>You will see that we can call protected api successfully by using the username/password which is defined in the database.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#see_also","title":"See Also","text":"<ul> <li>Defining And Managing Users</li> <li>Understanding User Management interfaces and Classes</li> <li>Custom UserDetailsService Of Spring Security</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20JdbcUserDetailsManager/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryAuthentication/","title":"Configure Users With inMemoryAuthentication","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryAuthentication/#configure_users_using_inmemoryauthentication","title":"Configure Users Using inMemoryAuthentication","text":"<ul> <li>As we practiced in the Custom Basic Spring Security, now we want to manage multi username and password for our application so we have to customize our user details and user detail services and password coders.</li> <li>If we want to customize our user details and user detail services and password coders, we have to override another method provided by spring security framework under class <code>WebSecurityConfigurerAdapter</code>  with the same name <code>configure</code>. But the difference between the operation and the below is the input argument <code>AuthenticationManagerBuilder</code>. The upper one will accept extra security and the lower one will accept authentication manageable.</li> </ul> <ul> <li>So this is a method where if we want to customize user detail service and password encoders along with authentication providers. See the example below:</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.inmemoryauthentication.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication().withUser(\"admin\").password(\"12345\").authorities(\"admin\")\n                .and().withUser(\"user\").password(\"12345\").authorities(\"read\")\n                .and().passwordEncoder(NoOpPasswordEncoder.getInstance());\n    }\n}\n</code></pre> <ul> <li>As you can see, we are using <code>inMemoryAuthentication()</code> it mean users that we defined by this method will be stored inside memory of spring container which will be leveraged by spring security while performing authentication and authorization details.</li> <li>To create a user we use <code>withUser()</code> along with usename then <code>password()</code> along with password and use <code>authorities</code> along with authorities, then we use <code>and()</code> to end creating a user and prepare for configure user with password encoder step or we can create another user by repeating method as above. Finally we use <code>passwordEncoder()</code> to configure password encoder. In this case, we will use password encoder with plain text so it is the <code>NoOpPasswordEncoder.getInstance()</code>. We will learn more about kinds of <code>PasswordEncoder</code> later.</li> <li>Now, you can comment out the user that you defined in <code>application.yml</code> and start your service and try call to authenticated api with the credentials that you created in the configuration above for testing.</li> </ul> application.yml<pre><code>#spring:\n#  security:\n#    user:\n#      name: user\n#      password: 12345\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryAuthentication/#see_also","title":"See Also","text":"<ul> <li>Custom Basic Spring Security</li> <li>Configure Users With inMemoryUserDetailsManager</li> <li>Defining And Managing Users</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryAuthentication/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryUserDetailsManager/","title":"Configure Users With inMemoryUserDetailsManager","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryUserDetailsManager/#configure_users_with_inmemoryuserdetailsmanager_1","title":"Configure Users With inMemoryUserDetailsManager","text":"<ul> <li>As in Configure Users With inMemoryAuthentication, we knew how to create users by <code>inMemoryAuthentication</code>. Now, we will deep dive a little bit by creating users by <code>inMemoryUserDetailsManager</code> which by default provided by the spring security when we want to store user details inside memory of our application.</li> <li>By default we have <code>inMemoryUserDetailsManager</code> is an implementation of <code>UserDetailsManager</code> which extended from <code>UserDetailsService</code>.  So we have to ensure that we have to build the <code>UserDetails</code> that we want to use for our application.</li> </ul> UserDetailsService.java<pre><code>//  \n// Source code recreated from a .class file by IntelliJ IDEA  \n// (powered by FernFlower decompiler)  \n//  \n\npackage org.springframework.security.core.userdetails;  \n\npublic interface UserDetailsService {  \n    UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;  \n}\n</code></pre> UserDetailsManager.java<pre><code>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\npackage org.springframework.security.provisioning;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\n\npublic interface UserDetailsManager extends UserDetailsService {\n    void createUser(UserDetails user);\n\n    void updateUser(UserDetails user);\n\n    void deleteUser(String username);\n\n    void changePassword(String oldPassword, String newPassword);\n\n    boolean userExists(String username);\n}\n</code></pre> InMemoryUserDetailsManager.java<pre><code>public class InMemoryUserDetailsManager implements UserDetailsManager, UserDetailsPasswordService {\n\n    ...............\n\n}\n</code></pre> <ul> <li>So let's comment out the old configuration of <code>inMemoryAuthentication</code>  in Configure Users With inMemoryAuthentication and add new configuration as below</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.inMemoryUserDetailsManager.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        InMemoryUserDetailsManager userDetailsManager = new InMemoryUserDetailsManager();\n        UserDetails user1 = User.withUsername(\"admin\").password(\"12345\").authorities(\"admin\").build();\n        UserDetails user2 = User.withUsername(\"user\").password(\"12345\").authorities(\"admin\").build();\n        userDetailsManager.createUser(user1);\n        userDetailsManager.createUser(user2);\n        auth.userDetailsService(userDetailsManager);\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will create a new <code>InMemoryUserDetailsManager</code> then we create new <code>UserDetails</code> with username, password and authorities and set it into <code>InMemoryUserDetailsManager</code>. Finally, we set the <code>InMemoryUserDetailsManager</code> into <code>AuthenticationManagerBuilder</code>. It's mean we has just provided the custom <code>UserDetails Service</code> (InMemoryUserDetailsManager) for <code>AuthenticationManagerBuilder</code>.</li> <li>So the step for <code>UserDetails Service</code>  by <code>InMemoryUserDetailsManager</code> has done. Then we will need to configure the default <code>PasswordEncoder</code>. So we will create a bean for the <code>PasswordEncoder</code> as you can see in the code so the Spring Security will load it as the default <code>PasswordEncoder</code>.</li> <li>Now we have <code>InMemoryUserDetailsManager</code> and <code>PasswordEncoder</code> so, let's start the application and call api for checking. You should see the result as the image below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryUserDetailsManager/#see_also","title":"See Also","text":"<ul> <li>Configure Users With inMemoryAuthentication</li> <li>Defining And Managing Users</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Configure%20Users%20With%20inMemoryUserDetailsManager/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/","title":"Custom Authentication Provider","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/#custom_authentication_provider_example","title":"Custom Authentication Provider Example","text":"<ul> <li>In this section we will do an example with by create a custom  AuthenticationProvider implementation. So this example will base on the current implementation of spring security example that implemented in Example With BCryptPasswordEncoder.</li> <li>Full source code here</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/#configuration","title":"Configuration","text":"<ul> <li>So the configuration, we will not change anything from the Example With BCryptPasswordEncoder.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.custom.authenticationProvider.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/#create_custom_authentication_provider","title":"Create Custom Authentication Provider","text":"<ul> <li>So, let's create a class with name <code>CustomerAuthenticationProvider</code> which will implements the <code>AuthenticationProvider</code> interface and @Override 2 methods <code>authenticate()</code> and <code>supports()</code> as below:</li> </ul> CustomerAuthenticationProvider.java<pre><code>package com.spring.security.spring.security.custom.authenticationProvider.config;\n\nimport com.spring.security.spring.security.custom.authenticationProvider.entity.CustomerEntity;\nimport com.spring.security.spring.security.custom.authenticationProvider.repository.CustomerRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class CustomerAuthenticationProvider implements AuthenticationProvider {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerAuthenticationProvider.class);\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        LOGGER.info(\"CustomerAuthenticationProvider is triggered\");\n        String username = authentication.getName();\n        String password = authentication.getCredentials().toString();\n        List&lt;CustomerEntity&gt; customerEntities = this.customerRepository.findByEmail(username);\n        if (customerEntities.size() &gt; 0) {\n            if (passwordEncoder.matches(password, customerEntities.get(0).getPassword())) {\n                List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();\n                authorities.add(new SimpleGrantedAuthority(customerEntities.get(0).getRole()));\n                return new UsernamePasswordAuthenticationToken(username, password, authorities);\n            } else {\n                throw new BadCredentialsException(\"Invalid Password\");\n            }\n        }\n        throw new BadCredentialsException(\"No user registered with this details\");\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; authentication) {\n        return authentication.equals(UsernamePasswordAuthenticationToken.class);\n    }\n}\n</code></pre> <ul> <li>As we know about the Authentication Provider, it is a place where we will implement the business logic to validate the user and perform the authentication. </li> </ul> <ul> <li>So by default, the <code>AuthenticationProvider</code> will use <code>UserDetails</code> service for getting user information from the database and <code>PasswordEncoder</code> for password validation. But in this custom <code>AuthenticationProvider</code> we can implement our own logic and in this example we will not use the <code>UserDetails</code> to get user information instead we will use a repository to directly get the user information from database. See the method <code>authenticate()</code> above.</li> <li>Then if you look into the method <code>supports()</code> so you can see this provider is only support for authentication object type <code>UsernamePasswordAuthenticationToken</code>.</li> <li>Finally, you can try to put a log into the <code>CustomerAuthenticationProvider</code> and <code>BankUserDetailsService</code> class, to make sure when we run the application then the request will go to filter then it goes to  AuthenticationManager then the <code>AuthenticationManager</code> will loop providers and check the <code>supports</code>, then if true it will go to our  <code>CustomerAuthenticationProvider</code> and in this class we will get the user without calling the <code>BankUserDetailsService</code>. </li> </ul> BankUserDetailsService.java<pre><code>package com.spring.security.spring.security.custom.authenticationProvider.service;\n\nimport com.spring.security.spring.security.custom.authenticationProvider.entity.CustomerEntity;\nimport com.spring.security.spring.security.custom.authenticationProvider.model.SecurityCustomer;\nimport com.spring.security.spring.security.custom.authenticationProvider.repository.CustomerRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class BankUserDetailsService implements UserDetailsService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BankUserDetailsService.class);\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        LOGGER.info(\"BankUserDetailsService is triggered!\");\n        List&lt;CustomerEntity&gt; customerEntities = this.customerRepository.findByEmail(username);\n\n        if (customerEntities.isEmpty()) {\n            throw new UsernameNotFoundException(\"There are no user with email: \" + username);\n        }\n        return new SecurityCustomer(customerEntities.get(0));\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/#testing","title":"Testing","text":"<ul> <li>Now, let's start your application and try to execute the request, you should see the results as images below.</li> </ul> <ul> <li>We can call api successfully. Then if you check the log you can see there is only one log CustomerAuthenticationProvider is triggered. So it mean our custom <code>AuthenticationProvider</code> works correctly and the <code>BankUserDetailsService</code> is not triggered</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/#see_also","title":"See Also","text":"<ul> <li>Authentication Provider</li> <li>Authentication Manager</li> <li>Example With BCryptPasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Authentication%20Provider/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/","title":"Custom Basic Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#default_spring_security_configuration","title":"Default Spring Security Configuration","text":"<ul> <li>In Spring Security Library the class <code>WebSecurityConfigurerAdapter</code> will contain all default configuration of spring security. This is the most important class in the Spring Security Framework that we have to extend it for any custom spring security configuration.</li> <li>If you look inside <code>WebSecurityConfigurerAdapter</code>  class, you will see there is an method <code>configure(HttpSecurity http)</code> as below:</li> </ul> ProjectSecurityConfig.java<pre><code>    protected void configure(HttpSecurity http) throws Exception {\n            this.logger.debug(\"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).\");\n            http.authorizeRequests((requests) -&gt; {\n                    ((AuthorizedUrl)requests.anyRequest()).authenticated(); //any come to application will be authenticated\n            }); \n            http.formLogin();\n            http.httpBasic();\n    }\n</code></pre> <ul> <li>This method contain the default security configuration of Spring Security Framework. As you can see the configure <code>requests.anyRequest()).authenticated()</code> means  that <code>any request</code> that come to your application has to be <code>authenticated</code>. <code>Authenticated</code> means that requests have to be <code>validated</code> by <code>credentials</code>. </li> <li>Then you and see <code>http.formLogin()</code>  this configure indicate that all requests that <code>come to the application from browser</code>  can be authenticated by using <code>form login</code>.</li> <li>Then the configuration <code>http.httpBasic()</code> indicate that all requests that come to your application by back-end Apis, like other Spring Boot services that using Rest template or Postman.</li> <li>In conclusion, the default security will secure all the request to all apis of your application.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#custom_default_spring_security_configure","title":"Custom Default Spring Security Configure","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#prepare","title":"Prepare","text":"<p>To do the example with custom default spring security framework, we need to create 6 rest controllers which contain sample apis as below:</p> Apis Description Need Security <code>/v1/contact</code> This api should accept the details from the Contact Us page in the UI and save to the DB. No <code>/v1/notice</code> This api should send the notice details from the DB to the <code>NOTOCES</code> page in the UI. No <code>/v1/account/{username}</code> This api should send the account details for the logged in use from the DB to the UI. Yes <code>/v1/balance</code> This api should send the balance and transaction details of the logged in use from the DB to the UI. Yes <code>/v1/loan</code> This service should send the loan details of the logged in user from the DB to the UI. Yes <code>/v1/card</code> This service should send the card details of the logged in use from the DB to the UI. Yes","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#create_configuration_class","title":"Create Configuration Class","text":"<ul> <li>Then we will create a class named <code>ProjectSecurityConfig</code> which will extend class <code>WebSecurityConfigurerAdapter</code> . Then we will <code>ovveride</code> the method <code>configure(HttpSecurity http)</code> to set authenticated and non-authenticated for apis that we want. See the code below:</li> </ul> ProjectSecurityConfig.java<pre><code>package com.springboot.security.custom.basic.spring.security.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n}\n</code></pre> <ul> <li>The method <code>antMatchers()</code> allow us to configure which apis should be <code>authenticated()</code>, <code>permitAll()</code> or <code>denyAll()</code>.</li> <li>As you can see the method <code>permitAll()</code>  means that all request that come to the api will be permitted without any security associated.</li> <li>Then the method <code>denyAll()</code> means that all request that come to the api will be denied with status <code>403 forbidden</code>. </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#testing","title":"Testing","text":"<ul> <li>Now, let's start your application and use post man to call <code>/v1/contact</code> and <code>/v1/notice</code> apis without username/password input because these are public apis. Then you should see the result as below:</li> </ul> <ul> <li>Then if you call to other apis as <code>/v1/balance</code>, <code>/v1/accounts/**</code>, <code>/v1/loan</code> and <code>/v1/card</code> without username/password credentials then you will get the error 401 as below</li> </ul> <ul> <li>Then when you put the username/password and call again, you will get 200 result.</li> </ul> <ul> <li>It happens the same for <code>/v1/balance</code>, <code>/v1/accounts/**</code> and <code>/v1/card</code>  apis.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#see_also","title":"See Also","text":"<ul> <li>Defining And Managing Users</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20Basic%20Spring%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/","title":"Custom UserDetailsService Of Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#create_your_own_custom_implementation_of_userdetailsservice","title":"Create Your Own Custom Implementation of UserDetailsService","text":"<ul> <li>In this section we will create our custom implementation of  UserDetailsService. So, why do we need to create a custom implementation of <code>UserDetailsService</code> of spring security?</li> <li>The answer is that when you already have an database with users and authorities and you just want to migrate your existed users in the database into the spring security for using but your existing table is so different with the default implementation of spring security such as <code>JdbcUserDetailsManager</code> (See Configure Users With JdbcUserDetailsManager) . So we need to create your own custom <code>UserDetailsService</code> implementation</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#dependencies","title":"Dependencies","text":"<ul> <li>We will use Spring Data JPA to integrate with the <code>customers</code> table that we defined in the database. So you will need to add some dependencies as below.</li> </ul> pom.xml<pre><code>...\n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  \n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;  \n    &lt;version&gt;1.18.22&lt;/version&gt;  \n    &lt;scope&gt;provided&lt;/scope&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.4&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.4&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.6&lt;/version&gt;  \n&lt;/dependency&gt;  \n\n&lt;dependency&gt;  \n    &lt;groupId&gt;mysql&lt;/groupId&gt;  \n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  \n    &lt;version&gt;8.0.28&lt;/version&gt;  \n&lt;/dependency&gt;\n\n...\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#prepare_tables_in_database","title":"Prepare Tables In Database","text":"<ul> <li>Now let's use the script below to create your own table in the database for storing customer users. You should note that the column's names and table's name don't need to have the same name as in the default implementation in spring security, you can put any name you want for table and column names here.</li> </ul> <pre><code>CREATE TABlE customers (\nid int NOT NULL AUTO_INCREMENT,\nemail VARCHAR(255) NOT NULL,\npassword VARCHAR(255) NOT NULL,\nrole VARCHAR(255) NOT NULL,\nPRIMARY KEY (id)\n);\n\nINSERT INTO worldbank.customers\n(email, password, `role`)\nVALUES('duc.nguyen@example.com', '12345', 'admin');\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#create_entity_class","title":"Create Entity Class","text":"<ul> <li>Now let's create the <code>CustomerEntity</code> class which will be mapped with table <code>customers</code> in your database as below</li> </ul> CustomerEntity.java<pre><code>package com.spring.security.spring.security.custom.userDetailsService.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"customers\")\n@Getter\n@Setter\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    private String email;\n    private String password;\n    private String role;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#create_customerrepository","title":"Create CustomerRepository","text":"<ul> <li>Next, we will create the <code>CustomerRepository</code> interface for our <code>CustomerEntity</code> above with a method for getting the CustomerEntities by email.</li> </ul> CustomerRepository.java<pre><code>package com.spring.security.spring.security.custom.userDetailsService.repository;\n\nimport com.spring.security.spring.security.custom.userDetailsService.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, Integer&gt; {\n\n    List&lt;CustomerEntity&gt; findByEmail(String email);\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#create_your_custom_implementation_of_userdetails","title":"Create Your Custom Implementation of UserDetails","text":"<ul> <li>Now, we will create a class name <code>SecurityCustomer</code> for our custom <code>UserDetails</code> implementation. This class will have 1 attribute which is the <code>CustomerEntity</code> which we will load from our database. Because in our database we don't have column for <code>AccountNonExpired</code>, <code>AccountNonLocked</code>, <code>CredentialsNonExpired</code> and <code>Enabled</code> so we will set them as true. </li> </ul> SecurityCustomer.java<pre><code>package com.spring.security.spring.security.custom.userDetailsService.model;\n\nimport com.spring.security.spring.security.custom.userDetailsService.entity.CustomerEntity;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class SecurityCustomer implements UserDetails {\n\n    private final CustomerEntity customerEntity;\n\n    public SecurityCustomer(CustomerEntity customerEntity) {\n        this.customerEntity = customerEntity;\n    }\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();\n        authorities.add(new SimpleGrantedAuthority(this.customerEntity.getRole()));\n        return authorities;\n    }\n\n    @Override\n    public String getPassword() {\n        return this.customerEntity.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return this.customerEntity.getEmail();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#create_your_custom_implementation_of_userdetailsservice","title":"Create Your Custom Implementation Of UserDetailsService","text":"<ul> <li>We will crate a class name <code>BankUserDetailsService</code> which will implement the <code>UserDetailsService</code> for our custom <code>UserDetailsService</code> implementation. So we will <code>@Override</code> the method <code>loadUserByUsername</code> of <code>UserDetailsService</code></li> </ul> BankUserDetailsService.java<pre><code>package com.spring.security.spring.security.custom.userDetailsService.service;\n\nimport com.spring.security.spring.security.custom.userDetailsService.entity.CustomerEntity;\nimport com.spring.security.spring.security.custom.userDetailsService.model.SecurityCustomer;\nimport com.spring.security.spring.security.custom.userDetailsService.repository.CustomerRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class BankUserDetailsService implements UserDetailsService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BankUserDetailsService.class);\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        LOGGER.info(\"BankUserDetailsService is triggered!\");\n        List&lt;CustomerEntity&gt; customerEntities = this.customerRepository.findByEmail(username);\n\n        if (customerEntities.isEmpty()) {\n            throw new UsernameNotFoundException(\"There are no user with email: \" + username);\n        }\n        return new SecurityCustomer(customerEntities.get(0));\n    }\n}\n</code></pre> <ul> <li>We will use <code>CustomerRepository</code> to load our CustomerEntity from database then we will use this CustomerEntity to create the <code>SecurityCustomer</code> which is the implementation of <code>UserDetails</code>.</li> <li>So we have done custom the <code>UserDetailsService</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#configure_spring_security","title":"Configure Spring Security","text":"<ul> <li>Now, let's open the class <code>ProjectSecurityConfig</code> and comment the configuration related to <code>JdbcUserDetailsManager</code> as below</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.custom.userDetailsService.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#enable_jpa_repositories","title":"Enable JPA Repositories","text":"<ul> <li>Go to the main class and add the annotation <code>@EnableJpaRepositories</code> as below</li> </ul> CustomDefaultSpringSecurityApplication.java<pre><code>package com.spring.security.spring.security.custom.userDetailsService.repository;\n\nimport com.spring.security.spring.security.custom.userDetailsService.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface CustomerRepository extends JpaRepository&lt;CustomerEntity, Integer&gt; {\n\n    List&lt;CustomerEntity&gt; findByEmail(String email);\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#configure_datasource","title":"Configure DataSource","text":"<ul> <li>Now, let add the datasource configuration in the <code>application.yml</code>. Then start the application up to test. application.yml<pre><code>#spring:\n#  security:\n#    user:\n#      name: user\n#      password: 12345\n#\n#server:\n#  servlet:\n#    session:\n#      timeout: 1m\n\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/worldbank?useUnicode=true&amp;characterEncoding=UTF-8\n    username: root\n    password: password\n</code></pre></li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#testing","title":"Testing","text":"<ul> <li>Now let's start your spring boot application and try to use the email/password that existed in the database for authentication and you will see the successful result as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#see_also","title":"See Also","text":"<ul> <li>Configure Users With JdbcUserDetailsManager</li> <li>Defining And Managing Users</li> <li>Understanding User Management interfaces and Classes</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Custom%20UserDetailsService%20Of%20Spring%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Defining%20And%20Managing%20Users/","title":"Defining And Managing Users","text":"","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Defining%20And%20Managing%20Users/#user_detail_service_and_password_encoder","title":"User Detail Service And Password Encoder","text":"<ul> <li><code>User detail service</code> and <code>password encoder</code> are important interfaces that help  maintaining the user details and validating them. That means if someone provides some credentials, these two <code>user detail services</code> and <code>password encoder</code> will take the responsibility of validating whether the username and password entered by user is correct or not.</li> </ul> <ul> <li> <p>Below are some ways for us to configure  <code>user detail service</code> and basic <code>password encoder</code>:</p> </li> <li> <p>Understanding User Management interfaces and Classes</p> </li> <li>Configure Users With inMemoryAuthentication</li> <li>Configure Users With inMemoryUserDetailsManager</li> <li>Configure Users With JdbcUserDetailsManager</li> <li>Custom UserDetailsService Of Spring Security</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Defining%20And%20Managing%20Users/#summary","title":"Summary","text":"<ul> <li>Look at how to configure users inside memory of the application using  inMemoryAuthentication and  InMemoryUserDetailsManager</li> <li>Look at the important interfaces and classes present in the spring security regarding defining and managing the <code>UserDetails</code> for performing authentication.<ul> <li>org.springframework.security.core.userdetails.UserDetails</li> <li>org.springframework.security.core.userdetails.User</li> <li>org.springframework.security.core.userdetails.UserDetailsService</li> <li>org.springframework.security.provisioning.InMemoryUserDetailsManager</li> <li>org.springframework.security.provisioning.JdbcUserDetailsManager</li> </ul> </li> <li>Implement custom implementation of <code>UserDetailsService</code> (See Custom UserDetailsService Of Spring Security) to perform authentication using our own tables and column present inside the application database.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Defining%20And%20Managing%20Users/#see_also","title":"See Also","text":"<ul> <li>Password Management With PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Defining%20And%20Managing%20Users/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Definition%20Of%20PasswordEncoder/","title":"Definition Of PasswordEncoder","text":"","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Definition%20Of%20PasswordEncoder/#passwordencoder_interface","title":"PasswordEncoder Interface","text":"<ul> <li>If you look into the <code>PasswordEncoder</code> in Spring Security, you will see it is an interface that contains these abstract methods as below.</li> </ul> PasswordEncoder.java<pre><code>/*\n * Copyright 2011-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.crypto.password;\n\n/**\n * Service interface for encoding passwords.\n *\n * The preferred implementation is {@code BCryptPasswordEncoder}.\n *\n * @author Keith Donald\n */\npublic interface PasswordEncoder {\n\n    /**\n     * Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or\n     * greater hash combined with an 8-byte or greater randomly generated salt.\n     */\n    String encode(CharSequence rawPassword);\n\n    /**\n     * Verify the encoded password obtained from storage matches the submitted raw\n     * password after it too is encoded. Returns true if the passwords match, false if\n     * they do not. The stored password itself is never decoded.\n     * @param rawPassword the raw password to encode and match\n     * @param encodedPassword the encoded password from storage to compare with\n     * @return true if the raw password, after encoding, matches the encoded password from\n     * storage\n     */\n    boolean matches(CharSequence rawPassword, String encodedPassword);\n\n    /**\n     * Returns true if the encoded password should be encoded again for better security,\n     * else false. The default implementation always returns false.\n     * @param encodedPassword the encoded password to check\n     * @return true if the encoded password should be encoded again for better security,\n     * else false.\n     */\n    default boolean upgradeEncoding(String encodedPassword) {\n        return false;\n    }\n\n}\n</code></pre> <ul> <li>So in the first method <code>encode</code> which accepts a password from the user, the name <code>encode</code> doesn't mean this apply only for encoding, but not for encryption or hash. The name <code>encode</code> means converting from one from to another form and thereby using encoding algorithms or encryption or hash. So which this method, classes that implement it should accept a raw password which is coming from the framework and they have to encode it as a part of requirement.</li> <li>The method <code>encode</code> will be called by Spring Security framework as soon as it receives a raw password from the use and it will try to generate a hash by taking the original raw password.</li> <li>Then we Spring Security framework got the hash password then it will leverages <code>matches</code> method. So the <code>matches</code> method is the place where our spring security first try to call the <code>encode</code> method by passing the <code>rawPassword</code> to get the hash value and at the same time, it also accept another parameter which is <code>encodedPassword</code> , which is already saved inside the database. So It will take both the has values and try to compare and return a boolean (true/false). Then based on this method, the framework will decide whether it should authenticate the user or not.</li> <li>Lastly, we have method <code>upgradeEncoding</code>, the purpose of this method is used to make your hashing algorithm or encoding or encryption algorithm to be more complex for the user to decode it. So if the return value is true, it means spring security will try to do encoding on the top of existing encoding. That means you will be doing that encoding, encryption or hashing two times, which give you more security. Using this method can slow down your process.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Definition%20Of%20PasswordEncoder/#default_implementations_of_passwordencoder","title":"Default Implementations Of PasswordEncoder","text":"<ul> <li>As you can see, the spring security framework also provides different implementation of <code>PasswordEncoder</code> that we can leverage inside our application based upon our requirements.</li> <li>Below are some default implementation classes:<ul> <li>NoOpPasswordEncoder (@Deprecated - Not recommend)</li> <li>StandardPasswordEncoder (@Deprecated - Not recommend)</li> <li>Pbkdf2PasswordEncoder</li> <li>BCryptPasswordEncoder</li> <li>SCryptPasswordEncoder</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Definition%20Of%20PasswordEncoder/#see_also","title":"See Also","text":"<ul> <li>NoOpPasswordEncoder</li> <li>StandardPasswordEncoder</li> <li>Pbkdf2PasswordEncoder</li> <li>BCryptPasswordEncoder</li> <li>SCryptPasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Definition%20Of%20PasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/","title":"Encode Decode In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#what_is_the_encodingdecoding","title":"What Is The Encoding/Decoding?","text":"<ul> <li><code>Encoding</code> is defined as the process of converting data from one form to another and has nothing to do with cryptography. It guarantees none of the 3 cryptographic properties of confidentiality, integrity and authenticity because it involves no secret and is completely reversible (<code>decoding</code>).</li> <li><code>Encoding</code> can be used for reducing the size of audio and video files. Each audio and video file format has a corresponding coder decoder (codec) program that is used to code it into the appropriate format and then decodes for playback.</li> <li>It can't be used for securing data, various publicly available algorithms are used for encoding.</li> <li>Encoding Types: ASCII, BASE64, UNICODE.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#encodingdecoding_in_java","title":"Encoding/Decoding In Java","text":"<ul> <li><code>Encoding and decoding</code> in Java is a method of representing data in a different format to efficiently transfer information through a network or the web. The encoder converts data into a web representation. Once received, the decoder converts the web representation data into its original format.</li> <li><code>Encode is not used for security</code> it is used for data transformation for proper consumption. So it's easy to encode/decode data and you just need to know the encoding. We have 2 popular types of encoding: URL encoding, Base64 encoding.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#url_encoding","title":"URL Encoding","text":"<ul> <li>In <code>URL encoding</code>, certain characters like space or question mark in URL could be misleading. For example, instead if using Api param like this <code>subject=what is the biggest animal on earth</code> we can encode it to this <code>subject%3Dwhat%20is%20the%20biggest%20animal%20on%20earth</code>.</li> <li>More information</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#base64_encoding","title":"Base64 Encoding","text":"<ul> <li><code>Base64 encoding</code>, when we transfer media data like Music, Files, Images, video... as binaries throw network environment, errors or lossing data will happen easily, some protocols may interpret your binary data as control characters (like modem or router) or they could be screwed up because the underlying protocol might think that you've entered a special character combination (like how FTP translates line endings).</li> <li>In the past, a quick method of verifying data integrity was used: bit parity. So in this method a byte will contain 7 bits of data and one bit for calculating even or odd on total number of 1 in 7 bits in data.</li> <li>Ex: we have a byte which is transferred through network 10100101, then we have 7 bits of data [1010010], this this 7 bits of data we have 3 bits with 1, so the addition bit will be 1 (for odd). So if the end modem received a byte like this 10110101, so there is an even byte but the additional bit is 1, so this byte is not correct or invalid. More information.</li> <li>So nowaday, many router support parity check and byte translation into hardware and will force the computers to attach the parity check and byte translation to deal with 7-bit data. This force email attachments (and all other data, which is why HTTP &amp; SMTP protocols are text-based), to be convert into a text-only format. Then Base64 encoding will help us to handle this issue. More information</li> <li> <p>So in base64 original data will turn into bytes which contain 8 bits for each of them. Then these bits will be chunked together and divided into 6 bits for every byte and these byte will be converted into character. See the example in the table below.</p> Original 8 bits Chunked 6 bits Base64 duc 01100100 01110101 01100011 011001000111010101100011 011001 000111 010101 100011 ZHVj ducz 01100100 01110101 01100011 01111010 01100100011101010110001101111010 011001 000111 010101 100011 011110 10 <code>0000</code> <code>ZHVjeg==</code> </li> <li> <p>Base64 will contains all these characters:</p> <ul> <li>10 numeric value i.e., <code>0,1,2,3,\u2026..9</code>.</li> <li>26 Uppercase alphabets i.e., <code>A,B,C,D,\u2026\u2026.Z</code>.</li> <li>26 Lowercase alphabets i.e., <code>a,b,c,d,\u2026\u2026..z</code>.</li> <li>special characters i.e., <code>+</code>,<code>/</code> and <code>=</code> ( <code>=</code> used to replace empty bits in the last 6-bits byte one <code>=</code> is equal <code>00</code>  ).</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#encode_decode_example_with_spring_boot","title":"Encode Decode Example With Spring Boot","text":"<ul> <li>Now, let's take an example for using Encode/Decode Url and Base64 in  Spring Boot.</li> <li>By default, Spring Boot has default libraries for encode and decode Base64 and Uri, so we don't need to add any dependency into Spring Boot project.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#controller","title":"Controller","text":"<ul> <li>Let's create an controller with some apis as below:</li> </ul> Controller.java<pre><code>package com.springboot.security.encode.decode.app.controller;\n\nimport com.springboot.security.encode.decode.app.model.DataRequest;\nimport com.springboot.security.encode.decode.app.service.EncodeDecodeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class Controller {\n\n    @Autowired\n    private EncodeDecodeService encodeDecodeService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/encode/base64\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; encodeData(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(encodeDecodeService.encodeBase64(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/decode/base64\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; decodeData(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(encodeDecodeService.decodeBase64(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/encode/url\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; encodeUrl(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(encodeDecodeService.encodeUrl(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/decode/url\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; decodeUrl(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(encodeDecodeService.decodeUrl(inputData.getData()), HttpStatus.CREATED);\n    }\n\n}\n</code></pre> <ul> <li>We will need to create a simple model for request body as below.</li> </ul> DataRequest.java<pre><code>package com.springboot.security.encode.decode.app.model;\n\nimport org.springframework.lang.NonNull;\n\npublic class DataRequest {\n    private String data;\n\n    @NonNull\n    public String getData() {\n        return data;\n    }\n\n    public void setData(@NonNull String data) {\n        this.data = data;\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#service","title":"Service","text":"<ul> <li>Now, let's create a Service for encoding/decoding url and Base64</li> </ul> EncodeDecodeService.java<pre><code>package com.springboot.security.encode.decode.app.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Base64Utils;\nimport org.springframework.web.util.UriUtils;\n\nimport java.nio.charset.StandardCharsets;\n\n@Service\npublic class EncodeDecodeService {\n\n    public String encodeBase64(String data) {\n        return Base64Utils.encodeToString(data.getBytes());\n    }\n\n    public String decodeBase64(String data) {\n        return new String(Base64Utils.decode(data.getBytes()));\n    }\n\n    public String encodeUrl(String urlString) {\n        return UriUtils.encode(urlString, StandardCharsets.UTF_8);\n    }\n\n    public String decodeUrl(String urlString) {\n        return UriUtils.decode(urlString, StandardCharsets.UTF_8);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#testing","title":"Testing","text":"<ul> <li> <p>Now, let's start your Spring Boot service and use Postman to call apis, you will see results as below:</p> </li> <li> <p>Encode Base64 </p> </li> <li> <p>Decode Base64 </p> </li> <li> <p>Encode Uri </p> </li> <li> <p>Decode Uri </p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Spring Boot Introduction</li> <li>Password Management With PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encode%20Decode%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>W3schools</li> <li>Wikipedia.</li> <li>Stackoverflow</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encrypt%20Decrypt%20In%20Spring%20Boot/","title":"Encrypt Decrypt In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encrypt%20Decrypt%20In%20Spring%20Boot/#what_is_the_encrypt_and_decrypt","title":"What Is The Encrypt And Decrypt?","text":"<ul> <li>In cryptography, <code>encryption</code> is the process of encoding information. This process converts the original representation of the information, known as plaintext (human readable contents), into an alternative form known as ciphertext (incomprehensible text). Ideally, only authorized parties with a <code>cryptographic key</code> can decipher a ciphertext back to plaintext and access the original information. More information.</li> <li><code>Encryption</code> is part of security, the goal is to ensure the data can only be consumed by valid recipient using key/password to decrypt (reverse encrypt). Remember that key/password has to be kept secretly. There are two main types of data encrytion are asymmetric encryption and symmetric encryption. More information<ul> <li>Symmetric Encryption</li> <li>Asymmetric Encryption</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encrypt%20Decrypt%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Symmetric Encryption</li> <li>Asymmetric Encryption</li> <li>Password Management With PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Encrypt%20Decrypt%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>Wikipedia.</li> <li>IIBM</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20BCryptPasswordEncoder/","title":"Example With BCryptPasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20BCryptPasswordEncoder/#example_with_bcryptpasswordencoder_1","title":"Example With BCryptPasswordEncoder","text":"<ul> <li>So, If you have just read the BCryptPasswordEncoder and others Password Encoders in Definition Of PasswordEncoder of Spring Security, so in this section we will try to apply the <code>BCryptPasswordEncoder</code> into our Spring Boot application. This example will reuse the source code in the section Custom UserDetailsService Of Spring Security and enhance it with  <code>BCryptPasswordEncoder</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20BCryptPasswordEncoder/#configuration","title":"Configuration","text":"<ul> <li>So, we will comment out the old <code>passwordEncoder</code> configuration and add the new one in the class <code>ProjectSecurityConfig.class</code> as below.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.example.bCryptPasswordEncoder.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/v1/accounts/**\").authenticated()\n                .antMatchers(\"/v1/balance\").authenticated()\n                .antMatchers(\"/v1/loan\").authenticated()\n                .antMatchers(\"/v1/card\").authenticated()\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will create a bean of <code>passwordEncoder</code> with a new instance of  <code>BCryptPasswordEncoder</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20BCryptPasswordEncoder/#prepare_data_in_database","title":"Prepare Data In Database","text":"<ul> <li>So, let's use the SQL below to add a new record into the <code>customers</code> table.</li> </ul> <pre><code>INSERT INTO worldbank.customers\n(id, email, password, `role`)\nVALUES(2, 'han.do@example.com', '$2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO', 'admin');\n</code></pre> <ul> <li>As you can see, the password now is a BCrypt hash string, because we are using the <code>BCryptPasswordEncoder</code> so it requires the password that contained in database must be a BCrypt hash string. If you don't know how to get an example BCrypt hash string you can go to this page to get one to do the example.</li> <li>So after executing the SQL above, you will see there are two accounts in the <code>customers</code> table, the first one is the old account with plain text password (12345) and the second account is the BCrypt hash password string from raw password (12345).</li> </ul> <pre><code>mysql&gt; select * from customers;\n</code></pre> id email password role 1 duc.nguyen@example.com 12345 admin 2 han.do@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO admin","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20BCryptPasswordEncoder/#testing","title":"Testing","text":"<ul> <li>So now, let's start your spring boot application and use postman to call api for testing. So if you use the old account with plain text password in the database, then you can see the error code 401 unauthorized has been showed.</li> </ul> <ul> <li>Because we are using the <code>BCryptPasswordEncoder</code> but the password is the plain text so the authentication will be failed and you can not access the api.</li> <li>Now, let's use the account with the Bcrypt hash password in the database, then you can see the successful result as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20BCryptPasswordEncoder/#references","title":"References","text":"<ul> <li>Full Source Code</li> <li>BCrypt Generator</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/","title":"Example With Bcrypt In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#example_with_bcrypt_in_spring_boot_1","title":"Example With Bcrypt In Spring Boot","text":"<ul> <li>In this example we will use <code>Bcrypt</code> which is strong hashing function to encode the password. <code>Bcrypt</code>\u00a0is a\u00a0password-hashing function\u00a0designed by\u00a0<code>Niels Provos</code>\u00a0and <code>David Mazi\u00e8res</code>, based on the\u00a0<code>Blowfish\u00a0cipher</code> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#dependencies","title":"Dependencies","text":"<ul> <li>In  Spring Boot we need to add the <code>spring-security</code> dependency to do the Hashing with <code>Bcrypt</code>. </li> </ul> pom.xml<pre><code>&lt;dependency&gt;  \n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  \n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;  \n    &lt;version&gt;2.6.4&lt;/version&gt;  \n&lt;/dependency&gt;\n</code></pre> <ul> <li>So, why don't we use other dependencies to do the <code>Bcrypt</code> hashing example? <p>If you use the Maven Repository to search other <code>Bcrypt</code> dependencies then you can see they are out of update and contain many <code>vulnerabilities</code>. So In this example, we should the one from the <code>spring-security</code>  which currently contains no <code>Vulnerabilities</code>.</p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#controller","title":"Controller","text":"<ul> <li>Let's create an controller with some apis as below:</li> </ul> BcryptController.java<pre><code>package com.springboot.security.hash.app.controller;\n\nimport com.springboot.security.hash.app.model.DataRequest;\nimport com.springboot.security.hash.app.model.MatchDataRequest;\nimport com.springboot.security.hash.app.service.BcryptService;\nimport com.springboot.security.hash.app.service.Pbkdf2Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class BcryptController {\n\n    @Autowired\n    private BcryptService bcryptService;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/bcrypt\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; hashSHA256(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(this.bcryptService.hashBcrypt(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/bcrypt/check\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Boolean&gt; checkMatchSha256(@RequestBody MatchDataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(this.bcryptService.isBcryptMatch(inputData.getRawData(), inputData.getHashedData()), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>We will need to create 2 simple models for request body as below. One is used for hashing data and the other one is used for checking raw data and hashed data.</li> </ul> DataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.lang.NonNull;\n\npublic class DataRequest {\n\n    private String data;\n\n    @NonNull\n    public String getData() {\n        return data;\n    }\n\n    public void setData(@NonNull String data) {\n        this.data = data;\n    }\n\n}\n</code></pre> MatchDataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\npublic class MatchDataRequest {\n\n    private String rawData;\n    private String hashedData;\n\n    public String getRawData() {\n        return rawData;\n    }\n\n    public void setRawData(String rawData) {\n        this.rawData = rawData;\n    }\n\n    public String getHashedData() {\n        return hashedData;\n    }\n\n    public void setHashedData(String hashedData) {\n        this.hashedData = hashedData;\n    }\n}\n</code></pre> <ul> <li>Then we also need to create a model that loads environment variables into a spring bean using  @ConfigurationProperties as below.</li> </ul> HashConfigProperties.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"hash\")\npublic class HashConfigProperties {\n\n    private Bcrypt bcrypt;\n\n    public Sha256 getSha256() {\n        return sha256;\n    }\n\n    public Bcrypt getBcrypt() {\n        return bcrypt;\n    }\n\n    public void setBcrypt(Bcrypt bcrypt) {\n        this.bcrypt = bcrypt;\n    }\n}\n</code></pre> Bcrypt.java<pre><code>package com.springboot.security.hash.app.model;  \n\npublic class Bcrypt {  \n\n    private int strength;  \n\n    public int getStrength() {  \n        return strength;  \n    }  \n\n    public void setStrength(int strength) {  \n        this.strength = strength;  \n    }  \n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#configuration","title":"Configuration","text":"<ul> <li>Now, let create a configuration class name <code>PasswordEncoderConfig</code> and but the code as below.</li> </ul> PasswordEncoderConfig.java<pre><code>package com.springboot.security.hash.app.config;\n\nimport com.springboot.security.hash.app.model.HashConfigProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport java.security.SecureRandom;\n\n@Configuration\npublic class PasswordEncoderConfig {\n\n    @Autowired\n    private HashConfigProperties hashConfigProperties;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        SecureRandom random = new SecureRandom();\n        return new BCryptPasswordEncoder(hashConfigProperties.getBcrypt().getStrength(), random);\n    }\n\n}\n</code></pre> <ul> <li>In which, we will override the default <code>passwordEncoder</code> bean of <code>spring-security</code> by a <code>BCryptPasswordEncoder</code> which is initialized by a <code>strength</code> and a <code>SecureRandom</code>.</li> <li>We will configure the <code>strength</code> in the <code>application.yml</code> as below.</li> </ul> <p>application.yml<pre><code>hash:  \n  bcrypt:  \n    strength: 12\n</code></pre> - One more thing we should note that, in this example, we just focus on the <code>Bcrypt</code> hashing so we will ignore the default <code>spring-security</code> configuration in the dependency <code>spring-boot-starter-security</code>. So we will add one more configuration as below to disable the default <code>spring-security</code> configuration.</p> application.yml<pre><code>spring:\n  autoconfigure:\n    exclude:\n      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration\n      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration\n\n\nhash:  \n  bcrypt:  \n    strength: 12\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#service","title":"Service","text":"<ul> <li>Now let's create a service with name <code>BcryptService</code> with the code as below. In which, we will Inject the <code>passwordEncoder</code> bean that we have just configured in the step above. Then we will use <code>encode</code> and <code>matches</code> methods that the <code>PasswordEncoder</code> provided to encode and check the hashed data.</li> </ul> BcryptService.java<pre><code>package com.springboot.security.hash.app.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class BcryptService {\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    public String hashBcrypt(String data) {\n        return this.passwordEncoder.encode(data);\n    }\n\n    public boolean isBcryptMatch(String data, String hashedData) {\n        return this.passwordEncoder.matches(data, hashedData);\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#testing","title":"Testing","text":"<ul> <li>Now, run the Spring Boot project and try to call api <code>v1/cipher/hash/bcrypt</code> for testing hasing data. Then you will receive the result as below</li> </ul> <ul> <li>Then with the hash result above, we will use it to check with the original data by calling api <code>v1/cipher/hash/bcrypt/check</code>. Then you will see the original data and hashed data are matched.</li> </ul> <ul> <li>Now let's try to change a single character in original data and check again with hashed data. Then you will see the api return failed.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Hash In Spring Boot</li> <li>Spring Boot Introduction</li> <li>Spring Boot With @ConfigurationProperties</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Bcrypt%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>Maven Repository </li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/","title":"Example With Pbkdf2 In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/#example_with_pbkdf2_in_spring_boot_1","title":"Example With Pbkdf2 In Spring Boot","text":"<ul> <li>In this example we will use <code>Password-Based Key Derivation Function 2 (Pbkdf2)</code> which is a pretty easy slow-hashing function that performs an HMAC(Hashed Message Authentication Code) as many times as specified by an iterations argument.</li> <li>The <code>Pbkdf2</code> has the brilliant feature of having a configurable strength. This means that as computers increase in strength,\u00a0we can slow down the algorithm by changing the inputs.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/#controller","title":"Controller","text":"<ul> <li>Let's create an controller with some apis as below:</li> </ul> Pbkdf2Controller.java<pre><code>package com.springboot.security.hash.app.controller;\n\nimport com.springboot.security.hash.app.model.DataRequest;\nimport com.springboot.security.hash.app.model.MatchDataRequest;\nimport com.springboot.security.hash.app.service.Pbkdf2Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class Pbkdf2Controller {\n\n    @Autowired\n    private Pbkdf2Service pbkdf2Service;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/pbkdf2\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; hashSHA256(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(this.pbkdf2Service.hashPbkdf2(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/pbkdf2/check\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Boolean&gt; checkMatchSha256(@RequestBody MatchDataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(this.pbkdf2Service.isPbkdf2Match(inputData.getRawData(), inputData.getHashedData()), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>We will need to create 2 simple models for request body as below. One is used for hashing data and the other one is used for checking raw data and hashed data.</li> </ul> DataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.lang.NonNull;\n\npublic class DataRequest {\n\n    private String data;\n\n    @NonNull\n    public String getData() {\n        return data;\n    }\n\n    public void setData(@NonNull String data) {\n        this.data = data;\n    }\n\n}\n</code></pre> MatchDataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\npublic class MatchDataRequest {\n\n    private String rawData;\n    private String hashedData;\n\n    public String getRawData() {\n        return rawData;\n    }\n\n    public void setRawData(String rawData) {\n        this.rawData = rawData;\n    }\n\n    public String getHashedData() {\n        return hashedData;\n    }\n\n    public void setHashedData(String hashedData) {\n        this.hashedData = hashedData;\n    }\n}\n</code></pre> <ul> <li>Then we also need to create a model that loads environment variables into a spring bean using  @ConfigurationProperties as below.</li> </ul> HashConfigProperties.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"hash\")\npublic class HashConfigProperties {\n\n    private Pbkdf2 pbkdf2;\n\n    public Pbkdf2 getPbkdf2() {\n        return pbkdf2;\n    }\n\n    public void setPbkdf2(Pbkdf2 pbkdf2) {\n        this.pbkdf2 = pbkdf2;\n    }\n}\n</code></pre> Pbkdf2.java<pre><code>package com.springboot.security.hash.app.model;\n\n\npublic class Pbkdf2 {\n\n    private String salt;\n    private Integer iterations;\n    private Integer hashWidth;\n\n    public String getSalt() {\n        return salt;\n    }\n\n    public void setSalt(String salt) {\n        this.salt = salt;\n    }\n\n    public Integer getIterations() {\n        return iterations;\n    }\n\n    public void setIterations(Integer iterations) {\n        this.iterations = iterations;\n    }\n\n    public Integer getHashWidth() {\n        return hashWidth;\n    }\n\n    public void setHashWidth(Integer hashWidth) {\n        this.hashWidth = hashWidth;\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/#service","title":"Service","text":"<ul> <li>Now let's create a service with name <code>Pbkdf2Service</code> with the code as below:</li> </ul> Pbkdf2Service.java<pre><code>package com.springboot.security.hash.app.service;\n\nimport com.springboot.security.hash.app.model.HashConfigProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\n\n@Service\npublic class Pbkdf2Service {\n\n    private static final String HASH_ALGORITHM_PBKDF2_512 = SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA512.name();\n\n    @Autowired\n    private HashConfigProperties hashConfigProperties;\n\n    public String hashPbkdf2(String data) {\n        try {\n            byte[] hash = this.hash(data);\n            return DatatypeConverter.printHexBinary(hash);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not hash Data\", ex);\n        }\n    }\n\n    public boolean isPbkdf2Match(String data, String hashedData) {\n        byte[] digested = DatatypeConverter.parseHexBinary(hashedData);\n        byte[] reHashData = this.hash(data);\n        return MessageDigest.isEqual(digested, reHashData);\n    }\n\n    private byte[] hash(String data) {\n        try {\n            PBEKeySpec pbeKeySpec = new PBEKeySpec(data.toCharArray(),\n                hashConfigProperties.getPbkdf2().getSalt().getBytes(StandardCharsets.UTF_8),\n                hashConfigProperties.getPbkdf2().getIterations(),\n                hashConfigProperties.getPbkdf2().getHashWidth());\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(HASH_ALGORITHM_PBKDF2_512);\n            return secretKeyFactory.generateSecret(pbeKeySpec).getEncoded();\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not hash Data\", ex);\n        }\n    }\n\n    public enum SecretKeyFactoryAlgorithm {\n\n        PBKDF2WithHmacSHA1, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA512\n\n    }\n\n}\n</code></pre> <ul> <li>In  Spring Boot we don't need to add more any dependency to do the Hashing with <code>Pbkdf2</code>, we will use <code>SecretKeyFactory</code> with hash algorithm is <code>PBKDF2WithHmacSHA512</code> that Spring Boot provided. </li> </ul> <p>There are 3 hash algorithms that we can use for <code>SecretKeyFactory</code> with <code>Pbkdf2</code>:     &gt; - PBKDF2WithHmacSHA1     &gt; - PBKDF2WithHmacSHA256     &gt; - PBKDF2WithHmacSHA512</p> <ul> <li> <p>After you have initialized the <code>SecretKeyFactory</code>, Then you need to create a <code>PBEKeySpec</code> with 4 parameters as below:</p> <ul> <li>Param 1: the byte array of your data.</li> <li>Param 2: the byte array of salt</li> <li>Param 3: the number of iterations (185000 or more)</li> <li>Param 4: the number of hash length (128, 256, 1024)</li> </ul> </li> <li> <p>The <code>salt</code>, <code>iterations</code> and <code>hashWidth</code> will be load from the <code>application.yml</code>  into the <code>HashConfigProperties</code> component using  @ConfigurationProperties. The Salt will be any string, see the example below.</p> </li> </ul> application.yml<pre><code>hash:\n  pbkdf2:\n    salt: B6FC08FA50377E5E646CAE93C6B12E74F01D6D4E4DAE1F54DA53EB4D340EC75C\n    iterations: 185000\n    hashWidth: 256\n</code></pre> <ul> <li>So now, you can create generate a hash with <code>SecretKeyFactory</code> and <code>PBEKeySpec</code> as in the method <code>hash</code> of example code.</li> <li>Then in the method <code>isPbkdf2Match</code>, you just need to hash the input data and compare with the given hashed by using <code>MessageDigest.isEqual</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/#testing","title":"Testing","text":"<ul> <li>Now, run the Spring Boot project and try to call api <code>v1/cipher/hash/pbkdf2</code> for testing hasing data. Then you will receive the result as below</li> </ul> <ul> <li>Then with the hash result above, we will use it to check with the original data by calling api <code>v1/cipher/hash/pbkdf2/check</code>. Then you will see the original data and hashed data are matched.</li> </ul> <ul> <li>Now let's try to change a single character in original data and check again with hashed data. Then you will see the api return failed.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Hash In Spring Boot</li> <li>Spring Boot Introduction</li> <li>Spring Boot With @ConfigurationProperties</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20Pbkdf2%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/","title":"Example With SHA-256 In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/#example_with_sha-256_in_spring_boot_1","title":"Example With SHA-256 In Spring Boot","text":"<ul> <li>In this example we will use SHA-256, there is a SHA-512 which use newer hashing algorithms and usually used in blockchain, but in require more bandwidth to store and transmit data. So in this example which is not blockchain I recommend we use SHA-256 because in recent It is lightweight and still secure for us.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/#controller","title":"Controller","text":"<ul> <li>Let's create an controller with some apis as below:</li> </ul> Sha256Controller.java<pre><code>package com.springboot.security.hash.app.controller;\n\nimport com.springboot.security.hash.app.model.DataRequest;\nimport com.springboot.security.hash.app.model.MatchDataRequest;\nimport com.springboot.security.hash.app.service.HashSha256Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class Sha256Controller {\n\n    @Autowired\n    private HashSha256Service hashSha256Service;\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/sha256\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; hashSHA256(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(this.hashSha256Service.hashSHA256(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/sha256/check\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Boolean&gt; checkMatchSha256(@RequestBody MatchDataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(this.hashSha256Service.isSHA256Match(inputData.getRawData(), inputData.getHashedData()), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>We will need to create 2 simple models for request body as below. One is used for hashing data and the other one is used for checking raw data and hashed data.</li> </ul> DataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.lang.NonNull;\n\npublic class DataRequest {\n\n    private String data;\n\n    @NonNull\n    public String getData() {\n        return data;\n    }\n\n    public void setData(@NonNull String data) {\n        this.data = data;\n    }\n\n}\n</code></pre> MatchDataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\npublic class MatchDataRequest {\n\n    private String rawData;\n    private String hashedData;\n\n    public String getRawData() {\n        return rawData;\n    }\n\n    public void setRawData(String rawData) {\n        this.rawData = rawData;\n    }\n\n    public String getHashedData() {\n        return hashedData;\n    }\n\n    public void setHashedData(String hashedData) {\n        this.hashedData = hashedData;\n    }\n}\n</code></pre> <ul> <li>Then we also need to create a model that loads environment variables into a spring bean using  @ConfigurationProperties as below.</li> </ul> HashConfigProperties.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"hash\")\npublic class HashConfigProperties {\n\n    private Sha256 sha256;\n\n    public Sha256 getSha256() {\n        return sha256;\n    }\n\n    public void setSha256(Sha256 sha256) {\n        this.sha256 = sha256;\n    }\n}\n</code></pre> Sha256.java<pre><code>package com.springboot.security.hash.app.model;\n\npublic class Sha256 {\n\n    private String salt;\n\n    public String getSalt() {\n        return salt;\n    }\n\n    public void setSalt(String salt) {\n        this.salt = salt;\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/#service","title":"Service","text":"<ul> <li>In  Spring Boot we don't need to add more any dependency to do the Hashing with SHA-256, we will use <code>MessageDigest</code> with hash algorithm is <code>SHA-256</code> that Spring Boot provided. This class provide a method <code>getInstance</code> with input is the name of hash algorithm to create <code>MessageDigest</code>. </li> <li>What is the Message Digest? More information.</li> <li>Now let's create <code>HashSha256Service</code> and add two methods <code>hashSHA256</code> and <code>isSHA256Match</code> below for hashing data and checking the hashed data with the given hashed by using <code>MessageDigest.isEqual</code>.</li> </ul> HashSha256Service.java<pre><code>package com.springboot.security.hash.app.service;\n\nimport com.springboot.security.hash.app.model.HashConfigProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.xml.bind.DatatypeConverter;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\n\n@Service\npublic class HashSha256Service {\n\n    private static final String HASH_ALGORITHM_SHA_256 = \"SHA-256\";\n\n    @Autowired\n    private HashConfigProperties hashConfigProperties;\n\n    public String hashSHA256(String data) {\n        byte[] hash = this.hash(data);\n        return DatatypeConverter.printHexBinary(hash);\n    }\n\n    public boolean isSHA256Match(String data, String hashedData) {\n        byte[] digested = DatatypeConverter.parseHexBinary(hashedData);\n        byte[] reHashData = this.hash(data);\n        return MessageDigest.isEqual(digested, reHashData);\n    }\n\n    private byte[] hash(String data) {\n        try {\n            String dataWithSalt = hashConfigProperties.getSha256().getSalt().concat(data);\n            MessageDigest messageDigest = MessageDigest.getInstance(HASH_ALGORITHM_SHA_256);\n            return messageDigest.digest(dataWithSalt.getBytes(StandardCharsets.UTF_8));\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not hash Data\", ex);\n        }\n    }\n\n}\n</code></pre> <ul> <li>Then we will hash the data together with the salt that we load from the <code>application.yml</code> into the <code>HashConfigProperties</code> component using  @ConfigurationProperties. The Salt will be any string, see the example below.</li> </ul> application.yml<pre><code>hash:  \n    sha256:  \n        salt: 70DD29E1BE48BBA013A2E7EDF6F10861F82DD9C9C0C2A1419C69D3CD74513452\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/#testing","title":"Testing","text":"<ul> <li>Now, run the Spring Boot project and try to call api <code>v1/cipher/hash/sha256</code> for testing hasing data. Then you will receive the result as below</li> </ul> <ul> <li>Then with the hash result above, we will use it to check with the original data by calling api <code>v1/cipher/hash/sha256/check</code>. Then you will see the original data and hashed data are matched.</li> </ul> <ul> <li>Now let's try to change a single character in original data and check again with hashed data. Then you will see the api return failed.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Hash In Spring Boot</li> <li>Spring Boot Introduction</li> <li>Spring Boot With @ConfigurationProperties</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-256%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>IBM.</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/","title":"Example With SHA-512 In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/#example_with_sha-512_in_spring_boot_1","title":"Example With SHA-512 In Spring Boot","text":"<ul> <li>In this example we will use SHA-512 which use newer hashing algorithms and usually used in blockchain, but in require more bandwidth to store and transmit data.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/#controller","title":"Controller","text":"<ul> <li>Let's create an controller with some apis as below:</li> </ul> Sha512Controller.java<pre><code>package com.springboot.security.hash.app.controller;\n\nimport com.springboot.security.hash.app.model.DataRequest;\nimport com.springboot.security.hash.app.model.MatchDataRequest;\nimport com.springboot.security.hash.app.service.HashSha512Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class Sha512Controller {\n\n    @Autowired\n    private HashSha512Service hashSha512Service;\n\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/sha512\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; hashSHA512(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(hashSha512Service.hashSHA512(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/hash/sha512/check\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity&lt;Boolean&gt; checkMatchSha512(@RequestBody MatchDataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(hashSha512Service.isSHA512Match(inputData.getRawData(), inputData.getHashedData()), HttpStatus.OK);\n    }\n\n}\n</code></pre> <ul> <li>We will need to create 2 simple models for request body as below. One is used for hashing data and the other one is used for checking raw data and hashed data.</li> </ul> DataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.lang.NonNull;\n\npublic class DataRequest {\n\n    private String data;\n\n    @NonNull\n    public String getData() {\n        return data;\n    }\n\n    public void setData(@NonNull String data) {\n        this.data = data;\n    }\n\n}\n</code></pre> MatchDataRequest.java<pre><code>package com.springboot.security.hash.app.model;\n\npublic class MatchDataRequest {\n\n    private String rawData;\n    private String hashedData;\n\n    public String getRawData() {\n        return rawData;\n    }\n\n    public void setRawData(String rawData) {\n        this.rawData = rawData;\n    }\n\n    public String getHashedData() {\n        return hashedData;\n    }\n\n    public void setHashedData(String hashedData) {\n        this.hashedData = hashedData;\n    }\n}\n</code></pre> <ul> <li>Then we also need to create a model that loads environment variables into a spring bean using  @ConfigurationProperties as below.</li> </ul> HashConfigProperties.java<pre><code>package com.springboot.security.hash.app.model;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"hash\")\npublic class HashConfigProperties {\n\n    private Sha512 sha512;\n\n    public Sha512 getSha512() {\n        return sha512;\n    }\n\n    public void setSha512(Sha512 sha512) {\n        this.sha512 = sha512;\n    }\n}\n</code></pre> Sha512.java<pre><code>package com.springboot.security.hash.app.model;\n\npublic class Sha512 {\n\n    private String salt;\n\n    public String getSalt() {\n        return salt;\n    }\n\n    public void setSalt(String salt) {\n        this.salt = salt;\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/#service","title":"Service","text":"<ul> <li>In  Spring Boot we don't need to add more any dependency to do the Hashing with SHA-512, we will use <code>MessageDigest</code> with hash algorithm is <code>SHA-512</code> that Spring Boot provided. This class provide a method <code>getInstance</code> with input is the name of hash algorithm to create <code>MessageDigest</code>. </li> <li>What is the Message Digest? More information.</li> <li>Now let's create <code>HashSha512Service</code> and add two methods <code>hashSHA512</code> and <code>isSHA512Match</code> below for hashing data and checking the hashed data with the given hashed by using <code>MessageDigest.isEqual</code>.</li> </ul> HashSha512Service.java<pre><code>package com.springboot.security.hash.app.service;\n\nimport com.springboot.security.hash.app.model.HashConfigProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.xml.bind.DatatypeConverter;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\n\n@Service\npublic class HashSha512Service {\n\n    private static final String HASH_ALGORITHM_512 = \"SHA-512\";\n\n    @Autowired\n    private HashConfigProperties hashConfigProperties;\n\n    public String hashSHA512(String data) {\n        byte[] hash = this.hash(data);\n        return DatatypeConverter.printHexBinary(hash);\n    }\n\n    public boolean isSHA512Match(String data, String hashedData) {\n        byte[] digested = DatatypeConverter.parseHexBinary(hashedData);\n        byte[] reHashData = this.hash(data);\n        return MessageDigest.isEqual(digested, reHashData);\n    }\n\n    private byte[] hash(String data) {\n        try {\n            String dataWithSalt = hashConfigProperties.getSha512().getSalt().concat(data);\n            MessageDigest messageDigest = MessageDigest.getInstance(HASH_ALGORITHM_512);\n            return messageDigest.digest(dataWithSalt.getBytes(StandardCharsets.UTF_8));\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not hash Data\", ex);\n        }\n    }\n\n}\n</code></pre> <ul> <li>Then we will hash the data together with the salt that we load from the <code>application.yml</code> into the <code>HashConfigProperties</code> component using <code>@ConfigurationProperties</code>. The Salt will be any string, see the example below.</li> </ul> application.yml<pre><code> hash:\n  sha512:\n    salt: 98ACB4E82C38C5C2D5166EB05023CAB5455035FA4659B402FB1389C2D66455A6\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/#testing","title":"Testing","text":"<ul> <li>Now, run the Spring Boot project and try to call api <code>v1/cipher/hash/sha512</code> for testing hasing data. Then you will receive the result as below</li> </ul> <ul> <li>Then with the hash result above, we will use it to check with the original data by calling api <code>v1/cipher/hash/sha512/check</code>. Then you will see the original data and hashed data are matched.</li> </ul> <ul> <li>Now let's try to change a single character in original data and check again with hashed data. Then you will see the api return failed.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Hash In Spring Boot</li> <li>Spring Boot Introduction</li> <li>Spring Boot With @ConfigurationProperties</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Example%20With%20SHA-512%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>IBM.</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/","title":"Filtering Authorization Method Level","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#filtering_authorization_method_level_in_spring_security","title":"Filtering Authorization Method Level In Spring Security","text":"<ul> <li>If we have a scenario where we don't want to control the invocation of the method but we want to make sure the parameters send and received to/from the method need to follow authorization rules, then we can consider filtering.</li> <li>The\u00a0<code>@PreFilter</code>\u00a0and\u00a0<code>@PostFilter</code>\u00a0annotations are\u00a0used to filter lists of objects\u00a0based on custom security rules we define.</li> <li><code>@PreFilter</code> defines a rule for filtering a list that is being passed as an input parameter to the annotated method. If the evaluated value is true, the item will be kept in the list. Otherwise, the item will be removed.</li> <li>For filtering the parameters before calling the method we can use <code>@PreFilter</code> as below.</li> </ul> ContactController.java<pre><code>@RequestMapping(method = RequestMethod.POST, path = \"/v1/contact\")  \n@PreFilter(\"filterObject.subject == 'Hello'\")  \npublic ResponseEntity&lt;List&lt;Contact&gt;&gt; createContact(@RequestBody List&lt;Contact&gt; contacts) {  \n    return ResponseEntity.ok(this.contactService.createContacts(contacts));  \n}\n</code></pre> <ul> <li> <p>As you can see in the example above, we will use <code>@PreFilter()</code> to check the subject field of <code>Contact</code> object is equal with the <code>Hello</code> value or not. If the value of subject field is not equal with <code>Hello</code>, the <code>Contact</code> object will be removed out of the list.</p> </li> <li> <p><code>@PostFilter</code> defines a rule for filtering the return list of a method, by applying that rule to every element in the list. If the evaluated value is true, the item will be kept in the list. Otherwise, the item will be removed.</p> </li> <li>For filtering the parameters after executing the method we can use <code>@PostFilter</code> as the example below.</li> </ul> ContactController.java<pre><code>@PostFilter(\"filterObject.contactName == 'Han'\")  \npublic List&lt;Contact&gt; getContacts() {  \n    List&lt;ContactEntity&gt; contactEntities = this.contactRepository.findAll();  \n    return this.toContacts(contactEntities);  \n}\n</code></pre> <ul> <li>We can use the <code>@PostFilter</code> on the Spring Data repository methods as well to filter any unwanted data coming from the database. It means, after querying <code>Contacts</code> from the database. Only <code>Contact</code> has contactName is <code>Han</code> will be kept in the return list. Otherwise, the item will be removed.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#prefiltering_and_postfiltering_examples","title":"PreFiltering And PostFiltering Examples","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#database_tables","title":"Database Tables","text":"<ul> <li>We will create <code>contacts</code> table which will contain some columns such as <code>contactName</code>, <code>contactEmail</code>, <code>subject</code> and <code>message</code>. So, let's run the SQL script below to create the table.</li> </ul> <pre><code>CREATE TABLE `contacts` (\n  `id` int NOT NULL,\n  `contact_email` varchar(255) DEFAULT NULL,\n  `contact_name` varchar(255) DEFAULT NULL,\n  `message` varchar(255) DEFAULT NULL,\n  `subject` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#entity","title":"Entity","text":"<ul> <li>Then in we create the <code>ContactEntity</code> class as below:</li> </ul> ContactEntity.java<pre><code>package com.spring.security.spring.security.filtering.method.level.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"contacts\")\n@Getter\n@Setter\npublic class ContactEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n\n    private String contactName;\n\n    private String contactEmail;\n\n    private String subject;\n\n    private String message;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#repository","title":"Repository","text":"<ul> <li>Let's create <code>ContactRepository</code> below.</li> </ul> ContactRepository.java<pre><code>package com.spring.security.spring.security.filtering.method.level.repository;\n\nimport com.spring.security.spring.security.filtering.method.level.entity.ContactEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ContactRepository extends JpaRepository&lt;ContactEntity, Integer&gt; {\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#service","title":"Service","text":"<ul> <li>Next, we need to create a service class which call to <code>ContactRepository</code> for getting <code>ContactEntities</code> and map them into <code>Contact</code> DTOs.</li> </ul> ContactService.java<pre><code>package com.spring.security.spring.security.filtering.method.level.service;\n\nimport com.spring.security.spring.security.filtering.method.level.entity.ContactEntity;\nimport com.spring.security.spring.security.filtering.method.level.model.Contact;\nimport com.spring.security.spring.security.filtering.method.level.repository.ContactRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PostFilter;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class ContactService {\n\n    @Autowired\n    private ContactRepository contactRepository;\n\n    public List&lt;Contact&gt; createContacts(List&lt;Contact&gt; contacts) {\n        List&lt;ContactEntity&gt; contactEntities = this.toContactEntities(contacts);\n        contactEntities = this.contactRepository.saveAll(contactEntities);\n        return this.toContacts(contactEntities);\n    }\n\n    private List&lt;ContactEntity&gt; toContactEntities(List&lt;Contact&gt; contacts) {\n        List&lt;ContactEntity&gt; contactEntities = new ArrayList&lt;&gt;();\n        contacts.forEach(c -&gt; {\n            ContactEntity contactEntity = new ContactEntity();\n            contactEntity.setContactEmail(c.getContactEmail());\n            contactEntity.setContactName(c.getContactName());\n            contactEntity.setSubject(c.getSubject());\n            contactEntity.setMessage(c.getMessage());\n            contactEntities.add(contactEntity);\n        });\n        return contactEntities;\n    }\n\n    public List&lt;Contact&gt; getContacts() {\n        List&lt;ContactEntity&gt; contactEntities = this.contactRepository.findAll();\n        return this.toContacts(contactEntities);\n    }\n\n    private List&lt;Contact&gt; toContacts(List&lt;ContactEntity&gt; contactEntities) {\n        List&lt;Contact&gt; contacts = new ArrayList&lt;&gt;();\n        contactEntities.forEach(c -&gt; {\n            Contact contact = new Contact();\n            contact.setId(c.getId());\n            contact.setContactName(c.getContactName());\n            contact.setContactEmail(c.getContactEmail());\n            contact.setSubject(c.getSubject());\n            contact.setMessage(c.getMessage());\n            contacts.add(contact);\n        });\n        return contacts;\n    }\n\n}\n</code></pre> <ul> <li>The <code>Contact</code> DTO will look like below.</li> </ul> Contact.java<pre><code>package com.spring.security.spring.security.filtering.method.level.model;\n\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class Contact {\n\n    private Integer id;\n\n    private String contactName;\n\n    private String contactEmail;\n\n    private String subject;\n\n    private String message;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#controller","title":"Controller","text":"<ul> <li>Finally, we will create a new api in the <code>ContactController</code> for getting <code>Contacts</code> by customerId.</li> </ul> ContactController.java<pre><code>package com.spring.security.spring.security.filtering.method.level.controller;\n\nimport com.spring.security.spring.security.filtering.method.level.model.Contact;\nimport com.spring.security.spring.security.filtering.method.level.service.ContactService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class ContactController {\n\n    @Autowired\n    private ContactService contactService;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/contact\")\n    public ResponseEntity&lt;String&gt; getContactDetail() {\n        return ResponseEntity.ok(\"This is the contact details\");\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/contact\")\n    public ResponseEntity&lt;List&lt;Contact&gt;&gt; createContact(@RequestBody List&lt;Contact&gt; contacts) {\n        return ResponseEntity.ok(this.contactService.createContacts(contacts));\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/contacts\")\n    public ResponseEntity&lt;List&lt;Contact&gt;&gt; getContacts() {\n        return ResponseEntity.ok(this.contactService.getContacts());\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#configuration","title":"Configuration","text":"<ul> <li>Now, to use Method Level Security we will enable it by add the annotation <code>@EnableGlobalMethodSecurity</code> into the main class as below.</li> </ul> CustomDefaultSpringSecurityApplication.java<pre><code>package com.spring.security.spring.security.filtering.method.level;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@SpringBootApplication\n@EnableJpaRepositories\n@EnableWebSecurity(debug = true)\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)\npublic class SpringSecurityFilteringMethodLevelApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringSecurityFilteringMethodLevelApplication.class, args);\n    }\n}\n</code></pre> <ul> <li>The param <code>prePostEnabled = true</code> means we enables Spring Security <code>@PreFilter</code> &amp; <code>@PostFilter</code> annotations.</li> <li>Now, let's try to add <code>@PreFilter</code> into the <code>ContactController</code> as below.</li> </ul> ContactController.java<pre><code>package com.spring.security.spring.security.filtering.method.level.controller;\n\nimport com.spring.security.spring.security.filtering.method.level.model.Contact;\nimport com.spring.security.spring.security.filtering.method.level.service.ContactService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreFilter;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class ContactController {\n\n    @Autowired\n    private ContactService contactService;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/contact\")\n    public ResponseEntity&lt;String&gt; getContactDetail() {\n        return ResponseEntity.ok(\"This is the contact details\");\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"/v1/contact\")\n    @PreFilter(\"filterObject.subject == 'Hello'\")\n    public ResponseEntity&lt;List&lt;Contact&gt;&gt; createContact(@RequestBody List&lt;Contact&gt; contacts) {\n        return ResponseEntity.ok(this.contactService.createContacts(contacts));\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/contacts\")\n    public ResponseEntity&lt;List&lt;Contact&gt;&gt; getContacts() {\n        return ResponseEntity.ok(this.contactService.getContacts());\n    }\n\n}\n</code></pre> <ul> <li> <p>As you can see the <code>@PreFilter</code> will require all input object have to contain subject equal <code>Hello</code> value. If not it will be removed out of the list automatically.</p> </li> <li> <p>Then in the <code>ContactService</code>. We will add <code>@PostFilter</code> as below. </p> </li> </ul> ContactService.java<pre><code>package com.spring.security.spring.security.filtering.method.level.service;\n\nimport com.spring.security.spring.security.filtering.method.level.entity.ContactEntity;\nimport com.spring.security.spring.security.filtering.method.level.model.Contact;\nimport com.spring.security.spring.security.filtering.method.level.repository.ContactRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PostFilter;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class ContactService {\n\n    @Autowired\n    private ContactRepository contactRepository;\n\n    public List&lt;Contact&gt; createContacts(List&lt;Contact&gt; contacts) {\n        List&lt;ContactEntity&gt; contactEntities = this.toContactEntities(contacts);\n        contactEntities = this.contactRepository.saveAll(contactEntities);\n        return this.toContacts(contactEntities);\n    }\n\n    private List&lt;ContactEntity&gt; toContactEntities(List&lt;Contact&gt; contacts) {\n        List&lt;ContactEntity&gt; contactEntities = new ArrayList&lt;&gt;();\n        contacts.forEach(c -&gt; {\n            ContactEntity contactEntity = new ContactEntity();\n            contactEntity.setContactEmail(c.getContactEmail());\n            contactEntity.setContactName(c.getContactName());\n            contactEntity.setSubject(c.getSubject());\n            contactEntity.setMessage(c.getMessage());\n            contactEntities.add(contactEntity);\n        });\n        return contactEntities;\n    }\n\n    @PostFilter(\"filterObject.contactName == 'Han'\")\n    public List&lt;Contact&gt; getContacts() {\n        List&lt;ContactEntity&gt; contactEntities = this.contactRepository.findAll();\n        return this.toContacts(contactEntities);\n    }\n\n    private List&lt;Contact&gt; toContacts(List&lt;ContactEntity&gt; contactEntities) {\n        List&lt;Contact&gt; contacts = new ArrayList&lt;&gt;();\n        contactEntities.forEach(c -&gt; {\n            Contact contact = new Contact();\n            contact.setId(c.getId());\n            contact.setContactName(c.getContactName());\n            contact.setContactEmail(c.getContactEmail());\n            contact.setSubject(c.getSubject());\n            contact.setMessage(c.getMessage());\n            contacts.add(contact);\n        });\n        return contacts;\n    }\n\n}\n</code></pre> <ul> <li>As you can see the <code>@PostFilter</code> will require all  object have to contain contactName equal <code>Han</code> value. If not it will be removed out of the list automatically.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#testing","title":"Testing","text":"<ul> <li>Now, let's start our Spring Security application and call api <code>/v1/user</code> with user email <code>han.do@example.com</code> for login and get the jwt token.</li> </ul> <ul> <li>Then we will use this jwt token to call POST <code>/v1/contact</code> for creating Contacts with request's body as below</li> </ul> <pre><code>[\n    {\n        \"contactName\": \"Han\",\n        \"contactEmail\": \"han.do@example.com\",\n        \"subject\": \"Hello\",\n        \"message\": \"Hello from Han\"\n    },\n     {\n        \"contactName\": \"John\",\n        \"contactEmail\": \"john.wick@example.com\",\n        \"subject\": \"Hello\",\n        \"message\": \"Hello from John\"\n    },\n    {\n        \"contactName\": \"Tom\",\n        \"contactEmail\": \"tom.wick@example.com\",\n        \"subject\": \"Hi\",\n        \"message\": \"Hi from Tom\"\n    }\n]\n</code></pre> <ul> <li>So, with this request body and the <code>@PreFilter</code> that we set up, there are only two first contacts that will passed the <code>@PreFilter</code> and saved into the database because they have subject <code>Hello</code>. Let's execute the request and you will received the result as below.</li> </ul> <ul> <li> <p>As you can see, only two first contacts are saved in the database.</p> </li> <li> <p>Then we will use the jwt token to continue to call GET <code>/v1/contacts</code> for getting Contacts. With the current set up for <code>@PostFilter</code> we will only received the first Contact record in the database because on it has contactName equal <code>Han</code>. Let's execute the request and you will received the result as below.</p> </li> </ul> <p></p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#conclusion","title":"Conclusion","text":"<ul> <li><code>@PreFilter</code> and  <code>@PostFilter</code> are useful in some special case and easy to use. It helps developers saving for time for writing codes to checking data. However, If we use it for a very large list so it can be a performance issue and inefficient. </li> <li>For example if we have thousands of <code>Contacts</code> in our database and we want to retrieve the five <code>Contacts</code> that are currently have contactName with <code>Han</code> value. If we use\u00a0<code>@PreFilter</code>\u00a0the database operation will fetch all the <code>Contacts</code> first, and iterate through all of them to filter out the ones that have not contactName with <code>Han</code> value.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#see_also","title":"See Also","text":"<ul> <li>Method Level Security</li> <li>Invocation Authorization Method Level</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filtering%20Authorization%20Method%20Level/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/","title":"Filters Implementation","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#filters_implementation_1","title":"Filters Implementation","text":"<ul> <li>We can create <code>filters</code> by implementing the <code>Filter</code> interface from the <code>javax.servlet</code> package.</li> </ul> Filter.java<pre><code>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage javax.servlet;\n\nimport java.io.IOException;\n\n/**\n * A filter is an object that performs filtering tasks on either the request to\n * a resource (a servlet or static content), or on the response from a resource,\n * or both. &lt;br&gt;\n * &lt;br&gt;\n * Filters perform filtering in the &lt;code&gt;doFilter&lt;/code&gt; method. Every Filter\n * has access to a FilterConfig object from which it can obtain its\n * initialization parameters, a reference to the ServletContext which it can\n * use, for example, to load resources needed for filtering tasks.\n * &lt;p&gt;\n * Filters are configured in the deployment descriptor of a web application\n * &lt;p&gt;\n * Examples that have been identified for this design are&lt;br&gt;\n * 1) Authentication Filters &lt;br&gt;\n * 2) Logging and Auditing Filters &lt;br&gt;\n * 3) Image conversion Filters &lt;br&gt;\n * 4) Data compression Filters &lt;br&gt;\n * 5) Encryption Filters &lt;br&gt;\n * 6) Tokenizing Filters &lt;br&gt;\n * 7) Filters that trigger resource access events &lt;br&gt;\n * 8) XSL/T filters &lt;br&gt;\n * 9) Mime-type chain Filter &lt;br&gt;\n *\n * @since Servlet 2.3\n */\npublic interface Filter {\n\n    /**\n     * Called by the web container to indicate to a filter that it is being\n     * placed into service. The servlet container calls the init method exactly\n     * once after instantiating the filter. The init method must complete\n     * successfully before the filter is asked to do any filtering work.\n     * &lt;p&gt;\n     * The web container cannot place the filter into service if the init method\n     * either:\n     * &lt;ul&gt;\n     * &lt;li&gt;Throws a ServletException&lt;/li&gt;\n     * &lt;li&gt;Does not return within a time period defined by the web\n     *     container&lt;/li&gt;\n     * &lt;/ul&gt;\n     * The default implementation is a NO-OP.\n     *\n     * @param filterConfig The configuration information associated with the\n     *                     filter instance being initialised\n     *\n     * @throws ServletException if the initialisation fails\n     */\n    public default void init(FilterConfig filterConfig) throws ServletException {}\n\n    /**\n     * The &lt;code&gt;doFilter&lt;/code&gt; method of the Filter is called by the container\n     * each time a request/response pair is passed through the chain due to a\n     * client request for a resource at the end of the chain. The FilterChain\n     * passed in to this method allows the Filter to pass on the request and\n     * response to the next entity in the chain.\n     * &lt;p&gt;\n     * A typical implementation of this method would follow the following\n     * pattern:- &lt;br&gt;\n     * 1. Examine the request&lt;br&gt;\n     * 2. Optionally wrap the request object with a custom implementation to\n     * filter content or headers for input filtering &lt;br&gt;\n     * 3. Optionally wrap the response object with a custom implementation to\n     * filter content or headers for output filtering &lt;br&gt;\n     * 4. a) &lt;strong&gt;Either&lt;/strong&gt; invoke the next entity in the chain using\n     * the FilterChain object (&lt;code&gt;chain.doFilter()&lt;/code&gt;), &lt;br&gt;\n     * 4. b) &lt;strong&gt;or&lt;/strong&gt; not pass on the request/response pair to the\n     * next entity in the filter chain to block the request processing&lt;br&gt;\n     * 5. Directly set headers on the response after invocation of the next\n     * entity in the filter chain.\n     *\n     * @param request  The request to process\n     * @param response The response associated with the request\n     * @param chain    Provides access to the next filter in the chain for this\n     *                 filter to pass the request and response to for further\n     *                 processing\n     *\n     * @throws IOException if an I/O error occurs during this filter's\n     *                     processing of the request\n     * @throws ServletException if the processing fails for any other reason\n     */\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException;\n\n    /**\n     * Called by the web container to indicate to a filter that it is being\n     * taken out of service. This method is only called once all threads within\n     * the filter's doFilter method have exited or after a timeout period has\n     * passed. After the web container calls this method, it will not call the\n     * doFilter method again on this instance of the filter. &lt;br&gt;\n     * &lt;br&gt;\n     *\n     * This method gives the filter an opportunity to clean up any resources\n     * that are being held (for example, memory, file handles, threads) and make\n     * sure that any persistent state is synchronized with the filter's current\n     * state in memory.\n     *\n     * The default implementation is a NO-OP.\n     */\n    public default void destroy() {}\n}\n</code></pre> <ul> <li>So you will see there are three methods, <code>init()</code>, <code>doFilter()</code> and <code>destroy()</code>. </li> <li> <p>The method <code>init()</code> is used for adding configurations that you want the web container should run first when the filter is instantiating. The method <code>destroy()</code> is used for adding configurations or clean up resources when the web container indicate to a filter that it is being taken out of service. Both methods <code>init()</code> and <code>destroy()</code> are on executed once, when a filter is initiating or destroyed.</p> </li> <li> <p>The method <code>doFilter()</code> is used for applying our business logic for the filter. The filter will be called by the container each time a request/response pair is passed through the filter chain. </p> </li> <li>When implementing the <code>Filter</code> interface we will need to override the <code>doFilter()</code> method to have our own custom logic. This method receives as parameters the <code>ServletRequest</code>, <code>ServletResponse</code> and <code>FilterChain</code>.</li> </ul> Parameters Descriptions <code>ServletRequest</code> It represents the HTTP request. We use the <code>ServletRequest</code> object to retrieve details about the request from the client <code>ServletResponse</code> It represents the HTTP response. We use the <code>ServletResponse</code> object to modify the response before sending it back to the client or further along the filter chain. <code>FilterChain</code> The filter chain represents a collection of filters with a defined order in which they act. We use the <code>FilterChain</code> object to forward the request to the next filter in the chain. <ul> <li>You can add a new filter to the spring security chain either before, after, or at the position of a know one. Each position of the filter is an index (a number), and you might find it also referred to as <code>the order</code>.</li> <li>Below are the methods available to configure a custom filter in the spring security flow.</li> </ul> Methods Descriptions <code>addFilterBefore(filter, class)</code> adds a filter before the position of the specified filter class. <code>addFilterAfter(filter, class)</code> adds a filter after the position of the specified filter class <code>addFilterAt(filter, class)</code> adds a filter at the location of the specified filter class","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#add_filter_before","title":"Add Filter Before","text":"<ul> <li>So we will use the method <code>addFilterBefore(filter, class)</code> to add a filter before the position of the specific filter class.</li> <li>We will add a custom filter before the <code>BasicAuthenticationFilter</code> with name <code>RequestValidationBeforeFilter</code> for our validations where the input email provided should be the email string which match the email pattern. </li> <li>An simple email pattern require the email which must have 3 parts: <code>username</code>, <code>@</code> and <code>domain</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#create_filter","title":"Create Filter","text":"<ul> <li>We will create a class name <code>RequestValidationBeforeFilter</code> and implement the interface <code>Filter</code> of package <code>javax.servlet</code>. </li> <li>Then we will <code>override</code> the method <code>doFilter</code> of this interface as the code below.</li> </ul> RequestValidationBeforeFilter.java<pre><code>package com.spring.security.spring.security.filters.filter;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.Base64Utils;\nimport org.springframework.util.StringUtils;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.regex.Pattern;\n\n@Component\npublic class RequestValidationBeforeFilter implements Filter {\n\n    private static final String AUTHORIZATION_HEADER = \"Authorization\";\n    private static final String AUTHENTICATION_SCHEMA_BASIC = \"Basic\";\n    private static final String STRICT_EMAIL_PATTERN = \"^(?=.{1,64}@)[A-Za-z0-9_-]+(\\\\.[A-Za-z0-9_-]+)*@\"\n            + \"[^-][A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$\";\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n        String authorizationHeader = request.getHeader(AUTHORIZATION_HEADER);\n        if (StringUtils.startsWithIgnoreCase(authorizationHeader, AUTHENTICATION_SCHEMA_BASIC)) {\n            byte[] base64Token = authorizationHeader.substring(6).getBytes(StandardCharsets.UTF_8);\n            String decodedToken = new String(Base64Utils.decode(base64Token));\n            String email = decodedToken.substring(0, decodedToken.indexOf(\":\"));\n            if (!this.patternMatches(email)) {\n                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n                return;\n            }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n    private boolean patternMatches(String emailAddress) {\n        return Pattern.compile(STRICT_EMAIL_PATTERN)\n                .matcher(emailAddress)\n                .matches();\n    }\n}\n</code></pre> <ul> <li>So in the method <code>doFilter()</code>, we will try to get the header by name through method <code>getHeader()</code> of <code>HttpServletRequest</code> which extended the <code>ServletRequest</code>.</li> <li>Then when we got the <code>Authorization</code> header's value, we will continue to check this value is the <code>Basic Authentication</code> or not. The header's value of <code>Basic Authentication</code> will look like below.</li> </ul> <pre><code>Basic aGFuLmRvQGV4YW1wbGUuY29tOjEyMzQ1\n</code></pre> <ul> <li>If the value is not the <code>Basic Authentication</code> then we will forward the request and response to the next filters by method <code>filterChain.doFilter(servletRequest, servletResponse);</code>. If the value is the <code>Basic Authentication</code> then we will decode Base64 string and get the email. Below is the example decoded Base64 string.</li> </ul> <pre><code>han.do@example.com:12345\n</code></pre> <ul> <li>Then after we get the email from the decoded string, we will check this email string with the <code>email pattern</code>, so if this is not correct with the email pattern then we will set <code>Bad Request</code> in the <code>HttpServletResponse</code> and return, we don't need to forward the <code>request</code> and <code>response</code> to next filters.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#configuration","title":"Configuration","text":"<ul> <li>After created the custom filter, we need to configure spring security for adding this custom filter before the <code>BasicAuthenticationFilter</code>. So let's go to the <code>ProjectSecurityConfig</code> class and add the configuration as below.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.filters.config;\n\nimport com.spring.security.spring.security.filters.filter.RequestValidationBeforeFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private RequestValidationBeforeFilter requestValidationBeforeFilter;\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().addFilterBefore(requestValidationBeforeFilter, BasicAuthenticationFilter.class)\n                .authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")\n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")\n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")\n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will use the method <code>addFilterBefore()</code> in which the first param is our custom filter <code>RequestValidationBeforeFilter</code> and the second param is the filter class <code>BasicAuthenticationFilter.class</code> that we want to put our custom filter before.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#testing","title":"Testing","text":"<ul> <li>Now, let's start our spring security application and call an example api with the incorrect email pattern <code>han.doexample.com</code> to check. Then you should received 400 status, Bad Request in the response.</li> </ul> <ul> <li>Then, if you look into the IDE logs, you will see your custom filter <code>RequestValidationBeforeFilter</code> had been added before the <code>BasicAuthenticationFilter</code> filter</li> </ul> <pre><code>************************************************************\n\nRequest received for GET '/v1/loan':\n\norg.apache.catalina.connector.RequestFacade@4c974202\n\nservletPath:/v1/loan\npathInfo:null\nheaders: \nauthorization: Basic aGFuLmRvZXhhbXBsZS5jb206MTIzNDU=\nuser-agent: PostmanRuntime/7.29.2\naccept: */*\npostman-token: 1b348b07-0eaf-4496-baab-154b9a24a8d5\nhost: localhost:8080\naccept-encoding: gzip, deflate, br\nconnection: keep-alive\ncookie: JSESSIONID=27349488C0435189094D752C8D2BBFC1; XSRF-TOKEN=30a82878-5827-4b90-a340-2c090b2d16e7\n\n\nSecurity filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  CorsFilter\n  CsrfFilter\n  LogoutFilter\n  UsernamePasswordAuthenticationFilter\n  DefaultLoginPageGeneratingFilter\n  DefaultLogoutPageGeneratingFilter\n  RequestValidationBeforeFilter\n  BasicAuthenticationFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n\n\n************************************************************\n</code></pre> <ul> <li>Now, we will continue testing with the correct email pattern <code>han.do@example.com</code>, then we should see the status 200 OK.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#add_filter_after","title":"Add Filter After","text":"<ul> <li>So we will use the method <code>addFilterAfter(filter, class)</code> to add a filter after the position of the specific filter class.</li> <li>We will add a custom filter after the <code>BasicAuthenticationFilter</code> with name <code>AuthoritiesLoggingAfterFilter</code> for our spring security. So after the <code>BasicAuthenticationFilter</code> successfully, we will try to log out the email and roles of user.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#create_filter_1","title":"Create Filter","text":"<ul> <li>Like the way we created the Before filter, we will create a class name <code>AuthoritiesLoggingAfterFilter</code> and implement the interface <code>Filter</code> of package <code>javax.servlet</code>. </li> <li>Then we will <code>override</code> the method <code>doFilter</code> of this interface as the code below.</li> </ul> AuthoritiesLoggingAfterFilter.java<pre><code>package com.spring.security.spring.security.filters.filter;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.*;\nimport java.io.IOException;\nimport java.util.Objects;\n\n@Component\npublic class AuthoritiesLoggingAfterFilter implements Filter {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(AuthoritiesLoggingAfterFilter.class);\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        if (Objects.nonNull(authentication)) {\n            LOGGER.info(\"User with email: \" + authentication.getName() + \"log in successfully with authorities \" + authentication.getAuthorities());\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n}\n</code></pre> <ul> <li>In this filter we will try to get the <code>Authentication</code> in the <code>SecurityContextHolder</code> and log out the username and roles after authentication successfully.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#configuration_1","title":"Configuration","text":"<ul> <li>After created the custom filter, we need to configure spring security for adding this custom filter after the <code>BasicAuthenticationFilter</code>. So let's go to the <code>ProjectSecurityConfig</code> class and add the configuration as below.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.filters.config;\n\nimport com.spring.security.spring.security.filters.filter.AuthoritiesLoggingAfterFilter;\nimport com.spring.security.spring.security.filters.filter.RequestValidationBeforeFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private AuthoritiesLoggingAfterFilter authoritiesLoggingAfterFilter;\n    @Autowired\n    private RequestValidationBeforeFilter requestValidationBeforeFilter;\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().addFilterBefore(requestValidationBeforeFilter, BasicAuthenticationFilter.class)\n                .addFilterAfter(authoritiesLoggingAfterFilter, BasicAuthenticationFilter.class)\n                .authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")\n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")\n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")\n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will use the method <code>addFilterAfter()</code> in which the first param is our custom filter <code>AuthoritiesLoggingAfterFilter</code> and the second param is the filter class <code>BasicAuthenticationFilter.class</code> that we want to put our custom filter after.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#testing_1","title":"Testing","text":"<ul> <li>Now, let's start our spring security application and call an example api. Then, if you look into the IDE logs, you will see our custom filter <code>AuthoritiesLoggingAfterFilter</code> had been added after the <code>BasicAuthenticationFilter</code> filter.</li> </ul> <pre><code>************************************************************\n\nRequest received for GET '/v1/loan':\n\norg.apache.catalina.connector.RequestFacade@479241a0\n\nservletPath:/v1/loan\npathInfo:null\nheaders: \nauthorization: Basic aGFuLmRvQGV4YW1wbGUuY29tOjEyMzQ1\nuser-agent: PostmanRuntime/7.29.2\naccept: */*\npostman-token: dd75b516-0603-4a3b-a85e-29056f4f9105\nhost: localhost:8080\naccept-encoding: gzip, deflate, br\nconnection: keep-alive\n\n\nSecurity filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  CorsFilter\n  CsrfFilter\n  LogoutFilter\n  UsernamePasswordAuthenticationFilter\n  DefaultLoginPageGeneratingFilter\n  DefaultLogoutPageGeneratingFilter\n  RequestValidationBeforeFilter\n  BasicAuthenticationFilter\n  AuthoritiesLoggingAfterFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n\n\n************************************************************\n</code></pre> <ul> <li>You also see the log in the IDE of the <code>AuthoritiesLoggingAfterFilter</code> with content.</li> </ul> <pre><code>2022-07-31 14:32:16.069  INFO 8348 --- [nio-8080-exec-1] .c.b.s.s.f.AuthoritiesLoggingAfterFilter : User with email: han.do@example.comlog in successfully with authorities [ROLE_ADMIN, ROLE_USER]\n</code></pre> <ul> <li>So, it means after the <code>BasicAuthenticationFilter</code>, so spring security had validated and stored the user's <code>Authentication</code> in the spring security context and you can get it to log in the <code>AuthoritiesLoggingAfterFilter</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#add_filter_at","title":"Add Filter At","text":"<ul> <li>We will use the method <code>addFilterAt(filter, class)</code> to add a filter at the location of the specified filter class. But the order of the execution can't be guaranteed. This will not replace the filters already present at the same order. Since we will not have control on the order of the filters and it is random in nature we should avoid providing the filters at some order.</li> </ul> <ul> <li>We will add a custom filter at the <code>BasicAuthenticationFilter</code> with name <code>AuthoritiesLoggingAtFilter</code> for our spring security. So when the request go to the <code>BasicAuthenticationFilter</code> our filter can be triggered before/after <code>BasicAuthenticationFilter</code>, we will try to log out the a message to make sure our custom filter is triggered.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#create_filter_2","title":"Create Filter","text":"<ul> <li>Like the way we created the After filter, we will create a class name <code>AuthoritiesLoggingAtFilter</code> and implement the interface <code>Filter</code> of package <code>javax.servlet</code>. </li> <li>Then we will <code>override</code> the method <code>doFilter</code> of this interface as the code below.</li> </ul> AuthoritiesLoggingAtFilter.java<pre><code>package com.spring.security.spring.security.filters.filter;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.*;\nimport java.io.IOException;\n\n@Component\npublic class AuthoritiesLoggingAtFilter implements Filter {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(AuthoritiesLoggingAtFilter.class);\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        LOGGER.info(\"Authentication Validation is in progress!\");\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n}\n</code></pre> <ul> <li>In the method <code>doFilter()</code>, we just simply log out the message to make sure this filter will be called when our spring security application received a request.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#configuration_2","title":"Configuration","text":"<ul> <li>After created the custom filter, we need to configure spring security for adding this custom filter after the <code>BasicAuthenticationFilter</code>. So let's go to the <code>ProjectSecurityConfig</code> class and add the configuration as below.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.filters.config;\n\nimport com.spring.security.spring.security.filters.filter.AuthoritiesLoggingAfterFilter;\nimport com.spring.security.spring.security.filters.filter.AuthoritiesLoggingAtFilter;\nimport com.spring.security.spring.security.filters.filter.RequestValidationBeforeFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private AuthoritiesLoggingAfterFilter authoritiesLoggingAfterFilter;\n    @Autowired\n    private AuthoritiesLoggingAtFilter authoritiesLoggingAtFilter;\n    @Autowired\n    private RequestValidationBeforeFilter requestValidationBeforeFilter;\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().addFilterBefore(requestValidationBeforeFilter, BasicAuthenticationFilter.class)\n                .addFilterAfter(authoritiesLoggingAfterFilter, BasicAuthenticationFilter.class)\n                .addFilterAt(authoritiesLoggingAtFilter, BasicAuthenticationFilter.class)\n                .authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")\n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")\n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")\n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will use the method <code>addFilterAt()</code> in which the first param is our custom filter <code>AuthoritiesLoggingAtFilter</code> and the second param is the filter class <code>BasicAuthenticationFilter.class</code> that we want to put our custom filter at.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#testing_2","title":"Testing","text":"<ul> <li>Now, let's start our spring security application and call an example api. Then, if you look into the IDE logs, you will see our custom filter <code>AuthoritiesLoggingAtFilter</code> had been added before/after the <code>BasicAuthenticationFilter</code> filter. However, both filters <code>AuthoritiesLoggingAtFilter</code> and <code>BasicAuthenticationFilter</code> are always after the filter <code>RequestValidationBeforeFilter</code> and before the filter <code>AuthoritiesLoggingAfterFilter</code>.</li> </ul> <pre><code>************************************************************\n\nRequest received for GET '/v1/loan':\n\norg.apache.catalina.connector.RequestFacade@1e322782\n\nservletPath:/v1/loan\npathInfo:null\nheaders: \nauthorization: Basic aGFuLmRvQGV4YW1wbGUuY29tOjEyMzQ1\nuser-agent: PostmanRuntime/7.29.2\naccept: */*\npostman-token: 647b3d19-4336-4a58-8a66-ab51c98f19d8\nhost: localhost:8080\naccept-encoding: gzip, deflate, br\nconnection: keep-alive\ncookie: JSESSIONID=3036A9F01B3D6959313A0817BFEA2DE0; XSRF-TOKEN=79e2e5cb-f57a-4ea1-9b90-a96a18e52735\n\n\nSecurity filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  CorsFilter\n  CsrfFilter\n  LogoutFilter\n  UsernamePasswordAuthenticationFilter\n  DefaultLoginPageGeneratingFilter\n  DefaultLogoutPageGeneratingFilter\n  RequestValidationBeforeFilter\n  AuthoritiesLoggingAtFilter\n  BasicAuthenticationFilter\n  AuthoritiesLoggingAfterFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n\n\n************************************************************\n</code></pre> <ul> <li>You can also see the log details that you put into the <code>AuthoritiesLoggingAtFilter</code> in the image below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#see_also","title":"See Also","text":"<ul> <li>Filters In Spring Security</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20Implementation/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20In%20Spring%20Security/","title":"Filters In Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20In%20Spring%20Security/#filters_in_authorization_and_authentication_flow","title":"Filters In Authorization And Authentication Flow","text":"<ul> <li>Lot of times we will have situations where we need to perform some house keeping activities during the authentication and authorization flow. Some examples are:<ul> <li>Input validation</li> <li>Tracing, Auditing and Reporting</li> <li>Logging of input like IP Address etc.</li> <li>Encryption and Decryption</li> <li>Multi factor authentication using OPT</li> </ul> </li> <li>All such requirements can be handled using HTTP <code>filters</code> inside Spring Security. <code>Filters</code> are servlet concepts which are leveraged in Spring Security as well.</li> <li>We already saw some in built filters of Spring Security framework like <code>Authentication filter</code>,  <code>Authorization filter</code>, <code>CSRF filter</code>, <code>CORS filter</code> in previous sections.</li> <li>A filter is a component which receives requests, process its logic and handover to the next filter in the chain.</li> <li>Spring Security is based on a chain of servlet filters. Each filter has a specific responsibility and depending on the configuration, filters are added or removed. We can add our custom filters as well based on the need.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20In%20Spring%20Security/#understanding_and_implementing_filters","title":"Understanding And Implementing Filters","text":"<ul> <li>Inbuilt Filters Of Spring Security</li> <li>Filters Implementation</li> <li>GenericFilterBean And OncePerRequestFilter</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20In%20Spring%20Security/#see_also","title":"See Also","text":"<ul> <li>Spring Security Introduction</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Filters%20In%20Spring%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/GenericFilterBean%20And%20OncePerRequestFilter/","title":"GenericFilterBean And OncePerRequestFilter","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/GenericFilterBean%20And%20OncePerRequestFilter/#genericfilterbean_and_onceperrequestfilter_1","title":"GenericFilterBean and OncePerRequestFilter","text":"<ul> <li>So we already know about the <code>Filter</code> interface and make some implementation examples with it in Filters Implementation. However, spring framework also provides us two more default implementation filter classes which are <code>GenericFilterBean</code> and <code>OncePerRequestFilter</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/GenericFilterBean%20And%20OncePerRequestFilter/#genericfilterbean","title":"GenericFilterBean","text":"<ul> <li><code>GenericFilterBean</code>: this is an abstract filter class which allows us to use the initilization parameters and configurations done inside the web.xml of Spring Web applications. This class is a Spring specific base implementation of the <code>Filter</code> interface.</li> </ul> GenericFilterBean.java<pre><code>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.filter;\n\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.MutablePropertyValues;\nimport org.springframework.beans.PropertyAccessorFactory;\nimport org.springframework.beans.PropertyValue;\nimport org.springframework.beans.PropertyValues;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.EnvironmentCapable;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceEditor;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.ServletContextAware;\nimport org.springframework.web.context.support.ServletContextResourceLoader;\nimport org.springframework.web.context.support.StandardServletEnvironment;\nimport org.springframework.web.util.NestedServletException;\n\n/**\n * Simple base implementation of {@link javax.servlet.Filter} which treats\n * its config parameters ({@code init-param} entries within the\n * {@code filter} tag in {@code web.xml}) as bean properties.\n *\n * &lt;p&gt;A handy superclass for any type of filter. Type conversion of config\n * parameters is automatic, with the corresponding setter method getting\n * invoked with the converted value. It is also possible for subclasses to\n * specify required properties. Parameters without matching bean property\n * setter will simply be ignored.\n *\n * &lt;p&gt;This filter leaves actual filtering to subclasses, which have to\n * implement the {@link javax.servlet.Filter#doFilter} method.\n *\n * &lt;p&gt;This generic filter base class has no dependency on the Spring\n * {@link org.springframework.context.ApplicationContext} concept.\n * Filters usually don't load their own context but rather access service\n * beans from the Spring root application context, accessible via the\n * filter's {@link #getServletContext() ServletContext} (see\n * {@link org.springframework.web.context.support.WebApplicationContextUtils}).\n *\n * @author Juergen Hoeller\n * @since 06.12.2003\n * @see #addRequiredProperty\n * @see #initFilterBean\n * @see #doFilter\n */\npublic abstract class GenericFilterBean implements Filter, BeanNameAware, EnvironmentAware,\n        EnvironmentCapable, ServletContextAware, InitializingBean, DisposableBean {\n\n    /** Logger available to subclasses. */\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    @Nullable\n    private String beanName;\n\n    @Nullable\n    private Environment environment;\n\n    @Nullable\n    private ServletContext servletContext;\n\n    @Nullable\n    private FilterConfig filterConfig;\n\n    private final Set&lt;String&gt; requiredProperties = new HashSet&lt;&gt;(4);\n\n\n    /**\n     * Stores the bean name as defined in the Spring bean factory.\n     * &lt;p&gt;Only relevant in case of initialization as bean, to have a name as\n     * fallback to the filter name usually provided by a FilterConfig instance.\n     * @see org.springframework.beans.factory.BeanNameAware\n     * @see #getFilterName()\n     */\n    @Override\n    public void setBeanName(String beanName) {\n        this.beanName = beanName;\n    }\n\n    /**\n     * Set the {@code Environment} that this filter runs in.\n     * &lt;p&gt;Any environment set here overrides the {@link StandardServletEnvironment}\n     * provided by default.\n     * &lt;p&gt;This {@code Environment} object is used only for resolving placeholders in\n     * resource paths passed into init-parameters for this filter. If no init-params are\n     * used, this {@code Environment} can be essentially ignored.\n     */\n    @Override\n    public void setEnvironment(Environment environment) {\n        this.environment = environment;\n    }\n\n    /**\n     * Return the {@link Environment} associated with this filter.\n     * &lt;p&gt;If none specified, a default environment will be initialized via\n     * {@link #createEnvironment()}.\n     * @since 4.3.9\n     */\n    @Override\n    public Environment getEnvironment() {\n        if (this.environment == null) {\n            this.environment = createEnvironment();\n        }\n        return this.environment;\n    }\n\n    /**\n     * Create and return a new {@link StandardServletEnvironment}.\n     * &lt;p&gt;Subclasses may override this in order to configure the environment or\n     * specialize the environment type returned.\n     * @since 4.3.9\n     */\n    protected Environment createEnvironment() {\n        return new StandardServletEnvironment();\n    }\n\n    /**\n     * Stores the ServletContext that the bean factory runs in.\n     * &lt;p&gt;Only relevant in case of initialization as bean, to have a ServletContext\n     * as fallback to the context usually provided by a FilterConfig instance.\n     * @see org.springframework.web.context.ServletContextAware\n     * @see #getServletContext()\n     */\n    @Override\n    public void setServletContext(ServletContext servletContext) {\n        this.servletContext = servletContext;\n    }\n\n    /**\n     * Calls the {@code initFilterBean()} method that might\n     * contain custom initialization of a subclass.\n     * &lt;p&gt;Only relevant in case of initialization as bean, where the\n     * standard {@code init(FilterConfig)} method won't be called.\n     * @see #initFilterBean()\n     * @see #init(javax.servlet.FilterConfig)\n     */\n    @Override\n    public void afterPropertiesSet() throws ServletException {\n        initFilterBean();\n    }\n\n    /**\n     * Subclasses may override this to perform custom filter shutdown.\n     * &lt;p&gt;Note: This method will be called from standard filter destruction\n     * as well as filter bean destruction in a Spring application context.\n     * &lt;p&gt;This default implementation is empty.\n     */\n    @Override\n    public void destroy() {\n    }\n\n\n    /**\n     * Subclasses can invoke this method to specify that this property\n     * (which must match a JavaBean property they expose) is mandatory,\n     * and must be supplied as a config parameter. This should be called\n     * from the constructor of a subclass.\n     * &lt;p&gt;This method is only relevant in case of traditional initialization\n     * driven by a FilterConfig instance.\n     * @param property name of the required property\n     */\n    protected final void addRequiredProperty(String property) {\n        this.requiredProperties.add(property);\n    }\n\n    /**\n     * Standard way of initializing this filter.\n     * Map config parameters onto bean properties of this filter, and\n     * invoke subclass initialization.\n     * @param filterConfig the configuration for this filter\n     * @throws ServletException if bean properties are invalid (or required\n     * properties are missing), or if subclass initialization fails.\n     * @see #initFilterBean\n     */\n    @Override\n    public final void init(FilterConfig filterConfig) throws ServletException {\n        Assert.notNull(filterConfig, \"FilterConfig must not be null\");\n\n        this.filterConfig = filterConfig;\n\n        // Set bean properties from init parameters.\n        PropertyValues pvs = new FilterConfigPropertyValues(filterConfig, this.requiredProperties);\n        if (!pvs.isEmpty()) {\n            try {\n                BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n                ResourceLoader resourceLoader = new ServletContextResourceLoader(filterConfig.getServletContext());\n                Environment env = this.environment;\n                if (env == null) {\n                    env = new StandardServletEnvironment();\n                }\n                bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, env));\n                initBeanWrapper(bw);\n                bw.setPropertyValues(pvs, true);\n            }\n            catch (BeansException ex) {\n                String msg = \"Failed to set bean properties on filter '\" +\n                    filterConfig.getFilterName() + \"': \" + ex.getMessage();\n                logger.error(msg, ex);\n                throw new NestedServletException(msg, ex);\n            }\n        }\n\n        // Let subclasses do whatever initialization they like.\n        initFilterBean();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Filter '\" + filterConfig.getFilterName() + \"' configured for use\");\n        }\n    }\n\n    /**\n     * Initialize the BeanWrapper for this GenericFilterBean,\n     * possibly with custom editors.\n     * &lt;p&gt;This default implementation is empty.\n     * @param bw the BeanWrapper to initialize\n     * @throws BeansException if thrown by BeanWrapper methods\n     * @see org.springframework.beans.BeanWrapper#registerCustomEditor\n     */\n    protected void initBeanWrapper(BeanWrapper bw) throws BeansException {\n    }\n\n    /**\n     * Subclasses may override this to perform custom initialization.\n     * All bean properties of this filter will have been set before this\n     * method is invoked.\n     * &lt;p&gt;Note: This method will be called from standard filter initialization\n     * as well as filter bean initialization in a Spring application context.\n     * Filter name and ServletContext will be available in both cases.\n     * &lt;p&gt;This default implementation is empty.\n     * @throws ServletException if subclass initialization fails\n     * @see #getFilterName()\n     * @see #getServletContext()\n     */\n    protected void initFilterBean() throws ServletException {\n    }\n\n    /**\n     * Make the FilterConfig of this filter available, if any.\n     * Analogous to GenericServlet's {@code getServletConfig()}.\n     * &lt;p&gt;Public to resemble the {@code getFilterConfig()} method\n     * of the Servlet Filter version that shipped with WebLogic 6.1.\n     * @return the FilterConfig instance, or {@code null} if none available\n     * @see javax.servlet.GenericServlet#getServletConfig()\n     */\n    @Nullable\n    public FilterConfig getFilterConfig() {\n        return this.filterConfig;\n    }\n\n    /**\n     * Make the name of this filter available to subclasses.\n     * Analogous to GenericServlet's {@code getServletName()}.\n     * &lt;p&gt;Takes the FilterConfig's filter name by default.\n     * If initialized as bean in a Spring application context,\n     * it falls back to the bean name as defined in the bean factory.\n     * @return the filter name, or {@code null} if none available\n     * @see javax.servlet.GenericServlet#getServletName()\n     * @see javax.servlet.FilterConfig#getFilterName()\n     * @see #setBeanName\n     */\n    @Nullable\n    protected String getFilterName() {\n        return (this.filterConfig != null ? this.filterConfig.getFilterName() : this.beanName);\n    }\n\n    /**\n     * Make the ServletContext of this filter available to subclasses.\n     * Analogous to GenericServlet's {@code getServletContext()}.\n     * &lt;p&gt;Takes the FilterConfig's ServletContext by default.\n     * If initialized as bean in a Spring application context,\n     * it falls back to the ServletContext that the bean factory runs in.\n     * @return the ServletContext instance\n     * @throws IllegalStateException if no ServletContext is available\n     * @see javax.servlet.GenericServlet#getServletContext()\n     * @see javax.servlet.FilterConfig#getServletContext()\n     * @see #setServletContext\n     */\n    protected ServletContext getServletContext() {\n        if (this.filterConfig != null) {\n            return this.filterConfig.getServletContext();\n        }\n        else if (this.servletContext != null) {\n            return this.servletContext;\n        }\n        else {\n            throw new IllegalStateException(\"No ServletContext\");\n        }\n    }\n\n\n    /**\n     * PropertyValues implementation created from FilterConfig init parameters.\n     */\n    @SuppressWarnings(\"serial\")\n    private static class FilterConfigPropertyValues extends MutablePropertyValues {\n\n        /**\n         * Create new FilterConfigPropertyValues.\n         * @param config the FilterConfig we'll use to take PropertyValues from\n         * @param requiredProperties set of property names we need, where\n         * we can't accept default values\n         * @throws ServletException if any required properties are missing\n         */\n        public FilterConfigPropertyValues(FilterConfig config, Set&lt;String&gt; requiredProperties)\n                throws ServletException {\n\n            Set&lt;String&gt; missingProps = (!CollectionUtils.isEmpty(requiredProperties) ?\n                    new HashSet&lt;&gt;(requiredProperties) : null);\n\n            Enumeration&lt;String&gt; paramNames = config.getInitParameterNames();\n            while (paramNames.hasMoreElements()) {\n                String property = paramNames.nextElement();\n                Object value = config.getInitParameter(property);\n                addPropertyValue(new PropertyValue(property, value));\n                if (missingProps != null) {\n                    missingProps.remove(property);\n                }\n            }\n\n            // Fail if we are still missing properties.\n            if (!CollectionUtils.isEmpty(missingProps)) {\n                throw new ServletException(\n                        \"Initialization from FilterConfig for filter '\" + config.getFilterName() +\n                        \"' failed; the following required properties were missing: \" +\n                        StringUtils.collectionToDelimitedString(missingProps, \", \"));\n            }\n        }\n    }\n\n}\n</code></pre> <ul> <li>As you can see, in this <code>GenericFilterBean</code> class, the we see the default configuration for <code>init()</code> method, so when we extend this class for creating our custom filter, we just need to override the method <code>doFilter()</code> and apply our business logic there. </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/GenericFilterBean%20And%20OncePerRequestFilter/#onceperrequestfilter","title":"OncePerRequestFilter","text":"<ul> <li><code>OncePerRequestFilter</code> is an extend class of the <code>GenericFilterBean</code>. We can extend the\u00a0<code>OncePerRequestFilter</code>\u00a0for using in special situations. For example, in spring security when the request go through the filter chain, we may want some of the authentication actions to happen only once for the request. So using <code>OncePerRequestFilter</code> will guarantees that the\u00a0<code>OncePerRequestFilter</code>\u00a0is executed only once for a given request.</li> </ul> OncePerRequestFilter.java<pre><code>/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.filter;\n\nimport java.io.IOException;\n\nimport javax.servlet.DispatcherType;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.context.request.async.WebAsyncManager;\nimport org.springframework.web.context.request.async.WebAsyncUtils;\nimport org.springframework.web.util.WebUtils;\n\n/**\n * Filter base class that aims to guarantee a single execution per request\n * dispatch, on any servlet container. It provides a {@link #doFilterInternal}\n * method with HttpServletRequest and HttpServletResponse arguments.\n *\n * &lt;p&gt;As of Servlet 3.0, a filter may be invoked as part of a\n * {@link javax.servlet.DispatcherType#REQUEST REQUEST} or\n * {@link javax.servlet.DispatcherType#ASYNC ASYNC} dispatches that occur in\n * separate threads. A filter can be configured in {@code web.xml} whether it\n * should be involved in async dispatches. However, in some cases servlet\n * containers assume different default configuration. Therefore sub-classes can\n * override the method {@link #shouldNotFilterAsyncDispatch()} to declare\n * statically if they should indeed be invoked, &lt;em&gt;once&lt;/em&gt;, during both types\n * of dispatches in order to provide thread initialization, logging, security,\n * and so on. This mechanism complements and does not replace the need to\n * configure a filter in {@code web.xml} with dispatcher types.\n *\n * &lt;p&gt;Subclasses may use {@link #isAsyncDispatch(HttpServletRequest)} to\n * determine when a filter is invoked as part of an async dispatch, and use\n * {@link #isAsyncStarted(HttpServletRequest)} to determine when the request\n * has been placed in async mode and therefore the current dispatch won't be\n * the last one for the given request.\n *\n * &lt;p&gt;Yet another dispatch type that also occurs in its own thread is\n * {@link javax.servlet.DispatcherType#ERROR ERROR}. Subclasses can override\n * {@link #shouldNotFilterErrorDispatch()} if they wish to declare statically\n * if they should be invoked &lt;em&gt;once&lt;/em&gt; during error dispatches.\n *\n * &lt;p&gt;The {@link #getAlreadyFilteredAttributeName} method determines how to\n * identify that a request is already filtered. The default implementation is\n * based on the configured name of the concrete filter instance.\n *\n * @author Juergen Hoeller\n * @author Rossen Stoyanchev\n * @since 06.12.2003\n */\npublic abstract class OncePerRequestFilter extends GenericFilterBean {\n\n    /**\n     * Suffix that gets appended to the filter name for the\n     * \"already filtered\" request attribute.\n     * @see #getAlreadyFilteredAttributeName\n     */\n    public static final String ALREADY_FILTERED_SUFFIX = \".FILTERED\";\n\n\n    /**\n     * This {@code doFilter} implementation stores a request attribute for\n     * \"already filtered\", proceeding without filtering again if the\n     * attribute is already there.\n     * @see #getAlreadyFilteredAttributeName\n     * @see #shouldNotFilter\n     * @see #doFilterInternal\n     */\n    @Override\n    public final void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)\n            throws ServletException, IOException {\n\n        if (!(request instanceof HttpServletRequest) || !(response instanceof HttpServletResponse)) {\n            throw new ServletException(\"OncePerRequestFilter just supports HTTP requests\");\n        }\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n\n        String alreadyFilteredAttributeName = getAlreadyFilteredAttributeName();\n        boolean hasAlreadyFilteredAttribute = request.getAttribute(alreadyFilteredAttributeName) != null;\n\n        if (skipDispatch(httpRequest) || shouldNotFilter(httpRequest)) {\n            // Proceed without invoking this filter...\n            filterChain.doFilter(request, response);\n        }\n        else if (hasAlreadyFilteredAttribute) {\n            if (DispatcherType.ERROR.equals(request.getDispatcherType())) {\n                doFilterNestedErrorDispatch(httpRequest, httpResponse, filterChain);\n                return;\n            }\n\n            // Proceed without invoking this filter...\n            filterChain.doFilter(request, response);\n        }\n        else {\n            // Do invoke this filter...\n            request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);\n            try {\n                doFilterInternal(httpRequest, httpResponse, filterChain);\n            }\n            finally {\n                // Remove the \"already filtered\" request attribute for this request.\n                request.removeAttribute(alreadyFilteredAttributeName);\n            }\n        }\n    }\n\n    private boolean skipDispatch(HttpServletRequest request) {\n        if (isAsyncDispatch(request) &amp;&amp; shouldNotFilterAsyncDispatch()) {\n            return true;\n        }\n        if (request.getAttribute(WebUtils.ERROR_REQUEST_URI_ATTRIBUTE) != null &amp;&amp; shouldNotFilterErrorDispatch()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * The dispatcher type {@code javax.servlet.DispatcherType.ASYNC} introduced\n     * in Servlet 3.0 means a filter can be invoked in more than one thread over\n     * the course of a single request. This method returns {@code true} if the\n     * filter is currently executing within an asynchronous dispatch.\n     * @param request the current request\n     * @since 3.2\n     * @see WebAsyncManager#hasConcurrentResult()\n     */\n    protected boolean isAsyncDispatch(HttpServletRequest request) {\n        return DispatcherType.ASYNC.equals(request.getDispatcherType());\n    }\n\n    /**\n     * Whether request processing is in asynchronous mode meaning that the\n     * response will not be committed after the current thread is exited.\n     * @param request the current request\n     * @since 3.2\n     * @see WebAsyncManager#isConcurrentHandlingStarted()\n     */\n    protected boolean isAsyncStarted(HttpServletRequest request) {\n        return WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted();\n    }\n\n    /**\n     * Return the name of the request attribute that identifies that a request\n     * is already filtered.\n     * &lt;p&gt;The default implementation takes the configured name of the concrete filter\n     * instance and appends \".FILTERED\". If the filter is not fully initialized,\n     * it falls back to its class name.\n     * @see #getFilterName\n     * @see #ALREADY_FILTERED_SUFFIX\n     */\n    protected String getAlreadyFilteredAttributeName() {\n        String name = getFilterName();\n        if (name == null) {\n            name = getClass().getName();\n        }\n        return name + ALREADY_FILTERED_SUFFIX;\n    }\n\n    /**\n     * Can be overridden in subclasses for custom filtering control,\n     * returning {@code true} to avoid filtering of the given request.\n     * &lt;p&gt;The default implementation always returns {@code false}.\n     * @param request current HTTP request\n     * @return whether the given request should &lt;i&gt;not&lt;/i&gt; be filtered\n     * @throws ServletException in case of errors\n     */\n    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {\n        return false;\n    }\n\n    /**\n     * The dispatcher type {@code javax.servlet.DispatcherType.ASYNC} introduced\n     * in Servlet 3.0 means a filter can be invoked in more than one thread\n     * over the course of a single request. Some filters only need to filter\n     * the initial thread (e.g. request wrapping) while others may need\n     * to be invoked at least once in each additional thread for example for\n     * setting up thread locals or to perform final processing at the very end.\n     * &lt;p&gt;Note that although a filter can be mapped to handle specific dispatcher\n     * types via {@code web.xml} or in Java through the {@code ServletContext},\n     * servlet containers may enforce different defaults with respect to\n     * dispatcher types. This flag enforces the design intent of the filter.\n     * &lt;p&gt;The default return value is \"true\", which means the filter will not be\n     * invoked during subsequent async dispatches. If \"false\", the filter will\n     * be invoked during async dispatches with the same guarantees of being\n     * invoked only once during a request within a single thread.\n     * @since 3.2\n     */\n    protected boolean shouldNotFilterAsyncDispatch() {\n        return true;\n    }\n\n    /**\n     * Whether to filter error dispatches such as when the servlet container\n     * processes and error mapped in {@code web.xml}. The default return value\n     * is \"true\", which means the filter will not be invoked in case of an error\n     * dispatch.\n     * @since 3.2\n     */\n    protected boolean shouldNotFilterErrorDispatch() {\n        return true;\n    }\n\n\n    /**\n     * Same contract as for {@code doFilter}, but guaranteed to be\n     * just invoked once per request within a single request thread.\n     * See {@link #shouldNotFilterAsyncDispatch()} for details.\n     * &lt;p&gt;Provides HttpServletRequest and HttpServletResponse arguments instead of the\n     * default ServletRequest and ServletResponse ones.\n     */\n    protected abstract void doFilterInternal(\n            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n            throws ServletException, IOException;\n\n    /**\n     * Typically an ERROR dispatch happens after the REQUEST dispatch completes,\n     * and the filter chain starts anew. On some servers however the ERROR\n     * dispatch may be nested within the REQUEST dispatch, e.g. as a result of\n     * calling {@code sendError} on the response. In that case we are still in\n     * the filter chain, on the same thread, but the request and response have\n     * been switched to the original, unwrapped ones.\n     * &lt;p&gt;Sub-classes may use this method to filter such nested ERROR dispatches\n     * and re-apply wrapping on the request or response. {@code ThreadLocal}\n     * context, if any, should still be active as we are still nested within\n     * the filter chain.\n     * @since 5.1.9\n     */\n    protected void doFilterNestedErrorDispatch(HttpServletRequest request, HttpServletResponse response,\n            FilterChain filterChain) throws ServletException, IOException {\n\n        filterChain.doFilter(request, response);\n    }\n\n}\n</code></pre> <ul> <li>In this <code>OncePerRequestFilter</code> you can see the method <code>doFilter()</code> had been implemented, so when you extend this <code>OncePerRequestFilter</code> for creating your custom filter you should not override the method <code>doFilter()</code>. So, now you will ask a question, if we don't override this method so how can we apply our business logic into the filter?.</li> <li>The answer is you should override the method <code>doFilterInternal()</code> of this class. If you look into the method <code>doFilter()</code> you will see there is an implementation code to make sure your filter is only executed once on a request. Then in this implementation you will see it call the method <code>doFilterInternal()</code>, so this is the method that you should override and put your businees logic there, spring framework will guarantee your custom filter will be executed once per request.</li> <li>In Spring Security you will see the <code>BasicAuthenticationFilter</code> is also extend this <code>OncePerRequestFilter</code> and override the method <code>doFilterInternal()</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/GenericFilterBean%20And%20OncePerRequestFilter/#see_also","title":"See Also","text":"<ul> <li>Filters In Spring Security</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/GenericFilterBean%20And%20OncePerRequestFilter/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/","title":"Hash In Spring Boot","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/#what_is_hashing","title":"What Is Hashing?","text":"<ul> <li><code>Hashing</code> is simply passing some data through a formula that produces a result, called a hash. That hash is usually a string of characters and the hashes generated by a formula are always the same length, regardless of how much data you feed into it. For example, the MD5 formula always produces 32 character-long hashes. Moreover, each time you run the same data through the formula, you will get the exact same hash out of it and there are no ways to convert a hash back to the original data. More information.</li> <li><code>Hash</code> is a path of security. It is used to ensure data integrity, this is commonly referred as checksum, or signature. In order words, if some part of data is changed, then you can know that it's changed.</li> <li>There are a huge number of widely accepted hashing algorithms available for general use. For example, MD5, SHA1, SHA224, SHA256, SHA512.</li> </ul> Data HASHED DATA minhduc 0D54D2191C796096A19C01D9D98BD4DC2706EFEABB79747B1EC506C00C481DC2","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/#salt_in_hash","title":"Salt In Hash","text":"<ul> <li><code>Salt</code> is a random data that is used as an additional input to a one-way function that hashes data, a password or passphrase, <code>salts</code> are used to <code>safeguard passwords in storage</code>.</li> </ul> Data SALT HASHED DATA minhduc CEAB0B1771049333E44D20A880509292E9 2781CC3D03F80AC41B73EC068E3EFF F9799760BFC12492E91A8B70A84C3E8EE 90996ACAC6D0B6FD19448DACECAE4A4","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/#why_hash","title":"Why Hash?","text":"<ul> <li>You may have heard of hashing used in the context of passwords. Among many uses of hashing algorithms, this is one of the most well-known. When you sign up on a web app using password, rather than storing your actual password, which would not only be a violation of your privacy but also a big risk for the web app owner, the web app hashed the password and stores only the hash.</li> <li>Then, the next time you log in, the web app again hashes your password and compares this hash with the hash stored earlier. If the hashed match, the web app can be confident that you know your password even though the web app doesn't have your actual password in storage.</li> <li> <p><code>Hasing</code> is used in Password management, verify the integrity of the downloaded file.</p> </li> <li> <p>So why should we use hash for storing password?</p> <ul> <li>Not reversible, no plain Password</li> <li>If attacker can steal user database there are no way to get plain passwords.</li> <li>Better hash with salt</li> <li>Unique salt each user</li> </ul> </li> <li> <p>Why do we should not store encrypt password?</p> </li> <li>Attacker can steal user database &amp; Encryption secret Key</li> <li>Decrypt all user data and get plain password</li> <li>When hacker have username and password, they can re-use username &amp; password</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/#examples","title":"Examples","text":"<ul> <li>Example With SHA-256 In Spring Boot</li> <li>Example With SHA-512 In Spring Boot</li> <li>Example With Pbkdf2 In Spring Boot</li> <li>Example With Bcrypt In Spring Boot</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/#see_also","title":"See Also","text":"<ul> <li>Password Management With PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Hash%20In%20Spring%20Boot/#references","title":"References","text":"<ul> <li>Dataspace.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/How%20Authorities%20Stored/","title":"How Authorities Stored","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/How%20Authorities%20Stored/#where_are_all_authorities_stored","title":"Where Are All Authorities Stored?","text":"<ul> <li>The answer is inside the <code>UserDetails</code> which is a contract of the <code>User</code> inside the Spring Security, the <code>authorities</code> will be stored in the form of collection of <code>GrantedAuthority</code>. These <code>authorities</code> can be fetched using the method <code>getAuthorities()</code>. See the <code>UserDetails</code> interface below:</li> </ul> UserDetails.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.core.userdetails;\n\nimport java.io.Serializable;\nimport java.util.Collection;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\n\n/**\n * Provides core user information.\n *\n * &lt;p&gt;\n * Implementations are not used directly by Spring Security for security purposes. They\n * simply store user information which is later encapsulated into {@link Authentication}\n * objects. This allows non-security related user information (such as email addresses,\n * telephone numbers etc) to be stored in a convenient location.\n * &lt;p&gt;\n * Concrete implementations must take particular care to ensure the non-null contract\n * detailed for each method is enforced. See\n * {@link org.springframework.security.core.userdetails.User} for a reference\n * implementation (which you might like to extend or use in your code).\n *\n * @author Ben Alex\n * @see UserDetailsService\n * @see UserCache\n */\npublic interface UserDetails extends Serializable {\n\n    /**\n     * Returns the authorities granted to the user. Cannot return &lt;code&gt;null&lt;/code&gt;.\n     * @return the authorities, sorted by natural key (never &lt;code&gt;null&lt;/code&gt;)\n     */\n    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();\n\n    /**\n     * Returns the password used to authenticate the user.\n     * @return the password\n     */\n    String getPassword();\n\n    /**\n     * Returns the username used to authenticate the user. Cannot return\n     * &lt;code&gt;null&lt;/code&gt;.\n     * @return the username (never &lt;code&gt;null&lt;/code&gt;)\n     */\n    String getUsername();\n\n    /**\n     * Indicates whether the user's account has expired. An expired account cannot be\n     * authenticated.\n     * @return &lt;code&gt;true&lt;/code&gt; if the user's account is valid (ie non-expired),\n     * &lt;code&gt;false&lt;/code&gt; if no longer valid (ie expired)\n     */\n    boolean isAccountNonExpired();\n\n    /**\n     * Indicates whether the user is locked or unlocked. A locked user cannot be\n     * authenticated.\n     * @return &lt;code&gt;true&lt;/code&gt; if the user is not locked, &lt;code&gt;false&lt;/code&gt; otherwise\n     */\n    boolean isAccountNonLocked();\n\n    /**\n     * Indicates whether the user's credentials (password) has expired. Expired\n     * credentials prevent authentication.\n     * @return &lt;code&gt;true&lt;/code&gt; if the user's credentials are valid (ie non-expired),\n     * &lt;code&gt;false&lt;/code&gt; if no longer valid (ie expired)\n     */\n    boolean isCredentialsNonExpired();\n\n    /**\n     * Indicates whether the user is enabled or disabled. A disabled user cannot be\n     * authenticated.\n     * @return &lt;code&gt;true&lt;/code&gt; if the user is enabled, &lt;code&gt;false&lt;/code&gt; otherwise\n     */\n    boolean isEnabled();\n\n}\n</code></pre> <ul> <li>As you can see, the method <code>getAuthorities()</code> will return a collection of objects which implements <code>GrantedAuthority</code> interface.</li> <li>Then if we go inside the <code>GrantedAuthority</code> interface, you will see there is a <code>getAuthority()</code> method which will return the authority/role name in the form of a string. By using this value the Spring Security framework will try to validate the <code>authorities</code> of the user with the implementation of the application. See the <code>GrantedAuthority</code> interface below:</li> </ul> GrantedAuthority.java<pre><code>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.core;\n\nimport java.io.Serializable;\n\nimport org.springframework.security.access.AccessDecisionManager;\n\n/**\n * Represents an authority granted to an {@link Authentication} object.\n *\n * &lt;p&gt;\n * A &lt;code&gt;GrantedAuthority&lt;/code&gt; must either represent itself as a &lt;code&gt;String&lt;/code&gt;\n * or be specifically supported by an {@link AccessDecisionManager}.\n *\n * @author Ben Alex\n */\npublic interface GrantedAuthority extends Serializable {\n\n    /**\n     * If the &lt;code&gt;GrantedAuthority&lt;/code&gt; can be represented as a &lt;code&gt;String&lt;/code&gt;\n     * and that &lt;code&gt;String&lt;/code&gt; is sufficient in precision to be relied upon for an\n     * access control decision by an {@link AccessDecisionManager} (or delegate), this\n     * method should return such a &lt;code&gt;String&lt;/code&gt;.\n     * &lt;p&gt;\n     * If the &lt;code&gt;GrantedAuthority&lt;/code&gt; cannot be expressed with sufficient precision\n     * as a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; should be returned. Returning\n     * &lt;code&gt;null&lt;/code&gt; will require an &lt;code&gt;AccessDecisionManager&lt;/code&gt; (or delegate)\n     * to specifically support the &lt;code&gt;GrantedAuthority&lt;/code&gt; implementation, so\n     * returning &lt;code&gt;null&lt;/code&gt; should be avoided unless actually required.\n     * @return a representation of the granted authority (or &lt;code&gt;null&lt;/code&gt; if the\n     * granted authority cannot be expressed as a &lt;code&gt;String&lt;/code&gt; with sufficient\n     * precision).\n     */\n    String getAuthority();\n\n}\n</code></pre> <ul> <li>We have many implementations of <code>GrantedAuthority</code> interface and one of it that we usually use is the <code>SimpleGrantedAuthority</code>. See below:</li> </ul> SimpleGrantedAuthority.java<pre><code>/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.core.authority;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.SpringSecurityCoreVersion;\nimport org.springframework.util.Assert;\n\n/**\n * Basic concrete implementation of a {@link GrantedAuthority}.\n *\n * &lt;p&gt;\n * Stores a {@code String} representation of an authority granted to the\n * {@link org.springframework.security.core.Authentication Authentication} object.\n *\n * @author Luke Taylor\n */\npublic final class SimpleGrantedAuthority implements GrantedAuthority {\n\n    private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;\n\n    private final String role;\n\n    public SimpleGrantedAuthority(String role) {\n        Assert.hasText(role, \"A granted authority textual representation is required\");\n        this.role = role;\n    }\n\n    @Override\n    public String getAuthority() {\n        return this.role;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj instanceof SimpleGrantedAuthority) {\n            return this.role.equals(((SimpleGrantedAuthority) obj).role);\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return this.role.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        return this.role;\n    }\n\n}\n</code></pre> <ul> <li>In the <code>SimpleGrantedAuthority</code> with the method <code>getAuthority()</code>, you can see it's simple return the role or authority in the string format. So you can create the <code>SimpleGrantedAuthority</code> with any name you want which will be a role or authority at the end.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/How%20Authorities%20Stored/#see_also","title":"See Also","text":"<ul> <li>Spring Security With Authorization</li> <li>Configure Authorities</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/How%20Authorities%20Stored/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Inbuilt%20Filters%20Of%20Spring%20Security/","title":"Inbuilt Filters Of Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Inbuilt%20Filters%20Of%20Spring%20Security/#inbuilt_filters_of_spring_security_1","title":"Inbuilt Filters Of Spring Security","text":"<ul> <li> <p>We can always check the registered filters inside Spring Security with the below configurations.</p> <ul> <li><code>@EnableWebSecurity(debug=true)</code>: We need to enable debugging of the security details.</li> <li>Enable logging of the details by adding the below property in <code>application.properties/application.yml</code>.  application.yml<pre><code>logging:\n    level: \n        org.springframework.security.web.FilterChainProxy: DEBUG\n</code></pre></li> </ul> </li> <li> <p>Below are some of the internal filters of Spring Security that gets executed in the authentication flow.</p> </li> </ul> <pre><code>Security filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  CorsFilter\n  CsrfFilter\n  LogoutFilter\n  UsernamePasswordAuthenticationFilter\n  DefaultLoginPageGeneratingFilter\n  DefaultLogoutPageGeneratingFilter\n  BasicAuthenticationFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Inbuilt%20Filters%20Of%20Spring%20Security/#example_configuration","title":"Example Configuration","text":"<ul> <li>So based on the example in section Configure Roles, we will apply configuration for logging filters of spring security.</li> <li>Firstly, let's open the main class in our spring security project and add the annotation <code>@EnableWebSecurity(debug=true)</code> as below</li> </ul> CustomDefaultSpringSecurityApplication.java<pre><code>package com.springboot.security.custom.basic.spring.security;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;  \nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;  \n\n@SpringBootApplication  \n@EnableJpaRepositories  \n@EnableWebSecurity(debug = true)  \npublic class CustomDefaultSpringSecurityApplication {  \n\n    public static void main(String[] args) {  \n        SpringApplication.run(CustomDefaultSpringSecurityApplication.class, args);  \n    }  \n\n}\n</code></pre> <ul> <li>Next, we go to the <code>application.yml</code> and add the configuration as below:</li> </ul> application.yml<pre><code>logging:  \n  level:  \n    org.springframework.security.web.FilterChainProxy: DEBUG\n</code></pre> <ul> <li>Now, let's start our spring security application and call an example api to check the log in the IDE.</li> <li>You will see all information about the request that come into your spring security application and list of filters that spring security are using.</li> </ul> <pre><code>************************************************************\n\nRequest received for GET '/v1/loan':\n\norg.apache.catalina.connector.RequestFacade@328ce6f1\n\nservletPath:/v1/loan\npathInfo:null\nheaders: \nauthorization: Basic aGFuLmRvQGV4YW1wbGUuY29tOjEyMzQ1\nuser-agent: PostmanRuntime/7.29.2\naccept: */*\npostman-token: 30aa0e03-868f-4c42-a21c-a5b6c912adfa\nhost: localhost:8080\naccept-encoding: gzip, deflate, br\nconnection: keep-alive\n\n\nSecurity filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  CorsFilter\n  CsrfFilter\n  LogoutFilter\n  UsernamePasswordAuthenticationFilter\n  DefaultLoginPageGeneratingFilter\n  DefaultLogoutPageGeneratingFilter\n  BasicAuthenticationFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n\n\n************************************************************\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Inbuilt%20Filters%20Of%20Spring%20Security/#see_also","title":"See Also","text":"<ul> <li>Configure Roles</li> <li>Filters In Spring Security</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Inbuilt%20Filters%20Of%20Spring%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/","title":"Invocation Authorization Method Level","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#invocation_authorization_method_level_in_spring_security","title":"Invocation Authorization Method Level In Spring Security","text":"<ul> <li>Using invocation authorization we can decide if a user is authorized to invoke a method before the method executed (<code>preauthorization</code>) or after the method execution is completed (<code>postauthorization</code>).</li> <li>For filtering the parameters before calling the method we can use <code>Prefiltering</code> with annotation <code>@PreAuthorize</code>. See the sample configuration below.</li> </ul> LoanService.java<pre><code>@Service\npublic class LoanService {\n\n    @PreAuthorize(\"hasAuthority('admin')\")\n    @PreAuthorize(\"hasRole('admin')\")\n    @PreAuthorize(\"hasAnyRole('admin')\")\n    @PreAuthorize(\"# username == authentication.principal.username\")\n    @PreAuthorize(\"hasPermission(returnObject, 'admin')\")\n    public Load getLoadDetails(String username) {\n        return this.loadRepository.loadLoanByUsername(username);\n    }\n\n}\n</code></pre> <ul> <li>For applying <code>postauthorization</code> rules we can use annotation <code>@PostAuthorize</code>. Below is the sample configuration.</li> </ul> LoanService.java<pre><code>@Service\npublic class LoanService {\n\n    @PostAuthorize(\"returnObject.username == authentication.principal.username\")\n    @PostAuthorize(\"hasPermission(returnObject, 'admin')\")\n    public Load getLoadDetails(String username) {\n        return this.loadRepository.loadLoanByUsername(username);\n    }\n\n}\n</code></pre> <ul> <li>When implementing complex authorization logic, we can separate the logic using a separate class that implements <code>PermissionEvaluator</code> and override the method <code>hasPermission()</code> inside it which can be leveraged inside the <code>hasPermission</code> configuration.</li> <li>You should note that when applying the <code>@PostAuthorize</code> for the method and the user is not authorized to invoke that method. So the method will still be executed the business logic present inside it. Like it will commit the transactions to database, but while retaining the values to the user, if the alteration rules are not satisfying, then it will throw 403 error, which is an exception. But please don't expect database transactions to be rolled back, because even if you keep adding transaction annotation on top of the method, the committee transactions to the database will no be rolled back.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#preauthorization_and_postauthorization_examples","title":"PreAuthorization And PostAuthorization Examples","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#database_tables","title":"Database Tables","text":"<ul> <li>We will create <code>loan</code> table which will have <code>manyToOne</code> relationship with <code>customers</code> table. It means one customer can have many loans. The <code>loan</code> table will contain some columns such as <code>description</code>, <code>loan</code>, <code>paid</code>, <code>start_date</code> and <code>customer_id</code>. So, let's run the SQL script below to create the table.</li> </ul> <pre><code>CREATE TABLE `loan` (\n  `id` int NOT NULL,\n  `description` varchar(255) DEFAULT NULL,\n  `loan` float NOT NULL,\n  `paid` float NOT NULL,\n  `start_date` datetime(6) DEFAULT NULL,\n  `customer_id` int DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FK9vp9nqmxjlgsm2620ppi02hl4` (`customer_id`),\n  CONSTRAINT `FK9vp9nqmxjlgsm2620ppi02hl4` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n</code></pre> <ul> <li>Now for the current customer with email\u00a0<code>han.do@example.com</code>\u00a0in the\u00a0<code>customers</code>\u00a0table we will use the SQL statements below to set a loan for this customer.</li> </ul> <pre><code>INSERT INTO worldbank.loan\n(id, description, loan, paid, start_date, customer_id)\nVALUES(1, 'loan for buying car', 5000.0, 2500.0, '2022-09-01 12:12:12', 2);\n</code></pre> <ul> <li>So, after all our table will have data as below:</li> <li><code>customers table</code></li> </ul> id email password role 1 duc.nguyen@example.com 12345 admin 2 han.do@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO admin 3 john.wick@example.com $2a$12$V.A53NkiPnA45W44aRYi2OLwUbbu08aDoY409/SKY/bT7cdF1PpLO user <ul> <li><code>roles table</code></li> </ul> id role customer_id 1 ROLE_ADMIN 2 2 ROLE_USER 3 3 ROLE_USER 2 <ul> <li><code>loan table</code></li> </ul> id description loan paid start_date customer_id 1 loan for buying car 5000.0 2500.0 2022-09-01 12:12:12 2","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#entity","title":"Entity","text":"<ul> <li>After updating the database tables, we will also extend our\u00a0<code>CustomerEntity</code>\u00a0with\u00a0<code>LoanEntity</code>. So in\u00a0<code>CustomerEntity</code>\u00a0we will have a list of\u00a0<code>LoanEntity</code>\u00a0with\u00a0<code>@OneToMany</code>\u00a0relationship.</li> </ul> CustomerEntity.java<pre><code>package com.spring.security.spring.security.invocation.method.level.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.List;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"customers\")\n@Getter\n@Setter\npublic class CustomerEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    private String email;\n    private String password;\n    private String role;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.EAGER)\n    private Set&lt;AuthorityEntity&gt; authorities;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.EAGER)\n    private Set&lt;RoleEntity&gt; roles;\n\n    @OneToMany(mappedBy = \"customer\", fetch = FetchType.EAGER)\n    private List&lt;LoanEntity&gt; loans;\n\n}\n</code></pre> <ul> <li>Then in we create the <code>LoanEntity</code> class as below:</li> </ul> LoanEntity.java<pre><code>package com.spring.security.spring.security.invocation.method.level.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n@Entity\n@Table(name = \"loan\")\n@Getter\n@Setter\npublic class LoanEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n\n    private Date startDate;\n\n    private String description;\n\n    private float loan;\n\n    private float paid;\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    private CustomerEntity customer;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#repository","title":"Repository","text":"<ul> <li>Let's create <code>LoanRepository</code> below for query <code>LoanEntities</code> by customerId.</li> </ul> LoanRepository.java<pre><code>package com.spring.security.spring.security.invocation.method.level.repository;\n\nimport com.spring.security.spring.security.level.entity.LoanEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface LoanRepository extends JpaRepository&lt;LoanEntity, Integer&gt; {\n\n    List&lt;LoanEntity&gt; findByCustomerId(Integer customerId);\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#service","title":"Service","text":"<ul> <li>Next, we need to create a service class which call to <code>LoanRepository</code> for getting <code>LoanEntities</code> and map them into <code>Loan</code> DTO.</li> </ul> LoanService.java<pre><code>package com.spring.security.spring.security.invocation.method.level.service;  \n\nimport com.spring.security.spring.security.invocation.method.level.entity.LoanEntity;  \nimport com.spring.security.spring.security.invocation.method.level.model.Loan;  \nimport com.spring.security.spring.security.invocation.method.level.repository.LoanRepository;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class LoanService {\n\n    @Autowired\n    private LoanRepository loanRepository;\n\n    public List&lt;Loan&gt; getLoans(Integer customerId) {\n        List&lt;LoanEntity&gt; loanEntities = this.loanRepository.findByCustomerId(customerId);\n        List&lt;Loan&gt; loans = new ArrayList&lt;&gt;();\n        for (LoanEntity loanEntity: loanEntities) {\n            Loan loan = new Loan();\n            loan.setId(loanEntity.getId());\n            loan.setLoan(loanEntity.getLoan());\n            loan.setPaid(loanEntity.getPaid());\n            loan.setDescription(loanEntity.getDescription());\n            loan.setStartDate(loanEntity.getStartDate());\n            loans.add(loan);\n        }\n        return loans;\n\n    }\n\n}\n</code></pre> <ul> <li>The <code>Loan</code> DTO will look like below.</li> </ul> Loan.java<pre><code>package com.spring.security.spring.security.invocation.method.level.model;\n\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Getter\n@Setter\npublic class Loan {\n\n    private Integer id;\n    private Date startDate;\n    private String description;\n    private float loan;\n    private float paid;\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#controller","title":"Controller","text":"<ul> <li>Finally, we will create a new api in the <code>LoanController</code> for getting <code>Loans</code> by customerId.</li> </ul> LoanController.java<pre><code>package com.spring.security.spring.security.invocation.method.level.controller;  \n\nimport com.spring.security.spring.security.invocation.method.level.model.Loan;  \nimport com.spring.security.spring.security.invocation.method.level.service.LoanService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class LoanController {\n\n    @Autowired\n    private LoanService loanService;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/loan\")\n    public ResponseEntity&lt;String&gt; getLoanDetail() {\n        return ResponseEntity.ok(\"This is the loan details\");\n    }\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/loan/customers/{customerId}\")\n    public ResponseEntity&lt;List&lt;Loan&gt;&gt; getLoansByCustomerId(@PathVariable(\"customerId\") Integer customerId) {\n        return ResponseEntity.ok(this.loanService.getLoans(customerId));\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#configuration","title":"Configuration","text":"<ul> <li>Now, to use Method Level Security we will enable it by add the annotation <code>@EnableGlobalMethodSecurity</code> into the main class as below.</li> </ul> CustomDefaultSpringSecurityApplication.java<pre><code>package com.spring.security.spring.security.invocation.method.level;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@SpringBootApplication\n@EnableJpaRepositories\n@EnableWebSecurity(debug = true)\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)\npublic class SpringSecurityInvocationMethodLevelApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringSecurityInvocationMethodLevelApplication.class, args);\n    }\n}\n</code></pre> <ul> <li>The param <code>prePostEnabled = true</code> means we enables Spring Security <code>@PreAuthorize</code> &amp; <code>@PostAuthorize</code> annotations.</li> <li>Now, let's try to add <code>@PreAuthorize</code> and <code>@PostAuthorize</code> into the <code>LoanController</code> as below.</li> </ul> LoanController.java<pre><code>package com.spring.security.spring.security.invocation.method.level.controller;  \n\nimport com.spring.security.spring.security.invocation.method.level.model.Loan;  \nimport com.spring.security.spring.security.invocation.method.level.service.LoanService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PostAuthorize;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class LoanController {\n\n    @Autowired\n    private LoanService loanService;\n\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/loan\")\n    public ResponseEntity&lt;String&gt; getLoanDetail() {\n        return ResponseEntity.ok(\"This is the loan details\");\n    }\n\n    @PostAuthorize(\"hasRole('ADMIN')\")\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/loan/customers/{customerId}\")\n    public ResponseEntity&lt;List&lt;Loan&gt;&gt; getLoansByCustomerId(@PathVariable(\"customerId\") Integer customerId) {\n        return ResponseEntity.ok(this.loanService.getLoans(customerId));\n    }\n\n}\n</code></pre> <ul> <li>As you can see, both Apis will require user has role <code>ADMIN</code> to get the resource. However, with <code>@PreAuthorize</code> the Spring Security will check the authorization before the code in the method is executed. For <code>@PostAuthorize</code> the Spring Security will check the authorization after the code in the method is executed.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#testing","title":"Testing","text":"<ul> <li>Now, let's start our Spring Security application and call api <code>/v1/user</code> with user email <code>han.do@example.com</code> which has <code>ADMIN</code> role for login and get the jwt token.</li> </ul> <ul> <li>Then we will use this jwt token to call <code>/v1/loan</code> and <code>/v1/loan/customers/{customerId}</code> for <code>@PreAuthorize</code> and <code>@PostAuthorize</code>. You will receive 200 OK status as below.</li> </ul> <ul> <li>Next, we will try to call api <code>/v1/user</code> with user email <code>john.wick@example.com</code> which has <code>USER</code> role for login and get the jwt token.</li> </ul> <ul> <li>Then we will use this jwt token to call <code>/v1/loan</code> and <code>/v1/loan/customers/{customerId}</code> for <code>@PreAuthorize</code> and <code>@PostAuthorize</code>. You will receive 403 Forbidden status as below.</li> </ul> <ul> <li>However, if you put a debugger in the <code>LoanService</code> which is call by <code>/v1/loan/customers/{customerId}</code> api with <code>@PostAuthorize</code>. You will see the code of this api will be executed and spring security only check the Authorization after the api is going to response.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#see_also","title":"See Also","text":"<ul> <li>Method Level Security</li> <li>Filtering Authorization Method Level</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Invocation%20Authorization%20Method%20Level/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/","title":"JWT Token Details","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/#jwt_token_details_1","title":"JWT Token Details","text":"<ul> <li><code>JWT</code> mean <code>JSON Web Token</code>. It is a token implementation which will be in the JSON format and designed to use for the web requests.</li> <li><code>JWT</code> is the most common and favorite token type that many system use these days due to it's special features and advantages.</li> <li><code>JWT</code> tokens can be used both in the scenarios of Authorization/Authentication along with information exchange which means you can share certain user related data in the token itself which will reduce the burden of maintaining such details in the sessions on the server side.</li> <li>A <code>JWT</code> token has 3 parts each separated by a dot (<code>.</code>). Below is a sample JWT token.</li> </ul> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\\____________header________________/\n\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n\\_______________________________payload__________________________________/\n\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\\___________Signature(Optional)___________/\n</code></pre> <ul> <li>So the first part is the <code>header</code>, the second part is the <code>payload</code> and the third part is the <code>Signature</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/#header","title":"Header","text":"<ul> <li>In the <code>header</code>, we store metadata/info related to the token. If we chose to sign the token, the header contains the name of the algorithm that generates the signature. See the example json header below.</li> </ul> <pre><code>{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n</code></pre> <ul> <li>So This header json will be encoded with Base64 and we have the final result as below.</li> </ul> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\\____________header________________/\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/#payload","title":"Payload","text":"<ul> <li>In the <code>payload</code>, we can store details related to user, roles etc which can be used later for Authentication and Authorization. Though there is no such limitation what we can send and how we can send in the payload. but we should put our best efforts to keep it as light as possible. Let's see the example json payload below.</li> </ul> <pre><code>{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n</code></pre> <ul> <li>Also, this payload json will be encoded with Base64 and we have the final result as below.</li> </ul> <pre><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n\\_______________________________payload__________________________________/\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/#signature","title":"Signature","text":"<ul> <li>The <code>signature</code> part can be optional if the party that you share the <code>JWT</code> token is internal and that someone who you can trust but not open in the web.</li> <li>But if you are sharing this token to the client applications which will be used by all the users in the open web then we need to make sure that no one can change the header and body values like Authorities, username etc.</li> <li>To make sure that no one lampered the data on the network, we can send the signature of the content when initially the token is generated. To create the signature part you have to take the encoder later, the encoded payload, a secret, the algorithm specified in the header, and sign that.</li> <li>For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:</li> </ul> <pre><code>HMACSHA256(\n    base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret\n)\n\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\\___________Signature(HMACSHA256)_________/\n</code></pre> <ul> <li>The <code>signature</code> is used to verify the message wasn't changed along the way, and , in the case of token signed with a private key, it can also verify the sender of the <code>JWT</code> is who it says it is.</li> <li>Pulling all together the <code>JWT</code> token is 3 Base64-URL strings separaled by dots that can be easily passed in HTML and HTTP environments, while being more compact when compared to XML-based standards such as SAML.</li> </ul> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\\____________header________________/\n\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n\\_______________________________payload__________________________________/\n\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\\___________Signature(Optional)___________/\n\n\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/#see_also","title":"See Also","text":"<ul> <li>Token Authentication With JWT</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20Details/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/","title":"JWT Token In Spring Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#spring_security_project_configuration","title":"Spring Security Project Configuration","text":"<ul> <li>In this session we will try to apply JWT into our spring security application for both <code>Authentication</code> and <code>Authorization</code> through custom filters. In real projects, there are many other ways for handling JWT in spring security and we will try it for next sessions. </li> <li>Before implementing the JWT token in our spring security application, we need to import some dependencies and add configurations in following sections.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#dependencies","title":"Dependencies","text":"<ul> <li>We will need to import dependencies below in the <code>pom.xml</code> for JWT token impelementation.</li> </ul> pom.xml<pre><code>    &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.22&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.6.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n            &lt;version&gt;2.6.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;2.6.6&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;8.0.28&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--JWT TOKEN--&gt;\n    &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n            &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n            &lt;version&gt;0.11.5&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;\n            &lt;version&gt;0.11.5&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#http_security_configuration","title":"Http Security Configuration","text":"<ul> <li>As we have already known about the Session token that spring security will generated automatically by default in Spring Security Basic. So with this default behavior, a user will be authenticated for the first time he sends the request and received a session token (JSESSIONID) in the response cookies. Then for next times, the user just need to send the request with the JSESSIONID then he will be authenticated automatically without checking credentials.</li> <li>Our scope is applying JWT token into our spring security application so we need to disable this default generating JSESSIONID. So we need to add some configurations as below into the <code>ProjectSecurityConfig</code> class.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.jwt.config;\n\nimport com.spring.security.spring.security.jwt.constant.SecurityConstant;\nimport com.spring.security.spring.security.jwt.filter.AuthoritiesLoggingAfterFilter;\nimport com.spring.security.spring.security.jwt.filter.AuthoritiesLoggingAtFilter;\nimport com.spring.security.spring.security.jwt.filter.RequestValidationBeforeFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private AuthoritiesLoggingAfterFilter authoritiesLoggingAfterFilter;\n    @Autowired\n    private AuthoritiesLoggingAtFilter authoritiesLoggingAtFilter;\n    @Autowired\n    private RequestValidationBeforeFilter requestValidationBeforeFilter;\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    protected void configure(HttpSecurity http) throws Exception {\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and().csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().addFilterBefore(requestValidationBeforeFilter, BasicAuthenticationFilter.class)\n                .addFilterAfter(authoritiesLoggingAfterFilter, BasicAuthenticationFilter.class)\n                .addFilterAt(authoritiesLoggingAtFilter, BasicAuthenticationFilter.class)\n                .authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")\n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")\n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")\n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        corsConfiguration.setExposedHeaders(Collections.singletonList(SecurityConstant.AUTHORIZATION_HEADER));\n        corsConfiguration.setMaxAge(3600L);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre> <ul> <li>When you look into the configuration class above, you will see we will disable generating JSESSIONID automatically by setting <code>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</code> in which <code>SessionCreationPolicy.STATELESS</code> means Spring Security will never create a HttpSession and it will never use it to obtain the SecurityContext. That means when we generate the jwt token we will handle and mange it by ourself.</li> <li>Then in the CORS configuration we will add <code>corsConfiguration.setExposedHeaders(Collections.singletonList(\"Authorization\"));</code> to expose the response header <code>Authorization</code> for client. Because after generating a JWT token we will set it into this response header.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#create_filters_for_jwt_tokens","title":"Create Filters For Jwt Tokens","text":"<ul> <li>Now, we will create two filters in which one filter is used for creating jwt Token and the other is used for validate the jwt token.</li> <li>Before creating filters we will need to create contain class as below:</li> </ul> SecurityConstant.java<pre><code>package com.spring.security.spring.security.jwt.constant;\n\npublic class SecurityConstant {\n\n    public static final String AUTHORIZATION_HEADER = \"Authorization\";\n    public static final String BEARER_PREFIX = \"Bearer \";\n    public static final String CLAIM_USERNAME = \"username\";\n    public static final String CLAIM_AUTHORITIES = \"authorities\";\n    public static final String ISSUER = \"2D Garden\";\n    public static final String SUBJECT = \"JWT\";\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#filter_for_creating_jwt_token","title":"Filter For Creating Jwt Token","text":"<ul> <li>We will create a filter name <code>JwtTokenGeneratorFilter</code> which will extend the <code>OncePerRequestFilter</code> abstract class because we want to make the token is just created only one time when our application receive a request which has not authenticated yet. The implementation code will look like below.</li> </ul> JwtTokenGeneratorFilter.java<pre><code>package com.spring.security.spring.security.jwt.filter;\n\nimport com.spring.security.spring.security.jwt.constant.SecurityConstant;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.crypto.SecretKey;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\n\n@Component\npublic class JwtTokenGeneratorFilter extends OncePerRequestFilter {\n\n    @Value(\"${security.token.secret}\")\n    private String secret;\n    @Value(\"${security.token.timeout}\")\n    private Long timeout;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        if (Objects.nonNull(authentication)) {\n            SecretKey key = Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8));\n            Date now = new Date();\n            String jwt = Jwts.builder()\n                    .setIssuer(SecurityConstant.ISSUER)\n                    .setSubject(SecurityConstant.SUBJECT)\n                    .claim(SecurityConstant.CLAIM_USERNAME, authentication.getName())\n                    .claim(SecurityConstant.CLAIM_AUTHORITIES, this.getAuthorityString(authentication.getAuthorities()))\n                    .setIssuedAt(now)\n                    .setExpiration(new Date(now.getTime() + timeout))\n                    .signWith(key)\n                    .compact();\n            response.setHeader(SecurityConstant.AUTHORIZATION_HEADER, jwt);\n        }\n        filterChain.doFilter(request, response);\n    }\n\n    private String getAuthorityString(Collection&lt;? extends GrantedAuthority&gt; grantedAuthorities) {\n        Set&lt;String&gt; authorities = new HashSet&lt;&gt;();\n        grantedAuthorities.forEach(g -&gt; authorities.add(g.getAuthority()));\n        return String.join(\",\", authorities);\n    }\n}\n</code></pre> <ul> <li>So as you can see in the <code>doFilterInternal()</code>, we will check the <code>SecurityContext</code> that contains the <code>Authentication</code> or not. If <code>SecurityContext</code> had contained the <code>Authentication</code> so it means the user had been logged in successfully and we will generate the Jwt token and put it in the response's header for the user. Then we will use the <code>Jwts.builder()</code> to build the Jwt Token, we also need a Secret key which is a random string that we put in the <code>application.yml</code>.</li> </ul> application.yml<pre><code>spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/worldbank?useUnicode=true&amp;characterEncoding=UTF-8\n    username: root\n    password: password\n  jpa:\n    hibernate.ddl-auto: update\n    hibernate.dialect: org.hibernate.dialect.MySQL5Dialect\n    generate-ddl: true\n    show-sql: true\n\nsecurity:\n  token:\n    secret: 2472B08201704D96A5844807E43BA02A9E0CCA945381123A82B1DD4E852B9325\n    timeout: 30000\n\nlogging:\n  level:\n    org.springframework.security.web.FilterChainProxy: DEBUG\n</code></pre> <ul> <li>Then in the Jwt Body token we will put some information like: <code>Issuer</code>, <code>Subject</code>, <code>username</code> claim, <code>authorities</code> claim, <code>IssuedAt</code> and <code>Expiration</code>.</li> </ul> Field Set Method Value iss setIssuer() hardcoded sub setSubject() hardcoded username claim() value is got from Authentication authorities claim() value is got from Authentication iat setIssuedAt() currentDate exp setExpiration() currentDate + 30s <ul> <li>The life time of a jwt token will based on the <code>issuedAt</code> and <code>expiration</code>. In which, the <code>issueAt</code> is the time that the jwt is created and <code>expiration</code> is the time that the jwt will be expired and can't use anymore. In this example the jwt token life time will be 30s after it is created.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#filter_for_validating_jwt_token","title":"Filter For Validating Jwt Token","text":"<ul> <li>We will also create a filter name <code>JwtTokenValidatorFilter</code> which will extend the <code>OncePerRequestFilter</code> abstract class because we want to make the token is just validated only one time when our application receive a request. The implementation code will look like below.</li> </ul> JwtTokenValidatorFilter.java<pre><code>package com.spring.security.spring.security.jwt.filter;\n\nimport com.spring.security.spring.security.jwt.constant.SecurityConstant;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.crypto.SecretKey;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Objects;\n\n@Component\npublic class JwtTokenValidatorFilter extends OncePerRequestFilter {\n\n    @Value(\"${security.token.secret}\")\n    private String secret;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String bearerToken = request.getHeader(SecurityConstant.AUTHORIZATION_HEADER);\n        if (this.isBearerToken(bearerToken)) {\n            try {\n                String jwt = bearerToken.substring(SecurityConstant.BEARER_PREFIX.length());\n                SecretKey key = Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8));\n                Claims claims = Jwts.parserBuilder()\n                        .setSigningKey(key)\n                        .build()\n                        .parseClaimsJws(jwt)\n                        .getBody();\n                String username = String.valueOf(claims.get(SecurityConstant.CLAIM_USERNAME));\n                String authorities = (String) claims.get(SecurityConstant.CLAIM_AUTHORITIES);\n                Authentication authentication = new UsernamePasswordAuthenticationToken(username, null,\n                        AuthorityUtils.commaSeparatedStringToAuthorityList(authorities));\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            } catch (Exception e) {\n                throw new BadCredentialsException(\"Invalid Token!\");\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n\n    @Override\n    protected boolean shouldNotFilter(HttpServletRequest request) {\n        return request.getServletPath().equals(\"/v1/user\");\n    }\n\n    private boolean isBearerToken(String token) {\n        return Objects.nonNull(token) &amp;&amp; token.length() &gt; 7 &amp;&amp; token.startsWith(SecurityConstant.BEARER_PREFIX);\n    }\n}\n</code></pre> <ul> <li>So as you can see in the <code>doFilterInternal()</code>, we will try to get the <code>Authorization</code> header in the request, then we will check the content of this header is the <code>Bearer</code> token or not, if it is the <code>Bearer</code> token so we will extract the jwt token.</li> <li>After we got the jwt token, we will rebuild the Secret key that we used before in <code>JwtTokenGeneratorFilter</code>. We will parse the jwt with the key and get the body by the method <code>parseClaimsJws(&lt;jwt token&gt;).getBody()</code>. So in the <code>parseClaimsJws</code> the signature will be checked to make the jwt token is not modified after it is created and transferred from client to our spring security application. If there is no any <code>SignatureException()</code> had thrown, so the jwt is valid and we can get parameters from <code>Claims</code> like <code>username</code> and <code>authorities</code> that we set before in <code>JwtTokenGeneratorFilter</code>.</li> <li>Finally, from information like <code>username</code> and <code>authorities</code>, we will create an <code>Authentication</code> and set it into the <code>SecurityContext</code>.</li> <li>Moreover, you can also see in <code>JwtTokenValidatorFilter</code>, we will also implement the method <code>shouldNotFilter()</code> for the api <code>/v1/user</code> which is used for login user. It means that any request come into this api will be ignored by <code>JwtTokenValidatorFilter</code> because we want the user should be able to login into our application.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#add_jwt_filters_into_filter_chain","title":"Add Jwt Filters Into Filter Chain","text":"<ul> <li>After creating 2 filters: <code>JwtTokenGeneratorFilter</code> and <code>JwtTokenValidatorFilter</code>, we will add the <code>JwtTokenGeneratorFilter</code> after the <code>BasicAuthenticationFilter</code> because we want to make sure users had to log in successfully before we create jwt token for them in the responses. Then the filter <code>JwtTokenValidatorFilter</code> will be added before <code>BasicAuthenticationFilter</code> because we want to make any request with contains <code>Authorization</code> header with jwt token will be validated and used for authentication and authorization.</li> </ul> ProjectSecurityConfig.java<pre><code>package com.spring.security.spring.security.jwt.config;\n\nimport com.spring.security.spring.security.jwt.constant.SecurityConstant;\nimport com.spring.security.spring.security.jwt.filter.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\nimport org.springframework.security.web.csrf.CookieCsrfTokenRepository;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\npublic class ProjectSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private AuthoritiesLoggingAfterFilter authoritiesLoggingAfterFilter;\n    @Autowired\n    private AuthoritiesLoggingAtFilter authoritiesLoggingAtFilter;\n    @Autowired\n    private RequestValidationBeforeFilter requestValidationBeforeFilter;\n    @Autowired\n    private JwtTokenGeneratorFilter jwtTokenGeneratorFilter;\n    @Autowired\n    private JwtTokenValidatorFilter jwtTokenValidatorFilter;\n\n    /**\n     *\n     * contact: Not Secure\n     * notice: Not Secure\n     * balance: Secure\n     * Card: Secure\n     * Loan: Secure\n     * Account: Secure\n     *\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and().csrf()\n                .ignoringAntMatchers(\"/v1/user\")\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .and().cors()\n                .and().addFilterBefore(requestValidationBeforeFilter, BasicAuthenticationFilter.class)\n                .addFilterAfter(authoritiesLoggingAfterFilter, BasicAuthenticationFilter.class)\n                .addFilterBefore(jwtTokenValidatorFilter, BasicAuthenticationFilter.class)\n                .addFilterAfter(jwtTokenGeneratorFilter, BasicAuthenticationFilter.class)\n                .addFilterAt(authoritiesLoggingAtFilter, BasicAuthenticationFilter.class)\n                .authorizeRequests()\n                .antMatchers(\"/v1/user\").hasAnyRole(\"USER\", \"ADMIN\")\n                .antMatchers(\"/v1/accounts/**\").hasRole(\"USER\")\n                .antMatchers(\"/v1/balance\").hasRole(\"USER\")\n                .antMatchers(\"/v1/loan\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/card\").hasRole(\"ADMIN\")\n                .antMatchers(\"/v1/contact\").permitAll()\n                .antMatchers(\"/v1/notice\").permitAll()\n                .and().formLogin()\n                .and().httpBasic();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        corsConfiguration.setExposedHeaders(Collections.singletonList(SecurityConstant.AUTHORIZATION_HEADER));\n        corsConfiguration.setMaxAge(3600L);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#testing","title":"Testing","text":"<ul> <li>So now,  let's start our spring security application and call the api <code>/v1/user</code> to login and get the jwt token in the response header.</li> </ul> <ul> <li>Then, let's copy this jwt token and add it into the <code>Authorization</code> request with <code>Bearer Token</code> type of another api <code>/v1/loan</code> and call it. You should see the response 200 as below.</li> </ul> <ul> <li>Then if you look into the response header of <code>/v1/load</code>, you can also see there is another jwt response and you can also use this jwt token to call to our applications.</li> </ul> <ul> <li>Now, if you do nothing and wait for more than 30s, then call the api again, you should received an 500 error because the jwt token had been expired.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#see_also","title":"See Also","text":"<ul> <li>Session</li> <li>Spring Security Basic</li> <li>Token Authentication With JWT</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/JWT%20Token%20In%20Spring%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/","title":"Keycloak Setup","text":"<p>In the section Docker With Keycloak, we have created a <code>Keycloak</code> server by docker. Now, we will continue to set up this <code>Keycloak</code> for OAuth2 using.</p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#realm","title":"Realm","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#what_is_the_realm","title":"What Is The Realm?","text":"<ul> <li><code>Realm</code> is a space in our <code>Keycloak</code> authorization server and by using this space, we can have our own users, roles and clients. Whatever we created in a particular <code>Realm</code> will be separated with other <code>Realms</code>.</li> <li>Let's image that we are working in an enterprise applications and it will have many environments like DEV, TEST, UAT, STAGING and PRODUCTION. So we have to create many <code>Realms</code> for those environments and each <code>Realm</code> is a dedicated space for handling a specific environment or a specific application or a specific scenario.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_a_realm","title":"Create A Realm","text":"<ul> <li>To create a <code>Realm</code>, let's select the button as in the image below.</li> </ul> <ul> <li>Then put a name for it and click button <code>Create</code>.</li> </ul> <ul> <li>Then you can see your <code>Realm</code> is created.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_realm_roles","title":"Create Realm Roles","text":"<ul> <li> <p>Now, let's create some <code>Roles</code> for our <code>Realm</code>. So in <code>Keycloak</code> we have 3 roles;</p> <ul> <li>Realm Role</li> <li>Client Role</li> <li>Composite Role</li> </ul> </li> <li> <p>There are no <code>User Roles</code> in <code>Keycloak</code>. You most likely confused that with User Role Mapping, which is basically mapping a role (realm, client, or composite) to the specific user.</p> </li> <li>In order to find out how these roles actually work, let's first take a look at a simple <code>Realm</code> model. As you can see in picture below, every Realm has one or multiple <code>Clients</code> and every <code>Client</code> can have multiple <code>Users</code> attached to it.</li> </ul> <p></p> Role Descriptions Realm Role: It is a global role, belonging to that specific realm. You can access it from any client and map to any user.\u00a0Ex Role:\u00a0'Global Admin, Admin' Client Role: It is a role which belongs only to that specific client. You cannot access that role from a different client. You can only map it to the Users from that client.\u00a0Ex Roles:\u00a0'Employee, Customer' Composite Role: It is a role that has one or more roles (realm or client ones) associated to it. <ul> <li>To create <code>Realm Role</code>, let's click on <code>Realms roles</code> and then click button <code>Create role</code>.</li> </ul> <p></p> <ul> <li>Then we put a role name and click save button.</li> </ul> <p></p> <ul> <li>Then you can see <code>Realm roles</code> have been created.</li> </ul> <p></p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#client_credentials_grant_type","title":"Client Credentials Grant Type","text":"<ul> <li>In this example, we will try to setup the OpenID Connect for <code>Client Credentials Grant Type</code> on <code>Keycloak</code> server. Basically the <code>OpenID Connect</code> uses the same flow as the <code>OAuth2</code> and it is just different about the <code>scope</code> that is sent to the authorization server.</li> <li>If you have not know <code>Client Credentials Grant Type</code> or OAuth2 Flows, so you can read this topic OAUTH2 Flow.</li> <li>Basically the <code>Client Credentials Grant Type</code> flow is described as the diagram below. We use this authentication flow only if there is no user and UI involved. Like 2 different applications want to share data between them using backend APIs.</li> </ul> <pre><code>\nsequenceDiagram\n\n    Client-&gt;&gt;Auth Server: 1. I want to access protected resources. Here &lt;br/&gt; are my client credentials. No user involved in this.\n    Auth Server-&gt;&gt;Client: 2. Hey Client, The credentials providided are &lt;br/&gt; correct. Here is the TOKEN to access the user &lt;br/&gt; resources.\n    Client-&gt;&gt;Resource Server: 3. Hey Resource Server, I want to access protected resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 4. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>Note: In <code>Client Credentials Grant Type</code> we should not return the <code>refresh token</code> following RFC6749 section 4.4.3.</li> <li>Because authentication server have to take one more step for verifying the refresh token with using the same credentials which is used for getting the access token.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_client","title":"Create Client","text":"<ul> <li>So, to create a <code>Client</code> in a <code>Realm</code>, let's follow steps as in the image below. We will select the <code>Realm</code> then click <code>Clients</code> and click button <code>Create client</code>.</li> </ul> <ul> <li>Then in the <code>General Setting</code>, choose the <code>Client Type</code> as <code>OpenID Connect</code> and put a name for field <code>Client ID</code> and click <code>Next</code> button.</li> </ul> <ul> <li>Now, at step <code>Capability config</code>, let's<ul> <li>turn on <code>Client authentication</code>.</li> <li>uncheck <code>Standard flow</code> because it is used for <code>Authorization Code Grant Type Flow</code></li> <li>uncheck <code>Direct access grants</code> because it is used for <code>Resource Owner Password Credentials Grant</code>.</li> <li>check <code>Service accounts roles</code> because it is used for <code>Client Credentials Grant Type</code> which is matched with this example.</li> <li>click button <code>Save</code></li> </ul> </li> </ul> <ul> <li>Then you can see your <code>Client</code> as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#add_realm_roles","title":"Add Realm Roles","text":"<ul> <li>Next, we will add <code>Realm Roles</code> into our client. You should choose <code>Service accounts roles</code> tab. Then click button <code>Assign role</code>.</li> </ul> <ul> <li>Then select the <code>Realm Roles</code> that you want to add and click button <code>Assign</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#testing","title":"Testing","text":"<ul> <li>So, <code>Keycloak</code> provide for us an api to get the information about our <code>Realm</code> and it called <code>Discovery endpoint</code> and the endpoint will have the pattern as below.</li> </ul> <pre><code>{{KEY_CLOAK_DOMAIN}}/auth/realms/{{REALM_ID}}/.well-known/openid-configuration\n\nExample: \n\nhttp://localhost:8080/auth/realms/myrealm/.well-known/openid-configuration\n</code></pre> <ul> <li>We can try it with postman and you can see the result as below.</li> </ul> <ul> <li> <p>Now, with the information from the <code>discovery endpoint</code>, we will get the <code>token_endpoint</code> and use it with the client credentials from the created client in our <code>Realm</code> for getting the <code>access_token</code>.</p> </li> <li> <p>The <code>client_id</code> can be got as the image below:</p> </li> </ul> <p></p> <ul> <li>The <code>client_secret</code> can be got as the image below:</li> </ul> <p></p> <ul> <li>The <code>grant_type</code> should be hard code as <code>client_credentials</code>, because we are using <code>Client Credentials Grant Type</code>. </li> <li>For the <code>scope</code> you should put it with value <code>openId</code> to let the <code>Keycloak</code> server know you are using <code>OpenId Connect</code>. You can also put any more value that you get from the field <code>scopes_supported</code> in the <code>discovery endpoint</code> response.</li> <li>Now, let's use postman and try to call the <code>token_endpoint</code>, you will received an <code>access_token</code> and the <code>id_token</code> as in the image below. </li> </ul> <p></p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#authorization_code_grant_type","title":"Authorization Code Grant Type","text":"<ul> <li>In this example, we will try to setup the OpenID Connect for <code>Authorization Code Grant Type</code> on <code>Keycloak</code> server. Basically the <code>OpenID Connect</code> uses the same flow as the <code>OAuth2</code> and it is just different about the <code>scope</code> that is sent to the authorization server.</li> <li>If you have not know <code>Authorization Code Grant Type</code> or OAuth2 Flows, so you can read this topic OAUTH2 Flow.</li> <li>The <code>Authorization Code Grant Type</code> flow is described as the diagram below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    User-&gt;&gt;Client: 1. I want to access my resources\n    Client-&gt;&gt;User: 2. Tell the Auth Server that you are fine to do this action.\n    User-&gt;&gt;Auth Server: 3. Hello Auth Server, please allowed the client to access my resources. &lt;br/&gt; Here is my credentials to prove my identity\n    Auth Server-&gt;&gt;Client: 4. Hey Client, user allowed you to access his &lt;br/&gt; resources. Here is AUTHORIZATION CODE.\n    Client-&gt;&gt;Auth Server: 5. Here is my client credentials, AUTHZ &lt;br/&gt; CODE. Please provide me a token.\n    Auth Server-&gt;&gt;Client: 6. Here is the token from Authorization Server\n    Client-&gt;&gt;Resource Server: 7. Hey Resource Server, I want to access the user resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 8. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>The <code>Authorization Code grant type</code> is used by confidential and public clients to exchange an authorization code for an access token. After the user returns to the client via the redirect URL, the application will get the authorization code from the URL and use it to request an access token.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_client_1","title":"Create Client","text":"<ul> <li>Like we created a client in a <code>Realm</code> before, let's follow steps as in the image below. We will select the\u00a0<code>Realm</code>\u00a0then click\u00a0<code>Clients</code>\u00a0and click button\u00a0<code>Create client</code>.</li> </ul> <ul> <li>Then in the <code>General Setting</code>, choose the <code>Client Type</code> as <code>OpenID Connect</code> and put a name for field <code>Client ID</code> and click <code>Next</code> button.</li> </ul> <ul> <li>Now, at step <code>Capability config</code>, let's<ul> <li>check <code>Client authentication</code> because it defines the type of the OIDC client. When it's ON, the OIDC type is set to confidential access type. When it's OFF, it is set to public access type</li> <li>check <code>Standard flow</code> because it is used for <code>Authorization Code Grant Type Flow</code></li> <li>uncheck <code>Direct access grants</code> because it is used for <code>Resource Owner Password Credentials Grant</code>.</li> <li>click button <code>Save</code></li> </ul> </li> </ul> <ul> <li>Then you can see your <code>Client</code> as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_realm_user","title":"Create Realm User","text":"<ul> <li>For <code>Authorization Code Grant Type</code>, we need to create a Realm User because Keycloak authorization server will require clients to prove their identity by giving username and password which are created in the Keycloak Realm users.</li> <li>So, to create a user for our Realm, we should flow steps below.</li> <li>We will select the <code>Realm</code> then click <code>User</code> and click button <code>Add user</code>.</li> </ul> <ul> <li>Then we put a username, give some information and click button <code>Create</code>.</li> </ul> <ul> <li>Next, when user is created then we continue to choose <code>Credentials</code> tab and click <code>Set password</code> and put the password as in the image below. We turn off field <code>Temporary</code> because we don't want the user have to change password at the first login.</li> </ul> <ul> <li>Next, we will choose the <code>Role mapping</code> tab and click <code>Assign role</code> button to add the Realm role for this user.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#password_grant_type_flow","title":"Password Grant Type Flow","text":"<ul> <li>In this example, we will try to setup the OpenID Connect for <code>Authorization Code Grant Type</code> on <code>Keycloak</code> server. Basically the <code>OpenID Connect</code> uses the same flow as the <code>OAuth2</code> and it is just different about the <code>scope</code> that is sent to the authorization server.</li> <li>If you have not know\u00a0<code>Password Grant Type Flow</code>\u00a0or OAuth2 Flows, so you can read this topic\u00a0OAUTH2 Flow.</li> <li>The\u00a0<code>Password Grant Type Flow</code>\u00a0flow is described as the diagram below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    User-&gt;&gt;Client: 1. I want to access my resources\n    Client-&gt;&gt;Auth Server: 2. Hello Auth Server, User want to access &lt;br/&gt; his/her resources. Here are the credentials of &lt;br/&gt; the User\n    Auth Server-&gt;&gt;Client: 3. Hey Client, The credentials providided are &lt;br/&gt; correct. Here is the TOKEN to access the user &lt;br/&gt; resources.\n    Client-&gt;&gt;Resource Server: 4. Hey Resource Server, I want to access the user resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 5. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>We use this authentication flow only if the <code>Client</code>, <code>Authorization Server</code> and <code>Resource Server</code> are maintained by the same organization.</li> <li>This flow will be usually followed by the enterprise applications who want to separate the Auth flow and business flow. Once the Auth flow is separated different applications in the same organization can leverage it.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_client_2","title":"Create Client","text":"<ul> <li>Like we created a client in a\u00a0<code>Realm</code>\u00a0before, let's follow steps as in the image below. We will select the\u00a0<code>Realm</code>\u00a0then click\u00a0<code>Clients</code>\u00a0and click button\u00a0<code>Create client</code>.</li> </ul> <ul> <li>Then in the <code>General Setting</code>, choose the <code>Client Type</code> as <code>OpenID Connect</code> and put a name for field <code>Client ID</code> and click <code>Next</code> button.</li> </ul> <ul> <li>Now, at step <code>Capability config</code>, let's<ul> <li>Uncheck <code>Standard flow</code> because it is used for <code>Authorization Code Grant Type Flow</code></li> <li>Check <code>Direct access grants</code> because it is used for <code>Resource Owner Password Credentials Grant</code>.</li> <li>click button <code>Save</code></li> </ul> </li> </ul> <ul> <li>Then you can see your <code>Client</code> as below.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#create_realm_user_1","title":"Create Realm User","text":"<ul> <li>Like <code>Authorization Code Grant Type</code>, we need to create a Realm User because Keycloak authorization server will require clients to prove their identity by giving username and password which are created in the Keycloak Realm users.</li> <li>So, to create a user for our Realm, we should flow steps below.</li> <li>We will select the <code>Realm</code> then click <code>User</code> and click button <code>Add user</code>.</li> </ul> <ul> <li>Then we put a username, give some information and click button <code>Create</code>.</li> </ul> <ul> <li>Next, when user is created then we continue to choose <code>Credentials</code> tab and click <code>Set password</code> and put the password as in the image below. We turn off field <code>Temporary</code> because we don't want the user have to change password at the first login.</li> </ul> <ul> <li>Next, we will choose the <code>Role mapping</code> tab and click <code>Assign role</code> button to add the Realm role for this user.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#see_also","title":"See Also","text":"<ul> <li>OAUTH2 Flow</li> <li>OpenID Connect</li> <li>Docker With Keycloak</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Keycloak%20Setup/#references","title":"References","text":"<ul> <li>RFC6749 section 4.4.3</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Matchers%20Methods/","title":"Matchers Methods","text":"<p>Spring Security offers 3 types of matchers methods to configure endpoints security:</p> <ul> <li>MVC matchers</li> <li>Ant matchers</li> <li>Regex matchers</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Matchers%20Methods/#mvc_matchers","title":"MVC Matchers","text":"<ul> <li> <p><code>MvcMatcher()</code> method uses Spring MVC's HandlerMappingIntrospector to match the path and extract variables.</p> <ul> <li><code>mvcMatchers(HttpMethod method, String... patterns</code>: we can specify both the HTTP method and path pattern to configure restrictions</li> </ul> <p><pre><code>http.authorizeRequests()\n.mvcMatchers(HttpMethod.POST, \"/example\").authenticated()\n.mvcMatchers(HttpMethod.GET, \"/example\").permitAll()\n.anyRequest().denyAll();\n</code></pre> - <code>mvcMatchers(String... patterns)</code>: we can specify only path pattern to configure restrictions and all the HTTP methods will be allowed.</p> <pre><code>http.authorizeRequests()\n.mvcMatchers(\"/profile/edit/**\").authenticated()\n.anyRequest().permitAll();\n</code></pre> </li> </ul> <ul> <li>Indicates any number of paths. For example , <code>/x/**/z</code> will match both <code>/x/y/z</code> and <code>/x/y/abc/z</code>.</li> <li>Single <code>*</code> indicates single path. For example <code>/x/*/z</code> will match <code>/x/y/z</code>, <code>/x/abc/z</code> but not <code>/x/y/abc/z</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Matchers%20Methods/#ant_matchers","title":"Ant Matchers","text":"<ul> <li> <p><code>ANT matchers</code> is an implementation of Ant-style path patterns. Part of this mapping code has been kindly borrowed from Apache Ant.</p> <ul> <li><code>antMatchers(HttpMethod method, String... patterns)</code>: we can specify both the HTTP method and path pattern to configure restrictions</li> </ul> <pre><code>http.authorizeRequests()\n.antMatchers(HttpMethod.POST, \"/example\").authenticated()\n.antMatchers(HttpMethod.GET, \"/example\").permitAll()\n.anyRequest().denyAll();\n</code></pre> <ul> <li><code>antMatchers(String...patterns)</code>: we can specify only path pattern to configure restrictions and all the HTTP methods will be allowed.</li> </ul> <p><pre><code>http.authorizeRequests()\n.antMatchers(\"/profile/edit/**\").authenticated()\n.anyRequest().permitAll();\n</code></pre> - <code>antMatchers(HttpMethod method)</code>: we can specify only HTTP method ignoring path pattern to configure restrictions. This is same as <code>antMatchers(httpMethod, \"/**\")</code></p> <pre><code>http.authorizeRequests()\n.antMatchers(HttpMethod.POST).authenticated()\n.anyRequest().permitAll();\n</code></pre> </li> </ul> <ul> <li>Generally <code>mvcMatcher</code> is more secure than <code>antMatcher</code>. As an example</li> <li><code>antMatchers(\"/secured\")</code> matches only exact <code>/secured</code> URL</li> <li><code>mvcMatchers(\"/secured\")</code> matches <code>/secured</code> as well as <code>/secured/</code>, <code>/secured.html</code>, <code>/secured.xyz</code></li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Matchers%20Methods/#regex_matchers","title":"Regex Matchers","text":"<ul> <li> <p><code>Regexes</code> can be used to represent any format of a string, so they offer unlimited possibilities for this matter.</p> <ul> <li><code>regexMatchers(HttpMethod method, String regex)</code>: we can specify both the HTTP method and path regex to configure restrictions,</li> </ul> <pre><code>http.authorizeRequests()\n.regexMatchers(HttpMethod.GET,\".*/(en\\vn\\ch)\").authenticated()\n.anyRequest().denyAll();\n</code></pre> <ul> <li><code>regexMatchers(String regex)</code>: we can specify only path regex to configure restrictions and all the HTTP methods will be allowed.</li> </ul> <pre><code>http.authorizeRequests()\n.regexMatchers(\".*/(en\\vn\\ch)\").authenticated()\n.anyRequest().denyAll();\n</code></pre> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Matchers%20Methods/#see_also","title":"See Also","text":"<ul> <li>Spring Security With Authorization</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Matchers%20Methods/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Method%20Level%20Security/","title":"Method Level Security","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Method%20Level%20Security/#method_level_security_in_spring_security","title":"Method Level Security In Spring Security","text":"<ul> <li>In the section Configure Authorities, we applied authorization rules on the API paths/URLs using spring security configuration. However, the <code>method level</code> security allows to apply the authorization rules at any layer of an application like in service layer or repository layer etc. <code>Method level</code> security can be enabled using the annotation <code>@EnableGlobalMethodSecurity</code> on the configuration class.</li> <li><code>Method level</code> security will also helps authorization rules even in the non-web applications where we will not have any endpoints.</li> <li> <p><code>Method level</code> security provides the below approaches to apply the authorization rules and execution your business logic.</p> <ul> <li> Invocation authorization`: Validate of someone can invoke a method or not based on their roles/authorities.</li> <li><code>Filtering authorization</code>: Validates what a method can receive through its parameters and what the invoker can receive back from the post business logic execution.</li> </ul> </li> <li> <p>Spring security will use the aspects from the <code>AOP</code> module and have the interceptors in between the method invocation to apply the authorization rules configured.</p> </li> <li><code>Method level</code> security offers below 3 differences styles for configuring the authorization rules on top of the methods.<ul> <li>The <code>prePostEnabled</code> property enables Spring Security <code>@PreAuthorize</code> &amp; <code>@PostAuthorize</code> annotations.</li> <li>The <code>securedEnabled</code> property enables <code>@Secured</code> annotation.</li> <li>The <code>jsr250Enabled</code> property enables <code>@RoleAllowed</code> annotation.</li> </ul> </li> </ul> MethodSecurityConfig.java<pre><code>@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)\npublic class MethodSecurityConfig {\n\n    ....\n\n}\n</code></pre> <ul> <li><code>@Secured</code> and <code>@RoleAllowed</code> are less powerful compared to <code>@PreAuthorize</code> and <code>@PostAuthorize</code></li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Method%20Level%20Security/#deep_dive_into_method_level_security","title":"Deep Dive Into Method Level Security","text":"<ul> <li>Invocation Authorization Method Level</li> <li>Filtering Authorization Method Level</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Method%20Level%20Security/#see_also","title":"See Also","text":"<ul> <li>Configure Authorities</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Method%20Level%20Security/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/NoOpPasswordEncoder/","title":"NoOpPasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/NoOpPasswordEncoder/#nooppasswordencoder_1","title":"NoOpPasswordEncoder","text":"<ul> <li>As in the example before Custom UserDetailsService Of Spring Security, we have created a bean <code>PasswordEncoder</code> from the <code>NoOpPasswordEncoder</code> and you can see the <code>NoOpPasswordEncoder</code> has been deprecated by spring security. So it means spring security don't want us to use this for any production or any applications.</li> </ul> NoOpPasswordEncoder.java<pre><code>/*\n * Copyright 2011-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.crypto.password;\n\n/**\n * This {@link PasswordEncoder} is provided for legacy and testing purposes only and is\n * not considered secure.\n *\n * A password encoder that does nothing. Useful for testing where working with plain text\n * passwords may be preferred.\n *\n * @author Keith Donald\n * @deprecated This PasswordEncoder is not secure. Instead use an adaptive one way\n * function like BCryptPasswordEncoder, Pbkdf2PasswordEncoder, or SCryptPasswordEncoder.\n * Even better use {@link DelegatingPasswordEncoder} which supports password upgrades.\n * There are no plans to remove this support. It is deprecated to indicate that this is a\n * legacy implementation and using it is considered insecure.\n */\n@Deprecated\npublic final class NoOpPasswordEncoder implements PasswordEncoder {\n\n    private static final PasswordEncoder INSTANCE = new NoOpPasswordEncoder();\n\n    private NoOpPasswordEncoder() {\n    }\n\n    @Override\n    public String encode(CharSequence rawPassword) {\n        return rawPassword.toString();\n    }\n\n    @Override\n    public boolean matches(CharSequence rawPassword, String encodedPassword) {\n        return rawPassword.toString().equals(encodedPassword);\n    }\n\n    /**\n     * Get the singleton {@link NoOpPasswordEncoder}.\n     */\n    public static PasswordEncoder getInstance() {\n        return INSTANCE;\n    }\n\n}\n</code></pre> <ul> <li>So if you are looking into the <code>NoOpPasswordEncoder</code>. You can see then method <code>encode</code> will do nothing, just converting the CharSequence of raw password to String. There are no encryption or hashing happening. So by default the Spring Security will do nothing with your password and always return to you a String. That's why it is not recommended for any applications to use on production.</li> <li>Then in the <code>matches</code> method, it will simply try to compare the password that the spring security received with the password that we stored in the database as plain-text comparison.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/NoOpPasswordEncoder/#see_also","title":"See Also","text":"<ul> <li>StandardPasswordEncoder</li> <li>Definition Of PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/NoOpPasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Components/","title":"OAUTH2 Components","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Components/#oauth2_components_1","title":"OAUTH2 Components","text":"<ul> <li><code>OAuth 2.0</code> has the following components:</li> </ul> Components Descriptions The Resource Server Where the protected resources owned by user if present like photos, personal information, transactions etc/ The User (also known as  resource owner) The person who owns resources exposed by the resource server. Usually the user will prove his identity with the help of username and password. The Client The application that want to access the resources owned by the user on their behalf. The client uses a client id and secret to identify itself. But these not same as user credentials. The Authorization Server The server that authorizes the client to access the user resources in the resource server. When the authorization server identifies that a client is authorized to access a resource on behalf of the user, it issues a token. The client application uses this token to prove to the resource server that it was authorized by the authorization server. The resource server allows the client to access the resource it requested if it has a valid token after validating the same with Auth server. <ul> <li> <p>To understand easier, let's take a look on the example image above. Assume that we have a user who is the resource owner of some projects in his <code>GitHub Resource Server</code>. Then this user want to use a third party application which is the <code>SonarCloud</code> to analyze his projects for detecting bugs and vulnerabilities. In this scenario the <code>SonarCloud</code> is the <code>Client</code> application and It will ask the user to go to the <code>GitHub Authorization Server</code> to enter the credentials for proving his identity. Then if the identity is approved, the <code>GitHub Authorization Server</code> will issue a token to the user. So once the <code>Client</code> receives the token, this token will be send to the <code>GitHub Resource Server</code> to get the resources like his projects for scanning and analyzing. In this step, the <code>GitHub Resource Server</code> will validate the token issued by the <code>GitHub Authorization Server</code> is valid or not by connecting with the <code>GitHub Authorization Server</code>. It means everytime the <code>Client</code> send the token to the <code>GitHub Resource Server</code> so it will connect to <code>GitHub Authorization Server</code> to validate.</p> </li> <li> <p>Moreover, based on these 4 components we have 5 different grants and flows for applying OAuth2 to generate a token from Auth Server. Each grant type is optimized for a particular use case, whether that's web app, a native app, a device without the ability to launch a web browser or server-to-server applications.</p> <ul> <li>Authorization Code</li> <li>Implicit</li> <li>Resource Owner Password Credentials</li> <li>Client Credentials</li> <li>Refresh Token</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Components/#see_also","title":"See Also","text":"<ul> <li>OAUTH2</li> <li>OAUTH2 Flow</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Components/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/","title":"OAUTH2 Flow","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#authorization_code_grant_type_flow","title":"Authorization Code Grant Type Flow","text":"<ul> <li>In the <code>Authorization Code Grant Type Flow</code>, we will continue analyze the OAUTH2 example that introduced in OAUTH2 Components</li> </ul> <ul> <li>In details, the <code>Authorization Code Grant Type Flow</code> will be happened as the sequence diagram as below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    User-&gt;&gt;Client: 1. I want to access my resources\n    Client-&gt;&gt;User: 2. Tell the Auth Server that you are fine to do this action.\n    User-&gt;&gt;Auth Server: 3. Hello Auth Server, please allowed the client to access my resources. &lt;br/&gt; Here is my credentials to prove my identity\n    Auth Server-&gt;&gt;Client: 4. Hey Client, user allowed you to access his &lt;br/&gt; resources. Here is AUTHORIZATION CODE.\n    Client-&gt;&gt;Auth Server: 5. Here is my client credentials, AUTHZ &lt;br/&gt; CODE. Please provide me a token.\n    Auth Server-&gt;&gt;Client: 6. Here is the token from Authorization Server\n    Client-&gt;&gt;Resource Server: 7. Hey Resource Server, I want to access the user resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 8. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>In the step 2 and 3, where client is making a request to the Auth Server endpoint. It has to send below important details.</li> </ul> Names Descriptions client_id The id which identifies the client application by the Auth Server. This will be granted when the client register first time with the Auth Server redirect_uri The URI value which the Auth Server needs to redirect post successful authentication. If a default value is provided during the registration then this value is optional scope Similar to authorities. Specifies level of access that client is requesting like READ state CSRF token value to protect from CSRF acttacks response_type With the value 'code' which indicates that we want to follow authorization code grant <ul> <li>In the steo 5 where client after received an authorization code from Auth Server, It will again make a request to Auth Server for a token with the below values.</li> </ul> Names Descriptions code The authorization code received from the above steps client_id &amp; client_secret The client credentials which are registered with the Auth Server. Please note that these are not user credentials grant_type With the value 'authorization_code' which identifies the kind of grant type is used redirect_uri The URI value which the Auth Server needs to redirect post successful authentication. If a default value is provided during the registration then this value is optional <ul> <li> <p>The <code>Authorization Code grant type</code> is used by confidential and public clients to exchange an authorization code for an access token. After the user returns to the client via the redirect URL, the application will get the authorization code from the URL and use it to request an access token.</p> </li> <li> <p>We may wonder that why in the Authorization Code grant type client is making request 2 times to Auth Server for authorization code and access token.</p> <ul> <li>In the first step, authorization server will make sure that user directly interacted with it along with the credentials. If the details are correct, Auth Server send the authorization code to client.</li> <li>Once it receives the authorization code, in this step client has to prove it's identity along with the authorization code, client credentials to get the access token.</li> </ul> </li> <li> <p>Well you may ask why can't Auth Server directly club both the steps together and provide the token in a single step. The answer we used to have that grant type as well which is called as <code>implicit grant type</code>. But this grant type is not recommended to use due to it's less secure.</p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#implicit_grant_type_flow","title":"Implicit Grant Type Flow","text":"<ul> <li>The <code>Implicit Grant Type</code> is less secure that compared to the <code>Authorization Code Grant Type</code>. Let's see the sequence diagram as below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    User-&gt;&gt;Client: 1. I want to access my resources\n    Client-&gt;&gt;User: 2. Tell the Auth Server that you are fine to do this action.\n    User-&gt;&gt;Auth Server: 3. Hello Auth Server, please allowed the client to access my resources. &lt;br/&gt; Here is my credentials to prove my identity\n    Auth Server-&gt;&gt;Client: 4. Hey Client, user allowed you to access his &lt;br/&gt; resources. Here is the TOKEN.\n    Client-&gt;&gt;Resource Server: 5. Hey Resource Server, I want to access the user resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 6. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li> <p>As you can see in the sequenceDiagram, the <code>Implicit Grant Type</code> has only 6 steps and In the step 4, the Client instead of receiving the Authorization Code, It will receive the Authorization Token and can use it to access the Resource Server.</p> </li> <li> <p>In the step 3, where client is making a request to Auth Server endpoint, it has to send the below important details.</p> </li> </ul> Names Descriptions client_id The id which identifies the Client application by the Auth Sever. This will be granted when the client register first time with the Auth server. redirect_uri The URI value which the Auth Server needs to redirect post successful authentication. If a default value is provided during the registration then this value is optional scope Similar to the authorities. Specifies level of access that client is requesting like READ state CSRF token value to protect from CSRF attacks response_type With the value 'token' which indicates that we want to follow implicit grant type <ul> <li>If the user approves the request, the authorization server will redirect the browser back to the redirect_uri specified by the application, adding a token an state to the fragment part of the URL. For example, the user will be redirect back to a URL such as.</li> </ul> <pre><code>https://example.com/redirect#access_token=eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ&amp;token_type=Bearer&amp;expires=600&amp;state=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n</code></pre> <ul> <li>So why do we you it if the <code>Implicit Grant Type Flow</code> is less secure? The answer is some applications just have only UI like they have only HTML and JavaScript codes and they don't have any back-end where they can save the client secret on some back-end servers. So due to that reason, these applications can still use the implicit guarantee. But at the same time, the Auth Server are what they are going to communicate has to allow them to use it, otherwise they can't use it.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#password_grant_type_flow","title":"Password Grant Type Flow","text":"<ul> <li>Some people call <code>Password Grant Type Flow</code> as the <code>Resource Owner Credentials Grant Type</code>.</li> <li>In the <code>Password Grant Type Flow</code>, Let's assume that 4 components <code>User</code>, <code>Client</code>, <code>Auth Server</code> and <code>Resource Server</code> are in the same organization and in an internal network of a company. So when the user want to access his resource from the <code>Client</code> application, The <code>Client</code> application doesn't need to redirect the user to the login page of <code>Auth Server</code>, it will capture the user credentials and send them to the <code>Auth Server</code>. Because all components are in the same organization and we can completely believe <code>Client</code> and <code>Auth Server</code> that they won't misuse the user details that they result from the <code>User</code>. Let's see the sequence diagram as below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    User-&gt;&gt;Client: 1. I want to access my resources\n    Client-&gt;&gt;Auth Server: 2. Hello Auth Server, User want to access &lt;br/&gt; his/her resources. Here are the credentials of &lt;br/&gt; the User\n    Auth Server-&gt;&gt;Client: 3. Hey Client, The credentials providided are &lt;br/&gt; correct. Here is the TOKEN to access the user &lt;br/&gt; resources.\n    Client-&gt;&gt;Resource Server: 4. Hey Resource Server, I want to access the user resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 5. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>In the step 2, where <code>Client</code> is making a request to <code>Auth Server</code> endpoint have to send below important details.</li> </ul> Names Descriptions client_id &amp; client_secret the credentials of the client to authenticate itself scope Similar to the authorities. Specifies level of access that client is requesting like READ username &amp; password Credentials provided by the user in the login flow grant_type With the value 'authorization_code' which identifies the kind of grant type is used <ul> <li>We use this authentication flow only if the <code>Client</code>, <code>Authorization Server</code> and <code>Resource Server</code> are maintained by the same organization.</li> <li>This flow will be usually followed by the enterprise applications who want to separate the Auth flow and business flow. Once the Auth flow is separated different applications in the same organization can leverage it.</li> <li>We can't use the Authorization code grant type since it won't look nice for the user to redirect multiple pages inside your organization for authentication.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#client_credentials_grant_type_flow","title":"Client Credentials Grant Type Flow","text":"<ul> <li>In the <code>Client Credentials Grant Type</code>, Let's assume that there are only 3 components <code>Client</code>, <code>Auth Server</code> and <code>Resource Server</code> and we don't have any UI application where there are no <code>User</code> involved. So we just have multiple back-end application which share data between them, like in the micro-service system where many back-end applications trying to interact with each other and shared some secured information between them.</li> <li>So in this case, instead of maintaining the authentication and authorization flow in each and every application, we can decide to keep all the authorization logic and authentication logic in a separate server called <code>Auth Server</code> and every application before it tries to communicate with other application inside an organization, they have to prove their identity and get the access token from the <code>Auth Server</code> which will be eventually shared to the other application to get the resources. Let's see the sequence diagram as below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    Client-&gt;&gt;Auth Server: 1. I want to access protected resources. Here &lt;br/&gt; are my client credentials. No user involved in this.\n    Auth Server-&gt;&gt;Client: 2. Hey Client, The credentials providided are &lt;br/&gt; correct. Here is the TOKEN to access the user &lt;br/&gt; resources.\n    Client-&gt;&gt;Resource Server: 3. Hey Resource Server, I want to access protected resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 4. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>In the step 1, where client is making a request to <code>Auth Server</code> endpoint have to send the below important details.</li> </ul> Names Descriptions client_id &amp; client_secret the credentials of the client to authenticate itself scope Similar to the authorities. Specifies level of access that client is requesting like READ grant_type With the value 'authorization_code' which identifies the kind of grant type is used <ul> <li>This is the most simplest grant type flow in <code>OAUTH2</code>.</li> <li>We use this authentication flow only if there is no user and UI involved. Like 2 different applications want to share data between them using backend APIs.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#refresh_token_grant_type_flow","title":"Refresh Token Grant Type Flow","text":"<ul> <li>In the <code>Refresh Token Grant Type</code>, Let's assume that we are using one of 4 Grant Type Flow <code>Authorization Code Grant Type</code>, <code>Implicit Grant Type Flow</code>, <code>Resource Owner Credentials Grant Type</code> and <code>Client Credentials Grant Type</code> and we got the access token from the <code>Auth Server</code> and sent that to the <code>Resource Server</code> and got the required resources. However, for example after 60 minutes, suddenly the token is expired so now we have to do steps for getting authorization token again and after 60 minutes we again have to do it. Due to that reason, we should apply the <code>Refresh Token Grant Type</code>, in details whenever we interact with the <code>Auth Server</code> and receive the access token, we also receive the refresh token. Then whenever we get the error from the <code>Auth Server</code> saying that our access token is expired so instead of doing steps for getting authorization token again we will send the refresh token to the <code>Auth Server</code> to get the new access token. The <code>Auth Server</code> will validate the refresh token that it issued and if the refresh token is valid and if it belongs to the same user that it initially issued the the <code>Auth Server</code> will issue again a new access token with the new expiration time along with the new refresh token.  Let's see the sequence diagram as below.</li> </ul> <pre><code>\nsequenceDiagram\n\n    Client-&gt;&gt;Resource Server: 1. I want to access protected resources of the user. Here &lt;br/&gt; is the access token received in the initial user login.\n    Resource Server-&gt;&gt;Client: 2. The access token is expired! I'm throwing 403 &lt;br/&gt; forbiddent error. Sorry!\n    Client-&gt;&gt;Auth Server: 3. Hey Auth Server, I need a new access token &lt;br/&gt; for the user. Here is the refresh token &lt;br/&gt; of the user.\n    Auth Server-&gt;&gt;Client: 4. Refresh token is valid. Here is a new access &lt;br/&gt; token and new refresh token.\n    Client-&gt;&gt;Resource Server: 5. Hey Resource Server, I want to access protected resources. &lt;br/&gt; Here is the token from the Authz Server\n    Resource Server-&gt;&gt;Client: 6. Hey Client. Your token is validated successfully. &lt;br/&gt; Here are the resources you requested.\n</code></pre> <ul> <li>In step 3, where client is making a request to <code>Auth Server</code> endpoint have to send the below important details.</li> </ul> Names Descriptions client_id &amp; client_secret the credentials of the client to authenticate itself refresh_token the value of the refresh token received initially scope Similar to the authorities. Specifies level of access that client is requesting like READ grant_type With the value 'authorization_code' which identifies the kind of grant type is used <ul> <li>This flow will be used in the scenarios where the access token  of the user is expired. Instead of asking the user to login again and again, we can use the refresh token which originally providied by the <code>Auth Server</code> to re-authenticate the user.</li> <li>Though we can make our access tokens to never expire but it is not recommended considering scenarios where the tokens can be stole if we always use the same token.</li> <li>Even in the resource owner credentials grant types we should not store the user credentials for re-authentication purpose instead we should reply on the refresh tokens.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#see_also","title":"See Also","text":"<ul> <li>OAUTH2 Components</li> <li>OAUTH2</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Flow/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/","title":"OAUTH2 Resource Server Token Validation","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#how_does_resource_server_validate_token","title":"How Does Resource Server Validate Token?","text":"<ul> <li>In the OAUTH2 Flow, we have discussed about main flows for applying OAUTH2 and we can know that everytime the <code>Client</code> want to access the <code>Resource Server</code>, it must provide the token which is received from the <code>Auth Server</code> to the <code>Resource Server</code>. So then the <code>Resource Server</code> can validate and response data to the <code>Client</code>.</li> <li>Usually, we will have three main ways to apply for <code>Resource Server</code> to validate access token.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#direct_api_call","title":"Direct Api Call","text":"<ul> <li>As you can see in the image above, every time the <code>Resource Server</code> receives the access token from the <code>Client</code>, It has to validate that token with the <code>Auth Server</code> by calling the <code>Auth Server</code> api for token validation. Because these are two different servers or two different applications handling different responsibilities. Thus, the <code>Resource Server</code> is not aware of the access tokens issued by the <code>Auth Server</code> to all the clients. So the <code>Resource Server</code> have to send the access token to <code>Auth Server</code> for validation.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#common_database","title":"Common Database","text":"<ul> <li>From the image above, we can see the <code>Auth Server</code> and the <code>Resource Server</code> is connecting to the same database. So whenever the <code>Auth Server</code> issues an access token, it can write into the database and the <code>Resource Server</code> can connect to this database to get the access token and validate it with the one received from the <code>Client</code>.</li> <li>In this scenarios, the <code>Resource Server</code> doesn't have to rely on the network interact with the <code>Auth Server</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#token_signature","title":"Token Signature","text":"<ul> <li>In the Token Authentication With JWT, we know that the signature of the tokens can be validated by having some secret keys maintained by the both parties to make sure that no one is tampered.</li> <li>Following the same approach, the <code>Auth Server</code> can generate an access token by using some encryption algorithm with the secret. Then, whenever the <code>Client</code> sends the same access token to the <code>Resource Server</code>, so the <code>Resource Server</code> doesn't have to make a call to <code>Auth Server</code> or doesn't have to look into the database. It can simply check the signature or hash value of the token generated with the encryption algorithm that it maintains to understand the token is valid or not.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#summary","title":"Summary","text":"<ul> <li>Every approach has it's own pros and cons. In the <code>Token Signature</code> approach which is used for validating the token signature, so you  will never depend on the network to call <code>Auth Server</code> or database. But if we have a clear and real time checking with <code>Auth Server</code>, you can always rely on the <code>Direct Api Call</code> approach. But if you don't want to overburden the <code>Auth Server</code> network so you can maintain a <code>Common Database</code> which can be leveraged by both <code>Auth Server</code> and <code>Resource Server</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#see_also","title":"See Also","text":"<ul> <li>OAUTH2 Flow</li> <li>Token Authentication With JWT</li> <li>OAUTH2</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2%20Resource%20Server%20Token%20Validation/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2/","title":"OAUTH2","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2/#problems_without_oauth2","title":"Problems Without OAUTH2","text":"<ul> <li>Witth <code>HTTP Basic authentication</code>, the client need to send the user credentials every time and authentication logic has to be execute every time with all the requests. With this approach we ended up sharing the credentials often over the network.</li> </ul> <ul> <li>In environment with multiple applications inside an organization, the users has to register and maintain different credentials/same credentials but they will be stored in  different DBs. Then in the Authentication and Authorization logic, security standards will be duplicated in all multiple applications.</li> </ul> <ul> <li>In interaction with third party applications, the users have to use the credentials of main applications for login on third party applications so they can interact and work with main applications. This is a serious security breach here if the third party misuse the user credentials.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2/#oauth2_introduction","title":"OAUTH2 Introduction","text":"<ul> <li><code>OAuth</code> stands for <code>Open Authorization</code>. It's a free and open protocol, built on IETF standards and licenses from the Open Web Foundation.</li> <li> <p><code>OAUTH 2.0</code> is a delegation protocol, which means letting someone who controls a resource allow a software application to access that resource on their behalf without impersonating them.</p> <ul> <li>For example: In our spring security application instead of maintain both Authentication and Business logic inside the same application/server, it will allow other application to handle authorization before allowing the client to access protected resources. This will happen mostly with the help of tokens.</li> <li>For other example is. We have an application like SonarCloud where we can analyze the our source codes on Github. But in order to work we should allow this application to pull the source codes from GitHub. So the Github will exposes an Authentication server to the SonarCloud. So this application now will have a login page where it will redirect the user to the Github login and the user credentials will be validated by Github. After that Github provides a token to the SonarCloud which will be used to pull the source code of the users.</li> </ul> </li> <li> <p>According to the <code>OAuth 2.0</code> specification it enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service. or by allowing the third-party application to obtain access on its own behalf.</p> </li> <li>In the OAuth world, a client application wants to gain access to a protected resource on behalf of a resource owner (usually an end user). For this client application will interact with the Authorization server to obtain the token.</li> <li>In many way, you can think of the OAuth token as a \"access card\" at any office/hotel. These tokens provides limited access to someone, without handing over full control in the form of the master key.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2/#oauth2_details","title":"OAUTH2 Details","text":"<ul> <li>OAUTH2 Components</li> <li>OAUTH2 Flow</li> <li>OAUTH2 Resource Server Token Validation</li> <li>Code Grant Type With Github</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OAUTH2/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OpenID%20Connect/","title":"OpenID Connect","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OpenID%20Connect/#what_is_the_openid_connect","title":"What Is The OpenID Connect?","text":"<ul> <li><code>OpenID Connect (OIDC)</code> is an open authentication protocol that works on top of the OAuth 2.0 framework. Targeted toward consumers, OIDC allows individuals to use single sign-on (SSO) to access relying party sites using OpenID Providers (OPs), such as an email provider or social network, to authenticate their identities. It provides the application or service with information about the user, the context of their authentication, and access to their profile information.</li> <li>While OAuth 2.0 provides authorization via an access token containing scopes, OpenID Connect provides authentication by introducing a new ID token contains a new set of scopes and claims specifically for identity.</li> </ul> <ul> <li>The <code>OpenID Connect</code> flow looks the same as OAuth. The only differences are, in the initial request, a specific scope of <code>OpenID</code> is used and in the final exchange the <code>client</code> receives both <code>Access Token</code> and an <code>ID Token</code>.</li> <li>The <code>Access Token</code> will be used to handle the <code>Authorization</code> and the <code>ID token</code> will be used to handle the <code>user details</code> of the authentication details.</li> <li>So to make the authorization server know that you want to use the <code>OAuth2</code> or <code>OpenID Connect</code>, we just need to put the value <code>openId</code> into the <code>scope</code> then the authorization server will know and return the <code>Access Token</code> and <code>ID Token</code> for us.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OpenID%20Connect/#why_is_openid_connect_important","title":"Why Is OpenID Connect Important?","text":"<ul> <li><code>Identity</code> is the key to any application. At the core of modern authorization is OAuth2, but the OAuth2 lacks an authentication component. Implementing <code>OpenID Connect</code> on top of OAuth2 completes an IAM (Identity And Access Management) strategy.</li> <li>As more and more applications need to connect with each other and more identities are being populated on the internet, the demand to share these identities is also increased. With <code>OpenID Connect</code>, applications can share the identities easily and standard way.</li> </ul> <ul> <li> <p><code>OpenID Connect</code> add below details to <code>OAuth2</code>:</p> <ul> <li>OIDC standardizes the scopes to OpenID, profile, email and address</li> <li>ID Token using JWT standard</li> <li>OIDC exposes the standardized <code>/userinfo</code> endpoint.</li> </ul> </li> <li> <p>So in the <code>OpenID Connect</code>, with the <code>Access Token</code> and <code>ID Token</code>, we can identify the identity details of our end user and also can enforce the access management with a combination of these identity and access management.</p> </li> <li>Currently inside the industry authorization server like <code>Okta</code>, <code>Keycloak</code> they are all implemented based on this IAM concept and they follow the <code>OpenID Connect</code> and the OAuth2 framework. </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OpenID%20Connect/#see_also","title":"See Also","text":"<ul> <li>OAUTH2</li> <li>OAUTH2 Flow</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/OpenID%20Connect/#references","title":"References","text":"<ul> <li>pingidentity</li> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/","title":"Password Grant Type Client Server","text":"<ul> <li>In the Keycloak Setup, we learned how to set up <code>Keycloak</code> authorization server for <code>Password Grant Type</code> . Now, in this section, we will continue to configure a Spring Boot client server which will connect to Keycloak authorization server to get token and call to Resource server automatically when the user call to client server to get the data.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#prepare","title":"Prepare","text":"<ul> <li>So firstly, we need to overview the simple diagram that we are going to do as in the image below.</li> </ul> <ul> <li>So as you can see, when the user use <code>Postman</code> to call to the Spring Boot Client application then it will automatically call to the Keycloak authorization server with the user credentials (username and password) to get the access token and then call to the Spring Boot Resource Server application to get the data and return to the Postman.</li> <li>So it will be different a little with the <code>Client Credentials Grant Type</code> because when the Spring Boot client server will use the user credentials which are users created in Realms of Keycloak authorization server instead of credentials of created clients.</li> <li>For setting up Keycloak authorization server please view Keycloak Setup with Client Credentials Grant Type.</li> <li>For Resource Server setup, you can view Client Credentials Resource Server, the resource server for <code>Client Credential Grant Type</code>, <code>Password Grant Type</code> and <code>Authorization Code Grant Type</code> are almost the same, so we can reuse it.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#client_server_setup","title":"Client Server Setup","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#dependencies","title":"Dependencies","text":"<ul> <li>Now, let's create a Spring Boot application and add some dependencies as below.</li> </ul> pom.xml<pre><code> &lt;dependencyManagement&gt;\n            &lt;dependencies&gt;\n                    &lt;dependency&gt;\n                            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                            &lt;version&gt;2021.0.0&lt;/version&gt;\n                            &lt;type&gt;pom&lt;/type&gt;\n                            &lt;scope&gt;import&lt;/scope&gt;\n                    &lt;/dependency&gt;\n            &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;dependencies&gt;\n            &lt;!--spring boot starter--&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n                    &lt;version&gt;2.6.3&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;!--lombok--&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;version&gt;1.18.22&lt;/version&gt;\n                    &lt;scope&gt;provided&lt;/scope&gt;\n            &lt;/dependency&gt;\n\n            &lt;!--Spring cloud openfeign--&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n                    &lt;version&gt;3.1.0&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n                    &lt;version&gt;3.1.0&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;!-- Spring security --&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n                    &lt;version&gt;2.6.1&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;!-- Spring Boot oauth2 client --&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n                    &lt;artifactId&gt;spring-security-oauth2-client&lt;/artifactId&gt;\n                    &lt;version&gt;5.6.0&lt;/version&gt;\n            &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n</code></pre> <ul> <li>Like dependencies that we used for creating Client Credentials Client Server.  To make Spring Boot application become client server we need to apply <code>spring-boot-starter-security</code> and <code>spring-security-oauth2-client</code> dependencies and also <code>spring-cloud-starter-openfeign</code> to make the call with the access token from the client to the resource server, this is the service to service communication.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#oauth2_feign_configuration","title":"OAuth2 Feign Configuration","text":"<ul> <li>So Let's create a Feign interceptor config in which we will try to get the access token and set it to the request header to call to the resource server.</li> </ul> OAuth2FeignConfig.java<pre><code>package com.springboot.security.spring.security.oauth.client.server.password.grant.type.config;\n\nimport feign.RequestInterceptor;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.security.oauth2.client.*;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport reactor.core.publisher.Mono;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class OAuth2FeignConfig {\n\n    public static final String CLIENT_REGISTRATION_ID = \"keycloak\";\n\n    @Value(\"${spring.security.oauth2.client.registration.keycloak.username}\")\n    private String username;\n\n    @Value(\"${spring.security.oauth2.client.registration.keycloak.password}\")\n    private String password;\n\n    private final ClientRegistrationRepository clientRegistrationRepository;\n    private final OAuth2AuthorizedClientService authorizedClientService;\n\n    public OAuth2FeignConfig(ClientRegistrationRepository clientRegistrationRepository,\n                             OAuth2AuthorizedClientService authorizedClientService) {\n        this.clientRegistrationRepository = clientRegistrationRepository;\n        this.authorizedClientService = authorizedClientService;\n    }\n\n    @Bean\n    public RequestInterceptor requestInterceptor() {\n        OAuthClientCredentialsFeignManager clientCredentialsFeignManager =\n                new OAuthClientCredentialsFeignManager(authorizedClientManager(), clientRegistrationRepository);\n        return requestTemplate -&gt; {\n            requestTemplate.header(HttpHeaders.AUTHORIZATION, clientCredentialsFeignManager.getAccessToken(CLIENT_REGISTRATION_ID));\n        };\n    }\n\n    @Bean\n    public OAuth2AuthorizedClientManager authorizedClientManager() {\n        OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder.builder()\n                .password()\n                .refreshToken()\n                .build();\n\n        AuthorizedClientServiceOAuth2AuthorizedClientManager authorizedClientManager =\n                new AuthorizedClientServiceOAuth2AuthorizedClientManager(clientRegistrationRepository, authorizedClientService);\n        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n\n\n        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n        authorizedClientManager.setContextAttributesMapper(oAuth2AuthorizeRequest -&gt; {\n            Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n            map.put(OAuth2AuthorizationContext.USERNAME_ATTRIBUTE_NAME, username);\n            map.put(OAuth2AuthorizationContext.PASSWORD_ATTRIBUTE_NAME, password);\n            return map;\n        });\n        return authorizedClientManager;\n    }\n\n}\n</code></pre> <ul> <li>So as you can see firstly, we will try to create and config the bean <code>authorizedClientManager</code> in the method <code>authorizedClientManager()</code>;</li> <li>To create and configure <code>authorizedClientManager</code> for the <code>password grant type</code>:<ul> <li>we have to create an <code>OAuth2AuthorizedClientProvider</code> with <code>password</code> grant and <code>refreshToken</code> to make sure our client will fetch new access token automatically when the old token is expired. Then we set <code>OAuth2AuthorizedClientProvider</code> to the <code>authorizedClientManager</code>. </li> <li>Then we also need to set mapping attributes into the <code>OAuth2AuthorizationContext</code> which are the username/password of a Realm in Keycloak server. They will be used by the <code>OAuth2AuthorizationContext</code> to authorize (or re-authorize) the client identified by the provided <code>clientRegistrationId</code>.</li> </ul> </li> <li>The username and password of the user are load manually from the <code>application.yml</code> because the <code>Password Grant Type</code> is deprecated. </li> </ul> application.yml<pre><code>server:\n  port: 8086\n\nspring:\n  security:\n    oauth2:\n      url: http://localhost:8087\n      client:\n        registration:\n          keycloak: # &lt;--- It's your custom client. I am using keycloak\n            client-id: passwordgrant\n            authorization-grant-type: password\n            scope: openid, address, email, profile # your scopes\n            username: user\n            password: user\n        provider:\n          keycloak: # &lt;--- Here Registered my custom provider\n            authorization-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/auth\n            token-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/token\n\n\nlogging:\n  level:\n    com.springboot.security.spring.security.oauth.client.server.password.grant.type.api: DEBUG\n\nfeign:\n  client:\n    config:\n      default:\n        loggerLevel: full\n</code></pre> <ul> <li>Next, after finishing <code>OAuthClientCredentialsFeignManager</code> config, then we will use it and <code>clientRegistrationRepository</code> to get the access token from the Keycloak authorization server. But implementing the function for getting access token we will put it into a class <code>OAuthClientCredentialsFeignManager</code> to make the code look better. So in the <code>OAuthClientCredentialsFeignManager</code> we will have a method as below.</li> </ul> OAuthClientCredentialsFeignManager.java<pre><code>package com.springboot.security.spring.security.oauth.client.server.password.grant.type.config;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizeRequest;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n\nimport static java.util.Objects.isNull;\n\n@Slf4j\npublic class OAuthClientCredentialsFeignManager {\n\n    private static final Authentication ANONYMOUS_USER_AUTHENTICATION =\n            new AnonymousAuthenticationToken(\"key\", \"anonymous\", AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\"));\n\n    private final OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager;\n    private final ClientRegistrationRepository clientRegistrationRepository;\n\n\n    public OAuthClientCredentialsFeignManager(OAuth2AuthorizedClientManager oAuth2AuthorizedClientManager,\n                                              ClientRegistrationRepository clientRegistrationRepository) {\n        this.oAuth2AuthorizedClientManager = oAuth2AuthorizedClientManager;\n        this.clientRegistrationRepository = clientRegistrationRepository;\n    }\n\n    public String getAccessToken(String clientRegistrationId) {\n        try {\n            ClientRegistration clientRegistration = clientRegistrationRepository.findByRegistrationId(clientRegistrationId);\n            OAuth2AuthorizeRequest oAuth2AuthorizeRequest = OAuth2AuthorizeRequest\n                    .withClientRegistrationId(clientRegistration.getRegistrationId())\n                    .principal(ANONYMOUS_USER_AUTHENTICATION)\n                    .build();\n            OAuth2AuthorizedClient client = oAuth2AuthorizedClientManager.authorize(oAuth2AuthorizeRequest);\n            if (isNull(client)) {\n                throw new IllegalStateException(\"client credentials flow on \" + clientRegistration.getRegistrationId() + \" failed, client is null\");\n            }\n            return \"Bearer \" + client.getAccessToken().getTokenValue();\n        } catch (Exception exp) {\n            log.error(\"client credentials error \" + exp.getMessage());\n            throw new IllegalArgumentException(\"client credentials error \" + exp.getMessage(), exp);\n        }\n    }\n\n}\n</code></pre> <ul> <li>As you can see, we will use <code>ClientRegistrationRepository</code> to get the the <code>ClientRegistration</code> and use to to build the <code>OAuth2AuthorizeRequest</code>. Then the <code>OAuth2AuthorizeRequest</code> will be used by <code>oAuth2AuthorizedClientManager</code> to authorize the client. After client is authorized then we can get the access token from <code>OAuth2AuthorizedClient</code> by function <code>.getAccessToken().getTokenValue()</code>; and this token will be used for Feign Interceptor.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#feign_configuration","title":"Feign Configuration","text":"<ul> <li>Next, we also need to create an adapter interface name\u00a0<code>SpringOAuth2ResourceClient</code>\u00a0to configure FeignClient with target api as below:</li> </ul> SpringOAuth2ResourceClient.java<pre><code>package com.springboot.security.spring.security.oauth.client.server.password.grant.type.api;\n\nimport com.springboot.security.spring.security.oauth.client.server.password.grant.type.config.OAuth2FeignConfig;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = \"springOAuth2ResourceClient\", url = \"${spring.security.oauth2.url}\", configuration = {OAuth2FeignConfig.class})\npublic interface SpringOAuth2ResourceClient {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/card\")\n    String getCardDetail();\n\n}\n</code></pre> <ul> <li> <p>We will put the FeignClient configuration class that we created in the step above into this FeignClient by using param <code>configuration</code>. So now, every request of the api <code>/v1/card</code> to the Spring Boot resource server will have the access token which is fetched from the Keycloak authorization server.</p> </li> <li> <p>Finally, in the main class, we just need to put annotation <code>@EnableFeignClients</code> as below.</p> </li> </ul> SpringSecurityOauthPasswordGrantTypeClientServer.java<pre><code>package com.springboot.security.spring.security.oauth.client.server.password.grant.type;  \n\nimport org.springframework.boot.SpringApplication;  \nimport org.springframework.boot.autoconfigure.SpringBootApplication;  \nimport org.springframework.cloud.openfeign.EnableFeignClients;  \n\n@EnableFeignClients  \n@SpringBootApplication  \npublic class SpringSecurityOauthPasswordGrantTypeClientServer {  \n    public static void main(String[] args) {  \n        SpringApplication.run(SpringSecurityOauthPasswordGrantTypeClientServer.class, args);  \n    }  \n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#controller","title":"Controller","text":"<ul> <li>Let's create a simple controller in the Spring Boot client application which will be called by the Postman as below.</li> </ul> OpenFeignInterceptorController.java<pre><code>package com.springboot.security.spring.security.oauth.client.server.password.grant.type.controller;\n\nimport com.springboot.security.spring.security.oauth.client.server.password.grant.type.api.SpringOAuth2ResourceClient;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OpenFeignInterceptorController {\n\n    @Autowired\n    private SpringOAuth2ResourceClient springOAuth2ResourceClient;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/oauth2/auth/password-grant-type/interceptor/card\")\n    public ResponseEntity&lt;String&gt; getCardMessage() {\n        return ResponseEntity.ok(this.springOAuth2ResourceClient.getCardDetail());\n    }\n\n}\n</code></pre> <ul> <li>So when this api is called by postman then it will use the <code>SpringOAuth2ResourceClient</code> to call to the Spring Boot resource server to get the data.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#basic_security_configuration","title":"Basic Security Configuration","text":"<ul> <li>We will increase the security for our Spring Boot client service a little bit. In detail, to call the api in the controller of the step above, the user from Postman must put a basic authentication with username and password.</li> <li>So let's create a <code>SecurityConfig.java</code> class and put some basic authentication configuration as below.</li> </ul> SecurityConfig.java<pre><code>package com.springboot.security.spring.security.oauth.client.server.password.grant.type.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Collections;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and().cors().configurationSource(this.corsConfigurationSource())\n                .and().csrf().disable()\n                .authorizeRequests()\n                .anyRequest()\n                .authenticated()\n                .and().formLogin()\n                .and().httpBasic();\n        return http.build();\n    }\n\n    @Bean\n    protected CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedOriginPatterns(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList(\"*\"));\n        corsConfiguration.setAllowCredentials(true);\n        corsConfiguration.setExposedHeaders(Collections.singletonList(\"AUTHORIZATION\"));\n        corsConfiguration.setMaxAge(3600L);\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return source;\n    }\n\n    @Bean\n    public UserDetailsService inMemoryUserDetailsService() {\n        UserDetails demo = User.withUsername(\"user\").password(\"12345\").roles(\"POSTMAN\").build();\n        return new InMemoryUserDetailsManager(demo);\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n}\n</code></pre> <p>Note: The properties under\u00a0<code>spring.security.user</code>\u00a0won't work because Spring Boot will back off creating the\u00a0<code>UserDetailService</code>\u00a0bean. So, we will have to define the\u00a0<code>UserDetailsService</code>\u00a0bean by our self.</p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#testing","title":"Testing","text":"<ul> <li>Now, let's use Postman to call to api <code>/v1/oauth2/auth/password-grant-type/interceptor/card</code> of our Spring Boot Client server, then you can receive the data of Sping Boot Resource server successfully as below.</li> </ul> <ul> <li>If you look into the our Spring Boot Client service then you can see the access token is added into the Authorization header of the request to the Spring Boot Resource server and if you make more calls from Postman, you can see the access token has not changed, so our Spring Boot Client server had reused the access token because it is still not expired.</li> </ul> <ul> <li>Then if you wait a little bit and make a call from Postman again, then you can see in the log we will have a new access token. So it means the old access token has been expired so our Spring Boot Client server will call to Keycloak authorization server to get the access token again.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#see_also","title":"See Also","text":"<ul> <li>Keycloak Setup</li> <li>OAUTH2 Flow</li> <li>Client Credentials Resource Server</li> <li>OAUTH2 Resource Server Token Validation</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Grant%20Type%20Client%20Server/#references","title":"References","text":"<ul> <li>docs.spring.io</li> <li>FullSourceCode</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/","title":"Password Management With PasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/#default_password_validation_in_spring_security","title":"Default Password Validation In Spring Security","text":"<ul> <li>By default, spring security will use the username from input credential of user to load the userDetails  from the database. Then spring security will compare the input password from use and the password that contained in the database, so if the passwords are matched, then user will be authenticated.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/#encode_-_encrypt_-_hash","title":"Encode - Encrypt - Hash","text":"<ul> <li><code>Encode is not used for security</code> it is used for data transformation for proper consumption. So it's easy to encode/decode data and you just need to know the encoding. We have 2 popular types of encoding: URL encoding, Base64 encoding.</li> <li><code>Encryption</code> is part of security, the goal is to ensure the data can only be consumed by valid recipient using key/password to decrypt (reverse encrypt). Remember that key/password has to be kept secretly. There are two main types of data encrytion are asymmetric encryption and symmetric encryption.<ul> <li>Symmetric encryption is a type of encryption where only one secret symmetric key is used to encrypt the plaintext and decrypt the ciphertext. Some common symmetric encryption methods as AES (Advanced Encryption Standard), 3DES (Triple Data Encryption Standards), Twofish</li> <li>Asymmetric encryption, also known as Public-Key Cryptography, encrypts and decrypts the data using two separate cryptographic asymmetric keys. These two keys are known as a public key and a private key. Some common asymmetric encryption methods as RSA (named after computer scientists Ron Rivest, Adi Shamir, and Leonard Adleman), PKI (Public key infrastructure)</li> </ul> </li> <li><code>Hash</code> is a path of security. It is used to ensure data integrity, this is commonly referred as checksum, or signature. In order words, if some part of data is changed, then you can know that it's changed. We will learn about data integrity with HMAC (hash-based message authentication) in another post.<ul> <li><code>Salt</code> is a random data that is used as an additional input to a one-way function that hashes data, a password or passphrase, salts are used to safeguard passwords in storage.</li> <li>There are a huge number of widely accepted hashing algorithms available for general use. For example, MD5, SHA1, SHA224, SHA256, SHA512... </li> </ul> </li> <li>See details in topics below:<ul> <li>Encode Decode In Spring Boot</li> <li>Encrypt Decrypt In Spring Boot<ul> <li>Symmetric Encryption</li> <li>Asymmetric Encryption</li> </ul> </li> <li>Hash In Spring Boot<ul> <li>Example With SHA-256 In Spring Boot</li> <li>Example With SHA-512 In Spring Boot</li> <li>Example With Pbkdf2 In Spring Boot</li> <li>Example With Bcrypt In Spring Boot</li> </ul> </li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/#definition_of_passwordencoder","title":"Definition Of PasswordEncoder","text":"<ul> <li>Definition Of PasswordEncoder<ul> <li>NoOpPasswordEncoder</li> <li>StandardPasswordEncoder</li> <li>Pbkdf2PasswordEncoder</li> <li>BCryptPasswordEncoder</li> <li>SCryptPasswordEncoder</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/#example_with_bcryptpasswordencoder","title":"Example With BCryptPasswordEncoder","text":"<ul> <li>Example With BCryptPasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/#summary","title":"Summary","text":"<ul> <li>We looked at how Spring Security validates the password with the help of password encoders.</li> <li>We understand about what is encoding, encryption and hashing.</li> <li>What is PasswordEncoder interfaces and methods inside it.<ul> <li>Definition Of PasswordEncoder</li> </ul> </li> <li>What are different type of password encoders provided by Spring Security and details about them.<ul> <li>NoOpPasswordEncoder</li> <li>StandardPasswordEncoder</li> <li>Pbkdf2PasswordEncoder</li> <li>BCryptPasswordEncoder</li> <li>SCryptPasswordEncoder</li> </ul> </li> <li>Enhanced our application by implementing BCryptPasswordEncoder inside it and accordingly update the user details in the DB.</li> <li>Details about Spring Security crypt package inside spring security.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Password%20Management%20With%20PasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Pbkdf2PasswordEncoder/","title":"Pbkdf2PasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Pbkdf2PasswordEncoder/#pbkdf2passwordencoder_1","title":"Pbkdf2PasswordEncoder","text":"<ul> <li><code>Password-Based Key Derivation Function 2 (Pbkdf2)</code> is a pretty easy slow-hashing function that performs an HMAC(Hashed Message Authentication Code) as many times as specified by an iterations argument.</li> <li>The three parameters received by the last call are the values of key used for the encoding process, the number of iterations used to encode the password, and the size of the hash. The second and third parameters can influence the strength of the result.</li> <li>You can choose more or fewer iterations as well as the length of the result. The longer the hash, the more powerful the password is.</li> </ul> <p><pre><code>PasswordEncoder p = new Pbkdf2PasswordEncoder();\nPasswordEncoder p = new Pbkdf2PasswordEncoder(\"secret\");\nPasswordEncoder p = new Pbkdf2PasswordEncoder(\"secret\", 185000, 256);\n</code></pre> - The <code>Pbkdf2</code> is a slow hashing mechanism so it will perform so many iterations and it will take enough measures to maintain that length of the hashing. </p> <p>So this hashing is low compared to other encoders available in the spring security.</p> Pbkdf2PasswordEncoder.java<pre><code>/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.crypto.password;\n\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\n\nimport org.springframework.security.crypto.codec.Hex;\nimport org.springframework.security.crypto.codec.Utf8;\nimport org.springframework.security.crypto.keygen.BytesKeyGenerator;\nimport org.springframework.security.crypto.keygen.KeyGenerators;\nimport org.springframework.security.crypto.util.EncodingUtils;\n\n/**\n * A {@link PasswordEncoder} implementation that uses PBKDF2 with :\n * &lt;ul&gt;\n * &lt;li&gt;a configurable random salt value length (default is {@value #DEFAULT_SALT_LENGTH}\n * bytes)&lt;/li&gt;\n * &lt;li&gt;a configurable number of iterations (default is {@value #DEFAULT_ITERATIONS})&lt;/li&gt;\n * &lt;li&gt;a configurable output hash width (default is {@value #DEFAULT_HASH_WIDTH}\n * bits)&lt;/li&gt;\n * &lt;li&gt;a configurable key derivation function (see {@link SecretKeyFactoryAlgorithm})&lt;/li&gt;\n * &lt;li&gt;a configurable secret appended to the random salt (default is empty)&lt;/li&gt;\n * &lt;/ul&gt;\n * The algorithm is invoked on the concatenated bytes of the salt, secret and password.\n *\n * @author Rob Worsnop\n * @author Rob Winch\n * @author Lo\u00efc Guibert\n * @since 4.1\n */\npublic class Pbkdf2PasswordEncoder implements PasswordEncoder {\n\n    private static final int DEFAULT_SALT_LENGTH = 8;\n\n    private static final int DEFAULT_HASH_WIDTH = 256;\n\n    private static final int DEFAULT_ITERATIONS = 185000;\n\n    private final BytesKeyGenerator saltGenerator;\n\n    private final byte[] secret;\n\n    private final int hashWidth;\n\n    private final int iterations;\n\n    private String algorithm = SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA1.name();\n\n    private boolean encodeHashAsBase64;\n\n    /**\n     * Constructs a PBKDF2 password encoder with no additional secret value. There will be\n     * a salt length of {@value #DEFAULT_SALT_LENGTH} bytes, {@value #DEFAULT_ITERATIONS}\n     * iterations and a hash width of {@value #DEFAULT_HASH_WIDTH} bits. The default is\n     * based upon aiming for .5 seconds to validate the password when this class was\n     * added. Users should tune password verification to their own systems.\n     */\n    public Pbkdf2PasswordEncoder() {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a standard password encoder with a secret value which is also included\n     * in the password hash. There will be a salt length of {@value #DEFAULT_SALT_LENGTH}\n     * bytes, {@value #DEFAULT_ITERATIONS} iterations and a hash width of\n     * {@value #DEFAULT_HASH_WIDTH} bits.\n     * @param secret the secret key used in the encoding process (should not be shared)\n     */\n    public Pbkdf2PasswordEncoder(CharSequence secret) {\n        this(secret, DEFAULT_SALT_LENGTH, DEFAULT_ITERATIONS, DEFAULT_HASH_WIDTH);\n    }\n\n    /**\n     * Constructs a standard password encoder with a secret value as well as salt length.\n     * There will be {@value #DEFAULT_ITERATIONS} iterations and a hash width of\n     * {@value #DEFAULT_HASH_WIDTH} bits.\n     * @param secret the secret\n     * @param saltLength the salt length (in bytes)\n     * @since 5.5\n     */\n    public Pbkdf2PasswordEncoder(CharSequence secret, int saltLength) {\n        this(secret, saltLength, DEFAULT_ITERATIONS, DEFAULT_HASH_WIDTH);\n    }\n\n    /**\n     * Constructs a standard password encoder with a secret value as well as iterations\n     * and hash width. The salt length will be of {@value #DEFAULT_SALT_LENGTH} bytes.\n     * @param secret the secret\n     * @param iterations the number of iterations. Users should aim for taking about .5\n     * seconds on their own system.\n     * @param hashWidth the size of the hash (in bits)\n     */\n    public Pbkdf2PasswordEncoder(CharSequence secret, int iterations, int hashWidth) {\n        this(secret, DEFAULT_SALT_LENGTH, iterations, hashWidth);\n    }\n\n    /**\n     * Constructs a standard password encoder with a secret value as well as salt length,\n     * iterations and hash width.\n     * @param secret the secret\n     * @param saltLength the salt length (in bytes)\n     * @param iterations the number of iterations. Users should aim for taking about .5\n     * seconds on their own system.\n     * @param hashWidth the size of the hash (in bits)\n     * @since 5.5\n     */\n    public Pbkdf2PasswordEncoder(CharSequence secret, int saltLength, int iterations, int hashWidth) {\n        this.secret = Utf8.encode(secret);\n        this.saltGenerator = KeyGenerators.secureRandom(saltLength);\n        this.iterations = iterations;\n        this.hashWidth = hashWidth;\n    }\n\n    /**\n     * Sets the algorithm to use. See &lt;a href=\n     * \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory\"&gt;SecretKeyFactory\n     * Algorithms&lt;/a&gt;\n     * @param secretKeyFactoryAlgorithm the algorithm to use (i.e.\n     * {@code SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA1},\n     * {@code SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA256},\n     * {@code SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA512})\n     * @since 5.0\n     */\n    public void setAlgorithm(SecretKeyFactoryAlgorithm secretKeyFactoryAlgorithm) {\n        if (secretKeyFactoryAlgorithm == null) {\n            throw new IllegalArgumentException(\"secretKeyFactoryAlgorithm cannot be null\");\n        }\n        String algorithmName = secretKeyFactoryAlgorithm.name();\n        try {\n            SecretKeyFactory.getInstance(algorithmName);\n            this.algorithm = algorithmName;\n        }\n        catch (NoSuchAlgorithmException ex) {\n            throw new IllegalArgumentException(\"Invalid algorithm '\" + algorithmName + \"'.\", ex);\n        }\n    }\n\n    /**\n     * Sets if the resulting hash should be encoded as Base64. The default is false which\n     * means it will be encoded in Hex.\n     * @param encodeHashAsBase64 true if encode as Base64, false if should use Hex\n     * (default)\n     */\n    public void setEncodeHashAsBase64(boolean encodeHashAsBase64) {\n        this.encodeHashAsBase64 = encodeHashAsBase64;\n    }\n\n    @Override\n    public String encode(CharSequence rawPassword) {\n        byte[] salt = this.saltGenerator.generateKey();\n        byte[] encoded = encode(rawPassword, salt);\n        return encode(encoded);\n    }\n\n    private String encode(byte[] bytes) {\n        if (this.encodeHashAsBase64) {\n            return Base64.getEncoder().encodeToString(bytes);\n        }\n        return String.valueOf(Hex.encode(bytes));\n    }\n\n    @Override\n    public boolean matches(CharSequence rawPassword, String encodedPassword) {\n        byte[] digested = decode(encodedPassword);\n        byte[] salt = EncodingUtils.subArray(digested, 0, this.saltGenerator.getKeyLength());\n        return MessageDigest.isEqual(digested, encode(rawPassword, salt));\n    }\n\n    private byte[] decode(String encodedBytes) {\n        if (this.encodeHashAsBase64) {\n            return Base64.getDecoder().decode(encodedBytes);\n        }\n        return Hex.decode(encodedBytes);\n    }\n\n    private byte[] encode(CharSequence rawPassword, byte[] salt) {\n        try {\n            PBEKeySpec spec = new PBEKeySpec(rawPassword.toString().toCharArray(),\n                    EncodingUtils.concatenate(salt, this.secret), this.iterations, this.hashWidth);\n            SecretKeyFactory skf = SecretKeyFactory.getInstance(this.algorithm);\n            return EncodingUtils.concatenate(salt, skf.generateSecret(spec).getEncoded());\n        }\n        catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(\"Could not create hash\", ex);\n        }\n    }\n\n    /**\n     * The Algorithm used for creating the {@link SecretKeyFactory}\n     *\n     * @since 5.0\n     */\n    public enum SecretKeyFactoryAlgorithm {\n\n        PBKDF2WithHmacSHA1, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA512\n\n    }\n\n}\n</code></pre> <ul> <li>In the <code>matches</code> method, It will get the password from user, then hash it again with the <code>salt</code> that extracted from the password in the database. Then it will compare with the recently hashed password from the user with the one that got from the database.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Pbkdf2PasswordEncoder/#see_also","title":"See Also","text":"<ul> <li>BCryptPasswordEncoder</li> <li>Definition Of PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Pbkdf2PasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/SB%203x%20Google%20ReCaptcha%20Integration%20With%20Annotation/","title":"Google ReCaptcha Integration With Annotation","text":"","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20Google%20ReCaptcha%20Integration%20With%20Annotation/#references","title":"References","text":"<ul> <li>Full Source Code FE</li> <li>Full Source Code BE</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20Google%20ReCaptcha%20Integration/","title":"Google ReCaptcha Integration","text":"","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20Google%20ReCaptcha%20Integration/#references","title":"References","text":"<ul> <li>Full Source Code FE</li> <li>Full Source Code BE</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type%20CSRF/","title":"OIDC Authorization Code Grant Type CSRF","text":"","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type%20CSRF/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type%20Stateless%20Session/","title":"OIDC Authorization Code Grant Type Stateless Session","text":"","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type%20Stateless%20Session/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type%20User%20Roles/","title":"OIDC Authorization Code Grant Type User Roles","text":"","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type%20User%20Roles/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/","title":"OIDC Authorization Code Grant Type","text":"<ul> <li>In the\u00a0Keycloak Setup, we learned how to set up\u00a0<code>Keycloak</code>\u00a0authorization server for\u00a0<code>OIDC Authorization Code Grant Type</code>\u00a0. Now, in this section, we will continue to configure the Spring Boot\u00a0application to be as <code>Client</code> and also <code>Resource Server</code> for connecting to the <code>Keycloak</code> to get token and also verifying in coming token requests with\u00a0before accessing the data.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#prepare","title":"Prepare","text":"<ul> <li>Firstly, we need to review the simple diagram that we are going to do as in the image below.</li> </ul> <ol> <li>The user access <code>Browser</code> and then call the API <code>/v1/secure/messages</code> for getting the protected data.</li> <li>The <code>Spring Boot application</code> checks the credential and realize that, the user has not logged in yet then the it will save this API <code>URL</code> into a request cache currently the API <code>URL</code> is stored under a <code>JESSIONID</code> and it will be used in steps later. Then the user will be responded with a redirect URL to trigger authorization flow.</li> <li>The <code>Browser</code> calls the the responded API for triggering the authorization flow.</li> <li>When the API <code>/oauth2/authorization/keycloak</code> is called then the <code>Spring Boot application</code> will prepare an authorization redirect URL and it will also save the <code>OAuth2AuthorizationRequest</code> under the <code>JESSIONID</code> on the step above. Then the authorization redirect URL will be responded to the browser.</li> <li>The <code>Browser</code> will redirect to the responded URL to the <code>Keycloak Authorization Server</code> page for login with username and password to prove the user identity.</li> <li>If the username and password are correct then the <code>Keycloak Authorization Server</code> will respond a redirect URL together with an <code>authorization code</code> to the <code>Browser</code>. This redirect URL is the <code>client registered redirect</code> that we configured in <code>Keycloak Authorization Server</code> in Keycloak Setup.</li> <li>The <code>Browser</code> call the <code>client registered redirect</code> URL together with the <code>Authorization Code</code> and <code>JESSIONID</code> </li> <li>When the <code>URL</code> is called the filter <code>OAuth2LoginAuthenticationFilter</code> of <code>Spring Boot application</code> will be triggered and it will load the  <code>OAuth2AuthorizationRequest</code> which is stored in the session to extract some information and repair the request with the <code>authorization code</code> and call to the <code>Keycloak Authorization Server</code> to verify the <code>auhthorization code</code> and exchange the <code>Access Token</code> and <code>ID token</code> if the <code>authorization code</code> is correct.</li> <li>If the <code>authorization code</code> is correct then the <code>Access Token</code>, <code>ID Token</code> and other information will be responded.</li> <li>The <code>Spring Boot application</code> will extract those information and build the <code>OAuth2AuthenticationToken</code>. Then this <code>Authentication</code> will set into a new session and this session will be responded as a new <code>JSESSIONID</code> cookie. This <code>Authentication</code> also be set into the <code>Spring Security Context</code>. Finally, the <code>JESSIONID</code> cookie with the <code>redirect URL</code> which is the first URL that the <code>browser</code> called <code>/v1/secure/messages</code> without the authorization will be responded to the Browser, this <code>redirect URL</code> is got from the request cache at step 2.</li> <li>When <code>Browser</code> received the <code>JESSIONID</code> cookie and redirect URL. Then it will call the redirect URL and the <code>Browser</code> will also set the <code>JESSIONID</code> into the request automatically. </li> <li> <p>The <code>Spring Boot application</code> received the request with the <code>JESSIONID</code> (processed in the <code>SecurityContextHolderFilter</code>) and it look up the corresponding session in the session store by the value of <code>JSESSIONID</code>. If the session exists and the <code>SecurityContext</code> in the session is valid also then the <code>SecurityContext</code> is set in the <code>SecurityContextHolder</code> and finally the data will be response to the <code>Browser</code>.</p> </li> <li> <p>For setting up <code>Keycloak authorization server</code> please view\u00a0Keycloak Setup\u00a0with Client Credentials Grant Type.</p> </li> </ol>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#spring_boot_server_setup","title":"Spring Boot Server Setup","text":"","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#dependencies","title":"Dependencies","text":"<ul> <li>Let's add some dependencies as below.</li> </ul> pom.xml<pre><code>&lt;dependencies&gt;\n    &lt;!-- spring boot 3 web --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;3.1.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- spring boot 3 test --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;version&gt;3.1.3&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-oauth2-client&lt;/artifactId&gt;\n        &lt;version&gt;3.1.3&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- lombok --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;version&gt;1.18.28&lt;/version&gt;\n        &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Apache commons-lang3 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n        &lt;version&gt;3.13.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- slf4j --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n        &lt;version&gt;2.0.9&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n        &lt;version&gt;2.0.9&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n&lt;/dependencies&gt;\n</code></pre> <ul> <li>In which for setting up <code>OIDC Authorization Code Grant Type</code> with Spring Boot we need the dependency <code>spring-boot-starter-oauth2-client</code>.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#controller","title":"Controller","text":"<ul> <li>Then let's create 2 simple controllers with 2 simple APIs for testing. One controller is public and the other one is secure controller which need the authentication to access.</li> </ul> PublicController.java<pre><code>package com.springboot.project.controller;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class PublicController {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/public/messages\")\n    public ResponseEntity&lt;String&gt; getMessage() {\n        return ResponseEntity.ok(\"Public Message!\");\n    }\n\n}\n</code></pre> SecuredController.java<pre><code>package com.springboot.project.controller;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class SecuredController {\n\n    @RequestMapping(method = RequestMethod.GET, path = \"/v1/secure/messages\")\n    public ResponseEntity&lt;String&gt; getMessage() {\n        return ResponseEntity.ok(\"Secured Message!\");\n    }\n\n}\n</code></pre>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#config","title":"Config","text":"<ul> <li>Next, let's create a <code>SecurityConfig.java</code> for configuring the security as below.</li> </ul> SecurityConfig.java<pre><code>package com.springboot.project.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.web.SecurityFilterChain;\n\nimport static org.springframework.security.config.Customizer.withDefaults;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain configure(HttpSecurity http) throws Exception {\n        http.csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(auth -&gt;\n                    auth.requestMatchers(\"/v1/public/**\")\n                            .permitAll()\n                            .anyRequest()\n                            .authenticated())\n                .oauth2Login(withDefaults());\n        return http.build();\n    }\n\n}\n</code></pre> <ul> <li> <p>As you can see that, in this config:</p> <ul> <li>We just simply disable the csrf by using <code>http.csrf(AbstractHttpConfigurer::disable)</code>.</li> <li>Then we config public APIs which don't need the authorization by</li> </ul> <pre><code>.authorizeHttpRequests(auth -&gt;\n                    auth.requestMatchers(\"/v1/public/**\")\n                            .permitAll()\n                            .anyRequest()\n                            .authenticated())\n</code></pre> <ul> <li>Finally, we will configure authentication for OIDC by using <code>.oauth2Login(withDefaults());</code></li> </ul> </li> <li> <p>To use the built-in default <code>OIDC</code> configuration we have to provide some client information in the <code>application.yaml</code> as below.</p> </li> </ul> application.yaml<pre><code>server:\n  port: 7070\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          keycloak:\n            provider: keycloak\n            client-id: auth-code-grant-type\n            client-secret: QXHFcSiFLF96KassAQppb9HJtZ45Lbbf\n            authorization-grant-type: authorization_code\n            scope: openid, profile, email\n            redirect-uri: \"http://localhost:7070/login/oauth2/code/keycloak\"\n        provider:\n          keycloak:\n            issuer-uri: http://localhost:8080/auth/realms/myrealm\n            authorization-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/auth\n            token-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/token\n            user-info-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/userinfo\n            jwk-set-uri: http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/certs\n</code></pre> <ul> <li> <p>So we have the definitions for those configurations as below:</p> </li> <li> <p>Spring Security OAuth2 Client Configuration</p> <ul> <li>spring.security.oauth2.client.registration.keycloak: Defines the client registration details for Keycloak.<ul> <li>provider: Specifies the provider for the OAuth2 client, which is Keycloak.</li> <li>client-id: The client ID registered with Keycloak.</li> <li>client-secret: The client secret associated with the client ID.</li> <li>authorization-grant-type: The type of authorization grant to be used, here it is <code>authorization_code</code>.</li> <li>scope: The scope of the access request (e.g., openid, profile, email).</li> <li>redirect-uri: The URI where the authorization server will redirect to with the authorization code.</li> </ul> </li> <li>spring.security.oauth2.client.provider.keycloak: Defines the provider details for Keycloak.<ul> <li>issuer-uri: The issuer URI for the Keycloak realm.</li> <li>authorization-uri: The URI to initiate the authorization request.</li> <li>token-uri: The URI to obtain the access token.</li> <li>user-info-uri: The URI to obtain user information.</li> <li>jwk-set-uri: The URI to obtain the JSON Web Key Set (JWKS) for verifying tokens.</li> </ul> </li> </ul> </li> </ul> Configuration Value Description <code>server.port</code> <code>7070</code> The port number on which the server runs. <code>spring.security.oauth2.client.registration.keycloak.provider</code> <code>keycloak</code> The OAuth2 provider name. <code>spring.security.oauth2.client.registration.keycloak.client-id</code> <code>auth-code-grant-type</code> The client ID registered with Keycloak. <code>spring.security.oauth2.client.registration.keycloak.client-secret</code> <code>QXHFcSiFLF96KassAQppb9HJtZ45Lbbf</code> The client secret associated with the client ID. <code>spring.security.oauth2.client.registration.keycloak.authorization-grant-type</code> <code>authorization_code</code> The type of authorization grant. <code>spring.security.oauth2.client.registration.keycloak.scope</code> <code>openid, profile, email</code> The scope of the access request. <code>spring.security.oauth2.client.registration.keycloak.redirect-uri</code> <code>http://localhost:7070/login/oauth2/code/keycloak</code> The URI where the authorization server will redirect with the authorization code. <code>spring.security.oauth2.client.provider.keycloak.issuer-uri</code> <code>http://localhost:8080/auth/realms/myrealm</code> The issuer URI for the Keycloak realm. <code>spring.security.oauth2.client.provider.keycloak.authorization-uri</code> <code>http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/auth</code> The URI to initiate the authorization request. <code>spring.security.oauth2.client.provider.keycloak.token-uri</code> <code>http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/token</code> The URI to obtain the access token. <code>spring.security.oauth2.client.provider.keycloak.user-info-uri</code> <code>http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/userinfo</code> The URI to obtain user information. <code>spring.security.oauth2.client.provider.keycloak.jwk-set-uri</code> <code>http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/certs</code> The URI to obtain the JSON Web Key Set (JWKS) for verifying tokens.","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#testing","title":"Testing","text":"<ul> <li>Now, let's start the Spring Boot application, open browser and go to <code>http://localhost:7070/v1/public/messages</code> then we can see the message immediately without login.</li> </ul> <ul> <li>Then let's go to <code>http://localhost:7070/v1/secure/messages</code> then you will be navigated to the Keycloak login page for authentication as below.</li> </ul> <ul> <li>Then after login successfully we can see the secure message as below.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#deep_dive_into_details","title":"Deep Dive Into Details","text":"<ul> <li>After we testing successfully, now let's open the network and open debug mode for Spring Boot application, and we will check step by step the OIDC Authorization Code Grant Type flow in Spring Security.</li> </ul> <ul> <li>So for the first step, when we access the protected API <code>http://localhost:7070/v1/secure/messages</code>. Then the <code>Spring Boot application</code> checks the credential and realize that, the user has not logged in yet then the it will save this API <code>URL</code> into a request cache, currently the request cache will be stored under a <code>JESSIONID</code> (<code>E6730EA2590274BC5EE3AC11472B29F2</code>) and it will be used in steps later. Then the user will be responded with a redirect URL <code>http://localhost:7070/oauth2/authorization/keycloak</code> to trigger authorization flow.</li> </ul> <ul> <li>Now, The <code>Browser</code> calls the the responded API for triggering the authorization flow. When the API <code>/oauth2/authorization/keycloak</code> is called then the <code>Spring Boot application</code> will prepare an authorization redirect URL and it will also save the <code>OAuth2AuthorizationRequest</code> into a session (the <code>JESSIONID</code> - <code>E6730EA2590274BC5EE3AC11472B29F2</code> that we saw in the step above). Then the authorization redirect URL will be responded to the browser. For example: <code>http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/auth?response_type=code&amp;client_id=auth-code-grant-type&amp;scope=openid%20profile%20email&amp;state=Ho4AIPgBfVSA8tykxnsfklRUQo2mRL7cOX5LWe_ex_8%3D&amp;redirect_uri=http://localhost:7070/login/oauth2/code/keycloak&amp;nonce=gugi6sOh-muBFRb9JZFvd0D6Qkmz83MGpEPHk1ESsP4</code></li> </ul> <ul> <li>The <code>Browser</code> will redirect to the responded URL to the <code>Keycloak Authorization Server</code> page for login with username and password to prove the user identity.</li> </ul> <ul> <li>After the user click button login then the API in the image above will be called and if the username and password are correct then the <code>Keycloak Authorization Server</code> will respond a redirect URL together with an <code>authorization code</code> to the <code>Browser</code>. This redirect URL is the <code>client registered redirect</code> that we configured in <code>Keycloak Authorization Server</code> in Keycloak Setup.</li> </ul> <ul> <li>The <code>Browser</code> call the <code>client registered redirect</code> URL together with the <code>Authorization Code</code> and <code>JESSIONID</code>. When the <code>URL</code> is called the filter <code>OAuth2LoginAuthenticationFilter</code> which extends the <code>AbstractAuthenticationProcessingFilter</code> of <code>Spring Boot application</code> will be triggered and it will load the  <code>OAuth2AuthorizationRequest</code> which is stored in the session to extract some information and repair the request with the <code>authorization code</code> and call to the <code>Keycloak Authorization Server</code> to verify the <code>auhthorization code</code> and exchange the <code>Access Token</code> and <code>ID token</code> if the <code>authorization code</code> is correct. </li> <li>The method <code>attemptAuthentication</code> will be responsible for extracting <code>OAuth2AuthorizationRequest</code> in the <code>OAuth2LoginAuthenticationFilter</code> and call to the <code>KeyCloak</code> for getting the <code>Access Token</code> and <code>ID Token</code>.</li> </ul> OAuth2LoginAuthenticationFilter.java<pre><code>....\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n            throws AuthenticationException {\n        MultiValueMap&lt;String, String&gt; params = OAuth2AuthorizationResponseUtils.toMultiMap(request.getParameterMap());\n        if (!OAuth2AuthorizationResponseUtils.isAuthorizationResponse(params)) {\n            OAuth2Error oauth2Error = new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST);\n            throw new OAuth2AuthenticationException(oauth2Error, oauth2Error.toString());\n        }\n        OAuth2AuthorizationRequest authorizationRequest = this.authorizationRequestRepository\n                .removeAuthorizationRequest(request, response);\n        if (authorizationRequest == null) {\n            OAuth2Error oauth2Error = new OAuth2Error(AUTHORIZATION_REQUEST_NOT_FOUND_ERROR_CODE);\n            throw new OAuth2AuthenticationException(oauth2Error, oauth2Error.toString());\n        }\n        String registrationId = authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);\n        ClientRegistration clientRegistration = this.clientRegistrationRepository.findByRegistrationId(registrationId);\n        if (clientRegistration == null) {\n            OAuth2Error oauth2Error = new OAuth2Error(CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE,\n                    \"Client Registration not found with Id: \" + registrationId, null);\n            throw new OAuth2AuthenticationException(oauth2Error, oauth2Error.toString());\n        }\n        // @formatter:off\n        String redirectUri = UriComponentsBuilder.fromHttpUrl(UrlUtils.buildFullRequestUrl(request))\n                .replaceQuery(null)\n                .build()\n                .toUriString();\n        // @formatter:on\n        OAuth2AuthorizationResponse authorizationResponse = OAuth2AuthorizationResponseUtils.convert(params,\n                redirectUri);\n        Object authenticationDetails = this.authenticationDetailsSource.buildDetails(request);\n        OAuth2LoginAuthenticationToken authenticationRequest = new OAuth2LoginAuthenticationToken(clientRegistration,\n                new OAuth2AuthorizationExchange(authorizationRequest, authorizationResponse));\n        authenticationRequest.setDetails(authenticationDetails);\n        OAuth2LoginAuthenticationToken authenticationResult = (OAuth2LoginAuthenticationToken) this\n                .getAuthenticationManager().authenticate(authenticationRequest);\n        OAuth2AuthenticationToken oauth2Authentication = this.authenticationResultConverter\n                .convert(authenticationResult);\n        Assert.notNull(oauth2Authentication, \"authentication result cannot be null\");\n        oauth2Authentication.setDetails(authenticationDetails);\n        OAuth2AuthorizedClient authorizedClient = new OAuth2AuthorizedClient(\n                authenticationResult.getClientRegistration(), oauth2Authentication.getName(),\n                authenticationResult.getAccessToken(), authenticationResult.getRefreshToken());\n\n        this.authorizedClientRepository.saveAuthorizedClient(authorizedClient, oauth2Authentication, request, response);\n        return oauth2Authentication;\n    }\n\n....\n</code></pre> <ul> <li>We have the code <code>OAuth2AuthorizationRequest authorizationRequest = this.authorizationRequestRepository.removeAuthorizationRequest(request, response);</code> is used for getting the <code>OAuth2AuthorizationRequest</code> which is stored in the session. It will call the method <code>removeAuthorizationRequest</code> under the <code>HttpSessionOAuth2AuthorizationRequestRepository</code> class. The method will load <code>OAuth2AuthorizationRequest</code> and remove that attribute in the Session also.</li> </ul> HttpSessionOAuth2AuthorizationRequestRepository.java<pre><code>....\n\n    @Override\n    public OAuth2AuthorizationRequest removeAuthorizationRequest(HttpServletRequest request,\n            HttpServletResponse response) {\n        Assert.notNull(response, \"response cannot be null\");\n        OAuth2AuthorizationRequest authorizationRequest = loadAuthorizationRequest(request);\n        if (authorizationRequest != null) {\n            request.getSession().removeAttribute(this.sessionAttributeName);\n        }\n        return authorizationRequest;\n    }\n\n....\n</code></pre> <ul> <li>Go back to the <code>OAuth2LoginAuthenticationFilter</code> at line <code>OAuth2LoginAuthenticationToken authenticationResult = (OAuth2LoginAuthenticationToken) this.getAuthenticationManager().authenticate(authenticationRequest);</code> we will call to the <code>KeyCloak</code> Provider to get the <code>Access Token</code> and <code>ID Token</code>. All these information will be stored in the <code>OAuth2LoginAuthenticationToken</code> and the Spring Security will extract them to continue the process in the `AbstractAuthenticationProcessingFilter.</li> </ul> <ul> <li>The <code>Spring Boot application</code> will extract <code>OAuth2LoginAuthenticationToken</code> and build the <code>OAuth2AuthenticationToken</code>. Then this <code>OAuth2AuthenticationToken</code> will be saved in an attribute of the current Session by supported of the <code>HttpSessionOAuth2AuthorizedClientRepository</code>.</li> </ul> HttpSessionOAuth2AuthorizedClientRepository.java<pre><code>....\n\n    @Override\n    public void saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, Authentication principal,\n            HttpServletRequest request, HttpServletResponse response) {\n        Assert.notNull(authorizedClient, \"authorizedClient cannot be null\");\n        Assert.notNull(request, \"request cannot be null\");\n        Assert.notNull(response, \"response cannot be null\");\n        Map&lt;String, OAuth2AuthorizedClient&gt; authorizedClients = this.getAuthorizedClients(request);\n        authorizedClients.put(authorizedClient.getClientRegistration().getRegistrationId(), authorizedClient);\n        request.getSession().setAttribute(this.sessionAttributeName, authorizedClients);\n    }\n\n....\n</code></pre> <ul> <li>Then this <code>OAuth2AuthenticationToken</code> will be responded to the <code>AbstractAuthenticationProcessingFilter</code>. Then the <code>AbstractAuthenticationProcessingFilter</code> will set it into a new session and all the session attributes of old session will be copied to it also. This new session will be responded as a new <code>JSESSIONID</code>. See the method <code>doFilter</code> in <code>AbstractAuthenticationProcessingFilter</code> as below.</li> </ul> AbstractAuthenticationProcessingFilter.java<pre><code>....\n\nprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        if (!requiresAuthentication(request, response)) {\n            chain.doFilter(request, response);\n            return;\n        }\n        try {\n            Authentication authenticationResult = attemptAuthentication(request, response);\n            if (authenticationResult == null) {\n                // return immediately as subclass has indicated that it hasn't completed\n                return;\n            }\n            this.sessionStrategy.onAuthentication(authenticationResult, request, response);\n            // Authentication success\n            if (this.continueChainBeforeSuccessfulAuthentication) {\n                chain.doFilter(request, response);\n            }\n            successfulAuthentication(request, response, chain, authenticationResult);\n        }\n        catch (InternalAuthenticationServiceException failed) {\n            this.logger.error(\"An internal error occurred while trying to authenticate the user.\", failed);\n            unsuccessfulAuthentication(request, response, failed);\n        }\n        catch (AuthenticationException ex) {\n            // Authentication failed\n            unsuccessfulAuthentication(request, response, ex);\n        }\n    }\n\n....\n</code></pre> <ul> <li>At line <code>this.sessionStrategy.onAuthentication(authenticationResult, request, response);</code> in the <code>doFilter</code> we will call to <code>CompositeSessionAuthenticationStrategy.java</code> to create a new session and copy all information of old session into it.</li> </ul> CompositeSessionAuthenticationStrategy.java<pre><code>....\n\n    @Override\n    public void onAuthentication(Authentication authentication, HttpServletRequest request,\n            HttpServletResponse response) throws SessionAuthenticationException {\n        int currentPosition = 0;\n        int size = this.delegateStrategies.size();\n        for (SessionAuthenticationStrategy delegate : this.delegateStrategies) {\n            if (this.logger.isTraceEnabled()) {\n                this.logger.trace(LogMessage.format(\"Preparing session with %s (%d/%d)\",\n                        delegate.getClass().getSimpleName(), ++currentPosition, size));\n            }\n            delegate.onAuthentication(authentication, request, response);\n        }\n    }\n\n....\n</code></pre> <ul> <li>At line <code>delegate.onAuthentication(authentication, request, response);</code> , the <code>CompositeSessionAuthenticationStrategy</code> will delegate creating and copying information from old session to new session for <code>AbstractSessionFixationProtectionStrategy</code>. See the code below.</li> </ul> AbstractSessionFixationProtectionStrategy.java<pre><code>....\n\n    @Override\n    public void onAuthentication(Authentication authentication, HttpServletRequest request,\n            HttpServletResponse response) {\n        boolean hadSessionAlready = request.getSession(false) != null;\n        if (!hadSessionAlready &amp;&amp; !this.alwaysCreateSession) {\n            // Session fixation isn't a problem if there's no session\n            return;\n        }\n        // Create new session if necessary\n        HttpSession session = request.getSession();\n        if (hadSessionAlready &amp;&amp; request.isRequestedSessionIdValid()) {\n            String originalSessionId;\n            String newSessionId;\n            Object mutex = WebUtils.getSessionMutex(session);\n            synchronized (mutex) {\n                // We need to migrate to a new session\n                originalSessionId = session.getId();\n                session = applySessionFixation(request);\n                newSessionId = session.getId();\n            }\n            if (originalSessionId.equals(newSessionId)) {\n                this.logger.warn(\"Your servlet container did not change the session ID when a new session \"\n                        + \"was created. You will not be adequately protected against session-fixation attacks\");\n            }\n            else {\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(LogMessage.format(\"Changed session id from %s\", originalSessionId));\n                }\n            }\n            onSessionChange(originalSessionId, session, authentication);\n        }\n    }\n\n....\n</code></pre> <ul> <li>The line <code>session = applySessionFixation(request);</code> will call the method <code>applySessionFixation</code> of <code>ChangeSessionIdAuthenticationStrategy</code> which will return a new session which contains all information of the old one.</li> </ul> ChangeSessionIdAuthenticationStrategy.java<pre><code>/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.web.authentication.session;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpSession;\n\n/**\n * Uses {@code HttpServletRequest.changeSessionId()} to protect against session fixation\n * attacks. This is the default implementation.\n *\n * @author Rob Winch\n * @since 3.2\n */\npublic final class ChangeSessionIdAuthenticationStrategy extends AbstractSessionFixationProtectionStrategy {\n\n    @Override\n    HttpSession applySessionFixation(HttpServletRequest request) {\n        request.changeSessionId();\n        return request.getSession();\n    }\n\n}\n</code></pre> <ul> <li>Finally, let's go back to the <code>AbstractAuthenticationProcessingFilter</code>, the method <code>successfulAuthentication(request, response, chain, authenticationResult);</code> in method <code>doFilter</code> will be called and the <code>Authentication</code> will be set into the <code>Spring Security Context</code>.</li> </ul> AbstractAuthenticationProcessingFilter.java<pre><code>....\n\nprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,\n            Authentication authResult) throws IOException, ServletException {\n        SecurityContext context = this.securityContextHolderStrategy.createEmptyContext();\n        context.setAuthentication(authResult);\n        this.securityContextHolderStrategy.setContext(context);\n        this.securityContextRepository.saveContext(context, request, response);\n        if (this.logger.isDebugEnabled()) {\n            this.logger.debug(LogMessage.format(\"Set SecurityContextHolder to %s\", authResult));\n        }\n        this.rememberMeServices.loginSuccess(request, response, authResult);\n        if (this.eventPublisher != null) {\n            this.eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));\n        }\n        this.successHandler.onAuthenticationSuccess(request, response, authResult);\n    }\n\n....\n</code></pre> <ul> <li>After that, The line <code>this.successHandler.onAuthenticationSuccess(request, response, authResult)</code> will trigger the method <code>onAuthenticationSuccess</code> method in <code>SavedRequestAwareAuthenticationSuccessHandler</code> to continue the process.</li> </ul> SavedRequestAwareAuthenticationSuccessHandler.java<pre><code>....\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n            Authentication authentication) throws ServletException, IOException {\n        SavedRequest savedRequest = this.requestCache.getRequest(request, response);\n        if (savedRequest == null) {\n            super.onAuthenticationSuccess(request, response, authentication);\n            return;\n        }\n        String targetUrlParameter = getTargetUrlParameter();\n        if (isAlwaysUseDefaultTargetUrl()\n                || (targetUrlParameter != null &amp;&amp; StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n            this.requestCache.removeRequest(request, response);\n            super.onAuthenticationSuccess(request, response, authentication);\n            return;\n        }\n        clearAuthenticationAttributes(request);\n        // Use the DefaultSavedRequest URL\n        String targetUrl = savedRequest.getRedirectUrl();\n        getRedirectStrategy().sendRedirect(request, response, targetUrl);\n    }\n\n....\n</code></pre> <ul> <li> <p>In side the method <code>onAuthenticationSuccess</code> of the  <code>SavedRequestAwareAuthenticationSuccessHandler</code>. At line <code>SavedRequest savedRequest = this.requestCache.getRequest(request, response);</code> , it will load the <code>SavedRequest</code> from the <code>HttpSessionRequestCache</code> and now the new session with copied information from old session from the first step will be loaded. Then the saved request URL will be responded.</p> </li> <li> <p>Finally, the new  <code>JESSIONID</code> cookie together with the <code>redirect URL</code> which is the first URL that the <code>browser</code> called <code>/v1/secure/messages</code> without the authorization, this <code>redirect URL</code> is got from the request cache from first <code>JESSIONID</code> will be responded as in the image above.</p> </li> </ul> <p></p> <ul> <li>Then now, the browser will call the <code>redirect URL</code> and it will add the new  <code>JESSIONID</code> automatically and we can get the secure message successfully.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#see_also","title":"See Also","text":"<ul> <li>Keycloak Setup</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SB%203x%20OIDC%20Authorization%20Code%20Grant%20Type/#references","title":"References","text":"<ul> <li>Full Source Code</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot3"]},{"location":"Spring%20Security/SCryptPasswordEncoder/","title":"SCryptPasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/SCryptPasswordEncoder/#scryptpasswordencoder_1","title":"SCryptPasswordEncoder","text":"<ul> <li><code>SCryptPasswordEncoder</code> use a <code>SCrypt</code> hashing function to encode the password. For the <code>SCryptPasswordEncoder</code>, you have two options to create its instances:</li> </ul> <pre><code>PasswordEncoder p = new SCryptPasswordEncoder();\nPasswordEncoder p = new SCryptPasswordEncoder(16384, 8, 1, 32, 64);\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/SCryptPasswordEncoder/#see_also","title":"See Also","text":"<ul> <li>Definition Of PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/SCryptPasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/","title":"Security Definition","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#what_is_the_security","title":"What is the security?","text":"<ul> <li>Security is protecting your data and business logic inside your web applications.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#security_is_an_non_function_requirement","title":"Security Is An Non Function Requirement","text":"<ul> <li>Security is very important similar to scalability, performance and availability. No client will specifically asks that I need security.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#security_from_dev_phase","title":"Security From Dev Phase","text":"<ul> <li>Security should be considered right from development phase along with business logic.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#different_types_of_security","title":"Different Types Of Security","text":"<ul> <li>Security for a web application will be implemented in different way like using firewalls, HTTPS, SSL, Authentication, Authorization etc.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#why_security_important","title":"Why Security Important?","text":"<ul> <li>Security doesn't mean only losing data or money but also the branch and trust from your users which you have built over years.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#avoiding_most_common_attacks","title":"Avoiding Most Common Attacks","text":"<ul> <li>Using Security we should also avoid common security attacks like CSRF, Broken Authentication inside our applications.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Security%20Definition/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Basic/","title":"Spring Security Basic Introduction","text":"","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Basic/#why_spring_security","title":"Why Spring Security?","text":"<ul> <li><code>Spring Security</code> built by a team at Spring who are good at security by considering all the security scenarios. Using <code>Spring Security</code>, we can secure web apps with minimun configurations. So there is no need to re-invent the wheel here.</li> <li><code>Spring Security</code> handles the common security vulnerabilities like CSRF, CORs etc. For any security vulnerabilities identifies, the framework will be patched immediately as it is being used by many organizations.</li> <li>Using <code>Spring Security</code> we can secure our pages/API paths, enforce roles, method level security etc. with minimum configuration easily.</li> <li><code>Spring Security</code> supports various standards of security to implement authentication, like using username/password authentication, JWT tokens, OAuth2, OpenID etc.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Basic/#spring_security_basic","title":"Spring Security Basic","text":"<ul> <li>In this section we will use apply Spring security on  SpringBoot application.</li> <li>You can add dependencies as below to enable default spring security for your SpringBoot application.</li> </ul> pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;version&gt;2.6.4&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;version&gt;2.6.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <ul> <li>Then, we will create a simple REST controller as below.</li> </ul> WelcomeController.java<pre><code>package com.springboot.security.spring.security.basic.controller;  \n\nimport org.springframework.web.bind.annotation.GetMapping;  \nimport org.springframework.web.bind.annotation.RestController;  \n\n@RestController  \npublic class WelcomeController {  \n\n    @GetMapping(\"/welcome\")  \n    public String sayWelcome() {  \n        return \"Welcome from spring application with security\";  \n    }  \n\n}\n</code></pre> <ul> <li>Then let's build and start up your SpringBoot application. By default, without any configuration, when you start a your spring boot service, spring security will be applied to your all apis with basic authentication (username/password ) and the default user name is <code>user</code>, the default password is generated and showed in the log when you start your application ex: <code>696d439c-14c5-44b1-ae60-1814ab7973c9</code>(Note: every time you start up your SpringBoot application, it will generate another password). See the example log below.</li> </ul> <pre><code>2022-03-05 15:46:14.587  INFO 36968 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2022-03-05 15:46:14.588  INFO 36968 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1287 ms\n2022-03-05 15:46:15.008  INFO 36968 --- [           main] .s.s.UserDetailsServiceAutoConfiguration : \n\nUsing generated security password: 696d439c-14c5-44b1-ae60-1814ab7973c9\n\n2022-03-05 15:46:15.140  INFO 36968 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will not secure any request\n2022-03-05 15:46:15.235  INFO 36968 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n</code></pre> <ul> <li>Let's open postman and call the api with the credential as above you should see the result.</li> </ul> <ul> <li>Using generated password in log is hard for us to use our application. So we will need adding some configuration in <code>application.yml</code>  to override the default username/password for basic authentication.</li> </ul> application.yml<pre><code>spring:\n    security:\n        user:\n            name: user\n            password: 12345\n</code></pre> <ul> <li>Then start your SpringBoot service again and you will see there isn't any generated password printed in the log.</li> </ul> <p><pre><code>2022-03-05 15:57:48.366  INFO 37759 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2022-03-05 15:57:48.366  INFO 37759 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1095 ms\n2022-03-05 15:57:48.954  INFO 37759 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will not secure any request\n2022-03-05 15:57:49.024  INFO 37759 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n</code></pre> - Now, you can use your custom username/password to execute the api.</p> <p></p>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Basic/#understand_on_how_multiple_requests_work_without_credentials","title":"Understand On How Multiple Requests Work Without Credentials","text":"<ul> <li>Some of us may will try to execute the api multi time then can recognize that for the first time you execute the api with credentials after the SpringBoot application has started it took a longer time than the second time or the third time. So why does this happen?</li> <li>Okay, Let's restart your SpringBoot application again, then call the api with credentials.</li> </ul> <ul> <li>Now, try to choose <code>No Auth</code> from postman, then call api again. Then you will see it's still success without adding <code>username/password</code> for basic authentication. So how does it work?</li> </ul> <ul> <li>It is due to the power of a  cookie present inside your header request, if you use postman to call your api, you will see, with the first time you put a username and password then you will see the response is successful with 1 cookie, in this cookie you will see the name is <code>JSESSIONID</code> and a value for example: <code>4C107DAA04E80446EA6AAFBA2914E5A6</code> . So this  cookie contains a Session that is generated from your SpringBoot service with the help of spring security at the first time you login (please review  Spring Security Internal Flow And Architecture), then for next times you just request to spring boot application with this <code>cookie</code> then you will be authenticated without login.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Basic/#set_session_timeout","title":"Set Session Timeout","text":"<ul> <li>For the demo above, after the first time you are authenticated, so can use the <code>session</code> in <code>cookie</code> for onwards calls. By default, this session is infinity timeout, it means, you can use this <code>session</code> forever to access the api without username/password authentication except you restart your springboot application.</li> <li>So doing this way is not a best practice for security, because attacker can access your devices when you go away.</li> <li>To set timeout for session you can add the configuration below into your <code>application.yml</code>.</li> </ul> application.yml<pre><code>spring:  \n  security:  \n    user:  \n      name: user  \n      password: 12345  \n\nserver:  \n  servlet:  \n    session:  \n      timeout: 1m\n</code></pre> <ul> <li>In which, the <code>session</code> will be destroyed in 1 minutes if you do nothing (make request to your springboot application) after your first request is authenticated successfully. See results in the images below.</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Basic/#see_also","title":"See Also","text":"<ul> <li>Cookie</li> <li>Session</li> <li>Spring Security Internal</li> <li>Spring Boot Introduction</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Basic/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> <li>Source Code</li> </ul>","tags":["Spring","SpringSecurity","SpringBoot"]},{"location":"Spring%20Security/Spring%20Security%20Internal/","title":"Spring Security Internal Flow And Architecture","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Internal/#spring_security_internal_flow_and_architecture_1","title":"Spring Security Internal Flow And Architecture","text":"<ul> <li>How spring security framework works internally, once it receives any request from the FE or any third party app consumers? See the image below.</li> </ul> <ul> <li> <p>So in the <code>step 1</code>, when someone calls app through browser or any app consumer with the credentials, a filter (authentication filter), which is present in the spring security framework, will be intercepting the request. </p> </li> <li> <p>Then it will try to convert whatever authentication details that we are receiving from the user like username and password into an <code>authentication object</code>. This authentication object is a base where all the validation of user credentials will validated. Once that ID object is built, the request will be passed to the <code>authentication manager</code>.</p> </li> <li> <p><code>Authentication manager</code> is the place where it will identify what is correspondent <code>authentication provider</code> that the request has to go. In this basic authentication example, we have not have many processes where we can validate user credentials or we may use database to validate user credentials or we may use LDAP or OAuth. So there can be many possible providers that your system has.</p> </li> <li> <p>In simple words, we can say that <code>Authentication manager</code> will identify what is the most appropriate <code>authentication provider</code> that the request has to be sent.</p> </li> <li> <p><code>Authentication provider</code>, this is a place where all your business logic will be implemented. The logic related to your security like how do you validate username and password? There can be scenarios where you may receive email as a user. So based upon all such scenarios, you will implement all your logic of security validation inside your <code>authentication provider</code>.</p> </li> <li> <p><code>Authentication provider</code> will provide 2 interfaces. One is <code>user details services</code> and other one is <code>password encoder</code>. The <code>user detail services</code> is the interface which holds user schema and the <code>password encoder</code> which will tell you how all passwords have to be encrypted, encoded and decrypted while evaluating the security.</p> </li> <li> <p>Once <code>authentication provider</code> using <code>user detail services</code> and <code>password encoders</code> validator with the input credentials are valid or not, the flow will be given back to the authentication manager followed by the <code>authentication filter</code>.</p> </li> <li> <p>Now the authentication object, which we initially sent from the <code>authentication filter</code> will hold, whether the user is a valid authenticated user, what are the authorities or what are the roles associated with the user inside the authentication object.</p> </li> <li> <p>Once the <code>authentication filter</code> pass that <code>authentication object</code> to <code>security context</code> then all details will be <code>stored inside the container</code>.</p> </li> <li> <p><code>Security context</code> is the place where we save the data of the user once the users authenticated themself. It save details like whether the user is valid or might not be a valid user. </p> </li> <li> <p>All such details will be stored inside the <code>security context</code> and given back to the browser or any consumer from second time onwards. If they are trying to pass the same security information, all the flow from <code>step 1</code> to <code>step 8</code> will not be executed because we already tried to validate the person using that credentials.</p> </li> <li> <p>So, Spring Security will tell you, OK, using this token or these credentials whatever I am receiving from second time onwards,  I will directly show you whether this is the valid token or not. </p> </li> <li> <p>This is how it works internally in spring security framework. No matter how complex your Spring Security project is. The basic and internal flow of Spring security will remain the same as given in the image diagram above.</p> </li> <li> <p>If you want to take a simple example. So let's visit Spring Security Basic.</p> </li> <li> <p>For those who visited Spring Security Basic before. So do you remember that there is a <code>generated token</code> (Session) which is put in a  cookie?. So in that case, the application used the security context interface to save the <code>session</code>  into the <code>spring container</code>. So for the second time onwards, by using this <code>session</code> in the <code>cookie</code>. It will directly show you whether this is the valid token or not quickly and doesn't need you to provide username/password.</p> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Internal/#see_also","title":"See Also","text":"<ul> <li>Cookie</li> <li>Session</li> <li>Spring Security Basic</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Internal/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Introduction/","title":"Spring Security Introduction","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Introduction/#security_introduction","title":"Security Introduction","text":"<ul> <li>Security Definition</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Introduction/#spring_security","title":"Spring Security","text":"<ul> <li>Spring Security Basic</li> <li>Spring Security Internal </li> <li>Custom Basic Spring Security</li> <li>Defining And Managing Users<ul> <li>Configure Users With inMemoryAuthentication</li> <li>Configure Users With inMemoryUserDetailsManager</li> <li>Understanding User Management interfaces and Classes</li> <li>Configure Users With JdbcUserDetailsManager</li> <li>Custom UserDetailsService Of Spring Security</li> </ul> </li> <li>Password Management With PasswordEncoder<ul> <li>Encode Decode In Spring Boot</li> <li>Encrypt Decrypt In Spring Boot<ul> <li>Symmetric Encryption</li> <li>Asymmetric Encryption</li> </ul> </li> <li>Hash In Spring Boot<ul> <li>Example With SHA-256 In Spring Boot</li> <li>Example With SHA-512 In Spring Boot</li> <li>Example With Pbkdf2 In Spring Boot</li> <li>Example With Bcrypt In Spring Boot</li> </ul> </li> <li>Definition Of PasswordEncoder<ul> <li>NoOpPasswordEncoder</li> <li>StandardPasswordEncoder</li> <li>Pbkdf2PasswordEncoder</li> <li>BCryptPasswordEncoder</li> <li>SCryptPasswordEncoder</li> <li>Example With BCryptPasswordEncoder</li> </ul> </li> </ul> </li> <li>Authentication Provider<ul> <li>Custom Authentication Provider</li> </ul> </li> <li>Authentication Manager </li> <li>Authentication And Principal Interfaces</li> <li>CORS - Cross Origin Resource Sharing</li> <li>CSRF - Cross-Site Request Forgery</li> <li>Spring Security With Authorization<ul> <li>Authentication And Authorization Internal Flow</li> <li>How Authorities Stored</li> <li>Configure Authorities</li> <li>Authority And Role In Spring Security</li> <li>Configure Roles</li> <li>Matchers Methods</li> </ul> </li> <li>Filters In Spring Security<ul> <li>Inbuilt Filters Of Spring Security</li> <li>Filters Implementation</li> <li>GenericFilterBean And OncePerRequestFilter</li> </ul> </li> <li>Token Authentication With JWT<ul> <li>JWT Token Details</li> <li>JWT Token In Spring Security</li> </ul> </li> <li>Method Level Security<ul> <li>Invocation Authorization Method Level</li> <li>Filtering Authorization Method Level</li> </ul> </li> <li>OAUTH2<ul> <li>OAUTH2 Components</li> <li>OAUTH2 Flow</li> <li>OAUTH2 Resource Server Token Validation</li> <li>Code Grant Type With Github</li> </ul> </li> <li>OpenID Connect<ul> <li>Keycloak Setup</li> <li>Client Credentials Resource Server</li> <li>Client Credentials Client Server</li> <li>Password Grant Type Client Server</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20Introduction/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20With%20Authorization/","title":"Spring Security With Authorization","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20With%20Authorization/#what_is_the_authorization","title":"What Is The Authorization?","text":"<ul> <li><code>Authorization</code> is the process of giving someone permission to do or have something. In multi-user computer systems, a system administrator defines for the system which users are allowed access to the system and what privileges of use (such as access to which file directories, hours of access, amount of allocated storage space, and so forth). Assuming that someone has logged in to a computer operating system or application, the system or application may want to identify what resources the user can be given during this session. Thus, <code>authorization</code> is sometimes seen as both the preliminary setting up of permissions by a system administrator and the actual checking of the permission values that have been set up when a user is getting access. More information.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20With%20Authorization/#authentication_and_authorization_differences","title":"Authentication And Authorization Differences","text":"<ul> <li>In <code>Authentication</code> the identification of the user will happen. Suppose, as an application architect, if we want to secure our application in our login page, we will ask our users prove their identity like with their email address passwords and that is what <code>authentication</code>. Whereas <code>authorization</code> means once the authenticated person comes into our application, there might be different roles, access rules that we have defined in our application. Like the user A should act like admin, the user B should act like normal user. So base on upon these authorities, roles we should control what action a user should perform inside our application, that is <code>Authorization</code>.</li> </ul> Authentication Authorization In authentication, the identity of users are checked for providing the access to the system. In authorization, person's or user's authorities are checked for accessing the resources Authentication done before authorization Authorization always happens after authentication It needs usually user's login details It needs user's privilege of roles If authentication fails usually we will get 401 error response If authorization fails usually we will get 403 error response For example as a Bank customer/employee in order to perform actions in the app, we need to prove our identity Once logged into the application, user's roles, authorities will decide what kind of actions that user can do","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20With%20Authorization/#understanding_and_implementing_authorization","title":"Understanding And Implementing Authorization","text":"<ul> <li>Authentication And Authorization Internal Flow</li> <li>How Authorities Stored</li> <li>Configure Authorities</li> <li>Authority And Role In Spring Security</li> <li>Configure Roles</li> <li>Matchers Methods</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Spring%20Security%20With%20Authorization/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/StandardPasswordEncoder/","title":"StandardPasswordEncoder","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/StandardPasswordEncoder/#standardpasswordencoder_1","title":"StandardPasswordEncoder","text":"<ul> <li>So if you look into the <code>StandardPasswordEncoder</code> you can see in the <code>encode</code> method it is using hash with <code>SHA-256</code>,  <code>secret</code>  and <code>8 bytes</code>. </li> <li>There are only have two options to create the <code>StandardPasswordEncoder</code>. One is creating with no secret and the other one is creating with a secret.</li> <li>In the past, using this way is okay, but for now servers of attackers are using are strong and with the brute force attacking, they can detect what is your password. The <code>SHA-256</code> is still good for using but <code>8 bytes</code> salt not strong enough. So that why the spring security make the <code>StandardPasswordEncoder</code> as  deprecated too and not recommend using this one for any applications on production. </li> <li>See Example With SHA-256 In Spring Boot to understand more.</li> </ul> StandardPasswordEncoder.java<pre><code>/*\n * Copyright 2011-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.crypto.password;\n\nimport java.security.MessageDigest;\n\nimport org.springframework.security.crypto.codec.Hex;\nimport org.springframework.security.crypto.codec.Utf8;\nimport org.springframework.security.crypto.keygen.BytesKeyGenerator;\nimport org.springframework.security.crypto.keygen.KeyGenerators;\nimport org.springframework.security.crypto.util.EncodingUtils;\n\n/**\n * This {@link PasswordEncoder} is provided for legacy purposes only and is not considered\n * secure.\n *\n * A standard {@code PasswordEncoder} implementation that uses SHA-256 hashing with 1024\n * iterations and a random 8-byte random salt value. It uses an additional system-wide\n * secret value to provide additional protection.\n * &lt;p&gt;\n * The digest algorithm is invoked on the concatenated bytes of the salt, secret and\n * password.\n * &lt;p&gt;\n * If you are developing a new system,\n * {@link org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder} is a better\n * choice both in terms of security and interoperability with other languages.\n *\n * @author Keith Donald\n * @author Luke Taylor\n * @deprecated Digest based password encoding is not considered secure. Instead use an\n * adaptive one way function like BCryptPasswordEncoder, Pbkdf2PasswordEncoder, or\n * SCryptPasswordEncoder. Even better use {@link DelegatingPasswordEncoder} which supports\n * password upgrades. There are no plans to remove this support. It is deprecated to\n * indicate that this is a legacy implementation and using it is considered insecure.\n */\n@Deprecated\npublic final class StandardPasswordEncoder implements PasswordEncoder {\n\n    private static final int DEFAULT_ITERATIONS = 1024;\n\n    private final Digester digester;\n\n    private final byte[] secret;\n\n    private final BytesKeyGenerator saltGenerator;\n\n    /**\n     * Constructs a standard password encoder with no additional secret value.\n     */\n    public StandardPasswordEncoder() {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a standard password encoder with a secret value which is also included\n     * in the password hash.\n     * @param secret the secret key used in the encoding process (should not be shared)\n     */\n    public StandardPasswordEncoder(CharSequence secret) {\n        this(\"SHA-256\", secret);\n    }\n\n    @Override\n    public String encode(CharSequence rawPassword) {\n        return encode(rawPassword, this.saltGenerator.generateKey());\n    }\n\n    @Override\n    public boolean matches(CharSequence rawPassword, String encodedPassword) {\n        byte[] digested = decode(encodedPassword);\n        byte[] salt = EncodingUtils.subArray(digested, 0, this.saltGenerator.getKeyLength());\n        return MessageDigest.isEqual(digested, digest(rawPassword, salt));\n    }\n\n    private StandardPasswordEncoder(String algorithm, CharSequence secret) {\n        this.digester = new Digester(algorithm, DEFAULT_ITERATIONS);\n        this.secret = Utf8.encode(secret);\n        this.saltGenerator = KeyGenerators.secureRandom();\n    }\n\n    private String encode(CharSequence rawPassword, byte[] salt) {\n        byte[] digest = digest(rawPassword, salt);\n        return new String(Hex.encode(digest));\n    }\n\n    private byte[] digest(CharSequence rawPassword, byte[] salt) {\n        byte[] digest = this.digester.digest(EncodingUtils.concatenate(salt, this.secret, Utf8.encode(rawPassword)));\n        return EncodingUtils.concatenate(salt, digest);\n    }\n\n    private byte[] decode(CharSequence encodedPassword) {\n        return Hex.decode(encodedPassword);\n    }\n\n}\n</code></pre> <ul> <li>In the <code>matches</code> method, It will get the password from user, then hash it again with the <code>salt</code> that extracted from the password in the database. Then it will compare with the recently hashed password from the user with the one that got from the database.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/StandardPasswordEncoder/#see_also","title":"See Also","text":"<ul> <li>Pbkdf2PasswordEncoder</li> <li>Definition Of PasswordEncoder</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/StandardPasswordEncoder/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/","title":"Symmetric Encryption","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#what_is_the_symmetric_encryption","title":"What Is The Symmetric Encryption?","text":"<ul> <li>Symmetric encryption is a type of encryption where only one secret symmetric key is used to encrypt the plaintext and decrypt the ciphertext. We have some common symmetric encryption methods as AES (Advanced Encryption Standard), 3DES (Triple Data Encryption Standards), Twofish... more information. Let's see example below. We can convert original text to AES encrypted text and back with a secret key.</li> </ul> Original Secret Key AES Encrypted Text minhduc adwasekewqmdrqwd 6A64685E851ACF474ADD069AB6B4965F <p>     - Symmetric encryption is used in file system encryption, database encryption e.g credit card details.</p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#example_with_256-bit_aes_in_spring_boot","title":"Example With 256-bit AES In Spring Boot","text":"<ul> <li>We will do an example with <code>256-bit AES</code>.  Spring Boot has default libraries for us to use encrypt and decrypt with AES, so we don't need to add more any dependency.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#controller","title":"Controller","text":"<ul> <li>Let's create an controller with some apis as below:</li> </ul> Controller.java<pre><code>package com.springboot.security.symmetric.encrypt.decrypt.app.controller;\n\nimport com.springboot.security.symmetric.encrypt.decrypt.app.model.DataRequest;\nimport com.springboot.security.symmetric.encrypt.decrypt.app.service.Aes256Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class Controller {\n\n    @Autowired\n    private Aes256Service aes256Service;\n\n    @RequestMapping(method = RequestMethod.GET, path = \"v1/cipher/encrypt/key\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; createEncryptKey() {\n        return new ResponseEntity&lt;&gt;(aes256Service.createEncryptKey(), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/encrypt\", produces = MediaType.TEXT_PLAIN_VALUE)\n    ResponseEntity&lt;String&gt; encryptData(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(aes256Service.encryptData(inputData.getData()), HttpStatus.CREATED);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, path = \"v1/cipher/decrypt\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public ResponseEntity&lt;String&gt; decryptData(@RequestBody DataRequest inputData) {\n        return new ResponseEntity&lt;&gt;(aes256Service.decryptData(inputData.getData()), HttpStatus.CREATED);\n    }\n\n}\n</code></pre> <ul> <li>We will need to create a simple model for request body as below.</li> </ul> <p>DataRequest.java<pre><code>package com.springboot.security.symmetric.encrypt.decrypt.app.model;\n\nimport org.springframework.lang.NonNull;\n\npublic class DataRequest {\n\n    private String data;\n\n    @NonNull\n    public String getData() {\n        return data;\n    }\n\n    public void setData(@NonNull String data) {\n        this.data = data;\n    }\n\n}\n</code></pre> - Then we also need to create a model that loads environment variables into a spring bean using  @ConfigurationProperties as below.</p> Aes.java<pre><code>package com.springboot.security.symmetric.encrypt.decrypt.app.model;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"aes\")\npublic class Aes {\n\n    private String secret;\n    private String ivSecret;\n\n    public String getSecret() {\n        return secret;\n    }\n\n    public void setSecret(String secret) {\n        this.secret = secret;\n    }\n\n    public String getIvSecret() {\n        return ivSecret;\n    }\n\n    public void setIvSecret(String ivSecret) {\n        this.ivSecret = ivSecret;\n    }\n}\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#service","title":"Service","text":"<ul> <li>Now, let's create a Service for encrypt and decrypt data as below.</li> </ul> Aes256Service.java<pre><code>package com.springboot.security.symmetric.encrypt.decrypt.app.service;\n\nimport com.springboot.security.symmetric.encrypt.decrypt.app.model.Aes;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport java.nio.charset.StandardCharsets;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport java.util.Objects;\n\n@Service\npublic class Aes256Service {\n\n    private static final String CIPHER_TRANSFORMATION = \"AES/CBC/PKCS5PADDING\";\n    private static final String ENCRYPTION_ALGORITHM = \"AES\";\n\n    @Autowired\n    private Aes aes;\n\n    public String createEncryptKey() {\n        try {\n            SecureRandom secureRandom = new SecureRandom();\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(ENCRYPTION_ALGORITHM);\n            keyGenerator.init(256, secureRandom);\n            SecretKey key = keyGenerator.generateKey();\n            return DatatypeConverter.printHexBinary(key.getEncoded());\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not generate Secret Key\", ex);\n        }\n    }\n\n    public String encryptData(String data) {\n        try {\n            Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n            byte[] key = DatatypeConverter.parseHexBinary(aes.getSecret());\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, ENCRYPTION_ALGORITHM);\n            if (Objects.isNull(aes.getIvSecret())) {\n                byte[] ivParameterSpecKey = this.generateIvParameterSpec();\n                IvParameterSpec ivParameterSpec = new IvParameterSpec(ivParameterSpecKey);\n                cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);\n                byte[] encryptedData = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));\n                String ivParameterSpecKeyString = DatatypeConverter.printHexBinary(ivParameterSpecKey);\n                String encryptedDataString = DatatypeConverter.printHexBinary(encryptedData);\n                return ivParameterSpecKeyString.concat(encryptedDataString);\n            }\n            IvParameterSpec ivParameterSpec = new IvParameterSpec(aes.getIvSecret().getBytes(StandardCharsets.UTF_8));\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);\n            byte[] encryptedData = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));\n            return DatatypeConverter.printHexBinary(encryptedData);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not encrypt Data\", ex);\n        }\n    }\n\n    public String decryptData(String data) {\n        try {\n            Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n            byte[] key = DatatypeConverter.parseHexBinary(aes.getSecret());\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, ENCRYPTION_ALGORITHM);\n            byte[] dataBytes = DatatypeConverter.parseHexBinary(data);\n            if (Objects.isNull(aes.getIvSecret()) &amp;&amp; dataBytes.length &gt; 16) {\n                byte[] ivParameterSpecKey = this.getIvParameterSpecKey(dataBytes);\n                byte[] payload = Arrays.copyOfRange(dataBytes, 16, dataBytes.length);\n                IvParameterSpec ivParameterSpec = new IvParameterSpec(ivParameterSpecKey);\n                cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);\n                byte[] decryptedData = cipher.doFinal(payload);\n                return new String(decryptedData, StandardCharsets.UTF_8);\n            }\n            IvParameterSpec ivParameterSpec = new IvParameterSpec(aes.getIvSecret().getBytes(StandardCharsets.UTF_8));\n            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);\n            byte[] decryptedData = cipher.doFinal(dataBytes);\n            return new String(decryptedData, StandardCharsets.UTF_8);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Can not decrypt Data\", ex);\n        }\n    }\n\n    private byte[] generateIvParameterSpec() {\n        byte[] iv = new byte[16];\n        SecureRandom random = new SecureRandom();\n        random.nextBytes(iv);\n        return iv;\n    }\n\n    private byte[] getIvParameterSpecKey(byte[] dataBytes) {\n        return Arrays.copyOfRange(dataBytes, 0, 16);\n    }\n\n}\n</code></pre> <ul> <li>So the first method <code>createEncryptKey</code> is used to create a 256-bit AES secret key. In this method we will use <code>KeyGenerator</code> to generate 256 bits AES secret key. As we know 1 bytes = 8 bits, so 256 bits = 32 bytes and when we convert 32 bytes to string type with the support of <code>DatatypeConverter.printHexBinary</code>, we will received a string with 64 characters.</li> </ul> <pre><code>&lt;!-- Example 256-bits AES String Key --&gt;\n\n0EFBADA688B68590B23BDF10EA0CBEAC3C94F5CE86A8E62642CD575012A59CF8\n</code></pre> <ul> <li> <p>Then the second method <code>encryptData</code> is used to encrypt data by AES. Spring Boot provide an api java call <code>Cipher</code> to do encrypt and decrypt. So if we want to use AES, we have to getInstance Cipher for AES by using <code>Cipher.getInstance(\"AES/CBC/PKCS5PADDING\")</code>, then init the cipher with 3 main params, Cipher Mode, SecretKeySpec and IvParameterSpec.</p> </li> <li> <p><code>Cipher Mode</code>: Define the mode of Cipher that we want to use (Encrypt or Decrypt...)</p> </li> <li> <p><code>SecretKeySpec</code>: <code>SecretKey</code> is an interface and <code>SecretKeySpec</code> is an implementation of <code>SecretKey</code>. Every <code>SecretKey</code> has an associated algorithm name. So to make Cipher understands that which type of keys that you are using, so we need to create <code>SecretKeySpec</code> which contains our secret key and algorithm name.</p> </li> <li> <p><code>IvParameterSpec</code>: When using AES with a mode known as CBC (Cipher Block Chaining), you need to generate an initialization vector (IV).</p> </li> <li>An initialization vector (IV) or starting variable is a block of bits that is used by several modes to randomize the encryption and hence to produce distinct ciphertexts even if the same plaintext is encrypted multiple times, without the need for a slower re-keying process.</li> <li>In CBC mode, each block of plaintext is XORed with the previous ciphertext block before being encrypted. Each ciphertext block depends on all plaintext blocks processed up to that point. To make each message unique, an initialization vector must be used in the first block.</li> <li>For CBC and CFB, reusing an IV leaks some information about the first block of plaintext, and about any common prefix shared by the two messages, so we need to generate IV randomly for every encoding.</li> <li> <p>More information</p> </li> <li> <p>So in method <code>encryptData</code> you can see we generate random IV every time this method is called, so it will make encrypted data will be different although we use the same input data for encryption. After the encryption has done we will add the IV key together with the encrypted data then the method <code>decryptData</code> will use this IV key for decryption. Let's see the example below</p> </li> </ul> Times Original Encrypted Data Contain IV Key 1 minhduc 8689D232432F34D52BAE769CAF6F8D38BD4C44ADB22445A3F5F0D6825741F437 2 minhduc 70184CA95125BBEC963B17D8E4FE1374C591C967C749C3C8C5378201539CD0FE 3 minhduc 057499CD9561BED01B084CE9C3455A41AB7490CB2B98EC239761AD45CE49AEA1 <ul> <li>Now, The final method is <code>decryptData</code>, in this method, we just simply extract the encrypted data to get the IV key, then we will do decryption with steps like encryption but we use value Decrypt for <code>Cipher Mode</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#testing","title":"Testing","text":"<ul> <li> <p>Now, run the Spring Boot project and try to call apis for testing.</p> </li> <li> <p>Firstly, you can use api v1/cipher/encrypt/key to create a random AES-256 secret key or you can also go to this page to get one.</p> </li> </ul> <p></p> <ul> <li>Then you can put the AES-256 secret key into the application.yml as below, then you can load it into your <code>Aes</code> Component that you created above with <code>@ConfigurationProperties</code>.</li> </ul> application.yml<pre><code>aes:\n  #ivSecret: 94A15E1F08550FF2\n    secret: 1A40C17CA7B7BED888D1E439BFD393C306E53086712AB4CD6940028C51916337\n</code></pre> <ul> <li>Next, you should restart your service again to reload your AES-256 secret key configuration. Then we can call api v1/cipher/encrypt to encrypt your data. Note that, every time you send a request you will always get a different ciphertext although your input data is the same, this is the result of using random IV as explained above.</li> </ul> <p></p> <ul> <li>Then we can use api v1/cipher/decrypt to decrypt your ciphertexts above.</li> </ul> <p></p>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#see_also","title":"See Also","text":"<ul> <li>Asymmetric Encryption</li> <li>Encrypt Decrypt In Spring Boot</li> <li>Spring Boot With @ConfigurationProperties</li> <li>Spring Boot Introduction</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Symmetric%20Encryption/#references","title":"References","text":"<ul> <li>IBM</li> <li>Wikipedia</li> <li>allkeysgenerator </li> <li>Full Source Code Here</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Token%20Authentication%20With%20JWT/","title":"Token Authentication With JWT","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Token%20Authentication%20With%20JWT/#token_in_authentication_and_authorization","title":"Token In Authentication And Authorization","text":"<ul> <li>A <code>Token</code> can be a plain string of format universally unique identifier (UUID) or it can be of type JSON Web Token (jwt) usually that get generated when the user is authenticated for the first time during login.</li> <li>On every request to a restricted resource, the client sends the access token in the query string or the <code>Authorization</code> header. Then the server will validate the token and if the token is valid, the server will return the secure resource to the client.</li> </ul> <pre><code>\nsequenceDiagram\n\n  Client-&gt;&gt;Auth Server/App: /user/login with username and password\n  Note right of Auth Server/App: Auth Server/App will generate the token &lt;br/&gt; and send to client. At the same time &lt;br/&gt; it stores the token and &lt;br/&gt; client details in the memory/DB.\n  Auth Server/App-&gt;&gt;Client: 7a200c16-38e8-4fe7-9964-196030bf4854 &lt;br/&gt; returns a token to the client\n  Note left of Client: Client will receive the token &lt;br/&gt; after successful login in &lt;br/&gt; a header/query string etc.\n  Note left of Client: Client system has to make sure &lt;br/&gt; to send the same token value &lt;br/&gt; on all the futher request to the &lt;br/&gt; backend server for protected resources\n    Client-&gt;&gt;Auth Server/App: /user/account &lt;br/&gt; 7a200c16-38e8-4fe7-9964-196030bf4854\n    Note right of Auth Server/App: When a Client make a request with &lt;br/&gt; the token, the server will validate &lt;br/&gt; the token and return the protected &lt;br/&gt; resources if it is a valid.\n    Auth Server/App-&gt;&gt;Client: token is valid. return the account details\n</code></pre>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Token%20Authentication%20With%20JWT/#advantages_of_token_based_authentication","title":"Advantages Of Token Based Authentication","text":"<ul> <li><code>Token</code> helps us not to share the credentials for every request which is a security risk to make credentials send over the network frequently.</li> <li><code>Tokens</code> can be invalidated during any suspicious activities without invalidating the user credentials.</li> <li><code>Tokens</code> can be created with a short life span.</li> <li><code>Tokens</code> can be used to store the user related information like roles/authorities etc.</li> <li>Reusability: we can have many separate servers, running on multiple platfroms and domains, reusing the same token for authenticating the user.</li> <li>Security - Since we are not using Cookie, we don't have to protect against CSRF - Cross-Site Request Forgery attacks.</li> <li>Stateless, easier to scale. The token contains all the information to identify the user, eliminating the need for the Session state. If we use a load balancer, we can pass the user to any server, instead of being bound to the same server we logged in on.</li> <li>We already used tokens in the previous sections in the form of CSRF and JESSIONID tokens.<ul> <li>CSRF Token protected our application from CSRF attacks.</li> <li>JSESSIONID is the default token generated by the Spring Security which helped users not to share the credentials to the backend service every time.</li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Token%20Authentication%20With%20JWT/#deep_dive_in_jwt","title":"Deep Dive In JWT","text":"<ul> <li>JWT Token Details</li> <li>JWT Token In Spring Security</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Token%20Authentication%20With%20JWT/#see_also","title":"See Also","text":"<ul> <li>Cookie</li> <li>Session</li> <li>CSRF - Cross-Site Request Forgery</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Token%20Authentication%20With%20JWT/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/","title":"Understanding User Management interfaces and Classes","text":"","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/#userdetails_hierarchy","title":"UserDetails Hierarchy","text":"<ul> <li>So <code>UserDetails</code> is an interface which provide core user information. This interface will provide some abstract methods like <code>getAuthorities</code>, <code>getPassword</code>, <code>getUsername</code> and so on, they are core user information that an simple application have to provide. In spring security we have an sample implementation of this <code>UserDetails</code> interface called <code>User</code>. For example, we don't have a very big application which need to be create our own user schema, so we can go with the sample <code>User</code> implementation of spring security.</li> </ul> <ul> <li>So, the <code>User</code> class implement <code>UserDetails</code> and if you look into the <code>User</code> class you can see there are some attributes as below:</li> </ul> User.java<pre><code>    private String password;\n\n    private final String username;\n\n    private final Set&lt;GrantedAuthority&gt; authorities;\n\n    private final boolean accountNonExpired;\n\n    private final boolean accountNonLocked;\n\n    private final boolean credentialsNonExpired;\n\n    private final boolean enabled;\n</code></pre> <ul> <li>So if you have to create your custom user implementation from <code>UserDetails</code> please make sure that put the same naming conventions and name variables as above, because these are things that understand by spring security framework.</li> <li>Next, we have another interface and extend the <code>UserDetails</code> called <code>MutableUserDetails</code>. This interface provide one more method <code>setPassword</code> and the class <code>MutableUser</code>is the implementation of it.</li> <li>So with the <code>User</code> class don't have any method to set the password (the password is only created in the constructor of <code>User</code>), this is inconvenient when the user forgot the password, or want to change it. So the <code>MutableUser</code> will help you to solve it by provide the method <code>setPassword</code>. As you can see in some websites when you click into a link forgot password and put the email into it, then you will received an email with a link to set the new password and retype it. So this an feature of <code>MutableUser</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/#userdetailsservice_hierarchy","title":"UserDetailsService Hierarchy","text":"<ul> <li>Let's take a look into the <code>UserDetailsService hierarchy</code> then you will understand how end users will be managed by spring security.</li> <li>Below are interfaces and classes revolving around user management inside spring security.</li> </ul> <ul> <li><code>UserDetailsService</code> is an interface, which have a single abstract method called <code>loadUserByusername</code>. Ideally, most of the applications they just wanted to validate whether the given user is present inside a database or LDAP application or inside memory of my spring security container. So in all that scenarios, we just pass username to this abstract method that we are receiving from the UI and this method we have in logic of fetching the <code>Userdetails</code> from the database or LDAP server or from the memory of the spring container.</li> <li>So <code>UserDetailsService</code> is an interface which have a logic of fetching the user from the database or any other places and the return type of <code>loadUserByusername</code> is <code>Userdetails</code>, because whenever we are dealing with users, we decided to use <code>Userdetails</code> schema adhering to the spring security.</li> <li>Then we have <code>UserDetailsManager</code> which will extend the <code>UserDetailsService</code> with abstract methods for user management like <code>createUser</code>, <code>updateUser</code>, <code>deleteUser</code>,  <code>changePassword</code> and <code>userExists</code>.</li> </ul> UserDetailsManager.java<pre><code>public interface UserDetailsManager extends UserDetailsService {\n\n    /**\n     * Create a new user with the supplied details.\n     */\n    void createUser(UserDetails user);\n\n    /**\n     * Update the specified user.\n     */\n    void updateUser(UserDetails user);\n\n    /**\n     * Remove the user with the given login name from the system.\n     */\n    void deleteUser(String username);\n\n    /**\n     * Modify the current user's password. This should change the user's password in the\n     * persistent user repository (datbase, LDAP etc).\n     * @param oldPassword current password (for re-authentication if required)\n     * @param newPassword the password to change to\n     */\n    void changePassword(String oldPassword, String newPassword);\n\n    /**\n     * Check if a user with the supplied login name exists in the system.\n     */\n    boolean userExists(String username);\n</code></pre> <ul> <li>By default, spring security provides 2 implementations of <code>UserDetailsManager</code>. They are <code>InMemoryUserDetailsManager</code> and <code>JdbcUserDetailsManager</code> .<ul> <li><code>InMemoryUserDetailsManager</code>: so if you want to some proof of concept or building some sample applications to demo someone, you can use <code>InMemoryUserDetailsManager</code>. That means you can maintain the users, you can load the user details, authentication details, authorities, everything from the memory itself, which will store and set the spring container. See Example: Configure Users With inMemoryAuthentication, Configure Users With inMemoryUserDetailsManager.</li> <li><code>JdbcUserDetailsManager</code>: this is the most famous implementation of spring security and this is a production grade of implementation That means if you provide data source details of MySQL or Oracle or any database, this <code>JdbcUserDetailsManager</code>  contain all the code related to loading the <code>UserDetails</code>, maintaining them, creating them, deleting them, changing passwords. </li> </ul> </li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/#inmemoryuserdetailsmanager","title":"InMemoryUserDetailsManager","text":"<ul> <li>If you check <code>InMemoryUserDetailsManager</code> you will see there is a property <code>users</code> which is a HashMap of <code>username</code> and <code>MutableUserDetails</code>. So basically, when you create an user using <code>InMemoryUserDetailsManager</code>, your user will be type of <code>MutableUserDetails</code> and it will saved into a HashMap.</li> </ul> InMemoryUserDetailsManager.java<pre><code>public class InMemoryUserDetailsManager implements UserDetailsManager, UserDetailsPasswordService {\n\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    private final Map&lt;String, MutableUserDetails&gt; users = new HashMap&lt;&gt;();\n\n    .....\n</code></pre> <ul> <li>So if you look into the <code>InMemoryUserDetailsManager</code> class, you will see it implement 2 interfaces, one is the <code>UserDetailsManager</code> which is the main interface for managing <code>UserDetails</code> and the second one is the <code>UserDetailsPasswordService</code> that provide the method <code>updatePassword</code> for the <code>UserDetails</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/#jdbcuserdetailsmanager","title":"JdbcUserDetailsManager","text":"<ul> <li>If you check the <code>JdbcUserDetailsManager</code> you will see it implements <code>UserDetailsManager</code> and another interface called <code>GroupManager</code>. Because in production mode, many user can be added into a group (Ex: admin group). Then in the <code>GroupManager</code> you will see it contains some methods for group management. </li> </ul> JdbcUserDetailsManager.java<pre><code>public class JdbcUserDetailsManager extends JdbcDaoImpl implements UserDetailsManager, GroupManager {\n\n    .....\n</code></pre> GroupManager.java<pre><code>public interface GroupManager {\n\n    /**\n     * Returns the names of all groups that this group manager controls.\n     */\n    List&lt;String&gt; findAllGroups();\n\n    /**\n     * Locates the users who are members of a group\n     * @param groupName the group whose members are required\n     * @return the usernames of the group members\n     */\n    List&lt;String&gt; findUsersInGroup(String groupName);\n\n    /**\n     * Creates a new group with the specified list of authorities.\n     * @param groupName the name for the new group\n     * @param authorities the authorities which are to be allocated to this group.\n     */\n    void createGroup(String groupName, List&lt;GrantedAuthority&gt; authorities);\n\n    /**\n     * Removes a group, including all members and authorities.\n     * @param groupName the group to remove.\n     */\n    void deleteGroup(String groupName);\n\n    /**\n     * Changes the name of a group without altering the assigned authorities or members.\n     */\n    void renameGroup(String oldName, String newName);\n\n    /**\n     * Makes a user a member of a particular group.\n     * @param username the user to be given membership.\n     * @param group the name of the group to which the user will be added.\n     */\n    void addUserToGroup(String username, String group);\n\n    /**\n     * Deletes a user's membership of a group.\n     * @param username the user\n     * @param groupName the group to remove them from\n     */\n    void removeUserFromGroup(String username, String groupName);\n\n    /**\n     * Obtains the list of authorities which are assigned to a group.\n     */\n    List&lt;GrantedAuthority&gt; findGroupAuthorities(String groupName);\n\n    /**\n     * Assigns a new authority to a group.\n     */\n    void addGroupAuthority(String groupName, GrantedAuthority authority);\n\n    /**\n     * Deletes an authority from those assigned to a group\n     */\n    void removeGroupAuthority(String groupName, GrantedAuthority authority);\n</code></pre> <ul> <li>Finally, the <code>JdbcUserDetailsManager</code> will be the one that implement all methods provided for managing user in <code>UserDetails</code> and group in <code>GroupManager</code>.</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/#see_also","title":"See Also","text":"<ul> <li>Configure Users With inMemoryAuthentication</li> <li>Configure Users With inMemoryUserDetailsManager</li> <li>Defining And Managing Users</li> <li>Configure Users With JdbcUserDetailsManager</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Spring%20Security/Understanding%20User%20Management%20interfaces%20and%20Classes/#references","title":"References","text":"<ul> <li>Spring Security Zero To Master</li> </ul>","tags":["Spring","SpringSecurity"]},{"location":"Windows/WSL2/","title":"WSL2","text":"","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#mount_ext4_disks_into_wsl2","title":"Mount Ext4 Disks Into WSL2","text":"<ul> <li>Open the PowerShell as Administrator</li> <li>Run the command below to list all the disks.</li> </ul> <pre><code>GET-CimInstance -query \"SELECT * from Win32_DiskDrive\"\n</code></pre> <ul> <li>Then we can see the result as below.</li> </ul> <pre><code>DeviceID           Caption              Partitions Size          Model\n--------           -------              ---------- ----          -----\n\\\\.\\PHYSICALDRIVE0 WDC WD40EFPX-68C6CN0 0          4000784417280 WDC WD40EFPX-68C6CN0\n\\\\.\\PHYSICALDRIVE3 KINGSTON SNV2S500G   1          500105249280  KINGSTON SNV2S500G\n\\\\.\\PHYSICALDRIVE1 WDC WD40EFPX-68C6CN0 0          4000784417280 WDC WD40EFPX-68C6CN0\n\\\\.\\PHYSICALDRIVE2 KINGSTON SNV2S500G   3          500105249280  KINGSTON SNV2S500G\n</code></pre> <ul> <li>Then use the <code>DeviceID</code> with the command below to mount the Disk into the WSL2</li> </ul> <pre><code>wsl --mount \\\\.\\PHYSICALDRIVE0\n</code></pre> <ul> <li>The open the WSL and run the command below to check the Disk is mounted successfully or not.</li> </ul> <pre><code>lsblk\n</code></pre> <ul> <li>Then we should see the result.</li> </ul> <pre><code>NAME\n    MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nsda   8:0    0 388.4M  1 disk\nsdb   8:16   0   186M  1 disk\nsdc   8:32   0     8G  0 disk [SWAP]\nsdd   8:48   0     1T  0 disk /mnt/wslg/distro\n                              /\nsde   8:64   0   3.6T  0 disk\nsdf   8:80   0   3.6T  0 disk /mnt/wsl/PHYSICALDRIVE0\n</code></pre>","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#wsl_config_files","title":"WSL Config Files","text":"<ul> <li>There are 2 types of WSL2 configuration files. The WSL2 global config file which is located in the Windows host system and the WSL2 local config file which is contained in the WSL2 machine.</li> <li>The WSL2 global config file will have the name as <code>.wslconfig</code> and it is located at <code>C:\\Users\\&lt;your-user&gt;</code>. By default it is not created automatically by the Windows system. So if you want to configure something, you need to create the <code>.wslconfig</code> file manually following the path above.</li> <li>The global WSL2 config file will allow you to configures global settings that affect all distributions (all WSL2 machines), such as memory limits, CPU count, swap size, etc.</li> <li>For example:</li> </ul> <pre><code>[wsl2]\nmemory=4GB\nprocessors=2\nswap=2GB\nlocalhostForwarding=true\n</code></pre> <ul> <li>After configuring the <code>.wslconfig</code> then you should stop the WSL2 machines and wait for 8 seconds to make sure all instances have been stopped completely (8 seconds rule). Then start your WSL2 machines again then you can see all distributions has been applied with your configurations.</li> <li>The WSL2 local config file will have the name as <code>wsl.conf</code> and it is located at <code>/etc/wsl.conf</code>. By default this is created automatically inside the WSL2 machine and it will be read everytime at WSL2 startup. This WSL2 local config file is used for controlling per-distro behavior such as mount options, user login defauts or windows drives are mounted.</li> <li>For example:</li> </ul> <pre><code>[network]\nhostname=duc-server\ngenerateHosts=false\n</code></pre> <ul> <li>After configuring the <code>wsl.conf</code> then you should stop the WSL2 machine and wait for 8 seconds to make sure the instance have been stopped completely (8 seconds rule). Then start your WSL2 machine again then you can see your specific distribution has been applied with your configurations.</li> </ul>","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#change_wsl_hostname","title":"Change WSL Hostname","text":"<ul> <li> <p>Why do we need to change the WSL Hostname?</p> <ul> <li>By default the hostname of the WSL machine will be the same with the hostname of the windows host machine. So if you use VPN such as tailscale for your windows host machine and WSL also then you may get issues with DNS which can make you get errors when you use browsers on Windows host machine.</li> </ul> </li> <li> <p>For WSL machine you can't use normal way to set the hostname such as:</p> </li> </ul> <pre><code>sudo hostnamectl set-hostname &lt;your-host-name&gt;\n</code></pre> <ul> <li>Because your hostname will be reset to default after you restart your WSL machine. So you need following this way to set your hostname permanently.</li> <li>Firstly, let's open the <code>wsl.conf</code> file for editing.</li> </ul> <pre><code>sudo gedit /etc/wsl.conf\n</code></pre> <ul> <li>Then add these lines below to the end of the file.</li> </ul> <pre><code>[network]\nhostname=duc-server\ngenerateHosts=false\n</code></pre> <ul> <li>Next let's open the <code>/etc/hosts</code> file.</li> </ul> <pre><code>sudo gedit /etc/hosts\n</code></pre> <ul> <li>Then replace texts which contains your old hostname to your new hostname and save. For example:</li> <li>The old domain is look like below.</li> </ul> <pre><code>127.0.0.1       localhost\n127.0.1.1       test-server.localdomain  test-server\n</code></pre> <ul> <li>Then the new domain will be like this.</li> </ul> <pre><code>127.0.0.1       localhost\n127.0.1.1       new-server.localdomain  new-server\n</code></pre> <ul> <li>Finally restart your WSL machine and then you will see your WSL hostname has changed</li> </ul>","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#detect_the_location_of_the_vhdx_file_and_disk_path_for_the_linux_distribution","title":"Detect The Location Of the vhdx File And Disk Path For The Linux Distribution","text":"<ul> <li>To locate the .vhdx file and directory path for a Linux distribution, open PowerShell and use the following script, replacing <code>&lt;distribution-name&gt;</code> with the actual distribution name:</li> </ul> <pre><code>(Get-ChildItem -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss | Where-Object { $_.GetValue(\"DistributionName\") -eq '&lt;distribution-name&gt;' }).GetValue(\"BasePath\") + \"\\ext4.vhdx\"\n</code></pre> <ul> <li>For example.</li> </ul> <pre><code>(Get-ChildItem -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss | Where-Object { $_.GetValue(\"DistributionName\") -eq 'UbuntuMain' }).GetValue(\"BasePath\") + \"\\ext4.vhdx\"\n</code></pre> <ul> <li>Then you can see the result as below.</li> </ul> <pre><code>C:\\Users\\Duc\\AppData\\Local\\wsl\\{79385a32-076a-4405-87b1-77f47127765b}\\ext4.vhdx\n</code></pre>","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#backup_wsl2","title":"Backup WSL2","text":"<ul> <li>To backup WSL2 let's open the <code>window powershell</code> and then run the command below.</li> </ul> <p>```sh lineums=\"1\"</p> <p>wsl --export  <pre><code>```sh linenums=\"1\"\n\nwsl --export Ubuntu D:\\Softwares\\duc-server.tar\n</code></pre> <ul> <li>Then after the execution you will see the backup file like this.</li> </ul> <p></p>","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#restore_wsl2","title":"Restore WSL2","text":"<ul> <li>To restore WSL2 from the .tar file let's run the command below.</li> </ul> <pre><code>wsl --import &lt;DistributionName&gt; &lt;InstallLocation&gt; &lt;FileName&gt;\n</code></pre> <pre><code>wsl --import UbuntuRestored D:\\Softwares\\UbuntuRestored D:\\Softwares\\duc-server.tar\n</code></pre> <ul> <li>You can check if the distribution was successfully imported by listing your WSL distributions:</li> </ul> <pre><code>wsl -l -v\n</code></pre> <ul> <li>Then now, you can start the WSL2 restored distro by using the command below.</li> </ul> <pre><code>wsl -d &lt;DistributionName&gt;\n</code></pre> <pre><code>wsl -d UbuntuRestored\n</code></pre>","tags":["Windows","WSL2"]},{"location":"Windows/WSL2/#intellij_with_wsl2","title":"Intellij With WSL2","text":"<ul> <li>In this setup we will install the Intellij IDE on Windows and all the java environments and project will be installed and put in WSL2.</li> <li>Firstly, you can download the JetBrains tool box and then install the intellij on Windows.</li> <li>In the WSL2, you can use the <code>ASDF</code> tool as in the topic Linux Setup Tools to install <code>java</code>, <code>maven</code> for java projects.</li> <li>Now, let's clone the java project from the git repository from your WSL2.</li> </ul> <pre><code>duc@duc-server \ue0b0 ~/study/com.springboot3.security \ue0b0 \ue0a0 master \ue0b0 ls\nangular-integrations\nasymmetric-encryption-keypair\nasymmetric-encryption-keypair-generation\ngoogle-recaptcha-v3-integration\ngoogle-recaptcha-v3-integration-annotation\npom.xml\nspring-configuration-property-documenter\nspring-security-code-grant-oidc\nspring-security-code-grant-oidc-csrf-integration\nspring-security-code-grant-oidc-csrf-race-condition-integration\nspring-security-code-grant-oidc-integration\nspring-security-code-grant-oidc-no-samesite-integration\nspring-security-code-grant-oidc-stateless-session\nspring-security-code-grant-oidc-user-roles\nspring-security-code-grant-oidc-user-roles-csrf\nspring-security-code-grant-oidc-user-roles-csrf-xor\n</code></pre> <ul> <li>Then let's open the Intellij IDE and choose the java project in the WSL2 following steps as in the image below.</li> </ul> <ul> <li>Choose <code>Project</code> --&gt; <code>Open</code> --&gt; Select your Distribution mount in the Linux section in your <code>File Explorer</code> --&gt; Select the java project in your WSL2 --&gt; Click <code>Select Folder</code> button.</li> <li>After open the project in the intellij then let's open the <code>File</code> --&gt; <code>Project Structure</code> and set the project SDK as in the image below.</li> </ul> <ul> <li>Open the <code>SDK</code> dropdown and select the SDK from the <code>WSL2</code> of your distribution then click <code>OK</code>.</li> </ul> <ul> <li>Then you will see the terminal of WSL2 is open at the location of your project.</li> </ul> <ul> <li>Then from this terminal you can build the java project without any performance issue.</li> </ul> <p> - Then you can also use the build tool of Intellij to build the project.</p> <p></p> <ul> <li>Then if you the build got the issue like <code>[FATAL] Non-readable POM</code> then let's grant the permission for the <code>pom.xml</code> by using the command.</li> </ul> <pre><code>chmod 755 pom.xml\n</code></pre> <ul> <li>Then if you still got the issue like the classes in the import doesn't exists then let's remove the folder <code>JetBrains</code> in the <code>~/.cache</code> in WSL2</li> </ul> <pre><code>cd ~/.cache\nrm -rf JetBrains\n</code></pre> <ul> <li> <p>Then on Windows restart your Intellij and then click build button of the Intellij again you should build the java project successfully.</p> </li> <li> <p>Now, you can run your java project from Intellij without any issue.</p> </li> </ul> <p></p> <ul> <li>Next, If you want to run the debug mode there you may get the issue as below.</li> </ul> <p></p> <ul> <li>Then you can try to follow the Intellij Instruction to fix the issue and hope it works. However, there is more easy way to run debugging is using remote debug.</li> <li>So firstly, let's create a debug remote as in the image below.</li> </ul> <p></p> <ul> <li>Then in the Intellij Terminal run the command below to start the remote server.</li> </ul> <pre><code>mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005\"\n</code></pre> <ul> <li> <p>Then you should see the server is started and listening on port 5005.    </p> </li> <li> <p>Now, let run the RemoteDebug on Intellij then you should see it connect to the target VM.</p> </li> </ul> <p></p> <ul> <li>Now, you can try to test debugging and see the result as below.</li> </ul> <p></p>","tags":["Windows","WSL2"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#buildtool","title":"BuildTool","text":"<ul> <li>Gradle</li> <li>Jfog Repository</li> <li>Maven With Jfog</li> <li>Maven</li> </ul>"},{"location":"tags/#ci-cd","title":"CI-CD","text":"<ul> <li>CI-CD Introduction</li> <li>Jenkins For SpringBoot</li> <li>SonarQube Integration</li> </ul>"},{"location":"tags/#database","title":"Database","text":"<ul> <li>Introduction</li> <li>Basic SQL Queries</li> </ul>"},{"location":"tags/#docker","title":"Docker","text":"<ul> <li>Docker Commands</li> <li>Introduction</li> <li>Docker With Databases</li> <li>Docker With File Browser</li> <li>Docker With Jaeger</li> <li>Docker With Jenkins</li> <li>Docker With Kafka</li> <li>Docker With Keycloak</li> <li>Docker With Open WebUI</li> <li>Docker With Samba Server</li> <li>Docker With SonarQube</li> <li>Docker With SpringBoot</li> <li>Docker With Zipkin</li> <li>DockerFile Command</li> </ul>"},{"location":"tags/#helms","title":"Helms","text":"<ul> <li>Helm</li> <li>Zero Downtime Deployment</li> </ul>"},{"location":"tags/#java","title":"Java","text":"<ul> <li>Functional Interface</li> <li>Interface With Default Method</li> <li>Interface With Static Method</li> <li>Lamda Expression</li> <li>Optional</li> <li>Stream</li> <li>Introduction</li> <li>Java Annotations</li> <li>Collection Framework</li> <li>Composition Over Inheritance Principle</li> <li>Java Control Structures</li> <li>Introduction</li> <li>DRY Principles</li> <li>Java Datatypes</li> <li>Java Enums</li> <li>Environment Setup</li> <li>Java Exceptions</li> <li>Java File Handling</li> <li>Java Generic</li> <li>KISS Principle</li> <li>Java Keywords</li> <li>Java Modifiers</li> <li>Introduction</li> <li>Java Reflection</li> <li>SOLID Principles</li> <li>Threads</li> <li>Abstraction</li> <li>Encapsulation</li> <li>Inheritance</li> <li>Method Overriding</li> <li>Polymorphism</li> <li>Introduction</li> </ul>"},{"location":"tags/#javabasic","title":"JavaBasic","text":"<ul> <li>Collection Framework</li> <li>Introduction</li> <li>Java Datatypes</li> <li>Environment Setup</li> <li>Java Keywords</li> <li>Java Modifiers</li> <li>Abstraction</li> <li>Encapsulation</li> <li>Inheritance</li> <li>Method Overriding</li> <li>Polymorphism</li> <li>Introduction</li> </ul>"},{"location":"tags/#javascript","title":"JavaScript","text":"<ul> <li>Functions</li> <li>Introduction</li> <li>Objects</li> <li>Syntax and Variables</li> </ul>"},{"location":"tags/#kubernetes","title":"Kubernetes","text":"<ul> <li>Helm</li> <li>Install Kubernetes</li> <li>Introduction</li> <li>Minikube</li> <li>Minikube Sample Project</li> <li>Zero Downtime Deployment</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>Fedora Tips</li> <li>Useful Commands</li> <li>Linux Mint Tips</li> <li>Setup For Developer</li> <li>Setup Tools</li> <li>NeoVim</li> <li>Ubuntu Mate Tips</li> <li>Ubuntu Tips</li> </ul>"},{"location":"tags/#mongodb","title":"MongoDB","text":"<ul> <li>Spring Data MongoDB</li> <li>Introduction</li> </ul>"},{"location":"tags/#nodejs","title":"NodeJs","text":"<ul> <li>ExpressJS Advanced</li> <li>ExpressJS</li> <li>Global Object</li> <li>Modules</li> <li>Node Package Manager</li> <li>Introduction</li> <li>RoadMap</li> </ul>"},{"location":"tags/#oop","title":"OOP","text":"<ul> <li>Abstraction</li> <li>Encapsulation</li> <li>Inheritance</li> <li>Method Overriding</li> <li>Polymorphism</li> <li>Introduction</li> </ul>"},{"location":"tags/#others","title":"Others","text":"<ul> <li>Canvas Partical Network Animation</li> <li>Coding Standard</li> <li>Cookie</li> <li>Docusaurus</li> <li>K6</li> <li>Session</li> <li>SoapUI</li> <li>Web Browser</li> <li>Web Services</li> </ul>"},{"location":"tags/#principles","title":"Principles","text":"<ul> <li>Composition Over Inheritance Principle</li> <li>DRY Principles</li> <li>KISS Principle</li> <li>Introduction</li> <li>SOLID Principles</li> </ul>"},{"location":"tags/#react","title":"React","text":"<ul> <li>Introduction</li> <li>RoadMap</li> </ul>"},{"location":"tags/#sql","title":"SQL","text":"<ul> <li>Basic SQL Queries</li> </ul>"},{"location":"tags/#servlet","title":"Servlet","text":"<ul> <li>Spring DispactcherServlet</li> </ul>"},{"location":"tags/#spring","title":"Spring","text":"<ul> <li>Database Configuration</li> <li>Spring Boot Notes</li> <li>AOP Introduction</li> <li>Actuator And Graceful Shutdown</li> <li>Custom Annotation Time Execution</li> <li>Junit Test 5</li> <li>Property Based Testing</li> <li>Upload And Download Files</li> <li>Actuator</li> <li>AutoConfigurator</li> <li>CLI</li> <li>Content-Type Response Header</li> <li>Introduction</li> <li>Starter</li> <li>ConfigurationProperties</li> <li>WebServices Apache CXF Integration</li> <li>Chronicle Queue</li> <li>Exception Handler &amp; Message Source</li> <li>Build Executable Jar</li> <li>Json Schema Validator</li> <li>Mustache Integration</li> <li>OpenApi Integration Advance</li> <li>OpenApi Integration</li> <li>SonarQube Integration</li> <li>Swagger Integration</li> <li>WebServices Integration</li> <li>@EnableWebMvc And OpenApi Issue</li> <li>Jpa OneToMany N+1 Issue</li> <li>Jpa OneToOne N+1 Issue</li> <li>List.of() - Arrays.asList()</li> <li>Spring Boot 3 CSRF Configuration</li> <li>SpringBoot 3 Global Cors Congiration</li> <li>Introduction</li> <li>OpenApi And OpenFeign Integration</li> <li>Introduction</li> <li>Netflix Eureka Server-Client</li> <li>OpenFeign Basic</li> <li>OpenFeign Custom</li> <li>OpenFeign Interceptor</li> <li>OpenFeign And Eureka Integration</li> <li>OpenFeign For WebServices</li> <li>Sleuth Zipkin Kibana Integration</li> <li>Spring Cloud Sleuth</li> <li>Spring Bean Java Code Configuration</li> <li>Configure With Annotation</li> <li>Configure With XML</li> <li>Introduction</li> <li>Spring Core Technologies</li> <li>Configure With Annotation</li> <li>Configure With XML</li> <li>Introduction</li> <li>Spring DispactcherServlet</li> <li>Configure With Annotation</li> <li>Configure With Java Code</li> <li>Configure With XML</li> <li>Introduction</li> <li>Spring MVC Behind The Scenes</li> <li>Spring MVC Java Configuration</li> <li>Introduction</li> <li>Spring MVC XML Configuration</li> <li>Spring Framework Overview</li> <li>Application Managed</li> <li>Introduction</li> <li>Container Managed</li> <li>Introduction</li> <li>Entity</li> <li>EntityManager</li> <li>EntityManagerFactory</li> <li>Migrations</li> <li>Versioned Migration Example</li> <li>Repeatable Migrations</li> <li>SQL-Based Migrations</li> <li>Versioned Migrations</li> <li>Getting Audit Data</li> <li>Hibernate</li> <li>Integrate With JPA</li> <li>JDBC In SpringBoot</li> <li>JPA In SpringBoot</li> <li>Multi Datasources</li> <li>Jpa Pagination</li> <li>ORM</li> <li>Open Session In View</li> <li>Persistence Context</li> <li>Persistence Unit</li> <li>JPA With Second Level Cache</li> <li>Entity Lifecycle Events</li> <li>Postgres Full Text Search</li> <li>Postgres Optinal Query Params</li> <li>JPA With Indexing</li> <li>JPA With Postgres View Table</li> <li>JPA With Specification Query</li> <li>Spring Data MongoDB</li> <li>Introduction</li> <li>Introduction</li> <li>Introduction</li> <li>Introduction</li> <li>Transaction</li> <li>Asymmetric Encryption</li> <li>Authn and Authz Flows</li> <li>Principal Interfaces</li> <li>Introduction</li> <li>Introduction</li> <li>Authority &amp; Role</li> <li>BCryptPasswordEncoder</li> <li>CORS</li> <li>CSRF</li> <li>Client Credentials Client Server</li> <li>Client Credentials Resource Server</li> <li>Code Grant Type With Github</li> <li>Configure Authorities</li> <li>Configure Roles</li> <li>JdbcUserDetailsManager</li> <li>InMemoryAuthentication</li> <li>InMemoryUserDetailsManager</li> <li>Custom Authentication Provider</li> <li>Custom Basic Spring Security</li> <li>Custom UserDetailsService</li> <li>Introduction</li> <li>Introduction</li> <li>Encode Decode</li> <li>Introduction</li> <li>BCryptPasswordEncoder Example</li> <li>Bcrypt</li> <li>Pbkdf2</li> <li>SHA-256</li> <li>SHA-512</li> <li>Filtering Authorization</li> <li>Filters Implementation</li> <li>Introduction</li> <li>Generic &amp; OncePerRequest Filters</li> <li>Introduction</li> <li>Authorities Store</li> <li>Inbuilt Filters</li> <li>Invocation Authorization</li> <li>JWT Details</li> <li>JWT Integration</li> <li>Keycloak Setup</li> <li>Matchers Methods</li> <li>Introduction</li> <li>NoOpPasswordEncoder</li> <li>Components</li> <li>Flows</li> <li>Resource Server Validation</li> <li>Introduction</li> <li>Introduction</li> <li>Password Grant Type Client Server</li> <li>Introduction</li> <li>Pbkdf2PasswordEncoder</li> <li>Google ReCaptcha Integration With Annotation</li> <li>Google ReCaptcha Integration</li> <li>Authorization Code Grant Type CSRF</li> <li>Authorization Code Grant Type Stateless Session</li> <li>Authorization Code Grant Type User Roles</li> <li>Authorization Code Grant Type</li> <li>SCryptPasswordEncoder</li> <li>Security Definition</li> <li>Spring Security Basic</li> <li>Internal Flow</li> <li>Introduction</li> <li>Introduction</li> <li>StandardPasswordEncoder</li> <li>Symmetric Encryption</li> <li>Introduction</li> <li>UserManagement Interfaces &amp; Classes</li> </ul>"},{"location":"tags/#springboot","title":"SpringBoot","text":"<ul> <li>Database Configuration</li> <li>Spring Boot Notes</li> <li>AOP Introduction</li> <li>Actuator And Graceful Shutdown</li> <li>Custom Annotation Time Execution</li> <li>Junit Test 5</li> <li>Property Based Testing</li> <li>Upload And Download Files</li> <li>Actuator</li> <li>AutoConfigurator</li> <li>CLI</li> <li>Content-Type Response Header</li> <li>Introduction</li> <li>Starter</li> <li>ConfigurationProperties</li> <li>WebServices Apache CXF Integration</li> <li>Chronicle Queue</li> <li>Exception Handler &amp; Message Source</li> <li>Build Executable Jar</li> <li>Json Schema Validator</li> <li>Mustache Integration</li> <li>OpenApi Integration Advance</li> <li>OpenApi Integration</li> <li>SonarQube Integration</li> <li>Swagger Integration</li> <li>WebServices Integration</li> <li>@EnableWebMvc And OpenApi Issue</li> <li>Jpa OneToMany N+1 Issue</li> <li>Jpa OneToOne N+1 Issue</li> <li>List.of() - Arrays.asList()</li> <li>Spring Boot 3 CSRF Configuration</li> <li>SpringBoot 3 Global Cors Congiration</li> <li>Introduction</li> <li>OpenApi And OpenFeign Integration</li> <li>Introduction</li> <li>Netflix Eureka Server-Client</li> <li>OpenFeign Basic</li> <li>OpenFeign Custom</li> <li>OpenFeign Interceptor</li> <li>OpenFeign And Eureka Integration</li> <li>OpenFeign For WebServices</li> <li>Sleuth Zipkin Kibana Integration</li> <li>Spring Cloud Sleuth</li> <li>Multi Datasources</li> <li>Jpa Pagination</li> <li>Introduction</li> <li>Introduction</li> <li>Introduction</li> <li>Spring Security Basic</li> </ul>"},{"location":"tags/#springboot3","title":"SpringBoot3","text":"<ul> <li>Spring Boot Notes</li> <li>AOP Introduction</li> <li>Actuator And Graceful Shutdown</li> <li>Custom Annotation Time Execution</li> <li>Junit Test 5</li> <li>Property Based Testing</li> <li>Upload And Download Files</li> <li>@EnableWebMvc And OpenApi Issue</li> <li>Jpa OneToMany N+1 Issue</li> <li>Jpa OneToOne N+1 Issue</li> <li>List.of() - Arrays.asList()</li> <li>Spring Boot 3 CSRF Configuration</li> <li>SpringBoot 3 Global Cors Congiration</li> <li>Google ReCaptcha Integration With Annotation</li> <li>Google ReCaptcha Integration</li> <li>Authorization Code Grant Type CSRF</li> <li>Authorization Code Grant Type Stateless Session</li> <li>Authorization Code Grant Type User Roles</li> <li>Authorization Code Grant Type</li> </ul>"},{"location":"tags/#springbootnotes","title":"SpringBootNotes","text":"<ul> <li>@EnableWebMvc And OpenApi Issue</li> <li>Jpa OneToMany N+1 Issue</li> <li>Jpa OneToOne N+1 Issue</li> <li>List.of() - Arrays.asList()</li> <li>Spring Boot 3 CSRF Configuration</li> <li>SpringBoot 3 Global Cors Congiration</li> </ul>"},{"location":"tags/#springcloud","title":"SpringCloud","text":"<ul> <li>Introduction</li> <li>OpenApi And OpenFeign Integration</li> <li>Introduction</li> <li>Netflix Eureka Server-Client</li> <li>OpenFeign Basic</li> <li>OpenFeign Custom</li> <li>OpenFeign Interceptor</li> <li>OpenFeign And Eureka Integration</li> <li>OpenFeign For WebServices</li> <li>Sleuth Zipkin Kibana Integration</li> <li>Spring Cloud Sleuth</li> </ul>"},{"location":"tags/#springcore","title":"SpringCore","text":"<ul> <li>Spring Bean Java Code Configuration</li> <li>Configure With Annotation</li> <li>Configure With XML</li> <li>Introduction</li> <li>Spring DispactcherServlet</li> <li>Configure With Annotation</li> <li>Configure With Java Code</li> <li>Configure With XML</li> <li>Introduction</li> <li>Spring MVC Behind The Scenes</li> <li>Spring MVC Java Configuration</li> <li>Introduction</li> <li>Spring MVC XML Configuration</li> <li>Spring Framework Overview</li> </ul>"},{"location":"tags/#springdata","title":"SpringData","text":"<ul> <li>Database Configuration</li> <li>Application Managed</li> <li>Introduction</li> <li>Container Managed</li> <li>Introduction</li> <li>Entity</li> <li>EntityManager</li> <li>EntityManagerFactory</li> <li>Migrations</li> <li>Versioned Migration Example</li> <li>Repeatable Migrations</li> <li>SQL-Based Migrations</li> <li>Versioned Migrations</li> <li>Getting Audit Data</li> <li>Hibernate</li> <li>Integrate With JPA</li> <li>JDBC In SpringBoot</li> <li>JPA In SpringBoot</li> <li>Multi Datasources</li> <li>Jpa Pagination</li> <li>ORM</li> <li>Open Session In View</li> <li>Persistence Context</li> <li>Persistence Unit</li> <li>JPA With Second Level Cache</li> <li>Entity Lifecycle Events</li> <li>Postgres Full Text Search</li> <li>Postgres Optinal Query Params</li> <li>JPA With Indexing</li> <li>JPA With Postgres View Table</li> <li>JPA With Specification Query</li> <li>Spring Data MongoDB</li> <li>Introduction</li> <li>Introduction</li> <li>Introduction</li> <li>Introduction</li> <li>Transaction</li> </ul>"},{"location":"tags/#springmvc","title":"SpringMVC","text":"<ul> <li>Spring MVC Behind The Scenes</li> <li>Spring MVC Java Configuration</li> <li>Introduction</li> <li>Spring MVC XML Configuration</li> </ul>"},{"location":"tags/#springsecurity","title":"SpringSecurity","text":"<ul> <li>Asymmetric Encryption</li> <li>Authn and Authz Flows</li> <li>Principal Interfaces</li> <li>Introduction</li> <li>Introduction</li> <li>Authority &amp; Role</li> <li>BCryptPasswordEncoder</li> <li>CORS</li> <li>CSRF</li> <li>Client Credentials Client Server</li> <li>Client Credentials Resource Server</li> <li>Code Grant Type With Github</li> <li>Configure Authorities</li> <li>Configure Roles</li> <li>JdbcUserDetailsManager</li> <li>InMemoryAuthentication</li> <li>InMemoryUserDetailsManager</li> <li>Custom Authentication Provider</li> <li>Custom Basic Spring Security</li> <li>Custom UserDetailsService</li> <li>Introduction</li> <li>Introduction</li> <li>Encode Decode</li> <li>Introduction</li> <li>BCryptPasswordEncoder Example</li> <li>Bcrypt</li> <li>Pbkdf2</li> <li>SHA-256</li> <li>SHA-512</li> <li>Filtering Authorization</li> <li>Filters Implementation</li> <li>Introduction</li> <li>Generic &amp; OncePerRequest Filters</li> <li>Introduction</li> <li>Authorities Store</li> <li>Inbuilt Filters</li> <li>Invocation Authorization</li> <li>JWT Details</li> <li>JWT Integration</li> <li>Keycloak Setup</li> <li>Matchers Methods</li> <li>Introduction</li> <li>NoOpPasswordEncoder</li> <li>Components</li> <li>Flows</li> <li>Resource Server Validation</li> <li>Introduction</li> <li>Introduction</li> <li>Password Grant Type Client Server</li> <li>Introduction</li> <li>Pbkdf2PasswordEncoder</li> <li>Google ReCaptcha Integration With Annotation</li> <li>Google ReCaptcha Integration</li> <li>Authorization Code Grant Type CSRF</li> <li>Authorization Code Grant Type Stateless Session</li> <li>Authorization Code Grant Type User Roles</li> <li>Authorization Code Grant Type</li> <li>SCryptPasswordEncoder</li> <li>Security Definition</li> <li>Spring Security Basic</li> <li>Internal Flow</li> <li>Introduction</li> <li>Introduction</li> <li>StandardPasswordEncoder</li> <li>Symmetric Encryption</li> <li>Introduction</li> <li>UserManagement Interfaces &amp; Classes</li> </ul>"},{"location":"tags/#staticweb","title":"StaticWeb","text":"<ul> <li>Docusaurus</li> </ul>"},{"location":"tags/#wsl2","title":"WSL2","text":"<ul> <li>WSL2</li> </ul>"},{"location":"tags/#windows","title":"Windows","text":"<ul> <li>WSL2</li> </ul>"}]}